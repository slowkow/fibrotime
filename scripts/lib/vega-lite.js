(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.vl = {}));
}(this, function (exports) { 'use strict';

    var name = "vega-lite";
    var author = "Dominik Moritz, Kanit \"Ham\" Wongsuphasawat, Arvind Satyanarayan, Jeffrey Heer";
    var version = "3.0.0-rc14";
    var collaborators = [
    	"Kanit Wongsuphasawat <kanitw@gmail.com> (http://kanitw.yellowpigz.com)",
    	"Dominik Moritz <domoritz@cs.washington.edu> (https://www.domoritz.de)",
    	"Arvind Satyanarayan (https://arvindsatya.com/)",
    	"Jeffrey Heer (https://jheer.org)"
    ];
    var homepage = "https://vega.github.io/vega-lite/";
    var description = "Vega-Lite is a concise high-level language for interactive visualization.";
    var main = "build/vega-lite.js";
    var unpkg = "build/vega-lite.min.js";
    var jsdelivr = "build/vega-lite.min.js";
    var module = "build/src/index";
    var types = "build/src/index.d.ts";
    var bin = {
    	vl2png: "./bin/vl2png",
    	vl2svg: "./bin/vl2svg",
    	vl2vg: "./bin/vl2vg"
    };
    var directories = {
    	test: "test"
    };
    var scripts = {
    	build: "npm run build:only",
    	"build:only": "tsc && rollup -c",
    	postbuild: "terser build/vega-lite.js -cm --source-map content=build/vega-lite.js.map,filename=build/vega-lite.min.js.map -o build/vega-lite.min.js && npm run schema",
    	"build:examples": "npm run build:only",
    	"postbuild:examples": "npm run data && TZ=America/Los_Angeles scripts/build-examples.sh",
    	"build:examples-full": "npm run build:only",
    	"postbuild:examples-full": "TZ=America/Los_Angeles scripts/build-examples.sh 1",
    	"build:example": "TZ=America/Los_Angeles scripts/build-example.sh",
    	"build:toc": "bundle exec jekyll build -q && scripts/generate-toc",
    	"build:site": "tsc -p site && webpack --config site/webpack.config.js",
    	"build:versions": "scripts/update-version.sh",
    	clean: "rm -rf build && rm -f examples/compiled/*.png && find site/examples ! -name 'index.md' -type f -delete",
    	data: "rsync -r node_modules/vega-datasets/data/* data",
    	deploy: "scripts/deploy.sh",
    	"deploy:gh": "scripts/deploy-gh.sh",
    	"deploy:schema": "scripts/deploy-schema.sh",
    	schema: "mkdir -p build && node --stack-size=5000 ./node_modules/.bin/ts-json-schema-generator --no-type-check --path tsconfig.json --type TopLevelSpec > build/vega-lite-schema.json && npm run renameschema && cp build/vega-lite-schema.json _data/",
    	renameschema: "scripts/rename-schema.sh",
    	presite: "npm run data && npm run build:site && npm run build:toc && npm run build:versions && scripts/create-example-pages",
    	site: "bundle exec jekyll serve --incremental",
    	prettierbase: "prettier '{src,test,test-runtime,site,typings}/**/*.{ts,md,css}'",
    	format: "tslint -p . --fix -e 'package.json' && npm run prettierbase -- --write",
    	lint: "tslint -p . -e 'package.json' && npm run prettierbase -- --check",
    	test: "jest test/ && npm run lint && npm run schema && jest examples/ && npm run test:runtime",
    	"test:inspect": "node --inspect-brk ./node_modules/.bin/jest --runInBand test",
    	"test:runtime": "TZ=America/Los_Angeles jest test-runtime/",
    	"test:runtime:generate": "rm -Rf test-runtime/resources && VL_GENERATE_TESTS=true npm run test:runtime",
    	"watch:build": "npm run build:only && concurrently --kill-others -n Typescript,Rollup 'tsc -w' 'rollup -c -w'",
    	"watch:site": "concurrently --kill-others -n Typescript,Webpack 'tsc -p site --watch' 'webpack --config site/webpack.config.js --mode development --watch'",
    	"watch:test": "jest --watch"
    };
    var repository = {
    	type: "git",
    	url: "https://github.com/vega/vega-lite.git"
    };
    var license = "BSD-3-Clause";
    var bugs = {
    	url: "https://github.com/vega/vega-lite/issues"
    };
    var devDependencies = {
    	"@types/chai": "^4.1.7",
    	"@types/d3": "^5.7.1",
    	"@types/highlight.js": "^9.12.3",
    	"@types/jest": "^24.0.9",
    	"@types/mkdirp": "^0.5.2",
    	"@types/node": "^11.10.4",
    	"@types/puppeteer": "^1.12.1",
    	ajv: "^6.10.0",
    	chai: "^4.2.0",
    	cheerio: "^1.0.0-rc.2",
    	codecov: "^3.2.0",
    	concurrently: "^4.1.0",
    	d3: "^5.9.1",
    	"highlight.js": "^9.15.6",
    	"http-server": "^0.11.1",
    	jest: "^24.1.0",
    	"jest-puppeteer": "^4.0.0",
    	mkdirp: "^0.5.1",
    	prettier: "^1.16.4",
    	puppeteer: "^1.13.0",
    	rollup: "^1.4.1",
    	"rollup-plugin-commonjs": "^9.2.1",
    	"rollup-plugin-json": "^3.1.0",
    	"rollup-plugin-node-resolve": "^4.0.1",
    	"rollup-plugin-sourcemaps": "^0.4.2",
    	"svg2png-many": "^0.0.7",
    	terser: "^3.16.1",
    	"ts-jest": "^24.0.0",
    	"ts-json-schema-generator": "^0.40.0",
    	tslint: "5.13.1",
    	"tslint-config-prettier": "^1.18.0",
    	typescript: "^3.3.3333",
    	"vega-cli": "^5.0.0",
    	"vega-datasets": "^1.22.0",
    	"vega-embed": "^3.29.1",
    	"vega-tooltip": "^0.16.0",
    	webpack: "^4.29.6",
    	"webpack-cli": "^3.2.3",
    	"yaml-front-matter": "^4.0.0"
    };
    var dependencies = {
    	"@types/clone": "^0.1.30",
    	clone: "^2.1.2",
    	"fast-deep-equal": "^2.0.1",
    	"fast-json-stable-stringify": "^2.0.0",
    	"json-stringify-pretty-compact": "^2.0.0",
    	tslib: "^1.9.3",
    	"vega-event-selector": "^2.0.0",
    	"vega-expression": "^2.5.0",
    	"vega-typings": "0.5.5",
    	"vega-util": "^1.9.0",
    	yargs: "^13.2.1"
    };
    var jest = {
    	preset: "jest-puppeteer",
    	transform: {
    		"^.+\\.tsx?$": "ts-jest"
    	},
    	testRegex: "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
    	moduleFileExtensions: [
    		"ts",
    		"tsx",
    		"js",
    		"jsx",
    		"json",
    		"node"
    	],
    	testPathIgnorePatterns: [
    		"node_modules",
    		"<rootDir>/build",
    		"_site",
    		"src"
    	],
    	coverageDirectory: "./coverage/",
    	collectCoverage: false
    };
    var pkg = {
    	name: name,
    	author: author,
    	version: version,
    	collaborators: collaborators,
    	homepage: homepage,
    	description: description,
    	main: main,
    	unpkg: unpkg,
    	jsdelivr: jsdelivr,
    	module: module,
    	types: types,
    	bin: bin,
    	directories: directories,
    	scripts: scripts,
    	repository: repository,
    	license: license,
    	bugs: bugs,
    	devDependencies: devDependencies,
    	dependencies: dependencies,
    	jest: jest
    };

    function accessor(fn, fields, name) {
      fn.fields = fields || [];
      fn.fname = name;
      return fn;
    }

    function accessorName(fn) {
      return fn == null ? null : fn.fname;
    }

    function accessorFields(fn) {
      return fn == null ? null : fn.fields;
    }

    function error(message) {
      throw Error(message);
    }

    function splitAccessPath(p) {
      var path = [],
          q = null,
          b = 0,
          n = p.length,
          s = '',
          i, j, c;

      p = p + '';

      function push() {
        path.push(s + p.substring(i, j));
        s = '';
        i = j + 1;
      }

      for (i=j=0; j<n; ++j) {
        c = p[j];
        if (c === '\\') {
          s += p.substring(i, j);
          i = ++j;
        } else if (c === q) {
          push();
          q = null;
          b = -1;
        } else if (q) {
          continue;
        } else if (i === b && c === '"') {
          i = j + 1;
          q = c;
        } else if (i === b && c === "'") {
          i = j + 1;
          q = c;
        } else if (c === '.' && !b) {
          if (j > i) {
            push();
          } else {
            i = j + 1;
          }
        } else if (c === '[') {
          if (j > i) push();
          b = i = j + 1;
        } else if (c === ']') {
          if (!b) error('Access path missing open bracket: ' + p);
          if (b > 0) push();
          b = 0;
          i = j + 1;
        }
      }

      if (b) error('Access path missing closing bracket: ' + p);
      if (q) error('Access path missing closing quote: ' + p);

      if (j > i) {
        j++;
        push();
      }

      return path;
    }

    var isArray = Array.isArray;

    function isObject(_) {
      return _ === Object(_);
    }

    function isString(_) {
      return typeof _ === 'string';
    }

    function $(x) {
      return isArray(x) ? '[' + x.map($) + ']'
        : isObject(x) || isString(x) ?
          // Output valid JSON and JS source strings.
          // See http://timelessrepo.com/json-isnt-a-javascript-subset
          JSON.stringify(x).replace('\u2028','\\u2028').replace('\u2029', '\\u2029')
        : x;
    }

    function field(field, name) {
      var path = splitAccessPath(field),
          code = 'return _[' + path.map($).join('][') + '];';

      return accessor(
        Function('_', code),
        [(field = path.length===1 ? path[0] : field)],
        name || field
      );
    }

    var empty = [];

    var id = field('id');

    var identity = accessor(function(_) { return _; }, empty, 'identity');

    var zero = accessor(function() { return 0; }, empty, 'zero');

    var one = accessor(function() { return 1; }, empty, 'one');

    var truthy = accessor(function() { return true; }, empty, 'true');

    var falsy = accessor(function() { return false; }, empty, 'false');

    function log(method, level, input) {
      var args = [level].concat([].slice.call(input));
      console[method].apply(console, args); // eslint-disable-line no-console
    }

    var None  = 0;
    var Error$1 = 1;
    var Warn  = 2;
    var Info  = 3;
    var Debug = 4;

    function logger(_) {
      var level = _ || None;
      return {
        level: function(_) {
          if (arguments.length) {
            level = +_;
            return this;
          } else {
            return level;
          }
        },
        error: function() {
          if (level >= Error$1) log('error', 'ERROR', arguments);
          return this;
        },
        warn: function() {
          if (level >= Warn) log('warn', 'WARN', arguments);
          return this;
        },
        info: function() {
          if (level >= Info) log('log', 'INFO', arguments);
          return this;
        },
        debug: function() {
          if (level >= Debug) log('log', 'DEBUG', arguments);
          return this;
        }
      }
    }

    function peek(array) {
      return array[array.length - 1];
    }

    function toNumber(_) {
      return _ == null || _ === '' ? null : +_;
    }

    function exp(sign) {
      return function(x) { return sign * Math.exp(x); };
    }

    function log$1(sign) {
      return function(x) { return Math.log(sign * x); };
    }

    function symlog(c) {
      return function(x) { return Math.sign(x) * Math.log1p(Math.abs(x / c)); };
    }

    function symexp(c) {
      return function(x) { return Math.sign(x) * Math.expm1(Math.abs(x)) * c; };
    }

    function pow(exponent) {
      return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
      };
    }

    function pan(domain, delta, lift, ground) {
      var d0 = lift(domain[0]),
          d1 = lift(peek(domain)),
          dd = (d1 - d0) * delta;

      return [
        ground(d0 - dd),
        ground(d1 - dd)
      ];
    }

    function panLinear(domain, delta) {
      return pan(domain, delta, toNumber, identity);
    }

    function panLog(domain, delta) {
      var sign = Math.sign(domain[0]);
      return pan(domain, delta, log$1(sign), exp(sign));
    }

    function panPow(domain, delta, exponent) {
      return pan(domain, delta, pow(exponent), pow(1/exponent));
    }

    function panSymlog(domain, delta, constant) {
      return pan(domain, delta, symlog(constant), symexp(constant));
    }

    function zoom(domain, anchor, scale, lift, ground) {
      var d0 = lift(domain[0]),
          d1 = lift(peek(domain)),
          da = anchor != null ? lift(anchor) : (d0 + d1) / 2;

      return [
        ground(da + (d0 - da) * scale),
        ground(da + (d1 - da) * scale)
      ];
    }

    function zoomLinear(domain, anchor, scale) {
      return zoom(domain, anchor, scale, toNumber, identity);
    }

    function zoomLog(domain, anchor, scale) {
      var sign = Math.sign(domain[0]);
      return zoom(domain, anchor, scale, log$1(sign), exp(sign));
    }

    function zoomPow(domain, anchor, scale, exponent) {
      return zoom(domain, anchor, scale, pow(exponent), pow(1/exponent));
    }

    function zoomSymlog(domain, anchor, scale, constant) {
      return zoom(domain, anchor, scale, symlog(constant), symexp(constant));
    }

    function quarter(date) {
      return 1 + ~~(new Date(date).getMonth() / 3);
    }

    function utcquarter(date) {
      return 1 + ~~(new Date(date).getUTCMonth() / 3);
    }

    function array(_) {
      return _ != null ? (isArray(_) ? _ : [_]) : [];
    }

    /**
     * Span-preserving range clamp. If the span of the input range is less
     * than (max - min) and an endpoint exceeds either the min or max value,
     * the range is translated such that the span is preserved and one
     * endpoint touches the boundary of the min/max range.
     * If the span exceeds (max - min), the range [min, max] is returned.
     */
    function clampRange(range, min, max) {
      var lo = range[0],
          hi = range[1],
          span;

      if (hi < lo) {
        span = hi;
        hi = lo;
        lo = span;
      }
      span = hi - lo;

      return span >= (max - min)
        ? [min, max]
        : [
            (lo = Math.min(Math.max(lo, min), max - span)),
            lo + span
          ];
    }

    function isFunction(_) {
      return typeof _ === 'function';
    }

    function compare(fields, orders) {
      var idx = [],
          cmp = (fields = array(fields)).map(function(f, i) {
            if (f == null) {
              return null;
            } else {
              idx.push(i);
              return isFunction(f) ? f
                : splitAccessPath(f).map($).join('][');
            }
          }),
          n = idx.length - 1,
          ord = array(orders),
          code = 'var u,v;return ',
          i, j, f, u, v, d, t, lt, gt;

      if (n < 0) return null;

      for (j=0; j<=n; ++j) {
        i = idx[j];
        f = cmp[i];

        if (isFunction(f)) {
          d = 'f' + i;
          u = '(u=this.' + d + '(a))';
          v = '(v=this.' + d + '(b))';
          (t = t || {})[d] = f;
        } else {
          u = '(u=a['+f+'])';
          v = '(v=b['+f+'])';
        }

        d = '((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))';

        if (ord[i] !== 'descending') {
          gt = 1;
          lt = -1;
        } else {
          gt = -1;
          lt = 1;
        }

        code += '(' + u+'<'+v+'||u==null)&&v!=null?' + lt
          + ':(u>v||v==null)&&u!=null?' + gt
          + ':'+d+'!==u&&v===v?' + lt
          + ':v!==v&&u===u?' + gt
          + (i < n ? ':' : ':0');
      }

      f = Function('a', 'b', code + ';');
      if (t) f = f.bind(t);

      fields = fields.reduce(function(map, field) {
        if (isFunction(field)) {
          (accessorFields(field) || []).forEach(function(_) { map[_] = 1; });
        } else if (field != null) {
          map[field + ''] = 1;
        }
        return map;
      }, {});

      return accessor(f, Object.keys(fields));
    }

    function constant(_) {
      return isFunction(_) ? _ : function() { return _; };
    }

    function debounce(delay, handler) {
      var tid, evt;

      function callback() {
        handler(evt);
        tid = evt = null;
      }

      return function(e) {
        evt = e;
        if (tid) clearTimeout(tid);
        tid = setTimeout(callback, delay);
      };
    }

    function extend(_) {
      for (var x, k, i=1, len=arguments.length; i<len; ++i) {
        x = arguments[i];
        for (k in x) { _[k] = x[k]; }
      }
      return _;
    }

    /**
     * Return an array with minimum and maximum values, in the
     * form [min, max]. Ignores null, undefined, and NaN values.
     */
    function extent(array, f) {
      var i = 0, n, v, min, max;

      if (array && (n = array.length)) {
        if (f == null) {
          // find first valid value
          for (v = array[i]; v == null || v !== v; v = array[++i]);
          min = max = v;

          // visit all other values
          for (; i<n; ++i) {
            v = array[i];
            // skip null/undefined; NaN will fail all comparisons
            if (v != null) {
              if (v < min) min = v;
              if (v > max) max = v;
            }
          }
        } else {
          // find first valid value
          for (v = f(array[i]); v == null || v !== v; v = f(array[++i]));
          min = max = v;

          // visit all other values
          for (; i<n; ++i) {
            v = f(array[i]);
            // skip null/undefined; NaN will fail all comparisons
            if (v != null) {
              if (v < min) min = v;
              if (v > max) max = v;
            }
          }
        }
      }

      return [min, max];
    }

    function extentIndex(array, f) {
      var i = -1,
          n = array.length,
          a, b, c, u, v;

      if (f == null) {
        while (++i < n) {
          b = array[i];
          if (b != null && b >= b) {
            a = c = b;
            break;
          }
        }
        u = v = i;
        while (++i < n) {
          b = array[i];
          if (b != null) {
            if (a > b) {
              a = b;
              u = i;
            }
            if (c < b) {
              c = b;
              v = i;
            }
          }
        }
      } else {
        while (++i < n) {
          b = f(array[i], i, array);
          if (b != null && b >= b) {
            a = c = b;
            break;
          }
        }
        u = v = i;
        while (++i < n) {
          b = f(array[i], i, array);
          if (b != null) {
            if (a > b) {
              a = b;
              u = i;
            }
            if (c < b) {
              c = b;
              v = i;
            }
          }
        }
      }

      return [u, v];
    }

    var NULL = {};

    function fastmap(input) {
      var obj = {},
          map,
          test;

      function has(key) {
        return obj.hasOwnProperty(key) && obj[key] !== NULL;
      }

      map = {
        size: 0,
        empty: 0,
        object: obj,
        has: has,
        get: function(key) {
          return has(key) ? obj[key] : undefined;
        },
        set: function(key, value) {
          if (!has(key)) {
            ++map.size;
            if (obj[key] === NULL) --map.empty;
          }
          obj[key] = value;
          return this;
        },
        delete: function(key) {
          if (has(key)) {
            --map.size;
            ++map.empty;
            obj[key] = NULL;
          }
          return this;
        },
        clear: function() {
          map.size = map.empty = 0;
          map.object = obj = {};
        },
        test: function(_) {
          if (arguments.length) {
            test = _;
            return map;
          } else {
            return test;
          }
        },
        clean: function() {
          var next = {},
              size = 0,
              key, value;
          for (key in obj) {
            value = obj[key];
            if (value !== NULL && (!test || !test(value))) {
              next[key] = value;
              ++size;
            }
          }
          map.size = size;
          map.empty = 0;
          map.object = (obj = next);
        }
      };

      if (input) Object.keys(input).forEach(function(key) {
        map.set(key, input[key]);
      });

      return map;
    }

    function flush(range, value, threshold, left, right, center) {
      if (!threshold && threshold !== 0) return center;

      var a = range[0],
          b = peek(range),
          t = +threshold,
          l, r;

      // swap endpoints if range is reversed
      if (b < a) {
        l = a; a = b; b = l;
      }

      // compare value to endpoints
      l = Math.abs(value - a);
      r = Math.abs(b - value);

      // adjust if value is within threshold distance of endpoint
      return l < r && l <= t ? left : r <= t ? right : center;
    }

    function inherits(child, parent) {
      var proto = (child.prototype = Object.create(parent.prototype));
      proto.constructor = child;
      return proto;
    }

    /**
     * Predicate that returns true if the value lies within the span
     * of the given range. The left and right flags control the use
     * of inclusive (true) or exclusive (false) comparisons.
     */
    function inrange(value, range, left, right) {
      var r0 = range[0], r1 = range[range.length-1], t;
      if (r0 > r1) {
        t = r0;
        r0 = r1;
        r1 = t;
      }
      left = left === undefined || left;
      right = right === undefined || right;

      return (left ? r0 <= value : r0 < value) &&
        (right ? value <= r1 : value < r1);
    }

    function isBoolean(_) {
      return typeof _ === 'boolean';
    }

    function isDate(_) {
      return Object.prototype.toString.call(_) === '[object Date]';
    }

    function isNumber(_) {
      return typeof _ === 'number';
    }

    function isRegExp(_) {
      return Object.prototype.toString.call(_) === '[object RegExp]';
    }

    function key(fields, flat) {
      if (fields) {
        fields = flat
          ? array(fields).map(function(f) { return f.replace(/\\(.)/g, '$1'); })
          : array(fields);
      }

      var fn = !(fields && fields.length)
        ? function() { return ''; }
        : Function('_', 'return \'\'+' +
            fields.map(function(f) {
              return '_[' + (flat
                  ? $(f)
                  : splitAccessPath(f).map($).join('][')
                ) + ']';
            }).join('+\'|\'+') + ';');

      return accessor(fn, fields, 'key');
    }

    function lerp(array, frac) {
      const lo = array[0],
            hi = peek(array),
            f = +frac;
      return !f ? lo : f === 1 ? hi : lo + f * (hi - lo);
    }

    function merge(compare, array0, array1, output) {
      var n0 = array0.length,
          n1 = array1.length;

      if (!n1) return array0;
      if (!n0) return array1;

      var merged = output || new array0.constructor(n0 + n1),
          i0 = 0, i1 = 0, i = 0;

      for (; i0<n0 && i1<n1; ++i) {
        merged[i] = compare(array0[i0], array1[i1]) > 0
           ? array1[i1++]
           : array0[i0++];
      }

      for (; i0<n0; ++i0, ++i) {
        merged[i] = array0[i0];
      }

      for (; i1<n1; ++i1, ++i) {
        merged[i] = array1[i1];
      }

      return merged;
    }

    function repeat(str, reps) {
      var s = '';
      while (--reps >= 0) s += str;
      return s;
    }

    function pad(str, length, padchar, align) {
      var c = padchar || ' ',
          s = str + '',
          n = length - s.length;

      return n <= 0 ? s
        : align === 'left' ? repeat(c, n) + s
        : align === 'center' ? repeat(c, ~~(n/2)) + s + repeat(c, Math.ceil(n/2))
        : s + repeat(c, n);
    }

    /**
     * Return the numerical span of an array: the difference between
     * the last and first values.
     */
    function span(array) {
      return (peek(array) - array[0]) || 0;
    }

    function toBoolean(_) {
      return _ == null || _ === '' ? null : !_ || _ === 'false' || _ === '0' ? false : !!_;
    }

    function defaultParser(_) {
      return isNumber(_) ? _ : isDate(_) ? _ : Date.parse(_);
    }

    function toDate(_, parser) {
      parser = parser || defaultParser;
      return _ == null || _ === '' ? null : parser(_);
    }

    function toString(_) {
      return _ == null || _ === '' ? null : _ + '';
    }

    function toSet(_) {
      for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = true;
      return s;
    }

    function truncate(str, length, align, ellipsis) {
      var e = ellipsis != null ? ellipsis : '\u2026',
          s = str + '',
          n = s.length,
          l = Math.max(0, length - e.length);

      return n <= length ? s
        : align === 'left' ? e + s.slice(n - l)
        : align === 'center' ? s.slice(0, Math.ceil(l/2)) + e + s.slice(n - ~~(l/2))
        : s.slice(0, l) + e;
    }

    function visitArray(array, filter, visitor) {
      if (array) {
        var i = 0, n = array.length, t;
        if (filter) {
          for (; i<n; ++i) {
            if (t = filter(array[i])) visitor(t, i, array);
          }
        } else {
          array.forEach(visitor);
        }
      }
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var clone_1 = createCommonjsModule(function (module) {
    var clone = (function() {

    function _instanceof(obj, type) {
      return type != null && obj instanceof type;
    }

    var nativeMap;
    try {
      nativeMap = Map;
    } catch(_) {
      // maybe a reference error because no `Map`. Give it a dummy value that no
      // value will ever be an instanceof.
      nativeMap = function() {};
    }

    var nativeSet;
    try {
      nativeSet = Set;
    } catch(_) {
      nativeSet = function() {};
    }

    var nativePromise;
    try {
      nativePromise = Promise;
    } catch(_) {
      nativePromise = function() {};
    }

    /**
     * Clones (copies) an Object using deep copying.
     *
     * This function supports circular references by default, but if you are certain
     * there are no circular references in your object, you can save some CPU time
     * by calling clone(obj, false).
     *
     * Caution: if `circular` is false and `parent` contains circular references,
     * your program may enter an infinite loop and crash.
     *
     * @param `parent` - the object to be cloned
     * @param `circular` - set to true if the object to be cloned may contain
     *    circular references. (optional - true by default)
     * @param `depth` - set to a number if the object is only to be cloned to
     *    a particular depth. (optional - defaults to Infinity)
     * @param `prototype` - sets the prototype to be used when cloning an object.
     *    (optional - defaults to parent prototype).
     * @param `includeNonEnumerable` - set to true if the non-enumerable properties
     *    should be cloned as well. Non-enumerable properties on the prototype
     *    chain will be ignored. (optional - false by default)
    */
    function clone(parent, circular, depth, prototype, includeNonEnumerable) {
      if (typeof circular === 'object') {
        depth = circular.depth;
        prototype = circular.prototype;
        includeNonEnumerable = circular.includeNonEnumerable;
        circular = circular.circular;
      }
      // maintain two arrays for circular references, where corresponding parents
      // and children have the same index
      var allParents = [];
      var allChildren = [];

      var useBuffer = typeof Buffer != 'undefined';

      if (typeof circular == 'undefined')
        circular = true;

      if (typeof depth == 'undefined')
        depth = Infinity;

      // recurse this function so we don't reset allParents and allChildren
      function _clone(parent, depth) {
        // cloning null always returns null
        if (parent === null)
          return null;

        if (depth === 0)
          return parent;

        var child;
        var proto;
        if (typeof parent != 'object') {
          return parent;
        }

        if (_instanceof(parent, nativeMap)) {
          child = new nativeMap();
        } else if (_instanceof(parent, nativeSet)) {
          child = new nativeSet();
        } else if (_instanceof(parent, nativePromise)) {
          child = new nativePromise(function (resolve, reject) {
            parent.then(function(value) {
              resolve(_clone(value, depth - 1));
            }, function(err) {
              reject(_clone(err, depth - 1));
            });
          });
        } else if (clone.__isArray(parent)) {
          child = [];
        } else if (clone.__isRegExp(parent)) {
          child = new RegExp(parent.source, __getRegExpFlags(parent));
          if (parent.lastIndex) child.lastIndex = parent.lastIndex;
        } else if (clone.__isDate(parent)) {
          child = new Date(parent.getTime());
        } else if (useBuffer && Buffer.isBuffer(parent)) {
          if (Buffer.allocUnsafe) {
            // Node.js >= 4.5.0
            child = Buffer.allocUnsafe(parent.length);
          } else {
            // Older Node.js versions
            child = new Buffer(parent.length);
          }
          parent.copy(child);
          return child;
        } else if (_instanceof(parent, Error)) {
          child = Object.create(parent);
        } else {
          if (typeof prototype == 'undefined') {
            proto = Object.getPrototypeOf(parent);
            child = Object.create(proto);
          }
          else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }

        if (circular) {
          var index = allParents.indexOf(parent);

          if (index != -1) {
            return allChildren[index];
          }
          allParents.push(parent);
          allChildren.push(child);
        }

        if (_instanceof(parent, nativeMap)) {
          parent.forEach(function(value, key) {
            var keyChild = _clone(key, depth - 1);
            var valueChild = _clone(value, depth - 1);
            child.set(keyChild, valueChild);
          });
        }
        if (_instanceof(parent, nativeSet)) {
          parent.forEach(function(value) {
            var entryChild = _clone(value, depth - 1);
            child.add(entryChild);
          });
        }

        for (var i in parent) {
          var attrs;
          if (proto) {
            attrs = Object.getOwnPropertyDescriptor(proto, i);
          }

          if (attrs && attrs.set == null) {
            continue;
          }
          child[i] = _clone(parent[i], depth - 1);
        }

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(parent);
          for (var i = 0; i < symbols.length; i++) {
            // Don't need to worry about cloning a symbol because it is a primitive,
            // like a number or string.
            var symbol = symbols[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
            if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
              continue;
            }
            child[symbol] = _clone(parent[symbol], depth - 1);
            if (!descriptor.enumerable) {
              Object.defineProperty(child, symbol, {
                enumerable: false
              });
            }
          }
        }

        if (includeNonEnumerable) {
          var allPropertyNames = Object.getOwnPropertyNames(parent);
          for (var i = 0; i < allPropertyNames.length; i++) {
            var propertyName = allPropertyNames[i];
            var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
            if (descriptor && descriptor.enumerable) {
              continue;
            }
            child[propertyName] = _clone(parent[propertyName], depth - 1);
            Object.defineProperty(child, propertyName, {
              enumerable: false
            });
          }
        }

        return child;
      }

      return _clone(parent, depth);
    }

    /**
     * Simple flat clone using prototype, accepts only objects, usefull for property
     * override on FLAT configuration object (no nested props).
     *
     * USE WITH CAUTION! This may not behave as you wish if you do not know how this
     * works.
     */
    clone.clonePrototype = function clonePrototype(parent) {
      if (parent === null)
        return null;

      var c = function () {};
      c.prototype = parent;
      return new c();
    };

    // private utility functions

    function __objToStr(o) {
      return Object.prototype.toString.call(o);
    }
    clone.__objToStr = __objToStr;

    function __isDate(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Date]';
    }
    clone.__isDate = __isDate;

    function __isArray(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Array]';
    }
    clone.__isArray = __isArray;

    function __isRegExp(o) {
      return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    }
    clone.__isRegExp = __isRegExp;

    function __getRegExpFlags(re) {
      var flags = '';
      if (re.global) flags += 'g';
      if (re.ignoreCase) flags += 'i';
      if (re.multiline) flags += 'm';
      return flags;
    }
    clone.__getRegExpFlags = __getRegExpFlags;

    return clone;
    })();

    if (module.exports) {
      module.exports = clone;
    }
    });

    var isArray$1 = Array.isArray;
    var keyList = Object.keys;
    var hasProp = Object.prototype.hasOwnProperty;

    var fastDeepEqual = function equal(a, b) {
      if (a === b) return true;

      if (a && b && typeof a == 'object' && typeof b == 'object') {
        var arrA = isArray$1(a)
          , arrB = isArray$1(b)
          , i
          , length
          , key;

        if (arrA && arrB) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0;)
            if (!equal(a[i], b[i])) return false;
          return true;
        }

        if (arrA != arrB) return false;

        var dateA = a instanceof Date
          , dateB = b instanceof Date;
        if (dateA != dateB) return false;
        if (dateA && dateB) return a.getTime() == b.getTime();

        var regexpA = a instanceof RegExp
          , regexpB = b instanceof RegExp;
        if (regexpA != regexpB) return false;
        if (regexpA && regexpB) return a.toString() == b.toString();

        var keys = keyList(a);
        length = keys.length;

        if (length !== keyList(b).length)
          return false;

        for (i = length; i-- !== 0;)
          if (!hasProp.call(b, keys[i])) return false;

        for (i = length; i-- !== 0;) {
          key = keys[i];
          if (!equal(a[key], b[key])) return false;
        }

        return true;
      }

      return a!==a && b!==b;
    };

    var fastJsonStableStringify = function (data, opts) {
        if (!opts) opts = {};
        if (typeof opts === 'function') opts = { cmp: opts };
        var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

        var cmp = opts.cmp && (function (f) {
            return function (node) {
                return function (a, b) {
                    var aobj = { key: a, value: node[a] };
                    var bobj = { key: b, value: node[b] };
                    return f(aobj, bobj);
                };
            };
        })(opts.cmp);

        var seen = [];
        return (function stringify (node) {
            if (node && node.toJSON && typeof node.toJSON === 'function') {
                node = node.toJSON();
            }

            if (node === undefined) return;
            if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
            if (typeof node !== 'object') return JSON.stringify(node);

            var i, out;
            if (Array.isArray(node)) {
                out = '[';
                for (i = 0; i < node.length; i++) {
                    if (i) out += ',';
                    out += stringify(node[i]) || 'null';
                }
                return out + ']';
            }

            if (node === null) return 'null';

            if (seen.indexOf(node) !== -1) {
                if (cycles) return JSON.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            }

            var seenIndex = seen.push(node) - 1;
            var keys = Object.keys(node).sort(cmp && cmp(node));
            out = '';
            for (i = 0; i < keys.length; i++) {
                var key = keys[i];
                var value = stringify(node[key]);

                if (!value) continue;
                if (out) out += ',';
                out += JSON.stringify(key) + ':' + value;
            }
            seen.splice(seenIndex, 1);
            return '{' + out + '}';
        })(data);
    };

    function isLogicalOr(op) {
        return !!op.or;
    }
    function isLogicalAnd(op) {
        return !!op.and;
    }
    function isLogicalNot(op) {
        return !!op.not;
    }
    function forEachLeaf(op, fn) {
        if (isLogicalNot(op)) {
            forEachLeaf(op.not, fn);
        }
        else if (isLogicalAnd(op)) {
            for (const subop of op.and) {
                forEachLeaf(subop, fn);
            }
        }
        else if (isLogicalOr(op)) {
            for (const subop of op.or) {
                forEachLeaf(subop, fn);
            }
        }
        else {
            fn(op);
        }
    }
    function normalizeLogicalOperand(op, normalizer) {
        if (isLogicalNot(op)) {
            return { not: normalizeLogicalOperand(op.not, normalizer) };
        }
        else if (isLogicalAnd(op)) {
            return { and: op.and.map(o => normalizeLogicalOperand(o, normalizer)) };
        }
        else if (isLogicalOr(op)) {
            return { or: op.or.map(o => normalizeLogicalOperand(o, normalizer)) };
        }
        else {
            return normalizer(op);
        }
    }

    const deepEqual = fastDeepEqual;
    const duplicate = clone_1;
    /**
     * Creates an object composed of the picked object properties.
     *
     * var object = {'a': 1, 'b': '2', 'c': 3};
     * pick(object, ['a', 'c']);
     * // → {'a': 1, 'c': 3}
     *
     */
    function pick(obj, props) {
        const copy = {};
        for (const prop of props) {
            if (obj.hasOwnProperty(prop)) {
                copy[prop] = obj[prop];
            }
        }
        return copy;
    }
    /**
     * The opposite of _.pick; this method creates an object composed of the own
     * and inherited enumerable string keyed properties of object that are not omitted.
     */
    function omit(obj, props) {
        const copy = Object.assign({}, obj);
        for (const prop of props) {
            delete copy[prop];
        }
        return copy;
    }
    /**
     * Monkey patch Set so that `stringify` produces a string representation of sets.
     */
    Set.prototype['toJSON'] = function () {
        return `Set(${[...this].map(fastJsonStableStringify).join(',')})`;
    };
    /**
     * Converts any object to a string representation that can be consumed by humans.
     */
    const stringify = fastJsonStableStringify;
    /**
     * Converts any object to a string of limited size, or a number.
     */
    function hash(a) {
        if (isNumber(a)) {
            return a;
        }
        const str = isString(a) ? a : fastJsonStableStringify(a);
        // short strings can be used as hash directly, longer strings are hashed to reduce memory usage
        if (str.length < 250) {
            return str;
        }
        // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/
        let h = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            h = (h << 5) - h + char;
            h = h & h; // Convert to 32bit integer
        }
        return h;
    }
    function contains(array, item) {
        return array.indexOf(item) > -1;
    }
    /**
     * Returns true if any item returns true.
     */
    function some(arr, f) {
        let i = 0;
        for (let k = 0; k < arr.length; k++) {
            if (f(arr[k], k, i++)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Returns true if all items return true.
     */
    function every(arr, f) {
        let i = 0;
        for (let k = 0; k < arr.length; k++) {
            if (!f(arr[k], k, i++)) {
                return false;
            }
        }
        return true;
    }
    function flatten(arrays) {
        return [].concat(...arrays);
    }
    /**
     * recursively merges src into dest
     */
    function mergeDeep(dest, ...src) {
        for (const s of src) {
            dest = deepMerge_(dest, s);
        }
        return dest;
    }
    // recursively merges src into dest
    function deepMerge_(dest, src) {
        if (typeof src !== 'object' || src === null) {
            return dest;
        }
        for (const p in src) {
            if (!src.hasOwnProperty(p)) {
                continue;
            }
            if (src[p] === undefined) {
                continue;
            }
            if (typeof src[p] !== 'object' || isArray(src[p]) || src[p] === null) {
                dest[p] = src[p];
            }
            else if (typeof dest[p] !== 'object' || dest[p] === null) {
                dest[p] = mergeDeep(isArray(src[p].constructor) ? [] : {}, src[p]);
            }
            else {
                mergeDeep(dest[p], src[p]);
            }
        }
        return dest;
    }
    function unique(values, f) {
        const results = [];
        const u = {};
        let v;
        for (const val of values) {
            v = f(val);
            if (v in u) {
                continue;
            }
            u[v] = 1;
            results.push(val);
        }
        return results;
    }
    function setEqual(a, b) {
        if (a.size !== b.size) {
            return false;
        }
        for (const e of a) {
            if (!b.has(e)) {
                return false;
            }
        }
        return true;
    }
    function hasIntersection(a, b) {
        for (const key of a) {
            if (b.has(key)) {
                return true;
            }
        }
        return false;
    }
    function prefixGenerator(a) {
        const prefixes = new Set();
        for (const x of a) {
            const splitField = splitAccessPath(x);
            // Wrap every element other than the first in `[]`
            const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));
            const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));
            computedPrefixes.forEach(y => prefixes.add(y));
        }
        return prefixes;
    }
    function fieldIntersection(a, b) {
        return hasIntersection(prefixGenerator(a), prefixGenerator(b));
    }
    // This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208
    const keys = Object.keys;
    function vals(x) {
        const _vals = [];
        for (const k in x) {
            if (x.hasOwnProperty(k)) {
                _vals.push(x[k]);
            }
        }
        return _vals;
    }
    function flagKeys(f) {
        return keys(f);
    }
    function isBoolean$1(b) {
        return b === true || b === false;
    }
    /**
     * Convert a string into a valid variable name
     */
    function varName(s) {
        // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _
        const alphanumericS = s.replace(/\W/g, '_');
        // Add _ if the string has leading numbers.
        return (s.match(/^\d+/) ? '_' : '') + alphanumericS;
    }
    function logicalExpr(op, cb) {
        if (isLogicalNot(op)) {
            return '!(' + logicalExpr(op.not, cb) + ')';
        }
        else if (isLogicalAnd(op)) {
            return '(' + op.and.map((and) => logicalExpr(and, cb)).join(') && (') + ')';
        }
        else if (isLogicalOr(op)) {
            return '(' + op.or.map((or) => logicalExpr(or, cb)).join(') || (') + ')';
        }
        else {
            return cb(op);
        }
    }
    /**
     * Delete nested property of an object, and delete the ancestors of the property if they become empty.
     */
    function deleteNestedProperty(obj, orderedProps) {
        if (orderedProps.length === 0) {
            return true;
        }
        const prop = orderedProps.shift();
        if (deleteNestedProperty(obj[prop], orderedProps)) {
            delete obj[prop];
        }
        return keys(obj).length === 0;
    }
    function titlecase(s) {
        return s.charAt(0).toUpperCase() + s.substr(1);
    }
    /**
     * Converts a path to an access path with datum.
     * @param path The field name.
     * @param datum The string to use for `datum`.
     */
    function accessPathWithDatum(path, datum = 'datum') {
        const pieces = splitAccessPath(path);
        const prefixes = [];
        for (let i = 1; i <= pieces.length; i++) {
            const prefix = `[${pieces
            .slice(0, i)
            .map($)
            .join('][')}]`;
            prefixes.push(`${datum}${prefix}`);
        }
        return prefixes.join(' && ');
    }
    /**
     * Return access with datum to the flattened field.
     *
     * @param path The field name.
     * @param datum The string to use for `datum`.
     */
    function flatAccessWithDatum(path, datum = 'datum') {
        return `${datum}[${$(splitAccessPath(path).join('.'))}]`;
    }
    /**
     * Replaces path accesses with access to non-nested field.
     * For example, `foo["bar"].baz` becomes `foo\\.bar\\.baz`.
     */
    function replacePathInField(path) {
        return `${splitAccessPath(path)
        .map(p => p.replace('.', '\\.'))
        .join('\\.')}`;
    }
    /**
     * Remove path accesses with access from field.
     * For example, `foo["bar"].baz` becomes `foo.bar.baz`.
     */
    function removePathFromField(path) {
        return `${splitAccessPath(path).join('.')}`;
    }
    /**
     * Count the depth of the path. Returns 1 for fields that are not nested.
     */
    function accessPathDepth(path) {
        if (!path) {
            return 0;
        }
        return splitAccessPath(path).length;
    }
    /**
     * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.
     */
    function getFirstDefined(...args) {
        for (const arg of args) {
            if (arg !== undefined) {
                return arg;
            }
        }
        return undefined;
    }
    // variable used to generate id
    let idCounter = 42;
    /**
     * Returns a new random id every time it gets called.
     *
     * Has side effect!
     */
    function uniqueId(prefix) {
        const id = ++idCounter;
        return prefix ? String(prefix) + id : id;
    }
    function internalField(name) {
        return isInternalField(name) ? name : `__${name}`;
    }
    function isInternalField(name) {
        return name.indexOf('__') === 0;
    }

    var Mark;
    (function (Mark) {
        Mark.AREA = 'area';
        Mark.BAR = 'bar';
        Mark.LINE = 'line';
        Mark.POINT = 'point';
        Mark.RECT = 'rect';
        Mark.RULE = 'rule';
        Mark.TEXT = 'text';
        Mark.TICK = 'tick';
        Mark.TRAIL = 'trail';
        Mark.CIRCLE = 'circle';
        Mark.SQUARE = 'square';
        Mark.GEOSHAPE = 'geoshape';
    })(Mark || (Mark = {}));
    const AREA = Mark.AREA;
    const BAR = Mark.BAR;
    const LINE = Mark.LINE;
    const POINT = Mark.POINT;
    const TEXT = Mark.TEXT;
    const TICK = Mark.TICK;
    const TRAIL = Mark.TRAIL;
    const RECT = Mark.RECT;
    const RULE = Mark.RULE;
    const GEOSHAPE = Mark.GEOSHAPE;
    const CIRCLE = Mark.CIRCLE;
    const SQUARE = Mark.SQUARE;
    // Using mapped type to declare index, ensuring we always have all marks when we add more.
    const MARK_INDEX = {
        area: 1,
        bar: 1,
        line: 1,
        point: 1,
        text: 1,
        tick: 1,
        trail: 1,
        rect: 1,
        geoshape: 1,
        rule: 1,
        circle: 1,
        square: 1
    };
    function isPathMark(m) {
        return contains(['line', 'area', 'trail'], m);
    }
    const PRIMITIVE_MARKS = flagKeys(MARK_INDEX);
    function isMarkDef(mark) {
        return mark['type'];
    }
    const PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);
    const STROKE_CONFIG = [
        'stroke',
        'strokeWidth',
        'strokeDash',
        'strokeDashOffset',
        'strokeOpacity',
        'strokeJoin',
        'strokeMiterLimit'
    ];
    const FILL_CONFIG = ['fill', 'fillOpacity'];
    const FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);
    const VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color', 'tooltip'];
    const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {
        area: ['line', 'point'],
        bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],
        line: ['point'],
        text: ['shortTimeLabels'],
        tick: ['bandSize', 'thickness']
    };
    const defaultMarkConfig = {
        color: '#4c78a8',
        tooltip: { content: 'encoding' }
    };
    const defaultBarConfig = {
        binSpacing: 1,
        continuousBandSize: 5
    };
    const defaultTickConfig = {
        thickness: 1
    };
    function getMarkType(m) {
        return isMarkDef(m) ? m.type : m;
    }

    function isUnitSpec(spec) {
        return !!spec['mark'];
    }

    class CompositeMarkNormalizer {
        constructor(name, run) {
            this.name = name;
            this.run = run;
        }
        hasMatchingType(spec, config) {
            if (isUnitSpec(spec)) {
                return getMarkType(spec.mark) === this.name;
            }
            return false;
        }
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                t[p[i]] = s[p[i]];
        return t;
    }

    const AGGREGATE_OP_INDEX = {
        argmax: 1,
        argmin: 1,
        average: 1,
        count: 1,
        distinct: 1,
        max: 1,
        mean: 1,
        median: 1,
        min: 1,
        missing: 1,
        q1: 1,
        q3: 1,
        ci0: 1,
        ci1: 1,
        stderr: 1,
        stdev: 1,
        stdevp: 1,
        sum: 1,
        valid: 1,
        values: 1,
        variance: 1,
        variancep: 1
    };
    function isAggregateOp(a) {
        return !!AGGREGATE_OP_INDEX[a];
    }
    const COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];
    function isCountingAggregateOp(aggregate) {
        return aggregate && contains(COUNTING_OPS, aggregate);
    }
    function isMinMaxOp(aggregate) {
        return aggregate && contains(['min', 'max'], aggregate);
    }
    /** Additive-based aggregation operations.  These can be applied to stack. */
    const SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];
    /**
     * Aggregation operators that always produce values within the range [domainMin, domainMax].
     */
    const SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];
    const SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);

    /*
     * Constants and utilities for encoding channels (Visual variables)
     * such as 'x', 'y', 'color'.
     */
    var Channel;
    (function (Channel) {
        // Facet
        Channel.ROW = 'row';
        Channel.COLUMN = 'column';
        Channel.FACET = 'facet';
        // Position
        Channel.X = 'x';
        Channel.Y = 'y';
        Channel.X2 = 'x2';
        Channel.Y2 = 'y2';
        // Geo Position
        Channel.LATITUDE = 'latitude';
        Channel.LONGITUDE = 'longitude';
        Channel.LATITUDE2 = 'latitude2';
        Channel.LONGITUDE2 = 'longitude2';
        // Mark property with scale
        Channel.COLOR = 'color';
        Channel.FILL = 'fill';
        Channel.STROKE = 'stroke';
        Channel.SHAPE = 'shape';
        Channel.SIZE = 'size';
        Channel.OPACITY = 'opacity';
        Channel.FILLOPACITY = 'fillOpacity';
        Channel.STROKEOPACITY = 'strokeOpacity';
        Channel.STROKEWIDTH = 'strokeWidth';
        // Non-scale channel
        Channel.TEXT = 'text';
        Channel.ORDER = 'order';
        Channel.DETAIL = 'detail';
        Channel.KEY = 'key';
        Channel.TOOLTIP = 'tooltip';
        Channel.HREF = 'href';
    })(Channel || (Channel = {}));
    const X = Channel.X;
    const Y = Channel.Y;
    const X2 = Channel.X2;
    const Y2 = Channel.Y2;
    const LATITUDE = Channel.LATITUDE;
    const LATITUDE2 = Channel.LATITUDE2;
    const LONGITUDE = Channel.LONGITUDE;
    const LONGITUDE2 = Channel.LONGITUDE2;
    const FACET = Channel.FACET;
    const ROW = Channel.ROW;
    const COLUMN = Channel.COLUMN;
    const SHAPE = Channel.SHAPE;
    const SIZE = Channel.SIZE;
    const COLOR = Channel.COLOR;
    const FILL = Channel.FILL;
    const STROKE = Channel.STROKE;
    const TEXT$1 = Channel.TEXT;
    const DETAIL = Channel.DETAIL;
    const KEY = Channel.KEY;
    const ORDER = Channel.ORDER;
    const OPACITY = Channel.OPACITY;
    const FILLOPACITY = Channel.FILLOPACITY;
    const STROKEOPACITY = Channel.STROKEOPACITY;
    const STROKEWIDTH = Channel.STROKEWIDTH;
    const TOOLTIP = Channel.TOOLTIP;
    const HREF = Channel.HREF;
    const GEOPOSITION_CHANNEL_INDEX = {
        longitude: 1,
        longitude2: 1,
        latitude: 1,
        latitude2: 1
    };
    const GEOPOSITION_CHANNELS = flagKeys(GEOPOSITION_CHANNEL_INDEX);
    const UNIT_CHANNEL_INDEX = Object.assign({ 
        // position
        x: 1, y: 1, x2: 1, y2: 1 }, GEOPOSITION_CHANNEL_INDEX, { 
        // color
        color: 1, fill: 1, stroke: 1, 
        // other non-position with scale
        opacity: 1, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, size: 1, shape: 1, 
        // channels without scales
        order: 1, text: 1, detail: 1, key: 1, tooltip: 1, href: 1 });
    function isColorChannel(channel) {
        return channel === 'color' || channel === 'fill' || channel === 'stroke';
    }
    const FACET_CHANNEL_INDEX = {
        row: 1,
        column: 1,
        facet: 1
    };
    const FACET_CHANNELS = flagKeys(FACET_CHANNEL_INDEX);
    const CHANNEL_INDEX = Object.assign({}, UNIT_CHANNEL_INDEX, FACET_CHANNEL_INDEX);
    const CHANNELS = flagKeys(CHANNEL_INDEX);
    const SINGLE_DEF_CHANNEL_INDEX = __rest(CHANNEL_INDEX, ["order", "detail"]);
    function isChannel(str) {
        return !!CHANNEL_INDEX[str];
    }
    function isSecondaryRangeChannel(c) {
        const main = getMainRangeChannel(c);
        return main !== c;
    }
    function getMainRangeChannel(channel) {
        switch (channel) {
            case 'x2':
                return 'x';
            case 'y2':
                return 'y';
            case 'latitude2':
                return 'latitude';
            case 'longitude2':
                return 'longitude';
        }
        return channel;
    }
    // NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;
    const // The rest of unit channels then have scale
    NONPOSITION_CHANNEL_INDEX = __rest(UNIT_CHANNEL_INDEX, ["x", "y", "x2", "y2", "latitude", "longitude", "latitude2", "longitude2"]);
    const NONPOSITION_CHANNELS = flagKeys(NONPOSITION_CHANNEL_INDEX);
    // POSITION_SCALE_CHANNELS = X and Y;
    const POSITION_SCALE_CHANNEL_INDEX = { x: 1, y: 1 };
    const POSITION_SCALE_CHANNELS = flagKeys(POSITION_SCALE_CHANNEL_INDEX);
    // NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y
    const NONPOSITION_SCALE_CHANNEL_INDEX = __rest(NONPOSITION_CHANNEL_INDEX, ["text", "tooltip", "href", "detail", "key", "order"]);
    const NONPOSITION_SCALE_CHANNELS = flagKeys(NONPOSITION_SCALE_CHANNEL_INDEX);
    function isNonPositionScaleChannel(channel) {
        return !!NONPOSITION_CHANNEL_INDEX[channel];
    }
    /**
     * @returns whether Vega supports legends for a particular channel
     */
    function supportLegend(channel) {
        switch (channel) {
            case COLOR:
            case FILL:
            case STROKE:
            case SIZE:
            case SHAPE:
            case OPACITY:
                return true;
            case FILLOPACITY:
            case STROKEOPACITY:
            case STROKEWIDTH:
                return false;
        }
    }
    // Declare SCALE_CHANNEL_INDEX
    const SCALE_CHANNEL_INDEX = Object.assign({}, POSITION_SCALE_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX);
    /** List of channels with scales */
    const SCALE_CHANNELS = flagKeys(SCALE_CHANNEL_INDEX);
    function isScaleChannel(channel) {
        return !!SCALE_CHANNEL_INDEX[channel];
    }
    /**
     * Return whether a channel supports a particular mark type.
     * @param channel  channel name
     * @param mark the mark type
     * @return whether the mark supports the channel
     */
    function supportMark(channel, mark) {
        return getSupportedMark(channel)[mark];
    }
    /**
     * Return a dictionary showing whether a channel supports mark type.
     * @param channel
     * @return A dictionary mapping mark types to 'always', 'binned', or undefined
     */
    function getSupportedMark(channel) {
        switch (channel) {
            case COLOR:
            case FILL:
            case STROKE:
            case DETAIL:
            case KEY:
            case TOOLTIP:
            case HREF:
            case ORDER: // TODO: revise (order might not support rect, which is not stackable?)
            case OPACITY:
            case FILLOPACITY:
            case STROKEOPACITY:
            case STROKEWIDTH:
            case FACET:
            case ROW:
            case COLUMN:
                return {
                    // all marks
                    point: 'always',
                    tick: 'always',
                    rule: 'always',
                    circle: 'always',
                    square: 'always',
                    bar: 'always',
                    rect: 'always',
                    line: 'always',
                    trail: 'always',
                    area: 'always',
                    text: 'always',
                    geoshape: 'always'
                };
            case X:
            case Y:
            case LATITUDE:
            case LONGITUDE:
                return {
                    // all marks except geoshape. geoshape does not use X, Y -- it uses a projection
                    point: 'always',
                    tick: 'always',
                    rule: 'always',
                    circle: 'always',
                    square: 'always',
                    bar: 'always',
                    rect: 'always',
                    line: 'always',
                    trail: 'always',
                    area: 'always',
                    text: 'always'
                };
            case X2:
            case Y2:
            case LATITUDE2:
            case LONGITUDE2:
                return {
                    rule: 'always',
                    bar: 'always',
                    rect: 'always',
                    area: 'always',
                    circle: 'binned',
                    point: 'binned',
                    square: 'binned',
                    tick: 'binned'
                };
            case SIZE:
                return {
                    point: 'always',
                    tick: 'always',
                    rule: 'always',
                    circle: 'always',
                    square: 'always',
                    bar: 'always',
                    text: 'always',
                    line: 'always',
                    trail: 'always'
                };
            case SHAPE:
                return { point: 'always', geoshape: 'always' };
            case TEXT$1:
                return { text: 'always' };
        }
    }
    function rangeType(channel) {
        switch (channel) {
            case X:
            case Y:
            case SIZE:
            case STROKEWIDTH:
            case OPACITY:
            case FILLOPACITY:
            case STROKEOPACITY:
            // X2 and Y2 use X and Y scales, so they similarly have continuous range.
            case X2:
            case Y2:
                return undefined;
            case FACET:
            case ROW:
            case COLUMN:
            case SHAPE:
            // TEXT, TOOLTIP, and HREF have no scale but have discrete output
            case TEXT$1:
            case TOOLTIP:
            case HREF:
                return 'discrete';
            // Color can be either continuous or discrete, depending on scale type.
            case COLOR:
            case FILL:
            case STROKE:
                return 'flexible';
            // No scale, no range type.
            case LATITUDE:
            case LONGITUDE:
            case LATITUDE2:
            case LONGITUDE2:
            case DETAIL:
            case KEY:
            case ORDER:
                return undefined;
        }
        /* istanbul ignore next: should never reach here. */
        throw new Error('rangeType not implemented for ' + channel);
    }

    /**
     * Vega-Lite's singleton logger utility.
     */
    /**
     * Main (default) Vega Logger instance for Vega-Lite
     */
    const main$1 = logger(Warn);
    let current = main$1;
    /**
     * Set the singleton logger to be a custom logger
     */
    function set(newLogger) {
        current = newLogger;
        return current;
    }
    /**
     * Reset the main logger to use the default Vega Logger
     */
    function reset() {
        current = main$1;
        return current;
    }
    function warn(..._) {
        current.warn.apply(current, arguments);
    }
    function debug(..._) {
        current.debug.apply(current, arguments);
    }
    /**
     * Collection of all Vega-Lite Error Messages
     */
    var message;
    (function (message) {
        message.INVALID_SPEC = 'Invalid spec';
        // FIT
        message.FIT_NON_SINGLE = 'Autosize "fit" only works for single views and layered views.';
        message.CANNOT_FIX_RANGE_STEP_WITH_FIT = 'Cannot use a fixed value of "rangeStep" when "autosize" is "fit".';
        // SELECTION
        function cannotProjectOnChannelWithoutField(channel) {
            return `Cannot project a selection on encoding channel "${channel}", which has no field.`;
        }
        message.cannotProjectOnChannelWithoutField = cannotProjectOnChannelWithoutField;
        function nearestNotSupportForContinuous(mark) {
            return `The "nearest" transform is not supported for ${mark} marks.`;
        }
        message.nearestNotSupportForContinuous = nearestNotSupportForContinuous;
        function selectionNotSupported(mark) {
            return `Selection not supported for ${mark} yet`;
        }
        message.selectionNotSupported = selectionNotSupported;
        function selectionNotFound(name) {
            return `Cannot find a selection named "${name}"`;
        }
        message.selectionNotFound = selectionNotFound;
        message.SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';
        message.NO_INIT_SCALE_BINDINGS = 'Selections bound to scales cannot be separately initialized.';
        // REPEAT
        function noSuchRepeatedValue(field) {
            return `Unknown repeated value "${field}".`;
        }
        message.noSuchRepeatedValue = noSuchRepeatedValue;
        function columnsNotSupportByRowCol(type) {
            return `The "columns" property cannot be used when "${type}" has nested row/column.`;
        }
        message.columnsNotSupportByRowCol = columnsNotSupportByRowCol;
        // CONCAT
        message.CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views yet (https://github.com/vega/vega-lite/issues/2415).';
        // REPEAT
        message.REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views yet (https://github.com/vega/vega-lite/issues/2415).';
        // TITLE
        function cannotSetTitleAnchor(type) {
            return `Cannot set title "anchor" for a ${type} spec`;
        }
        message.cannotSetTitleAnchor = cannotSetTitleAnchor;
        // DATA
        function unrecognizedParse(p) {
            return `Unrecognized parse "${p}".`;
        }
        message.unrecognizedParse = unrecognizedParse;
        function differentParse(field, local, ancestor) {
            return `An ancestor parsed field "${field}" as ${ancestor} but a child wants to parse the field as ${local}.`;
        }
        message.differentParse = differentParse;
        // TRANSFORMS
        function invalidTransformIgnored(transform) {
            return `Ignoring an invalid transform: ${stringify(transform)}.`;
        }
        message.invalidTransformIgnored = invalidTransformIgnored;
        message.NO_FIELDS_NEEDS_AS = 'If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.';
        // ENCODING & FACET
        function encodingOverridden(channels) {
            return `Layer's shared ${channels.join(',')} channel ${channels.length === 1 ? 'is' : 'are'} overriden`;
        }
        message.encodingOverridden = encodingOverridden;
        function projectionOverridden(opt) {
            const { parentProjection, projection } = opt;
            return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(projection)}.`;
        }
        message.projectionOverridden = projectionOverridden;
        function primitiveChannelDef(channel, type, value) {
            return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;
        }
        message.primitiveChannelDef = primitiveChannelDef;
        function invalidFieldType(type) {
            return `Invalid field type "${type}"`;
        }
        message.invalidFieldType = invalidFieldType;
        function nonZeroScaleUsedWithLengthMark(mark, channel, opt) {
            const scaleText = opt.scaleType
                ? `${opt.scaleType} scale`
                : opt.zeroFalse
                    ? 'scale with zero=false'
                    : 'scale with custom domain that excludes zero';
            return `A ${scaleText} is used to encode ${mark}'s ${channel}. This can be misleading as the ${channel === 'x' ? 'width' : 'height'} of the ${mark} can be arbitrary based on the scale domain. You may want to use point mark instead.`;
        }
        message.nonZeroScaleUsedWithLengthMark = nonZeroScaleUsedWithLengthMark;
        function invalidFieldTypeForCountAggregate(type, aggregate) {
            return `Invalid field type "${type}" for aggregate: "${aggregate}", using "quantitative" instead.`;
        }
        message.invalidFieldTypeForCountAggregate = invalidFieldTypeForCountAggregate;
        function invalidAggregate(aggregate) {
            return `Invalid aggregation operator "${aggregate}"`;
        }
        message.invalidAggregate = invalidAggregate;
        function missingFieldType(channel, newType) {
            return `Missing type for channel "${channel}", using "${newType}" instead.`;
        }
        message.missingFieldType = missingFieldType;
        function droppingColor(type, opt) {
            const { fill, stroke } = opt;
            return (`Dropping color ${type} as the plot also has ` + (fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke'));
        }
        message.droppingColor = droppingColor;
        function emptyFieldDef(fieldDef, channel) {
            return `Dropping ${stringify(fieldDef)} from channel "${channel}" since it does not contain data field or value.`;
        }
        message.emptyFieldDef = emptyFieldDef;
        function latLongDeprecated(channel, type, newChannel) {
            return `${channel}-encoding with type ${type} is deprecated. Replacing with ${newChannel}-encoding.`;
        }
        message.latLongDeprecated = latLongDeprecated;
        message.LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';
        function incompatibleChannel(channel, markOrFacet, when) {
            return `${channel} dropped as it is incompatible with "${markOrFacet}"${when ? ` when ${when}` : ''}.`;
        }
        message.incompatibleChannel = incompatibleChannel;
        function invalidEncodingChannel(channel) {
            return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;
        }
        message.invalidEncodingChannel = invalidEncodingChannel;
        function facetChannelShouldBeDiscrete(channel) {
            return `${channel} encoding should be discrete (ordinal / nominal / binned).`;
        }
        message.facetChannelShouldBeDiscrete = facetChannelShouldBeDiscrete;
        function facetChannelDropped(channels) {
            return `Facet encoding dropped as ${channels.join(' and ')} ${channels.length > 1 ? 'are' : 'is'} also specified.`;
        }
        message.facetChannelDropped = facetChannelDropped;
        function discreteChannelCannotEncode(channel, type) {
            return `Using discrete channel "${channel}" to encode "${type}" field can be misleading as it does not encode ${type === 'ordinal' ? 'order' : 'magnitude'}.`;
        }
        message.discreteChannelCannotEncode = discreteChannelCannotEncode;
        // Mark
        message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = 'Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.';
        function lineWithRange(hasX2, hasY2) {
            const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';
            return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;
        }
        message.lineWithRange = lineWithRange;
        function orientOverridden(original, actual) {
            return `Specified orient "${original}" overridden with "${actual}"`;
        }
        message.orientOverridden = orientOverridden;
        // SCALE
        message.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'custom domain scale cannot be unioned with default field-based domain';
        function cannotUseScalePropertyWithNonColor(prop) {
            return `Cannot use the scale property "${prop}" with non-color channel.`;
        }
        message.cannotUseScalePropertyWithNonColor = cannotUseScalePropertyWithNonColor;
        function unaggregateDomainHasNoEffectForRawField(fieldDef) {
            return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;
        }
        message.unaggregateDomainHasNoEffectForRawField = unaggregateDomainHasNoEffectForRawField;
        function unaggregateDomainWithNonSharedDomainOp(aggregate) {
            return `Unaggregated domain not applicable for "${aggregate}" since it produces values outside the origin domain of the source data.`;
        }
        message.unaggregateDomainWithNonSharedDomainOp = unaggregateDomainWithNonSharedDomainOp;
        function unaggregatedDomainWithLogScale(fieldDef) {
            return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;
        }
        message.unaggregatedDomainWithLogScale = unaggregatedDomainWithLogScale;
        function cannotApplySizeToNonOrientedMark(mark) {
            return `Cannot apply size to non-oriented mark "${mark}".`;
        }
        message.cannotApplySizeToNonOrientedMark = cannotApplySizeToNonOrientedMark;
        function rangeStepDropped(channel) {
            return `rangeStep for "${channel}" is dropped as top-level ${channel === 'x' ? 'width' : 'height'} is provided.`;
        }
        message.rangeStepDropped = rangeStepDropped;
        function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {
            return `Channel "${channel}" does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
        }
        message.scaleTypeNotWorkWithChannel = scaleTypeNotWorkWithChannel;
        function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {
            return `FieldDef does not work with "${scaleType}" scale. We are using "${defaultScaleType}" scale instead.`;
        }
        message.scaleTypeNotWorkWithFieldDef = scaleTypeNotWorkWithFieldDef;
        function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {
            return `${channel}-scale's "${propName}" is dropped as it does not work with ${scaleType} scale.`;
        }
        message.scalePropertyNotWorkWithScaleType = scalePropertyNotWorkWithScaleType;
        function scaleTypeNotWorkWithMark(mark, scaleType) {
            return `Scale type "${scaleType}" does not work with mark "${mark}".`;
        }
        message.scaleTypeNotWorkWithMark = scaleTypeNotWorkWithMark;
        function mergeConflictingProperty(property, propertyOf, v1, v2) {
            return `Conflicting ${propertyOf.toString()} property "${property.toString()}" (${stringify(v1)} and ${stringify(v2)}).  Using ${stringify(v1)}.`;
        }
        message.mergeConflictingProperty = mergeConflictingProperty;
        function independentScaleMeansIndependentGuide(channel) {
            return `Setting the scale to be independent for "${channel}" means we also have to set the guide (axis or legend) to be independent.`;
        }
        message.independentScaleMeansIndependentGuide = independentScaleMeansIndependentGuide;
        function domainSortDropped(sort) {
            return `Dropping sort property ${stringify(sort)} as unioned domains only support boolean or op 'count'.`;
        }
        message.domainSortDropped = domainSortDropped;
        message.UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains';
        message.MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';
        // AXIS
        message.INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';
        // STACK
        function cannotStackRangedMark(channel) {
            return `Cannot stack "${channel}" if there is already "${channel}2"`;
        }
        message.cannotStackRangedMark = cannotStackRangedMark;
        function cannotStackNonLinearScale(scaleType) {
            return `Cannot stack non-linear scale (${scaleType})`;
        }
        message.cannotStackNonLinearScale = cannotStackNonLinearScale;
        function stackNonSummativeAggregate(aggregate) {
            return `Stacking is applied even though the aggregate function is non-summative ("${aggregate}")`;
        }
        message.stackNonSummativeAggregate = stackNonSummativeAggregate;
        // TIMEUNIT
        function invalidTimeUnit(unitName, value) {
            return `Invalid ${unitName}: ${stringify(value)}`;
        }
        message.invalidTimeUnit = invalidTimeUnit;
        function dayReplacedWithDate(fullTimeUnit) {
            return `Time unit "${fullTimeUnit}" is not supported. We are replacing it with ${fullTimeUnit.replace('day', 'date')}.`;
        }
        message.dayReplacedWithDate = dayReplacedWithDate;
        function droppedDay(d) {
            return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;
        }
        message.droppedDay = droppedDay;
        function errorBarCenterAndExtentAreNotNeeded(center, extent) {
            return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${extent && center ? 'are ' : 'is '}not needed when data are aggregated.`;
        }
        message.errorBarCenterAndExtentAreNotNeeded = errorBarCenterAndExtentAreNotNeeded;
        function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {
            return `${center} is not usually used with ${extent} for ${mark}.`;
        }
        message.errorBarCenterIsUsedWithWrongExtent = errorBarCenterIsUsedWithWrongExtent;
        function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {
            return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;
        }
        message.errorBarContinuousAxisHasCustomizedAggregate = errorBarContinuousAxisHasCustomizedAggregate;
        function errorBarCenterIsNotNeeded(extent, mark) {
            return `Center is not needed to be specified in ${mark} when extent is ${extent}.`;
        }
        message.errorBarCenterIsNotNeeded = errorBarCenterIsNotNeeded;
        function errorBand1DNotSupport(property) {
            return `1D error band does not support ${property}`;
        }
        message.errorBand1DNotSupport = errorBand1DNotSupport;
        // CHANNEL
        function channelRequiredForBinned(channel) {
            return `Channel ${channel} is required for "binned" bin`;
        }
        message.channelRequiredForBinned = channelRequiredForBinned;
        function domainRequiredForThresholdScale(channel) {
            return `Domain for ${channel} is required for threshold scale`;
        }
        message.domainRequiredForThresholdScale = domainRequiredForThresholdScale;
    })(message || (message = {}));

    // DateTime definition object
    /*
     * A designated year that starts on Sunday.
     */
    const SUNDAY_YEAR = 2006;
    function isDateTime(o) {
        return (!!o &&
            (!!o.year ||
                !!o.quarter ||
                !!o.month ||
                !!o.date ||
                !!o.day ||
                !!o.hours ||
                !!o.minutes ||
                !!o.seconds ||
                !!o.milliseconds));
    }
    const MONTHS = [
        'january',
        'february',
        'march',
        'april',
        'may',
        'june',
        'july',
        'august',
        'september',
        'october',
        'november',
        'december'
    ];
    const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));
    const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));
    function normalizeQuarter(q) {
        if (isNumber(q)) {
            if (q > 4) {
                warn(message.invalidTimeUnit('quarter', q));
            }
            // We accept 1-based quarter, so need to readjust to 0-based quarter
            return (q - 1).toString();
        }
        else {
            // Invalid quarter
            throw new Error(message.invalidTimeUnit('quarter', q));
        }
    }
    function normalizeMonth(m) {
        if (isNumber(m)) {
            // We accept 1-based month, so need to readjust to 0-based month
            return (m - 1).toString();
        }
        else {
            const lowerM = m.toLowerCase();
            const monthIndex = MONTHS.indexOf(lowerM);
            if (monthIndex !== -1) {
                return monthIndex + ''; // 0 for january, ...
            }
            const shortM = lowerM.substr(0, 3);
            const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);
            if (shortMonthIndex !== -1) {
                return shortMonthIndex + '';
            }
            // Invalid month
            throw new Error(message.invalidTimeUnit('month', m));
        }
    }
    function normalizeDay(d) {
        if (isNumber(d)) {
            // mod so that this can be both 0-based where 0 = sunday
            // and 1-based where 7=sunday
            return (d % 7) + '';
        }
        else {
            const lowerD = d.toLowerCase();
            const dayIndex = DAYS.indexOf(lowerD);
            if (dayIndex !== -1) {
                return dayIndex + ''; // 0 for january, ...
            }
            const shortD = lowerD.substr(0, 3);
            const shortDayIndex = SHORT_DAYS.indexOf(shortD);
            if (shortDayIndex !== -1) {
                return shortDayIndex + '';
            }
            // Invalid day
            throw new Error(message.invalidTimeUnit('day', d));
        }
    }
    /**
     * Return Vega Expression for a particular date time.
     * @param d
     * @param normalize whether to normalize quarter, month, day.
     */
    function dateTimeExpr(d, normalize = false) {
        const units = [];
        if (normalize && d.day !== undefined) {
            if (keys(d).length > 1) {
                warn(message.droppedDay(d));
                d = duplicate(d);
                delete d.day;
            }
        }
        if (d.year !== undefined) {
            units.push(d.year);
        }
        else if (d.day !== undefined) {
            // Set year to 2006 for working with day since January 1 2006 is a Sunday
            units.push(SUNDAY_YEAR);
        }
        else {
            units.push(0);
        }
        if (d.month !== undefined) {
            const month = normalize ? normalizeMonth(d.month) : d.month;
            units.push(month);
        }
        else if (d.quarter !== undefined) {
            const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;
            units.push(quarter + '*3');
        }
        else {
            units.push(0); // months start at zero in JS
        }
        if (d.date !== undefined) {
            units.push(d.date);
        }
        else if (d.day !== undefined) {
            // HACK: Day only works as a standalone unit
            // This is only correct because we always set year to 2006 for day
            const day = normalize ? normalizeDay(d.day) : d.day;
            units.push(day + '+1');
        }
        else {
            units.push(1); // Date starts at 1 in JS
        }
        // Note: can't use TimeUnit enum here as importing it will create
        // circular dependency problem!
        for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {
            if (d[timeUnit] !== undefined) {
                units.push(d[timeUnit]);
            }
            else {
                units.push(0);
            }
        }
        if (d.utc) {
            return `utc(${units.join(', ')})`;
        }
        else {
            return `datetime(${units.join(', ')})`;
        }
    }

    function isFacetMapping(f) {
        return !!f['row'] || !!f['column'];
    }
    function isFacetFieldDef(channelDef) {
        return !!channelDef && !!channelDef['header'];
    }
    function isFacetSpec(spec) {
        return spec['facet'] !== undefined;
    }

    var TimeUnit;
    (function (TimeUnit) {
        TimeUnit.YEAR = 'year';
        TimeUnit.MONTH = 'month';
        TimeUnit.DAY = 'day';
        TimeUnit.DATE = 'date';
        TimeUnit.HOURS = 'hours';
        TimeUnit.MINUTES = 'minutes';
        TimeUnit.SECONDS = 'seconds';
        TimeUnit.MILLISECONDS = 'milliseconds';
        TimeUnit.YEARMONTH = 'yearmonth';
        TimeUnit.YEARMONTHDATE = 'yearmonthdate';
        TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';
        TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';
        TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds';
        // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);
        TimeUnit.MONTHDATE = 'monthdate';
        TimeUnit.MONTHDATEHOURS = 'monthdatehours';
        TimeUnit.HOURSMINUTES = 'hoursminutes';
        TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';
        TimeUnit.MINUTESSECONDS = 'minutesseconds';
        TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';
        TimeUnit.QUARTER = 'quarter';
        TimeUnit.YEARQUARTER = 'yearquarter';
        TimeUnit.QUARTERMONTH = 'quartermonth';
        TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';
        TimeUnit.UTCYEAR = 'utcyear';
        TimeUnit.UTCMONTH = 'utcmonth';
        TimeUnit.UTCDAY = 'utcday';
        TimeUnit.UTCDATE = 'utcdate';
        TimeUnit.UTCHOURS = 'utchours';
        TimeUnit.UTCMINUTES = 'utcminutes';
        TimeUnit.UTCSECONDS = 'utcseconds';
        TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';
        TimeUnit.UTCYEARMONTH = 'utcyearmonth';
        TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';
        TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';
        TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';
        TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds';
        // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);
        TimeUnit.UTCMONTHDATE = 'utcmonthdate';
        TimeUnit.UTCMONTHDATEHOURS = 'utcmonthdatehours';
        TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';
        TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';
        TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';
        TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';
        TimeUnit.UTCQUARTER = 'utcquarter';
        TimeUnit.UTCYEARQUARTER = 'utcyearquarter';
        TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';
        TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';
    })(TimeUnit || (TimeUnit = {}));
    /** Time Unit that only corresponds to only one part of Date objects. */
    const LOCAL_SINGLE_TIMEUNIT_INDEX = {
        year: 1,
        quarter: 1,
        month: 1,
        day: 1,
        date: 1,
        hours: 1,
        minutes: 1,
        seconds: 1,
        milliseconds: 1
    };
    const TIMEUNIT_PARTS = flagKeys(LOCAL_SINGLE_TIMEUNIT_INDEX);
    function isLocalSingleTimeUnit(timeUnit) {
        return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
    }
    const UTC_SINGLE_TIMEUNIT_INDEX = {
        utcyear: 1,
        utcquarter: 1,
        utcmonth: 1,
        utcday: 1,
        utcdate: 1,
        utchours: 1,
        utcminutes: 1,
        utcseconds: 1,
        utcmilliseconds: 1
    };
    function isUtcSingleTimeUnit(timeUnit) {
        return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];
    }
    const LOCAL_MULTI_TIMEUNIT_INDEX = {
        yearquarter: 1,
        yearquartermonth: 1,
        yearmonth: 1,
        yearmonthdate: 1,
        yearmonthdatehours: 1,
        yearmonthdatehoursminutes: 1,
        yearmonthdatehoursminutesseconds: 1,
        quartermonth: 1,
        monthdate: 1,
        monthdatehours: 1,
        hoursminutes: 1,
        hoursminutesseconds: 1,
        minutesseconds: 1,
        secondsmilliseconds: 1
    };
    const UTC_MULTI_TIMEUNIT_INDEX = {
        utcyearquarter: 1,
        utcyearquartermonth: 1,
        utcyearmonth: 1,
        utcyearmonthdate: 1,
        utcyearmonthdatehours: 1,
        utcyearmonthdatehoursminutes: 1,
        utcyearmonthdatehoursminutesseconds: 1,
        utcquartermonth: 1,
        utcmonthdate: 1,
        utcmonthdatehours: 1,
        utchoursminutes: 1,
        utchoursminutesseconds: 1,
        utcminutesseconds: 1,
        utcsecondsmilliseconds: 1
    };
    const UTC_TIMEUNIT_INDEX = Object.assign({}, UTC_SINGLE_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);
    function isUTCTimeUnit(t) {
        return !!UTC_TIMEUNIT_INDEX[t];
    }
    function getLocalTimeUnit(t) {
        return t.substr(3);
    }
    const TIMEUNIT_INDEX = Object.assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX, UTC_SINGLE_TIMEUNIT_INDEX, LOCAL_MULTI_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);
    function getTimeUnitParts(timeUnit) {
        return TIMEUNIT_PARTS.reduce((parts, part) => {
            if (containsTimeUnit(timeUnit, part)) {
                return [...parts, part];
            }
            return parts;
        }, []);
    }
    /** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */
    function containsTimeUnit(fullTimeUnit, timeUnit) {
        const index = fullTimeUnit.indexOf(timeUnit);
        return (index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds
        );
    }
    /**
     * Returns Vega expresssion for a given timeUnit and fieldRef
     */
    function fieldExpr(fullTimeUnit, field) {
        const fieldRef = accessPathWithDatum(field);
        const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';
        function func(timeUnit) {
            if (timeUnit === TimeUnit.QUARTER) {
                // quarter starting at 0 (0,3,6,9).
                return `(${utc}quarter(${fieldRef})-1)`;
            }
            else {
                return `${utc}${timeUnit}(${fieldRef})`;
            }
        }
        const d = TIMEUNIT_PARTS.reduce((dateExpr, tu) => {
            if (containsTimeUnit(fullTimeUnit, tu)) {
                dateExpr[tu] = func(tu);
            }
            return dateExpr;
        }, {});
        return dateTimeExpr(d);
    }
    function getDateTimeComponents(timeUnit, shortTimeLabels) {
        if (!timeUnit) {
            return undefined;
        }
        const dateComponents = [];
        const hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);
        if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {
            // By default use short month name
            dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');
        }
        if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {
            dateComponents.push(shortTimeLabels ? '%a' : '%A');
        }
        else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {
            dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year
        }
        if (hasYear) {
            dateComponents.push(shortTimeLabels ? '%y' : '%Y');
        }
        const timeComponents = [];
        if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {
            timeComponents.push('%H');
        }
        if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {
            timeComponents.push('%M');
        }
        if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {
            timeComponents.push('%S');
        }
        if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {
            timeComponents.push('%L');
        }
        const dateTimeComponents = [];
        if (dateComponents.length > 0) {
            dateTimeComponents.push(dateComponents.join(' '));
        }
        if (timeComponents.length > 0) {
            dateTimeComponents.push(timeComponents.join(':'));
        }
        return dateTimeComponents;
    }
    /**
     * returns the signal expression used for axis labels for a time unit
     */
    function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {
        if (!timeUnit) {
            return undefined;
        }
        const dateTimeComponents = getDateTimeComponents(timeUnit, shortTimeLabels);
        let expression = '';
        if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {
            // special expression for quarter as prefix
            expression = `'Q' + quarter(${field})`;
        }
        if (dateTimeComponents.length > 0) {
            if (expression) {
                // Add space between quarter and main time format
                expression += ` + ' ' + `;
            }
            // We only use utcFormat for utc scale
            // For utc time units, the data is already converted as a part of timeUnit transform.
            // Thus, utc time units should use timeFormat to avoid shifting the time twice.
            if (isUTCScale) {
                expression += `utcFormat(${field}, '${dateTimeComponents.join(' ')}')`;
            }
            else {
                expression += `timeFormat(${field}, '${dateTimeComponents.join(' ')}')`;
            }
        }
        // If expression is still an empty string, return undefined instead.
        return expression || undefined;
    }
    function normalizeTimeUnit(timeUnit) {
        if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {
            warn(message.dayReplacedWithDate(timeUnit));
            return timeUnit.replace('day', 'date');
        }
        return timeUnit;
    }

    /** Constants and utilities for data type */
    /** Data type based on level of measurement */
    var Type;
    (function (Type) {
        Type.QUANTITATIVE = 'quantitative';
        Type.ORDINAL = 'ordinal';
        Type.TEMPORAL = 'temporal';
        Type.NOMINAL = 'nominal';
        Type.GEOJSON = 'geojson';
    })(Type || (Type = {}));
    const TYPE_INDEX = {
        quantitative: 1,
        ordinal: 1,
        temporal: 1,
        nominal: 1,
        geojson: 1
    };
    const QUANTITATIVE = Type.QUANTITATIVE;
    const ORDINAL = Type.ORDINAL;
    const TEMPORAL = Type.TEMPORAL;
    const NOMINAL = Type.NOMINAL;
    const GEOJSON = Type.GEOJSON;
    /**
     * Get full, lowercase type name for a given type.
     * @param  type
     * @return Full type name.
     */
    function getFullName(type) {
        if (type) {
            type = type.toLowerCase();
            switch (type) {
                case 'q':
                case QUANTITATIVE:
                    return 'quantitative';
                case 't':
                case TEMPORAL:
                    return 'temporal';
                case 'o':
                case ORDINAL:
                    return 'ordinal';
                case 'n':
                case NOMINAL:
                    return 'nominal';
                case GEOJSON:
                    return 'geojson';
            }
        }
        // If we get invalid input, return undefined type.
        return undefined;
    }

    function isConditionalSelection(c) {
        return c['selection'];
    }
    function isRepeatRef(field) {
        return field && !isString(field) && 'repeat' in field;
    }
    function toFieldDefBase(fieldDef) {
        const { field, timeUnit, bin, aggregate } = fieldDef;
        return Object.assign({}, (timeUnit ? { timeUnit } : {}), (bin ? { bin } : {}), (aggregate ? { aggregate } : {}), { field });
    }
    function isSortableFieldDef(fieldDef) {
        return isTypedFieldDef(fieldDef) && !!fieldDef['sort'];
    }
    function isConditionalDef(channelDef) {
        return !!channelDef && !!channelDef.condition;
    }
    /**
     * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef
     */
    function hasConditionalFieldDef(channelDef) {
        return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);
    }
    function hasConditionalValueDef(channelDef) {
        return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));
    }
    function isFieldDef(channelDef) {
        return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');
    }
    function isTypedFieldDef(channelDef) {
        return !!channelDef && ((!!channelDef['field'] && !!channelDef['type']) || channelDef['aggregate'] === 'count');
    }
    function isStringFieldDef(channelDef) {
        return isFieldDef(channelDef) && isString(channelDef.field);
    }
    function isValueDef(channelDef) {
        return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;
    }
    function isScaleFieldDef(channelDef) {
        return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);
    }
    function isPositionFieldDef(channelDef) {
        return !!channelDef && (!!channelDef['axis'] || !!channelDef['stack'] || !!channelDef['impute']);
    }
    function isMarkPropFieldDef(channelDef) {
        return !!channelDef && !!channelDef['legend'];
    }
    function isTextFieldDef(channelDef) {
        return !!channelDef && !!channelDef['format'];
    }
    function isOpFieldDef(fieldDef) {
        return !!fieldDef['op'];
    }
    /**
     * Get a Vega field reference from a Vega-Lite field def.
     */
    function vgField(fieldDef, opt = {}) {
        let field = fieldDef.field;
        const prefix = opt.prefix;
        let suffix = opt.suffix;
        if (isCount(fieldDef)) {
            field = internalField('count');
        }
        else {
            let fn;
            if (!opt.nofn) {
                if (isOpFieldDef(fieldDef)) {
                    fn = fieldDef.op;
                }
                else if (isBinning(fieldDef.bin)) {
                    fn = binToString(fieldDef.bin);
                    suffix = (opt.binSuffix || '') + (opt.suffix || '');
                }
                else if (fieldDef.aggregate) {
                    fn = String(fieldDef.aggregate);
                }
                else if (fieldDef.timeUnit) {
                    fn = String(fieldDef.timeUnit);
                }
            }
            if (fn) {
                field = field ? `${fn}_${field}` : fn;
            }
        }
        if (suffix) {
            field = `${field}_${suffix}`;
        }
        if (prefix) {
            field = `${prefix}_${field}`;
        }
        if (opt.forAs) {
            return field;
        }
        else if (opt.expr) {
            // Expression to access flattened field. No need to escape dots.
            return flatAccessWithDatum(field, opt.expr);
        }
        else {
            // We flattened all fields so paths should have become dot.
            return replacePathInField(field);
        }
    }
    function isDiscrete(fieldDef) {
        switch (fieldDef.type) {
            case 'nominal':
            case 'ordinal':
            case 'geojson':
                return true;
            case 'quantitative':
                return !!fieldDef.bin;
            case 'temporal':
                return false;
        }
        throw new Error(message.invalidFieldType(fieldDef.type));
    }
    function isContinuous(fieldDef) {
        return !isDiscrete(fieldDef);
    }
    function isCount(fieldDef) {
        return fieldDef.aggregate === 'count';
    }
    function verbalTitleFormatter(fieldDef, config) {
        const { field: field, bin, timeUnit, aggregate } = fieldDef;
        if (aggregate === 'count') {
            return config.countTitle;
        }
        else if (isBinning(bin)) {
            return `${field} (binned)`;
        }
        else if (timeUnit) {
            const units = getTimeUnitParts(timeUnit).join('-');
            return `${field} (${units})`;
        }
        else if (aggregate) {
            return `${titlecase(aggregate)} of ${field}`;
        }
        return field;
    }
    function functionalTitleFormatter(fieldDef, config) {
        const fn = fieldDef.aggregate || fieldDef.timeUnit || (isBinning(fieldDef.bin) && 'bin');
        if (fn) {
            return fn.toUpperCase() + '(' + fieldDef.field + ')';
        }
        else {
            return fieldDef.field;
        }
    }
    const defaultTitleFormatter = (fieldDef, config) => {
        switch (config.fieldTitle) {
            case 'plain':
                return fieldDef.field;
            case 'functional':
                return functionalTitleFormatter(fieldDef, config);
            default:
                return verbalTitleFormatter(fieldDef, config);
        }
    };
    let titleFormatter = defaultTitleFormatter;
    function setTitleFormatter(formatter) {
        titleFormatter = formatter;
    }
    function resetTitleFormatter() {
        setTitleFormatter(defaultTitleFormatter);
    }
    function title(fieldDef, config, { allowDisabling }) {
        const guide = getGuide(fieldDef) || {};
        const guideTitle = guide.title;
        if (allowDisabling) {
            return getFirstDefined(guideTitle, fieldDef.title, defaultTitle(fieldDef, config));
        }
        else {
            return guideTitle || fieldDef.title || defaultTitle(fieldDef, config);
        }
    }
    function getGuide(fieldDef) {
        if (isPositionFieldDef(fieldDef) && fieldDef.axis) {
            return fieldDef.axis;
        }
        else if (isMarkPropFieldDef(fieldDef) && fieldDef.legend) {
            return fieldDef.legend;
        }
        else if (isFacetFieldDef(fieldDef) && fieldDef.header) {
            return fieldDef.header;
        }
        return undefined;
    }
    function defaultTitle(fieldDef, config) {
        return titleFormatter(fieldDef, config);
    }
    function format(fieldDef) {
        if (isTextFieldDef(fieldDef) && fieldDef.format) {
            return fieldDef.format;
        }
        else {
            const guide = getGuide(fieldDef) || {};
            return guide.format;
        }
    }
    function defaultType(fieldDef, channel) {
        if (fieldDef.timeUnit) {
            return 'temporal';
        }
        if (isBinning(fieldDef.bin)) {
            return 'quantitative';
        }
        switch (rangeType(channel)) {
            case 'continuous':
                return 'quantitative';
            case 'discrete':
                return 'nominal';
            case 'flexible': // color
                return 'nominal';
            default:
                return 'quantitative';
        }
    }
    /**
     * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.
     * @param channelDef
     */
    function getFieldDef(channelDef) {
        if (isFieldDef(channelDef)) {
            return channelDef;
        }
        else if (hasConditionalFieldDef(channelDef)) {
            return channelDef.condition;
        }
        return undefined;
    }
    function getTypedFieldDef(channelDef) {
        if (isFieldDef(channelDef)) {
            return channelDef;
        }
        else if (hasConditionalFieldDef(channelDef)) {
            return channelDef.condition;
        }
        return undefined;
    }
    /**
     * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
     */
    function normalize(channelDef, channel) {
        if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {
            const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';
            warn(message.primitiveChannelDef(channel, primitiveType, channelDef));
            return { value: channelDef };
        }
        // If a fieldDef contains a field, we need type.
        if (isFieldDef(channelDef)) {
            return normalizeFieldDef(channelDef, channel);
        }
        else if (hasConditionalFieldDef(channelDef)) {
            return Object.assign({}, channelDef, { 
                // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>
                condition: normalizeFieldDef(channelDef.condition, channel) });
        }
        return channelDef;
    }
    function normalizeFieldDef(fieldDef, channel) {
        // Drop invalid aggregate
        if (fieldDef.aggregate && !isAggregateOp(fieldDef.aggregate)) {
            const fieldDefWithoutAggregate = __rest(fieldDef, ["aggregate"]);
            warn(message.invalidAggregate(fieldDef.aggregate));
            fieldDef = fieldDefWithoutAggregate;
        }
        // Normalize Time Unit
        if (fieldDef.timeUnit) {
            fieldDef = Object.assign({}, fieldDef, { timeUnit: normalizeTimeUnit(fieldDef.timeUnit) });
        }
        // Normalize bin
        if (isBinning(fieldDef.bin)) {
            fieldDef = Object.assign({}, fieldDef, { bin: normalizeBin(fieldDef.bin, channel) });
        }
        if (isBinned(fieldDef.bin) && !contains(POSITION_SCALE_CHANNELS, channel)) {
            warn(`Channel ${channel} should not be used with "binned" bin`);
        }
        // Normalize Type
        if (isTypedFieldDef(fieldDef)) {
            const fullType = getFullName(fieldDef.type);
            if (fieldDef.type !== fullType) {
                // convert short type to full type
                fieldDef = Object.assign({}, fieldDef, { type: fullType });
            }
            if (fieldDef.type !== 'quantitative') {
                if (isCountingAggregateOp(fieldDef.aggregate)) {
                    warn(message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));
                    fieldDef = Object.assign({}, fieldDef, { type: 'quantitative' });
                }
            }
        }
        else if (!isSecondaryRangeChannel(channel)) {
            // If type is empty / invalid, then augment with default type
            const newType = defaultType(fieldDef, channel);
            warn(message.missingFieldType(channel, newType));
            fieldDef = Object.assign({}, fieldDef, { type: newType });
        }
        if (isTypedFieldDef(fieldDef)) {
            const { compatible, warning } = channelCompatibility(fieldDef, channel);
            if (!compatible) {
                warn(warning);
            }
        }
        return fieldDef;
    }
    function normalizeBin(bin, channel) {
        if (isBoolean(bin)) {
            return { maxbins: autoMaxBins(channel) };
        }
        else if (bin === 'binned') {
            return {
                binned: true
            };
        }
        else if (!bin.maxbins && !bin.step) {
            return Object.assign({}, bin, { maxbins: autoMaxBins(channel) });
        }
        else {
            return bin;
        }
    }
    const COMPATIBLE = { compatible: true };
    function channelCompatibility(fieldDef, channel) {
        const type = fieldDef.type;
        if (type === 'geojson' && channel !== 'shape') {
            return {
                compatible: false,
                warning: `Channel ${channel} should not be used with a geojson data.`
            };
        }
        switch (channel) {
            case 'row':
            case 'column':
            case 'facet':
                if (isContinuous(fieldDef)) {
                    return {
                        compatible: false,
                        warning: message.facetChannelShouldBeDiscrete(channel)
                    };
                }
                return COMPATIBLE;
            case 'x':
            case 'y':
            case 'color':
            case 'fill':
            case 'stroke':
            case 'text':
            case 'detail':
            case 'key':
            case 'tooltip':
            case 'href':
                return COMPATIBLE;
            case 'longitude':
            case 'longitude2':
            case 'latitude':
            case 'latitude2':
                if (type !== QUANTITATIVE) {
                    return {
                        compatible: false,
                        warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`
                    };
                }
                return COMPATIBLE;
            case 'opacity':
            case 'fillOpacity':
            case 'strokeOpacity':
            case 'strokeWidth':
            case 'size':
            case 'x2':
            case 'y2':
                if (type === 'nominal' && !fieldDef['sort']) {
                    return {
                        compatible: false,
                        warning: `Channel ${channel} should not be used with an unsorted discrete field.`
                    };
                }
                return COMPATIBLE;
            case 'shape':
                if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {
                    return {
                        compatible: false,
                        warning: 'Shape channel should be used with only either discrete or geojson data.'
                    };
                }
                return COMPATIBLE;
            case 'order':
                if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {
                    return {
                        compatible: false,
                        warning: `Channel order is inappropriate for nominal field, which has no inherent order.`
                    };
                }
                return COMPATIBLE;
        }
        throw new Error('channelCompatability not implemented for channel ' + channel);
    }
    function isNumberFieldDef(fieldDef) {
        return fieldDef.type === 'quantitative' || isBinning(fieldDef.bin);
    }
    function isTimeFieldDef(fieldDef) {
        return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;
    }
    /**
     * Getting a value associated with a fielddef.
     * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)
     */
    function valueExpr(v, { timeUnit, type, time, undefinedIfExprNotRequired }) {
        let expr;
        if (isDateTime(v)) {
            expr = dateTimeExpr(v, true);
        }
        else if (isString(v) || isNumber(v)) {
            if (timeUnit || type === 'temporal') {
                if (isLocalSingleTimeUnit(timeUnit)) {
                    expr = dateTimeExpr({ [timeUnit]: v }, true);
                }
                else if (isUtcSingleTimeUnit(timeUnit)) {
                    // FIXME is this really correct?
                    expr = valueExpr(v, { timeUnit: getLocalTimeUnit(timeUnit) });
                }
                else {
                    // just pass the string to date function (which will call JS Date.parse())
                    expr = `datetime(${JSON.stringify(v)})`;
                }
            }
        }
        if (expr) {
            return time ? `time(${expr})` : expr;
        }
        // number or boolean or normal string
        return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);
    }
    /**
     * Standardize value array -- convert each value to Vega expression if applicable
     */
    function valueArray(fieldDef, values) {
        const { timeUnit, type } = fieldDef;
        return values.map(v => {
            const expr = valueExpr(v, { timeUnit, type, undefinedIfExprNotRequired: true });
            // return signal for the expression if we need an expression
            if (expr !== undefined) {
                return { signal: expr };
            }
            // otherwise just return the original value
            return v;
        });
    }
    /**
     * Checks whether a fieldDef for a particular channel requires a computed bin range.
     */
    function binRequiresRange(fieldDef, channel) {
        if (!isBinning(fieldDef.bin)) {
            console.warn('Only use this method with binned field defs');
            return false;
        }
        // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.
        // We could check whether the axis or legend exists (not disabled) but that seems overkill.
        return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);
    }

    /**
     * Create a key for the bin configuration. Not for prebinned bin.
     */
    function binToString(bin) {
        if (isBoolean(bin)) {
            bin = normalizeBin(bin, undefined);
        }
        return ('bin' +
            keys(bin)
                .map(p => varName(`_${p}_${bin[p]}`))
                .join(''));
    }
    /**
     * Vega-Lite should bin the data.
     */
    function isBinning(bin) {
        return bin === true || (isBinParams(bin) && !bin.binned);
    }
    /**
     * The data is already binned and so Vega-Lite should not bin it again.
     */
    function isBinned(bin) {
        return bin === 'binned' || (isBinParams(bin) && bin.binned);
    }
    function isBinParams(bin) {
        return isObject(bin);
    }
    function autoMaxBins(channel) {
        switch (channel) {
            case ROW:
            case COLUMN:
            case SIZE:
            case COLOR:
            case FILL:
            case STROKE:
            case STROKEWIDTH:
            case OPACITY:
            case FILLOPACITY:
            case STROKEOPACITY:
            // Facets and Size shouldn't have too many bins
            // We choose 6 like shape to simplify the rule
            case SHAPE:
                return 6; // Vega's "shape" has 6 distinct values
            default:
                return 10;
        }
    }

    function channelHasField(encoding, channel) {
        const channelDef = encoding && encoding[channel];
        if (channelDef) {
            if (isArray(channelDef)) {
                return some(channelDef, fieldDef => !!fieldDef.field);
            }
            else {
                return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);
            }
        }
        return false;
    }
    function isAggregate(encoding) {
        return some(CHANNELS, channel => {
            if (channelHasField(encoding, channel)) {
                const channelDef = encoding[channel];
                if (isArray(channelDef)) {
                    return some(channelDef, fieldDef => !!fieldDef.aggregate);
                }
                else {
                    const fieldDef = getFieldDef(channelDef);
                    return fieldDef && !!fieldDef.aggregate;
                }
            }
            return false;
        });
    }
    function extractTransformsFromEncoding(oldEncoding, config) {
        const groupby = [];
        const bins = [];
        const timeUnits = [];
        const aggregate = [];
        const encoding = {};
        forEach(oldEncoding, (channelDef, channel) => {
            // Extract potential embedded transformations along with remaining properties
            if (isFieldDef(channelDef)) {
                const { field, aggregate: aggOp, timeUnit, bin } = channelDef, remaining = __rest(channelDef, ["field", "aggregate", "timeUnit", "bin"]);
                if (aggOp || timeUnit || bin) {
                    const guide = getGuide(channelDef);
                    const isTitleDefined = guide && guide.title;
                    const newField = vgField(channelDef, { forAs: true });
                    const newChannelDef = Object.assign({}, (isTitleDefined ? [] : { title: title(channelDef, config, { allowDisabling: true }) }), remaining, { 
                        // Always overwrite field
                        field: newField });
                    const isPositionChannel = channel === Channel.X || channel === Channel.Y;
                    if (aggOp && isAggregateOp(aggOp)) {
                        const aggregateEntry = {
                            op: aggOp,
                            as: newField
                        };
                        if (field) {
                            aggregateEntry.field = field;
                        }
                        aggregate.push(aggregateEntry);
                    }
                    else if (isTypedFieldDef(channelDef) && isBinning(bin)) {
                        bins.push({ bin, field, as: newField });
                        // Add additional groupbys for range and end of bins
                        groupby.push(vgField(channelDef, { binSuffix: 'end' }));
                        if (binRequiresRange(channelDef, channel)) {
                            groupby.push(vgField(channelDef, { binSuffix: 'range' }));
                        }
                        // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively
                        if (isPositionChannel) {
                            const secondaryChannel = {
                                field: newField + '_end'
                            };
                            encoding[channel + '2'] = secondaryChannel;
                        }
                        newChannelDef['bin'] = 'binned';
                        if (!isSecondaryRangeChannel(channel)) {
                            newChannelDef['type'] = Type.QUANTITATIVE;
                        }
                    }
                    else if (timeUnit) {
                        timeUnits.push({ timeUnit, field, as: newField });
                        // Add formatting to appropriate property based on the type of channel we're processing
                        const format = getDateTimeComponents(timeUnit, config.axis.shortTimeLabels).join(' ');
                        if (isNonPositionScaleChannel(channel)) {
                            newChannelDef['legend'] = Object.assign({ format }, newChannelDef['legend']);
                        }
                        else if (isPositionChannel) {
                            newChannelDef['axis'] = Object.assign({ format }, newChannelDef['axis']);
                        }
                        else if (channel === 'text' || channel === 'tooltip') {
                            newChannelDef['format'] = newChannelDef['format'] || format;
                        }
                    }
                    if (!aggOp) {
                        groupby.push(newField);
                    }
                    // now the field should refer to post-transformed field instead
                    encoding[channel] = newChannelDef;
                }
                else {
                    groupby.push(field);
                    encoding[channel] = oldEncoding[channel];
                }
            }
            else {
                // For value def, just copy
                encoding[channel] = oldEncoding[channel];
            }
        });
        return {
            bins,
            timeUnits,
            aggregate,
            groupby,
            encoding
        };
    }
    function markChannelCompatible(encoding, channel, mark) {
        const markSupported = supportMark(channel, mark);
        if (!markSupported) {
            return false;
        }
        else if (markSupported === 'binned') {
            const primaryFieldDef = encoding[channel === 'x2' ? 'x' : 'y'];
            // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef
            // has "binned" data and thus need x2/y2 to specify the bin-end field.
            if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && primaryFieldDef.bin === 'binned') {
                return true;
            }
            else {
                return false;
            }
        }
        return true;
    }
    function normalizeEncoding(encoding, mark) {
        return keys(encoding).reduce((normalizedEncoding, channel) => {
            if (!isChannel(channel)) {
                // Drop invalid channel
                warn(message.invalidEncodingChannel(channel));
                return normalizedEncoding;
            }
            if (!markChannelCompatible(encoding, channel, mark)) {
                // Drop unsupported channel
                warn(message.incompatibleChannel(channel, mark));
                return normalizedEncoding;
            }
            // Drop line's size if the field is aggregated.
            if (channel === 'size' && mark === 'line') {
                const fieldDef = getTypedFieldDef(encoding[channel]);
                if (fieldDef && fieldDef.aggregate) {
                    warn(message.LINE_WITH_VARYING_SIZE);
                    return normalizedEncoding;
                }
            }
            // Drop color if either fill or stroke is specified
            if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {
                warn(message.droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));
                return normalizedEncoding;
            }
            const channelDef = encoding[channel];
            if (channel === 'detail' ||
                (channel === 'order' && !isArray(channelDef) && !isValueDef(channelDef)) ||
                (channel === 'tooltip' && isArray(channelDef))) {
                if (channelDef) {
                    // Array of fieldDefs for detail channel (or production rule)
                    normalizedEncoding[channel] = (isArray(channelDef) ? channelDef : [channelDef]).reduce((defs, fieldDef) => {
                        if (!isFieldDef(fieldDef)) {
                            warn(message.emptyFieldDef(fieldDef, channel));
                        }
                        else {
                            defs.push(normalizeFieldDef(fieldDef, channel));
                        }
                        return defs;
                    }, []);
                }
            }
            else {
                if (channel === 'tooltip' && channelDef === null) {
                    // Preserve null so we can use it to disable tooltip
                    normalizedEncoding[channel] = null;
                }
                else if (!isFieldDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef)) {
                    warn(message.emptyFieldDef(channelDef, channel));
                    return normalizedEncoding;
                }
                normalizedEncoding[channel] = normalize(channelDef, channel);
            }
            return normalizedEncoding;
        }, {});
    }
    function fieldDefs(encoding) {
        const arr = [];
        for (const channel of keys(encoding)) {
            if (channelHasField(encoding, channel)) {
                const channelDef = encoding[channel];
                (isArray(channelDef) ? channelDef : [channelDef]).forEach(def => {
                    if (isFieldDef(def)) {
                        arr.push(def);
                    }
                    else if (hasConditionalFieldDef(def)) {
                        arr.push(def.condition);
                    }
                });
            }
        }
        return arr;
    }
    function forEach(mapping, f, thisArg) {
        if (!mapping) {
            return;
        }
        for (const channel of keys(mapping)) {
            const el = mapping[channel];
            if (isArray(el)) {
                el.forEach((channelDef) => {
                    f.call(thisArg, channelDef, channel);
                });
            }
            else {
                f.call(thisArg, el, channel);
            }
        }
    }
    function reduce(mapping, f, init, thisArg) {
        if (!mapping) {
            return init;
        }
        return keys(mapping).reduce((r, channel) => {
            const map = mapping[channel];
            if (isArray(map)) {
                return map.reduce((r1, channelDef) => {
                    return f.call(thisArg, r1, channelDef, channel);
                }, r);
            }
            else {
                return f.call(thisArg, r, map, channel);
            }
        }, init);
    }

    function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {
        const fiveSummaryTooltip = tooltipSummary.map(({ fieldPrefix, titlePrefix }) => ({
            field: fieldPrefix + continuousAxisChannelDef.field,
            type: continuousAxisChannelDef.type,
            title: titlePrefix + (withFieldName ? ' of ' + continuousAxisChannelDef.field : '')
        }));
        return {
            tooltip: [
                ...fiveSummaryTooltip,
                // need to cast because TextFieldDef support fewer types of bin
                ...fieldDefs(encodingWithoutContinuousAxis)
            ]
        };
    }
    function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {
        const { scale, axis } = continuousAxisChannelDef;
        return ({ partName, mark, positionPrefix, endPositionPrefix = undefined, extraEncoding = {} }) => {
            const title = axis && axis.title !== undefined
                ? undefined
                : continuousAxisChannelDef.title !== undefined
                    ? continuousAxisChannelDef.title
                    : continuousAxisChannelDef.field;
            return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {
                mark,
                encoding: Object.assign({ [continuousAxis]: Object.assign({ field: positionPrefix + '_' + continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, (title ? { title } : {}), (scale ? { scale } : {}), (axis ? { axis } : {})) }, (isString(endPositionPrefix)
                    ? {
                        [continuousAxis + '2']: {
                            field: endPositionPrefix + '_' + continuousAxisChannelDef.field,
                            type: continuousAxisChannelDef.type
                        }
                    }
                    : {}), sharedEncoding, extraEncoding)
            });
        };
    }
    function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {
        const { clip, color, opacity } = markDef;
        const mark = markDef.type;
        if (markDef[part] || (markDef[part] === undefined && compositeMarkConfig[part])) {
            return [
                Object.assign({}, partBaseSpec, { mark: Object.assign({}, compositeMarkConfig[part], (clip ? { clip } : {}), (color ? { color } : {}), (opacity ? { opacity } : {}), (isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : { type: partBaseSpec.mark }), { style: `${mark}-${part}` }, (isBoolean(markDef[part]) ? {} : markDef[part])) })
            ];
        }
        return [];
    }
    function compositeMarkContinuousAxis(spec, orient, compositeMark) {
        const { encoding } = spec;
        const continuousAxis = orient === 'vertical' ? 'y' : 'x';
        const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.
        const continuousAxisChannelDef2 = encoding[continuousAxis + '2'];
        const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];
        const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];
        return {
            continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),
            continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),
            continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),
            continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),
            continuousAxis
        };
    }
    function filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {
        if (isFieldDef(continuousAxisChannelDef) && continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {
            const { aggregate } = continuousAxisChannelDef, continuousAxisWithoutAggregate = __rest(continuousAxisChannelDef, ["aggregate"]);
            if (aggregate !== compositeMark) {
                warn(message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));
            }
            return continuousAxisWithoutAggregate;
        }
        else {
            return continuousAxisChannelDef;
        }
    }
    function compositeMarkOrient(spec, compositeMark) {
        const { mark, encoding } = spec;
        if (isFieldDef(encoding.x) && isContinuous(encoding.x)) {
            // x is continuous
            if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {
                // both x and y are continuous
                if (encoding.x.aggregate === undefined && encoding.y.aggregate === compositeMark) {
                    return 'vertical';
                }
                else if (encoding.y.aggregate === undefined && encoding.x.aggregate === compositeMark) {
                    return 'horizontal';
                }
                else if (encoding.x.aggregate === compositeMark && encoding.y.aggregate === compositeMark) {
                    throw new Error('Both x and y cannot have aggregate');
                }
                else {
                    if (isMarkDef(mark) && mark.orient) {
                        return mark.orient;
                    }
                    // default orientation = vertical
                    return 'vertical';
                }
            }
            // x is continuous but y is not
            return 'horizontal';
        }
        else if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {
            // y is continuous but x is not
            return 'vertical';
        }
        else {
            // Neither x nor y is continuous.
            throw new Error('Need a valid continuous axis for ' + compositeMark + 's');
        }
    }

    const BOXPLOT = 'boxplot';
    const BOXPLOT_PART_INDEX = {
        box: 1,
        median: 1,
        outliers: 1,
        rule: 1,
        ticks: 1
    };
    const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);
    const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);
    function getBoxPlotType(extent) {
        if (isNumber(extent)) {
            return 'tukey';
        }
        // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`.  However, I'm not exposing this for now.
        return extent;
    }
    function normalizeBoxPlot(spec, { config }) {
        // TODO: use selection
        const { mark, encoding: _encoding, selection, projection: _p } = spec, outerSpec = __rest(spec, ["mark", "encoding", "selection", "projection"]);
        const markDef = isMarkDef(mark) ? mark : { type: mark };
        // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support
        if (selection) {
            warn(message.selectionNotSupported('boxplot'));
        }
        const extent = markDef.extent || config.boxplot.extent;
        const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);
        const boxPlotType = getBoxPlotType(extent);
        const { transform, continuousAxisChannelDef, continuousAxis, groupby, encodingWithoutContinuousAxis, ticksOrient } = boxParams(spec, extent, config);
        const { color, size } = encodingWithoutContinuousAxis, encodingWithoutSizeColorAndContinuousAxis = __rest(encodingWithoutContinuousAxis, ["color", "size"]);
        const makeBoxPlotPart = (sharedEncoding) => {
            return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);
        };
        const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);
        const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);
        const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis, (size ? { size } : {})));
        const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([
            { fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_', titlePrefix: 'Max' },
            { fieldPrefix: 'upper_box_', titlePrefix: 'Q3' },
            { fieldPrefix: 'mid_box_', titlePrefix: 'Median' },
            { fieldPrefix: 'lower_box_', titlePrefix: 'Q1' },
            { fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_', titlePrefix: 'Min' }
        ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
        // ## Whisker Layers
        const endTick = { type: 'tick', color: 'black', opacity: 1, orient: ticksOrient };
        const whiskerTooltipEncoding = boxPlotType === 'min-max'
            ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker
            : // for tukey / k-IQR, just show upper/lower-whisker
                getCompositeMarkTooltip([
                    { fieldPrefix: 'upper_whisker_', titlePrefix: 'Upper Whisker' },
                    { fieldPrefix: 'lower_whisker_', titlePrefix: 'Lower Whisker' }
                ], continuousAxisChannelDef, encodingWithoutContinuousAxis);
        const whiskerLayers = [
            ...makeBoxPlotExtent({
                partName: 'rule',
                mark: 'rule',
                positionPrefix: 'lower_whisker',
                endPositionPrefix: 'lower_box',
                extraEncoding: whiskerTooltipEncoding
            }),
            ...makeBoxPlotExtent({
                partName: 'rule',
                mark: 'rule',
                positionPrefix: 'upper_box',
                endPositionPrefix: 'upper_whisker',
                extraEncoding: whiskerTooltipEncoding
            }),
            ...makeBoxPlotExtent({
                partName: 'ticks',
                mark: endTick,
                positionPrefix: 'lower_whisker',
                extraEncoding: whiskerTooltipEncoding
            }),
            ...makeBoxPlotExtent({
                partName: 'ticks',
                mark: endTick,
                positionPrefix: 'upper_whisker',
                extraEncoding: whiskerTooltipEncoding
            })
        ];
        // ## Box Layers
        // TODO: support hiding certain mark parts
        const boxLayers = [
            ...(boxPlotType !== 'tukey' ? whiskerLayers : []),
            ...makeBoxPlotBox({
                partName: 'box',
                mark: Object.assign({ type: 'bar' }, (sizeValue ? { size: sizeValue } : {})),
                positionPrefix: 'lower_box',
                endPositionPrefix: 'upper_box',
                extraEncoding: fiveSummaryTooltipEncoding
            }),
            ...makeBoxPlotMidTick({
                partName: 'median',
                mark: Object.assign({ type: 'tick' }, (isObject(config.boxplot.median) && config.boxplot.median.color ? { color: config.boxplot.median.color } : {}), (sizeValue ? { size: sizeValue } : {}), { orient: ticksOrient }),
                positionPrefix: 'mid_box',
                extraEncoding: fiveSummaryTooltipEncoding
            })
        ];
        // ## Filtered Layers
        let filteredLayersMixins;
        if (boxPlotType !== 'min-max') {
            const lowerBoxExpr = 'datum.lower_box_' + continuousAxisChannelDef.field;
            const upperBoxExpr = 'datum.upper_box_' + continuousAxisChannelDef.field;
            const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;
            const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;
            const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;
            const fieldExpr = `datum.${continuousAxisChannelDef.field}`;
            const joinaggregateTransform = {
                joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),
                groupby
            };
            let filteredWhiskerSpec = undefined;
            if (boxPlotType === 'tukey') {
                filteredWhiskerSpec = {
                    transform: [
                        {
                            filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`
                        },
                        {
                            aggregate: [
                                {
                                    op: 'min',
                                    field: continuousAxisChannelDef.field,
                                    as: 'lower_whisker_' + continuousAxisChannelDef.field
                                },
                                {
                                    op: 'max',
                                    field: continuousAxisChannelDef.field,
                                    as: 'upper_whisker_' + continuousAxisChannelDef.field
                                },
                                // preserve lower_box / upper_box
                                {
                                    op: 'min',
                                    field: 'lower_box_' + continuousAxisChannelDef.field,
                                    as: 'lower_box_' + continuousAxisChannelDef.field
                                },
                                {
                                    op: 'max',
                                    field: 'upper_box_' + continuousAxisChannelDef.field,
                                    as: 'upper_box_' + continuousAxisChannelDef.field
                                }
                            ],
                            groupby
                        }
                    ],
                    layer: whiskerLayers
                };
            }
            const outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {
                transform: [{ filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})` }],
                mark: 'point',
                encoding: Object.assign({ [continuousAxis]: {
                        field: continuousAxisChannelDef.field,
                        type: continuousAxisChannelDef.type
                    } }, encodingWithoutSizeColorAndContinuousAxis)
            })[0];
            if (outlierLayersMixins && filteredWhiskerSpec) {
                filteredLayersMixins = {
                    transform: [joinaggregateTransform],
                    layer: [outlierLayersMixins, filteredWhiskerSpec]
                };
            }
            else if (outlierLayersMixins) {
                filteredLayersMixins = outlierLayersMixins;
                filteredLayersMixins.transform.unshift(joinaggregateTransform);
            }
            else if (filteredWhiskerSpec) {
                filteredLayersMixins = filteredWhiskerSpec;
                filteredLayersMixins.transform.unshift(joinaggregateTransform);
            }
        }
        if (filteredLayersMixins) {
            // tukey box plot with outliers included
            return Object.assign({}, outerSpec, { layer: [
                    ...(filteredLayersMixins ? [filteredLayersMixins] : []),
                    {
                        // boxplot
                        transform,
                        layer: boxLayers
                    }
                ] });
        }
        return Object.assign({}, outerSpec, { transform: (outerSpec.transform || []).concat(transform), layer: boxLayers });
    }
    function boxParamsQuartiles(continousAxisField) {
        return [
            {
                op: 'q1',
                field: continousAxisField,
                as: 'lower_box_' + continousAxisField
            },
            {
                op: 'q3',
                field: continousAxisField,
                as: 'upper_box_' + continousAxisField
            }
        ];
    }
    function boxParams(spec, extent, config) {
        const orient = compositeMarkOrient(spec, BOXPLOT);
        const { continuousAxisChannelDef, continuousAxis } = compositeMarkContinuousAxis(spec, orient, BOXPLOT);
        const continuousFieldName = continuousAxisChannelDef.field;
        const boxPlotType = getBoxPlotType(extent);
        const boxplotSpecificAggregate = [
            ...boxParamsQuartiles(continuousFieldName),
            {
                op: 'median',
                field: continuousFieldName,
                as: 'mid_box_' + continuousFieldName
            },
            {
                op: 'min',
                field: continuousFieldName,
                as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName
            },
            {
                op: 'max',
                field: continuousFieldName,
                as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName
            }
        ];
        const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey'
            ? []
            : [
                // This is for the  original k-IQR, which we do not expose
                {
                    calculate: `datum.upper_box_${continuousFieldName} - datum.lower_box_${continuousFieldName}`,
                    as: 'iqr_' + continuousFieldName
                },
                {
                    calculate: `min(datum.upper_box_${continuousFieldName} + datum.iqr_${continuousFieldName} * ${extent}, datum.max_${continuousFieldName})`,
                    as: 'upper_whisker_' + continuousFieldName
                },
                {
                    calculate: `max(datum.lower_box_${continuousFieldName} - datum.iqr_${continuousFieldName} * ${extent}, datum.min_${continuousFieldName})`,
                    as: 'lower_whisker_' + continuousFieldName
                }
            ];
        const _a = spec.encoding, _b = continuousAxis, oldContinuousAxisChannelDef = _a[_b], oldEncodingWithoutContinuousAxis = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
        const { bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);
        const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';
        return {
            transform: [
                ...bins,
                ...timeUnits,
                {
                    aggregate: [...aggregate, ...boxplotSpecificAggregate],
                    groupby
                },
                ...postAggregateCalculates
            ],
            groupby,
            continuousAxisChannelDef,
            continuousAxis,
            encodingWithoutContinuousAxis,
            ticksOrient
        };
    }

    const ERRORBAR = 'errorbar';
    const ERRORBAR_PART_INDEX = {
        ticks: 1,
        rule: 1
    };
    const ERRORBAR_PARTS = keys(ERRORBAR_PART_INDEX);
    const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);
    function normalizeErrorBar(spec, { config }) {
        const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, ticksOrient, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAR, config);
        const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);
        const tick = { type: 'tick', orient: ticksOrient };
        return Object.assign({}, outerSpec, { transform, layer: [
                ...makeErrorBarPart({
                    partName: 'ticks',
                    mark: tick,
                    positionPrefix: 'lower',
                    extraEncoding: tooltipEncoding
                }),
                ...makeErrorBarPart({
                    partName: 'ticks',
                    mark: tick,
                    positionPrefix: 'upper',
                    extraEncoding: tooltipEncoding
                }),
                ...makeErrorBarPart({
                    partName: 'rule',
                    mark: 'rule',
                    positionPrefix: 'lower',
                    endPositionPrefix: 'upper',
                    extraEncoding: tooltipEncoding
                })
            ] });
    }
    function errorBarOrientAndInputType(spec, compositeMark) {
        const { encoding } = spec;
        if (errorBarIsInputTypeRaw(encoding)) {
            return {
                orient: compositeMarkOrient(spec, compositeMark),
                inputType: 'raw'
            };
        }
        const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);
        const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);
        const x = encoding.x;
        const y = encoding.y;
        if (isTypeAggregatedUpperLower) {
            // type is aggregated-upper-lower
            if (isTypeAggregatedError) {
                throw new Error(compositeMark + ' cannot be both type aggregated-upper-lower and aggregated-error');
            }
            const x2 = encoding.x2;
            const y2 = encoding.y2;
            if (isFieldDef(x2) && isFieldDef(y2)) {
                // having both x, x2 and y, y2
                throw new Error(compositeMark + ' cannot have both x2 and y2');
            }
            else if (isFieldDef(x2)) {
                if (isFieldDef(x) && isContinuous(x)) {
                    // having x, x2 quantitative and field y, y2 are not specified
                    return { orient: 'horizontal', inputType: 'aggregated-upper-lower' };
                }
                else {
                    // having x, x2 that are not both quantitative
                    throw new Error('Both x and x2 have to be quantitative in ' + compositeMark);
                }
            }
            else if (isFieldDef(y2)) {
                // y2 is a FieldDef
                if (isFieldDef(y) && isContinuous(y)) {
                    // having y, y2 quantitative and field x, x2 are not specified
                    return { orient: 'vertical', inputType: 'aggregated-upper-lower' };
                }
                else {
                    // having y, y2 that are not both quantitative
                    throw new Error('Both y and y2 have to be quantitative in ' + compositeMark);
                }
            }
            throw new Error('No ranged axis');
        }
        else {
            // type is aggregated-error
            const xError = encoding.xError;
            const xError2 = encoding.xError2;
            const yError = encoding.yError;
            const yError2 = encoding.yError2;
            if (isFieldDef(xError2) && !isFieldDef(xError)) {
                // having xError2 without xError
                throw new Error(compositeMark + ' cannot have xError2 without xError');
            }
            if (isFieldDef(yError2) && !isFieldDef(yError)) {
                // having yError2 without yError
                throw new Error(compositeMark + ' cannot have yError2 without yError');
            }
            if (isFieldDef(xError) && isFieldDef(yError)) {
                // having both xError and yError
                throw new Error(compositeMark + ' cannot have both xError and yError with both are quantiative');
            }
            else if (isFieldDef(xError)) {
                if (isFieldDef(x) && isContinuous(x)) {
                    // having x and xError that are all quantitative
                    return { orient: 'horizontal', inputType: 'aggregated-error' };
                }
                else {
                    // having x, xError, and xError2 that are not all quantitative
                    throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');
                }
            }
            else if (isFieldDef(yError)) {
                if (isFieldDef(y) && isContinuous(y)) {
                    // having y and yError that are all quantitative
                    return { orient: 'vertical', inputType: 'aggregated-error' };
                }
                else {
                    // having y, yError, and yError2 that are not all quantitative
                    throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');
                }
            }
            throw new Error('No ranged axis');
        }
    }
    function errorBarIsInputTypeRaw(encoding) {
        return ((isFieldDef(encoding.x) || isFieldDef(encoding.y)) &&
            !isFieldDef(encoding.x2) &&
            !isFieldDef(encoding.y2) &&
            !isFieldDef(encoding.xError) &&
            !isFieldDef(encoding.xError2) &&
            !isFieldDef(encoding.yError) &&
            !isFieldDef(encoding.yError2));
    }
    function errorBarIsInputTypeAggregatedUpperLower(encoding) {
        return isFieldDef(encoding.x2) || isFieldDef(encoding.y2);
    }
    function errorBarIsInputTypeAggregatedError(encoding) {
        return (isFieldDef(encoding.xError) ||
            isFieldDef(encoding.xError2) ||
            isFieldDef(encoding.yError) ||
            isFieldDef(encoding.yError2));
    }
    function errorBarParams(spec, compositeMark, config) {
        // TODO: use selection
        const { mark, encoding, selection, projection: _p } = spec, outerSpec = __rest(spec, ["mark", "encoding", "selection", "projection"]);
        const markDef = isMarkDef(mark) ? mark : { type: mark };
        // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support
        if (selection) {
            warn(message.selectionNotSupported(compositeMark));
        }
        const { orient, inputType } = errorBarOrientAndInputType(spec, compositeMark);
        const { continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, continuousAxis } = compositeMarkContinuousAxis(spec, orient, compositeMark);
        const { errorBarSpecificAggregate, postAggregateCalculates, tooltipSummary, tooltipTitleWithFieldName } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);
        const _a = continuousAxis, oldContinuousAxisChannelDef = encoding[_a], _b = continuousAxis === 'x' ? 'x2' : 'y2', oldContinuousAxisChannelDef2 = encoding[_b], _c = continuousAxis === 'x' ? 'xError' : 'yError', oldContinuousAxisChannelDefError = encoding[_c], _d = continuousAxis === 'x' ? 'xError2' : 'yError2', oldContinuousAxisChannelDefError2 = encoding[_d], oldEncodingWithoutContinuousAxis = __rest(encoding, [typeof _a === "symbol" ? _a : _a + "", typeof _b === "symbol" ? _b : _b + "", typeof _c === "symbol" ? _c : _c + "", typeof _d === "symbol" ? _d : _d + ""]);
        const { bins, timeUnits, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);
        const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];
        const groupby = inputType !== 'raw' ? [] : oldGroupBy;
        const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);
        return {
            transform: [
                ...(outerSpec.transform || []),
                ...bins,
                ...timeUnits,
                ...(!aggregate.length ? [] : [{ aggregate, groupby }]),
                ...postAggregateCalculates
            ],
            groupby,
            continuousAxisChannelDef,
            continuousAxis,
            encodingWithoutContinuousAxis,
            ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',
            markDef,
            outerSpec,
            tooltipEncoding
        };
    }
    function errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {
        let errorBarSpecificAggregate = [];
        let postAggregateCalculates = [];
        const continuousFieldName = continuousAxisChannelDef.field;
        let tooltipSummary;
        let tooltipTitleWithFieldName = false;
        if (inputType === 'raw') {
            const center = markDef.center
                ? markDef.center
                : markDef.extent
                    ? markDef.extent === 'iqr'
                        ? 'median'
                        : 'mean'
                    : config.errorbar.center;
            const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';
            if ((center === 'median') !== (extent === 'iqr')) {
                warn(message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));
            }
            if (extent === 'stderr' || extent === 'stdev') {
                errorBarSpecificAggregate = [
                    { op: extent, field: continuousFieldName, as: 'extent_' + continuousFieldName },
                    { op: center, field: continuousFieldName, as: 'center_' + continuousFieldName }
                ];
                postAggregateCalculates = [
                    {
                        calculate: `datum.center_${continuousFieldName} + datum.extent_${continuousFieldName}`,
                        as: 'upper_' + continuousFieldName
                    },
                    {
                        calculate: `datum.center_${continuousFieldName} - datum.extent_${continuousFieldName}`,
                        as: 'lower_' + continuousFieldName
                    }
                ];
                tooltipSummary = [
                    { fieldPrefix: 'center_', titlePrefix: titlecase(center) },
                    { fieldPrefix: 'upper_', titlePrefix: getTitlePrefix(center, extent, '+') },
                    { fieldPrefix: 'lower_', titlePrefix: getTitlePrefix(center, extent, '-') }
                ];
                tooltipTitleWithFieldName = true;
            }
            else {
                if (markDef.center && markDef.extent) {
                    warn(message.errorBarCenterIsNotNeeded(markDef.extent, compositeMark));
                }
                let centerOp;
                let lowerExtentOp;
                let upperExtentOp;
                if (extent === 'ci') {
                    centerOp = 'mean';
                    lowerExtentOp = 'ci0';
                    upperExtentOp = 'ci1';
                }
                else {
                    centerOp = 'median';
                    lowerExtentOp = 'q1';
                    upperExtentOp = 'q3';
                }
                errorBarSpecificAggregate = [
                    { op: lowerExtentOp, field: continuousFieldName, as: 'lower_' + continuousFieldName },
                    { op: upperExtentOp, field: continuousFieldName, as: 'upper_' + continuousFieldName },
                    { op: centerOp, field: continuousFieldName, as: 'center_' + continuousFieldName }
                ];
                tooltipSummary = [
                    {
                        fieldPrefix: 'upper_',
                        titlePrefix: title({ field: continuousFieldName, aggregate: upperExtentOp, type: 'quantitative' }, config, {
                            allowDisabling: false
                        })
                    },
                    {
                        fieldPrefix: 'lower_',
                        titlePrefix: title({ field: continuousFieldName, aggregate: lowerExtentOp, type: 'quantitative' }, config, {
                            allowDisabling: false
                        })
                    },
                    {
                        fieldPrefix: 'center_',
                        titlePrefix: title({ field: continuousFieldName, aggregate: centerOp, type: 'quantitative' }, config, {
                            allowDisabling: false
                        })
                    }
                ];
            }
        }
        else {
            if (markDef.center || markDef.extent) {
                warn(message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));
            }
            if (inputType === 'aggregated-upper-lower') {
                tooltipSummary = [];
                postAggregateCalculates = [
                    { calculate: `datum.${continuousAxisChannelDef2.field}`, as: `upper_` + continuousFieldName },
                    { calculate: `datum.${continuousFieldName}`, as: `lower_` + continuousFieldName }
                ];
            }
            else if (inputType === 'aggregated-error') {
                tooltipSummary = [{ fieldPrefix: '', titlePrefix: continuousFieldName }];
                postAggregateCalculates = [
                    {
                        calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError.field}`,
                        as: `upper_` + continuousFieldName
                    }
                ];
                if (continuousAxisChannelDefError2) {
                    postAggregateCalculates.push({
                        calculate: `datum.${continuousFieldName} + datum.${continuousAxisChannelDefError2.field}`,
                        as: `lower_` + continuousFieldName
                    });
                }
                else {
                    postAggregateCalculates.push({
                        calculate: `datum.${continuousFieldName} - datum.${continuousAxisChannelDefError.field}`,
                        as: `lower_` + continuousFieldName
                    });
                }
            }
            for (const postAggregateCalculate of postAggregateCalculates) {
                tooltipSummary.push({
                    fieldPrefix: postAggregateCalculate.as.substring(0, 6),
                    titlePrefix: postAggregateCalculate.calculate.replace(new RegExp('datum.', 'g'), '')
                });
            }
        }
        return { postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName };
    }
    function getTitlePrefix(center, extent, operation) {
        return titlecase(center) + ' ' + operation + ' ' + extent;
    }

    const ERRORBAND = 'errorband';
    const ERRORBAND_PART_INDEX = {
        band: 1,
        borders: 1
    };
    const ERRORBAND_PARTS = keys(ERRORBAND_PART_INDEX);
    const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);
    function normalizeErrorBand(spec, { config }) {
        const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAND, config);
        const makeErrorBandPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);
        const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;
        let bandMark = { type: is2D ? 'area' : 'rect' };
        let bordersMark = { type: is2D ? 'line' : 'rule' };
        const interpolate = Object.assign({}, (markDef.interpolate ? { interpolate: markDef.interpolate } : {}), (markDef.tension && markDef.interpolate ? { interpolate: markDef.tension } : {}));
        if (is2D) {
            bandMark = Object.assign({}, bandMark, interpolate);
            bordersMark = Object.assign({}, bordersMark, interpolate);
        }
        else if (markDef.interpolate) {
            warn(message.errorBand1DNotSupport('interpolate'));
        }
        else if (markDef.tension) {
            warn(message.errorBand1DNotSupport('tension'));
        }
        return Object.assign({}, outerSpec, { transform, layer: [
                ...makeErrorBandPart({
                    partName: 'band',
                    mark: bandMark,
                    positionPrefix: 'lower',
                    endPositionPrefix: 'upper',
                    extraEncoding: tooltipEncoding
                }),
                ...makeErrorBandPart({
                    partName: 'borders',
                    mark: bordersMark,
                    positionPrefix: 'lower',
                    extraEncoding: tooltipEncoding
                }),
                ...makeErrorBandPart({
                    partName: 'borders',
                    mark: bordersMark,
                    positionPrefix: 'upper',
                    extraEncoding: tooltipEncoding
                })
            ] });
    }

    /**
     * Registry index for all composite mark's normalizer
     */
    const compositeMarkRegistry = {};
    function add(mark, run, parts) {
        const normalizer = new CompositeMarkNormalizer(mark, run);
        compositeMarkRegistry[mark] = { normalizer, parts };
    }
    function getAllCompositeMarks() {
        return keys(compositeMarkRegistry);
    }
    add(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);
    add(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);
    add(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);

    const VL_ONLY_GUIDE_CONFIG = ['shortTimeLabels'];
    const VL_ONLY_LEGEND_CONFIG = [
        'gradientHorizontalMaxLength',
        'gradientHorizontalMinLength',
        'gradientVerticalMaxLength',
        'gradientVerticalMinLength'
    ];

    const defaultLegendConfig = {
        gradientHorizontalMaxLength: 200,
        gradientHorizontalMinLength: 100,
        gradientVerticalMaxLength: 200,
        gradientVerticalMinLength: 64 // This is the Vega's minimum.
    };
    const COMMON_LEGEND_PROPERTY_INDEX = {
        clipHeight: 1,
        columnPadding: 1,
        columns: 1,
        cornerRadius: 1,
        direction: 1,
        fillColor: 1,
        format: 1,
        gradientLength: 1,
        gradientOpacity: 1,
        gradientStrokeColor: 1,
        gradientStrokeWidth: 1,
        gradientThickness: 1,
        gridAlign: 1,
        labelAlign: 1,
        labelBaseline: 1,
        labelColor: 1,
        labelFont: 1,
        labelFontSize: 1,
        labelFontStyle: 1,
        labelFontWeight: 1,
        labelLimit: 1,
        labelOffset: 1,
        labelOpacity: 1,
        labelOverlap: 1,
        labelPadding: 1,
        labelSeparation: 1,
        offset: 1,
        orient: 1,
        padding: 1,
        rowPadding: 1,
        strokeColor: 1,
        symbolDash: 1,
        symbolDashOffset: 1,
        symbolFillColor: 1,
        symbolOffset: 1,
        symbolOpacity: 1,
        symbolSize: 1,
        symbolStrokeColor: 1,
        symbolStrokeWidth: 1,
        symbolType: 1,
        tickCount: 1,
        tickMinStep: 1,
        title: 1,
        titleAlign: 1,
        titleAnchor: 1,
        titleBaseline: 1,
        titleColor: 1,
        titleFont: 1,
        titleFontSize: 1,
        titleFontStyle: 1,
        titleFontWeight: 1,
        titleLimit: 1,
        titleOpacity: 1,
        titleOrient: 1,
        titlePadding: 1,
        type: 1,
        values: 1,
        zindex: 1
    };
    const VG_LEGEND_PROPERTY_INDEX = Object.assign({}, COMMON_LEGEND_PROPERTY_INDEX, { 
        // channel scales
        opacity: 1, shape: 1, stroke: 1, fill: 1, size: 1, strokeWidth: 1, 
        // encode
        encode: 1 });
    const LEGEND_PROPERTIES = flagKeys(COMMON_LEGEND_PROPERTY_INDEX);
    const VG_LEGEND_PROPERTIES = flagKeys(VG_LEGEND_PROPERTY_INDEX);

    var ScaleType;
    (function (ScaleType) {
        // Continuous - Quantitative
        ScaleType.LINEAR = 'linear';
        ScaleType.LOG = 'log';
        ScaleType.POW = 'pow';
        ScaleType.SQRT = 'sqrt';
        ScaleType.SYMLOG = 'symlog';
        // Continuous - Time
        ScaleType.TIME = 'time';
        ScaleType.UTC = 'utc';
        // Discretizing scales
        ScaleType.QUANTILE = 'quantile';
        ScaleType.QUANTIZE = 'quantize';
        ScaleType.THRESHOLD = 'threshold';
        ScaleType.BIN_ORDINAL = 'bin-ordinal';
        // Discrete scales
        ScaleType.ORDINAL = 'ordinal';
        ScaleType.POINT = 'point';
        ScaleType.BAND = 'band';
    })(ScaleType || (ScaleType = {}));
    /**
     * Index for scale categories -- only scale of the same categories can be merged together.
     * Current implementation is trying to be conservative and avoid merging scale type that might not work together
     */
    const SCALE_CATEGORY_INDEX = {
        linear: 'numeric',
        log: 'numeric',
        pow: 'numeric',
        sqrt: 'numeric',
        symlog: 'numeric',
        time: 'time',
        utc: 'time',
        ordinal: 'ordinal',
        'bin-ordinal': 'bin-ordinal',
        point: 'ordinal-position',
        band: 'ordinal-position',
        quantile: 'discretizing',
        quantize: 'discretizing',
        threshold: 'discretizing'
    };
    const SCALE_TYPES = keys(SCALE_CATEGORY_INDEX);
    /**
     * Whether the two given scale types can be merged together.
     */
    function scaleCompatible(scaleType1, scaleType2) {
        const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];
        const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];
        return (scaleCategory1 === scaleCategory2 ||
            (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||
            (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time'));
    }
    /**
     * Index for scale precedence -- high score = higher priority for merging.
     */
    const SCALE_PRECEDENCE_INDEX = {
        // numeric
        linear: 0,
        log: 1,
        pow: 1,
        sqrt: 1,
        symlog: 1,
        // time
        time: 0,
        utc: 0,
        // ordinal-position -- these have higher precedence than continuous scales as they support more types of data
        point: 10,
        band: 11,
        // non grouped types
        ordinal: 0,
        'bin-ordinal': 0,
        quantile: 0,
        quantize: 0,
        threshold: 0
    };
    /**
     * Return scale categories -- only scale of the same categories can be merged together.
     */
    function scaleTypePrecedence(scaleType) {
        return SCALE_PRECEDENCE_INDEX[scaleType];
    }
    const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];
    const CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);
    const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];
    const CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);
    const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat([
        'quantile',
        'quantize',
        'threshold'
    ]);
    const CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);
    const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];
    const DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);
    function hasDiscreteDomain(type) {
        return type in DISCRETE_DOMAIN_INDEX;
    }
    function hasContinuousDomain(type) {
        return type in CONTINUOUS_DOMAIN_INDEX;
    }
    function isContinuousToContinuous(type) {
        return type in CONTINUOUS_TO_CONTINUOUS_INDEX;
    }
    function isContinuousToDiscrete(type) {
        return type in CONTINUOUS_TO_DISCRETE_INDEX;
    }
    const defaultScaleConfig = {
        textXRangeStep: 90,
        rangeStep: 20,
        pointPadding: 0.5,
        barBandPaddingInner: 0.1,
        rectBandPaddingInner: 0,
        minBandSize: 2,
        minFontSize: 8,
        maxFontSize: 40,
        minOpacity: 0.3,
        maxOpacity: 0.8,
        // FIXME: revise if these *can* become ratios of rangeStep
        minSize: 9,
        minStrokeWidth: 1,
        maxStrokeWidth: 4,
        quantileCount: 4,
        quantizeCount: 4
    };
    function isExtendedScheme(scheme) {
        return scheme && !!scheme['name'];
    }
    function isSelectionDomain(domain) {
        return domain && domain['selection'];
    }
    const SCALE_PROPERTY_INDEX = {
        type: 1,
        domain: 1,
        range: 1,
        rangeStep: 1,
        scheme: 1,
        bins: 1,
        // Other properties
        reverse: 1,
        round: 1,
        // quantitative / time
        clamp: 1,
        nice: 1,
        // quantitative
        base: 1,
        exponent: 1,
        constant: 1,
        interpolate: 1,
        zero: 1,
        // band/point
        padding: 1,
        paddingInner: 1,
        paddingOuter: 1
    };
    const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = __rest(SCALE_PROPERTY_INDEX, ["type", "domain", "range", "rangeStep", "scheme"]);
    const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = flagKeys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);
    const SCALE_TYPE_INDEX = generateScaleTypeIndex();
    function scaleTypeSupportProperty(scaleType, propName) {
        switch (propName) {
            case 'type':
            case 'domain':
            case 'reverse':
            case 'range':
                return true;
            case 'scheme':
            case 'interpolate':
                return !contains(['point', 'band', 'identity'], scaleType);
            case 'bins':
                return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);
            case 'round':
                return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';
            case 'padding':
                return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);
            case 'paddingOuter':
            case 'rangeStep':
                return contains(['point', 'band'], scaleType);
            case 'paddingInner':
                return scaleType === 'band';
            case 'clamp':
                return isContinuousToContinuous(scaleType);
            case 'nice':
                return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';
            case 'exponent':
                return scaleType === 'pow';
            case 'base':
                return scaleType === 'log';
            case 'constant':
                return scaleType === 'symlog';
            case 'zero':
                return (hasContinuousDomain(scaleType) &&
                    !contains([
                        'log',
                        'time',
                        'utc',
                        'threshold',
                        'quantile' // quantile depends on distribution so zero does not matter
                    ], scaleType));
        }
        /* istanbul ignore next: should never reach here*/
        throw new Error(`Invalid scale property ${propName}.`);
    }
    /**
     * Returns undefined if the input channel supports the input scale property name
     */
    function channelScalePropertyIncompatability(channel, propName) {
        switch (propName) {
            case 'interpolate':
            case 'scheme':
                if (!isColorChannel(channel)) {
                    return message.cannotUseScalePropertyWithNonColor(channel);
                }
                return undefined;
            case 'type':
            case 'bins':
            case 'domain':
            case 'range':
            case 'base':
            case 'exponent':
            case 'constant':
            case 'nice':
            case 'padding':
            case 'paddingInner':
            case 'paddingOuter':
            case 'rangeStep':
            case 'reverse':
            case 'round':
            case 'clamp':
            case 'zero':
                return undefined; // GOOD!
        }
        /* istanbul ignore next: it should never reach here */
        throw new Error(`Invalid scale property "${propName}".`);
    }
    function scaleTypeSupportDataType(specifiedType, fieldDefType) {
        if (contains([Type.ORDINAL, Type.NOMINAL], fieldDefType)) {
            return specifiedType === undefined || hasDiscreteDomain(specifiedType);
        }
        else if (fieldDefType === Type.TEMPORAL) {
            return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);
        }
        else if (fieldDefType === Type.QUANTITATIVE) {
            return contains([
                ScaleType.LOG,
                ScaleType.POW,
                ScaleType.SQRT,
                ScaleType.SYMLOG,
                ScaleType.QUANTILE,
                ScaleType.QUANTIZE,
                ScaleType.THRESHOLD,
                ScaleType.LINEAR,
                undefined
            ], specifiedType);
        }
        return true;
    }
    function channelSupportScaleType(channel, scaleType) {
        switch (channel) {
            case Channel.X:
            case Channel.Y:
                return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);
            case Channel.SIZE: // TODO: size and opacity can support ordinal with more modification
            case Channel.STROKEWIDTH:
            case Channel.OPACITY:
            case Channel.FILLOPACITY:
            case Channel.STROKEOPACITY:
                // Although it generally doesn't make sense to use band with size and opacity,
                // it can also work since we use band: 0.5 to get midpoint.
                return (isContinuousToContinuous(scaleType) ||
                    isContinuousToDiscrete(scaleType) ||
                    contains(['band', 'point'], scaleType));
            case Channel.COLOR:
            case Channel.FILL:
            case Channel.STROKE:
                return scaleType !== 'band'; // band does not make sense with color
            case Channel.SHAPE:
                return scaleType === 'ordinal'; // shape = lookup only
        }
        /* istanbul ignore next: it should never reach here */
        return false;
    }
    // generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes
    function generateScaleTypeIndex() {
        const index = {};
        for (const channel of CHANNELS) {
            for (const fieldDefType of keys(TYPE_INDEX)) {
                for (const scaleType of SCALE_TYPES) {
                    const key = generateScaleTypeIndexKey(channel, fieldDefType);
                    if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {
                        index[key] = index[key] || [];
                        index[key].push(scaleType);
                    }
                }
            }
        }
        return index;
    }
    function generateScaleTypeIndexKey(channel, fieldDefType) {
        return channel + '_' + fieldDefType;
    }

    const SELECTION_ID = '_vgsid_';
    function isIntervalSelection(s) {
        return s.type === 'interval';
    }
    const defaultConfig = {
        single: {
            on: 'click',
            fields: [SELECTION_ID],
            resolve: 'global',
            empty: 'all'
        },
        multi: {
            on: 'click',
            fields: [SELECTION_ID],
            toggle: 'event.shiftKey',
            resolve: 'global',
            empty: 'all'
        },
        interval: {
            on: '[mousedown, window:mouseup] > window:mousemove!',
            encodings: ['x', 'y'],
            translate: '[mousedown, window:mouseup] > window:mousemove!',
            zoom: 'wheel!',
            mark: { fill: '#333', fillOpacity: 0.125, stroke: 'white' },
            resolve: 'global'
        }
    };

    function UniqueList(idFunc) {
      var $ = idFunc || identity,
          list = [],
          ids = {};

      list.add = function(_) {
        var id = $(_);
        if (!ids[id]) {
          ids[id] = 1;
          list.push(_);
        }
        return list;
      };

      list.remove = function(_) {
        var id = $(_), idx;
        if (ids[id]) {
          ids[id] = 0;
          if ((idx = list.indexOf(_)) >= 0) {
            list.splice(idx, 1);
          }
        }
        return list;
      };

      return list;
    }

    /**
     * Invoke and await a potentially async callback function. If
     * an error occurs, trap it and route to Dataflow.error.
     * @param {Dataflow} df - The dataflow instance
     * @param {function} callback - A callback function to invoke
     *   and then await. The dataflow will be passed as the single
     *   argument to the function.
     */
    async function asyncCallback(df, callback) {
      try { await callback(df); } catch (err) { df.error(err); }
    }

    var TUPLE_ID_KEY = Symbol('vega_id'),
        TUPLE_ID = 1;

    /**
     * Checks if an input value is a registered tuple.
     * @param {*} t - The value to check.
     * @return {boolean} True if the input is a tuple, false otherwise.
     */
    function isTuple(t) {
      return !!(t && tupleid(t));
    }

    /**
     * Returns the id of a tuple.
     * @param {object} t - The input tuple.
     * @return {*} the tuple id.
     */
    function tupleid(t) {
      return t[TUPLE_ID_KEY];
    }

    /**
     * Sets the id of a tuple.
     * @param {object} t - The input tuple.
     * @param {*} id - The id value to set.
     * @return {object} the input tuple.
     */
    function setid(t, id) {
      t[TUPLE_ID_KEY] = id;
      return t;
    }

    /**
     * Ingest an object or value as a data tuple.
     * If the input value is an object, an id field will be added to it. For
     * efficiency, the input object is modified directly. A copy is not made.
     * If the input value is a literal, it will be wrapped in a new object
     * instance, with the value accessible as the 'data' property.
     * @param datum - The value to ingest.
     * @return {object} The ingested data tuple.
     */
    function ingest(datum) {
      var t = (datum === Object(datum)) ? datum : {data: datum};
      return tupleid(t) ? t : setid(t, TUPLE_ID++);
    }

    /**
     * Given a source tuple, return a derived copy.
     * @param {object} t - The source tuple.
     * @return {object} The derived tuple.
     */
    function derive(t) {
      return rederive(t, ingest({}));
    }

    /**
     * Rederive a derived tuple by copying values from the source tuple.
     * @param {object} t - The source tuple.
     * @param {object} d - The derived tuple.
     * @return {object} The derived tuple.
     */
    function rederive(t, d) {
      for (var k in t) d[k] = t[k];
      return d;
    }

    /**
     * Replace an existing tuple with a new tuple.
     * @param {object} t - The existing data tuple.
     * @param {object} d - The new tuple that replaces the old.
     * @return {object} The new tuple.
     */
    function replace(t, d) {
      return setid(d, tupleid(t));
    }

    function isChangeSet(v) {
      return v && v.constructor === changeset;
    }

    function changeset() {
      var add = [],  // insert tuples
          rem = [],  // remove tuples
          mod = [],  // modify tuples
          remp = [], // remove by predicate
          modp = [], // modify by predicate
          reflow = false;

      return {
        constructor: changeset,
        insert: function(t) {
          var d = array(t), i = 0, n = d.length;
          for (; i<n; ++i) add.push(d[i]);
          return this;
        },
        remove: function(t) {
          var a = isFunction(t) ? remp : rem,
              d = array(t), i = 0, n = d.length;
          for (; i<n; ++i) a.push(d[i]);
          return this;
        },
        modify: function(t, field, value) {
          var m = {field: field, value: constant(value)};
          if (isFunction(t)) {
            m.filter = t;
            modp.push(m);
          } else {
            m.tuple = t;
            mod.push(m);
          }
          return this;
        },
        encode: function(t, set) {
          if (isFunction(t)) modp.push({filter: t, field: set});
          else mod.push({tuple: t, field: set});
          return this;
        },
        reflow: function() {
          reflow = true;
          return this;
        },
        pulse: function(pulse, tuples) {
          var cur = {}, out = {}, i, n, m, f, t, id;

          // build lookup table of current tuples
          for (i=0, n=tuples.length; i<n; ++i) {
            cur[tupleid(tuples[i])] = 1;
          }

          // process individual tuples to remove
          for (i=0, n=rem.length; i<n; ++i) {
            t = rem[i];
            cur[tupleid(t)] = -1;
          }

          // process predicate-based removals
          for (i=0, n=remp.length; i<n; ++i) {
            f = remp[i];
            tuples.forEach(function(t) {
              if (f(t)) cur[tupleid(t)] = -1;
            });
          }

          // process all add tuples
          for (i=0, n=add.length; i<n; ++i) {
            t = add[i];
            id = tupleid(t);
            if (cur[id]) {
              // tuple already resides in dataset
              // if flagged for both add and remove, cancel
              cur[id] = 1;
            } else {
              // tuple does not reside in dataset, add
              pulse.add.push(ingest(add[i]));
            }
          }

          // populate pulse rem list
          for (i=0, n=tuples.length; i<n; ++i) {
            t = tuples[i];
            if (cur[tupleid(t)] < 0) pulse.rem.push(t);
          }

          // modify helper method
          function modify(t, f, v) {
            if (v) {
              t[f] = v(t);
            } else {
              pulse.encode = f;
            }
            if (!reflow) out[tupleid(t)] = t;
          }

          // process individual tuples to modify
          for (i=0, n=mod.length; i<n; ++i) {
            m = mod[i];
            t = m.tuple;
            f = m.field;
            id = cur[tupleid(t)];
            if (id > 0) {
              modify(t, f, m.value);
              pulse.modifies(f);
            }
          }

          // process predicate-based modifications
          for (i=0, n=modp.length; i<n; ++i) {
            m = modp[i];
            f = m.filter;
            tuples.forEach(function(t) {
              if (f(t) && cur[tupleid(t)] > 0) {
                modify(t, m.field, m.value);
              }
            });
            pulse.modifies(m.field);
          }

          // upon reflow request, populate mod with all non-removed tuples
          // otherwise, populate mod with modified tuples only
          if (reflow) {
            pulse.mod = rem.length || remp.length
              ? tuples.filter(function(t) { return cur[tupleid(t)] > 0; })
              : tuples.slice();
          } else {
            for (id in out) pulse.mod.push(out[id]);
          }

          return pulse;
        }
      };
    }

    var CACHE = '_:mod:_';

    /**
     * Hash that tracks modifications to assigned values.
     * Callers *must* use the set method to update values.
     */
    function Parameters() {
      Object.defineProperty(this, CACHE, {writable: true, value: {}});
    }

    var prototype = Parameters.prototype;

    /**
     * Set a parameter value. If the parameter value changes, the parameter
     * will be recorded as modified.
     * @param {string} name - The parameter name.
     * @param {number} index - The index into an array-value parameter. Ignored if
     *   the argument is undefined, null or less than zero.
     * @param {*} value - The parameter value to set.
     * @param {boolean} [force=false] - If true, records the parameter as modified
     *   even if the value is unchanged.
     * @return {Parameters} - This parameter object.
     */
    prototype.set = function(name, index, value, force) {
      var o = this,
          v = o[name],
          mod = o[CACHE];

      if (index != null && index >= 0) {
        if (v[index] !== value || force) {
          v[index] = value;
          mod[index + ':' + name] = -1;
          mod[name] = -1;
        }
      } else if (v !== value || force) {
        o[name] = value;
        mod[name] = isArray(value) ? 1 + value.length : -1;
      }

      return o;
    };

    /**
     * Tests if one or more parameters has been modified. If invoked with no
     * arguments, returns true if any parameter value has changed. If the first
     * argument is array, returns trues if any parameter name in the array has
     * changed. Otherwise, tests if the given name and optional array index has
     * changed.
     * @param {string} name - The parameter name to test.
     * @param {number} [index=undefined] - The parameter array index to test.
     * @return {boolean} - Returns true if a queried parameter was modified.
     */
    prototype.modified = function(name, index) {
      var mod = this[CACHE], k;
      if (!arguments.length) {
        for (k in mod) { if (mod[k]) return true; }
        return false;
      } else if (isArray(name)) {
        for (k=0; k<name.length; ++k) {
          if (mod[name[k]]) return true;
        }
        return false;
      }
      return (index != null && index >= 0)
        ? (index + 1 < mod[name] || !!mod[index + ':' + name])
        : !!mod[name];
    };

    /**
     * Clears the modification records. After calling this method,
     * all parameters are considered unmodified.
     */
    prototype.clear = function() {
      this[CACHE] = {};
      return this;
    };

    var OP_ID = 0;
    var PULSE = 'pulse';
    var NO_PARAMS = new Parameters();

    // Boolean Flags
    var SKIP     = 1,
        MODIFIED = 2;

    /**
     * An Operator is a processing node in a dataflow graph.
     * Each operator stores a value and an optional value update function.
     * Operators can accept a hash of named parameters. Parameter values can
     * either be direct (JavaScript literals, arrays, objects) or indirect
     * (other operators whose values will be pulled dynamically). Operators
     * included as parameters will have this operator added as a dependency.
     * @constructor
     * @param {*} [init] - The initial value for this operator.
     * @param {function(object, Pulse)} [update] - An update function. Upon
     *   evaluation of this operator, the update function will be invoked and the
     *   return value will be used as the new value of this operator.
     * @param {object} [params] - The parameters for this operator.
     * @param {boolean} [react=true] - Flag indicating if this operator should
     *   listen for changes to upstream operators included as parameters.
     * @see parameters
     */
    function Operator(init, update, params, react) {
      this.id = ++OP_ID;
      this.value = init;
      this.stamp = -1;
      this.rank = -1;
      this.qrank = -1;
      this.flags = 0;

      if (update) {
        this._update = update;
      }
      if (params) this.parameters(params, react);
    }

    var prototype$1 = Operator.prototype;

    /**
     * Returns a list of target operators dependent on this operator.
     * If this list does not exist, it is created and then returned.
     * @return {UniqueList}
     */
    prototype$1.targets = function() {
      return this._targets || (this._targets = UniqueList(id));
    };

    /**
     * Sets the value of this operator.
     * @param {*} value - the value to set.
     * @return {Number} Returns 1 if the operator value has changed
     *   according to strict equality, returns 0 otherwise.
     */
    prototype$1.set = function(value) {
      if (this.value !== value) {
        this.value = value;
        return 1;
      } else {
        return 0;
      }
    };

    function flag(bit) {
      return function(state) {
        var f = this.flags;
        if (arguments.length === 0) return !!(f & bit);
        this.flags = state ? (f | bit) : (f & ~bit);
        return this;
      };
    }

    /**
     * Indicates that operator evaluation should be skipped on the next pulse.
     * This operator will still propagate incoming pulses, but its update function
     * will not be invoked. The skip flag is reset after every pulse, so calling
     * this method will affect processing of the next pulse only.
     */
    prototype$1.skip = flag(SKIP);

    /**
     * Indicates that this operator's value has been modified on its most recent
     * pulse. Normally modification is checked via strict equality; however, in
     * some cases it is more efficient to update the internal state of an object.
     * In those cases, the modified flag can be used to trigger propagation. Once
     * set, the modification flag persists across pulses until unset. The flag can
     * be used with the last timestamp to test if a modification is recent.
     */
    prototype$1.modified = flag(MODIFIED);

    /**
     * Sets the parameters for this operator. The parameter values are analyzed for
     * operator instances. If found, this operator will be added as a dependency
     * of the parameterizing operator. Operator values are dynamically marshalled
     * from each operator parameter prior to evaluation. If a parameter value is
     * an array, the array will also be searched for Operator instances. However,
     * the search does not recurse into sub-arrays or object properties.
     * @param {object} params - A hash of operator parameters.
     * @param {boolean} [react=true] - A flag indicating if this operator should
     *   automatically update (react) when parameter values change. In other words,
     *   this flag determines if the operator registers itself as a listener on
     *   any upstream operators included in the parameters.
     * @param {boolean} [initonly=false] - A flag indicating if this operator
     *   should calculate an update only upon its initiatal evaluation, then
     *   deregister dependencies and suppress all future update invocations.
     * @return {Operator[]} - An array of upstream dependencies.
     */
    prototype$1.parameters = function(params, react, initonly) {
      react = react !== false;
      var self = this,
          argval = (self._argval = self._argval || new Parameters()),
          argops = (self._argops = self._argops || []),
          deps = [],
          name, value, n, i;

      function add(name, index, value) {
        if (value instanceof Operator) {
          if (value !== self) {
            if (react) value.targets().add(self);
            deps.push(value);
          }
          argops.push({op:value, name:name, index:index});
        } else {
          argval.set(name, index, value);
        }
      }

      for (name in params) {
        value = params[name];

        if (name === PULSE) {
          array(value).forEach(function(op) {
            if (!(op instanceof Operator)) {
              error('Pulse parameters must be operator instances.');
            } else if (op !== self) {
              op.targets().add(self);
              deps.push(op);
            }
          });
          self.source = value;
        } else if (isArray(value)) {
          argval.set(name, -1, Array(n = value.length));
          for (i=0; i<n; ++i) add(name, i, value[i]);
        } else {
          add(name, -1, value);
        }
      }

      this.marshall().clear(); // initialize values
      if (initonly) argops.initonly = true;

      return deps;
    };

    /**
     * Internal method for marshalling parameter values.
     * Visits each operator dependency to pull the latest value.
     * @return {Parameters} A Parameters object to pass to the update function.
     */
    prototype$1.marshall = function(stamp) {
      var argval = this._argval || NO_PARAMS,
          argops = this._argops, item, i, n, op, mod;

      if (argops) {
        for (i=0, n=argops.length; i<n; ++i) {
          item = argops[i];
          op = item.op;
          mod = op.modified() && op.stamp === stamp;
          argval.set(item.name, item.index, op.value, mod);
        }

        if (argops.initonly) {
          for (i=0; i<n; ++i) {
            item = argops[i];
            item.op.targets().remove(this);
          }
          this._argops = null;
          this._update = null;
        }
      }
      return argval;
    };

    /**
     * Delegate method to perform operator processing.
     * Subclasses can override this method to perform custom processing.
     * By default, it marshalls parameters and calls the update function
     * if that function is defined. If the update function does not
     * change the operator value then StopPropagation is returned.
     * If no update function is defined, this method does nothing.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return The output pulse or StopPropagation. A falsy return value
     *   (including undefined) will let the input pulse pass through.
     */
    prototype$1.evaluate = function(pulse) {
      var update = this._update;
      if (update) {
        var params = this.marshall(pulse.stamp),
            v = update.call(this, params, pulse);

        params.clear();
        if (v !== this.value) {
          this.value = v;
        } else if (!this.modified()) {
          return pulse.StopPropagation;
        }
      }
    };

    /**
     * Run this operator for the current pulse. If this operator has already
     * been run at (or after) the pulse timestamp, returns StopPropagation.
     * Internally, this method calls {@link evaluate} to perform processing.
     * If {@link evaluate} returns a falsy value, the input pulse is returned.
     * This method should NOT be overridden, instead overrride {@link evaluate}.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return the output pulse for this operator (or StopPropagation)
     */
    prototype$1.run = function(pulse) {
      if (pulse.stamp <= this.stamp) return pulse.StopPropagation;
      var rv;
      if (this.skip()) {
        this.skip(false);
        rv = 0;
      } else {
        rv = this.evaluate(pulse);
      }
      this.stamp = pulse.stamp;
      return (this.pulse = rv || pulse);
    };

    /**
     * Add an operator to the dataflow graph. This function accepts a
     * variety of input argument types. The basic signature supports an
     * initial value, update function and parameters. If the first parameter
     * is an Operator instance, it will be added directly. If it is a
     * constructor for an Operator subclass, a new instance will be instantiated.
     * Otherwise, if the first parameter is a function instance, it will be used
     * as the update function and a null initial value is assumed.
     * @param {*} init - One of: the operator to add, the initial value of
     *   the operator, an operator class to instantiate, or an update function.
     * @param {function} [update] - The operator update function.
     * @param {object} [params] - The operator parameters.
     * @param {boolean} [react=true] - Flag indicating if this operator should
     *   listen for changes to upstream operators included as parameters.
     * @return {Operator} - The added operator.
     */
    function add$1(init, update, params, react) {
      var shift = 1,
        op;

      if (init instanceof Operator) {
        op = init;
      } else if (init && init.prototype instanceof Operator) {
        op = new init();
      } else if (isFunction(init)) {
        op = new Operator(null, init);
      } else {
        shift = 0;
        op = new Operator(init, update);
      }

      this.rank(op);
      if (shift) {
        react = params;
        params = update;
      }
      if (params) this.connect(op, op.parameters(params, react));
      this.touch(op);

      return op;
    }

    /**
     * Connect a target operator as a dependent of source operators.
     * If necessary, this method will rerank the target operator and its
     * dependents to ensure propagation proceeds in a topologically sorted order.
     * @param {Operator} target - The target operator.
     * @param {Array<Operator>} - The source operators that should propagate
     *   to the target operator.
     */
    function connect(target, sources) {
      var targetRank = target.rank, i, n;

      for (i=0, n=sources.length; i<n; ++i) {
        if (targetRank < sources[i].rank) {
          this.rerank(target);
          return;
        }
      }
    }

    var STREAM_ID = 0;

    /**
     * Models an event stream.
     * @constructor
     * @param {function(Object, number): boolean} [filter] - Filter predicate.
     *   Events pass through when truthy, events are suppressed when falsy.
     * @param {function(Object): *} [apply] - Applied to input events to produce
     *   new event values.
     * @param {function(Object)} [receive] - Event callback function to invoke
     *   upon receipt of a new event. Use to override standard event processing.
     */
    function EventStream(filter, apply, receive) {
      this.id = ++STREAM_ID;
      this.value = null;
      if (receive) this.receive = receive;
      if (filter) this._filter = filter;
      if (apply) this._apply = apply;
    }

    /**
     * Creates a new event stream instance with the provided
     * (optional) filter, apply and receive functions.
     * @param {function(Object, number): boolean} [filter] - Filter predicate.
     *   Events pass through when truthy, events are suppressed when falsy.
     * @param {function(Object): *} [apply] - Applied to input events to produce
     *   new event values.
     * @see EventStream
     */
    function stream(filter, apply, receive) {
      return new EventStream(filter, apply, receive);
    }

    var prototype$2 = EventStream.prototype;

    prototype$2._filter = truthy;

    prototype$2._apply = identity;

    prototype$2.targets = function() {
      return this._targets || (this._targets = UniqueList(id));
    };

    prototype$2.consume = function(_) {
      if (!arguments.length) return !!this._consume;
      this._consume = !!_;
      return this;
    };

    prototype$2.receive = function(evt) {
      if (this._filter(evt)) {
        var val = (this.value = this._apply(evt)),
            trg = this._targets,
            n = trg ? trg.length : 0,
            i = 0;

        for (; i<n; ++i) trg[i].receive(val);

        if (this._consume) {
          evt.preventDefault();
          evt.stopPropagation();
        }
      }
    };

    prototype$2.filter = function(filter) {
      var s = stream(filter);
      this.targets().add(s);
      return s;
    };

    prototype$2.apply = function(apply) {
      var s = stream(null, apply);
      this.targets().add(s);
      return s;
    };

    prototype$2.merge = function() {
      var s = stream();

      this.targets().add(s);
      for (var i=0, n=arguments.length; i<n; ++i) {
        arguments[i].targets().add(s);
      }

      return s;
    };

    prototype$2.throttle = function(pause) {
      var t = -1;
      return this.filter(function() {
        var now = Date.now();
        if ((now - t) > pause) {
          t = now;
          return 1;
        } else {
          return 0;
        }
      });
    };

    prototype$2.debounce = function(delay) {
      var s = stream();

      this.targets().add(stream(null, null,
        debounce(delay, function(e) {
          var df = e.dataflow;
          s.receive(e);
          if (df && df.run) df.run();
        })
      ));

      return s;
    };

    prototype$2.between = function(a, b) {
      var active = false;
      a.targets().add(stream(null, null, function() { active = true; }));
      b.targets().add(stream(null, null, function() { active = false; }));
      return this.filter(function() { return active; });
    };

    /**
     * Create a new event stream from an event source.
     * @param {object} source - The event source to monitor. The input must
     *  support the addEventListener method.
     * @param {string} type - The event type.
     * @param {function(object): boolean} [filter] - Event filter function.
     * @param {function(object): *} [apply] - Event application function.
     *   If provided, this function will be invoked and the result will be
     *   used as the downstream event value.
     * @return {EventStream}
     */
    function events(source, type, filter, apply) {
      var df = this,
          s = stream(filter, apply),
          send = function(e) {
            e.dataflow = df;
            try {
              s.receive(e);
            } catch (error) {
              df.error(error);
            } finally {
              df.run();
            }
          },
          sources;

      if (typeof source === 'string' && typeof document !== 'undefined') {
        sources = document.querySelectorAll(source);
      } else {
        sources = array(source);
      }

      for (var i=0, n=sources.length; i<n; ++i) {
        sources[i].addEventListener(type, send);
      }

      return s;
    }

    // Matches absolute URLs with optional protocol
    //   https://...    file://...    //...
    var protocol_re = /^([A-Za-z]+:)?\/\//;

    // Special treatment in node.js for the file: protocol
    var fileProtocol = 'file://';

    /**
     * Factory for a loader constructor that provides methods for requesting
     * files from either the network or disk, and for sanitizing request URIs.
     * @param {function} fetch - The Fetch API for HTTP network requests.
     *   If null or undefined, HTTP loading will be disabled.
     * @param {object} fs - The file system interface for file loading.
     *   If null or undefined, local file loading will be disabled.
     * @return {function} A loader constructor with the following signature:
     *   param {object} [options] - Optional default loading options to use.
     *   return {object} - A new loader instance.
     */
    function loaderFactory(fetch, fs) {
      return function(options) {
        return {
          options: options || {},
          sanitize: sanitize,
          load: load,
          fileAccess: !!fs,
          file: fileLoader(fs),
          http: httpLoader(fetch)
        };
      };
    }

    /**
     * Load an external resource, typically either from the web or from the local
     * filesystem. This function uses {@link sanitize} to first sanitize the uri,
     * then calls either {@link http} (for web requests) or {@link file} (for
     * filesystem loading).
     * @param {string} uri - The resource indicator (e.g., URL or filename).
     * @param {object} [options] - Optional loading options. These options will
     *   override any existing default options.
     * @return {Promise} - A promise that resolves to the loaded content.
     */
    async function load(uri, options) {
      const opt = await this.sanitize(uri, options),
            url = opt.href;

      return opt.localFile
        ? this.file(url)
        : this.http(url, options);
    }

    /**
     * URI sanitizer function.
     * @param {string} uri - The uri (url or filename) to sanity check.
     * @param {object} options - An options hash.
     * @return {Promise} - A promise that resolves to an object containing
     *  sanitized uri data, or rejects it the input uri is deemed invalid.
     *  The properties of the resolved object are assumed to be
     *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
     *  provided by the 'href' property of the returned object.
     */
    async function sanitize(uri, options) {
      options = extend({}, this.options, options);

      const fileAccess = this.fileAccess,
            result = {href: null};

      let isFile, hasProtocol, loadFile, base;

      if (uri == null || typeof uri !== 'string') {
        error('Sanitize failure, invalid URI: ' + $(uri));
      }

      hasProtocol = protocol_re.test(uri);

      // if relative url (no protocol/host), prepend baseURL
      if ((base = options.baseURL) && !hasProtocol) {
        // Ensure that there is a slash between the baseURL (e.g. hostname) and url
        if (!uri.startsWith('/') && base[base.length-1] !== '/') {
          uri = '/' + uri;
        }
        uri = base + uri;
      }

      // should we load from file system?
      loadFile = (isFile = uri.startsWith(fileProtocol))
        || options.mode === 'file'
        || options.mode !== 'http' && !hasProtocol && fileAccess;

      if (isFile) {
        // strip file protocol
        uri = uri.slice(fileProtocol.length);
      } else if (uri.startsWith('//')) {
        if (options.defaultProtocol === 'file') {
          // if is file, strip protocol and set loadFile flag
          uri = uri.slice(2);
          loadFile = true;
        } else {
          // if relative protocol (starts with '//'), prepend default protocol
          uri = (options.defaultProtocol || 'http') + ':' + uri;
        }
      }

      // set non-enumerable mode flag to indicate local file load
      Object.defineProperty(result, 'localFile', {value: !!loadFile});

      // set uri
      result.href = uri;

      // set default result target, if specified
      if (options.target) {
        result.target = options.target + '';
      }

      // set default result rel, if specified (#1542)
      if (options.rel) {
        result.rel = options.rel + '';
      }

      // return
      return result;
    }

    /**
     * File system loader factory.
     * @param {object} fs - The file system interface.
     * @return {function} - A file loader with the following signature:
     *   param {string} filename - The file system path to load.
     *   param {string} filename - The file system path to load.
     *   return {Promise} A promise that resolves to the file contents.
     */
    function fileLoader(fs) {
      return fs
        ? function(filename) {
            return new Promise(function(accept, reject) {
              fs.readFile(filename, function(error, data) {
                if (error) reject(error);
                else accept(data);
              });
            });
          }
        : fileReject;
    }

    /**
     * Default file system loader that simply rejects.
     */
    async function fileReject() {
      error('No file system access.');
    }

    /**
     * HTTP request handler factory.
     * @param {function} fetch - The Fetch API method.
     * @return {function} - An http loader with the following signature:
     *   param {string} url - The url to request.
     *   param {object} options - An options hash.
     *   return {Promise} - A promise that resolves to the file contents.
     */
    function httpLoader(fetch) {
      return fetch
        ? async function(url, options) {
            const opt = extend({}, this.options.http, options),
                  type = options && options.response,
                  response = await fetch(url, opt);

            return !response.ok
              ? error(response.status + '' + response.statusText)
              : isFunction(response[type]) ? response[type]()
              : response.text();
          }
        : httpReject;
    }

    /**
     * Default http request handler that simply rejects.
     */
    async function httpReject() {
      error('No HTTP fetch method available.');
    }

    var typeParsers = {
      boolean: toBoolean,
      integer: toNumber,
      number:  toNumber,
      date:    toDate,
      string:  toString,
      unknown: identity
    };

    var typeTests = [
      isBoolean$2,
      isInteger,
      isNumber$1,
      isDate$1
    ];

    var typeList = [
      'boolean',
      'integer',
      'number',
      'date'
    ];

    function inferType(values, field) {
      if (!values || !values.length) return 'unknown';

      var value, i, j, t = 0,
          n = values.length,
          m = typeTests.length,
          a = typeTests.map(function(_, i) { return i + 1; });

      for (i=0, n=values.length; i<n; ++i) {
        value = field ? values[i][field] : values[i];
        for (j=0; j<m; ++j) {
          if (a[j] && isValid(value) && !typeTests[j](value)) {
            a[j] = 0;
            ++t;
            if (t === typeTests.length) return 'string';
          }
        }
      }

      t = a.reduce(function(u, v) { return u === 0 ? v : u; }, 0) - 1;
      return typeList[t];
    }

    function inferTypes(data, fields) {
      return fields.reduce(function(types, field) {
        types[field] = inferType(data, field);
        return types;
      }, {});
    }

    // -- Type Checks ----

    function isValid(_) {
      return _ != null && _ === _;
    }

    function isBoolean$2(_) {
      return _ === 'true' || _ === 'false' || _ === true || _ === false;
    }

    function isDate$1(_) {
      return !isNaN(Date.parse(_));
    }

    function isNumber$1(_) {
      return !isNaN(+_) && !(_ instanceof Date);
    }

    function isInteger(_) {
      return isNumber$1(_) && (_=+_) === ~~_;
    }

    var EOL = {},
        EOF = {},
        QUOTE = 34,
        NEWLINE = 10,
        RETURN = 13;

    function objectConverter(columns) {
      return new Function("d", "return {" + columns.map(function(name, i) {
        return JSON.stringify(name) + ": d[" + i + "]";
      }).join(",") + "}");
    }

    function customConverter(columns, f) {
      var object = objectConverter(columns);
      return function(row, i) {
        return f(object(row), i, columns);
      };
    }

    // Compute unique columns in order of discovery.
    function inferColumns(rows) {
      var columnSet = Object.create(null),
          columns = [];

      rows.forEach(function(row) {
        for (var column in row) {
          if (!(column in columnSet)) {
            columns.push(columnSet[column] = column);
          }
        }
      });

      return columns;
    }

    function pad$1(value, width) {
      var s = value + "", length = s.length;
      return length < width ? new Array(width - length + 1).join(0) + s : s;
    }

    function formatYear(year) {
      return year < 0 ? "-" + pad$1(-year, 6)
        : year > 9999 ? "+" + pad$1(year, 6)
        : pad$1(year, 4);
    }

    function formatDate(date) {
      var hours = date.getUTCHours(),
          minutes = date.getUTCMinutes(),
          seconds = date.getUTCSeconds(),
          milliseconds = date.getUTCMilliseconds();
      return isNaN(date) ? "Invalid Date"
          : formatYear(date.getUTCFullYear(), 4) + "-" + pad$1(date.getUTCMonth() + 1, 2) + "-" + pad$1(date.getUTCDate(), 2)
          + (milliseconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "." + pad$1(milliseconds, 3) + "Z"
          : seconds ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + ":" + pad$1(seconds, 2) + "Z"
          : minutes || hours ? "T" + pad$1(hours, 2) + ":" + pad$1(minutes, 2) + "Z"
          : "");
    }

    function dsvFormat(delimiter) {
      var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
          DELIMITER = delimiter.charCodeAt(0);

      function parse(text, f) {
        var convert, columns, rows = parseRows(text, function(row, i) {
          if (convert) return convert(row, i - 1);
          columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
        rows.columns = columns || [];
        return rows;
      }

      function parseRows(text, f) {
        var rows = [], // output rows
            N = text.length,
            I = 0, // current character index
            n = 0, // current line number
            t, // current token
            eof = N <= 0, // current token followed by EOF?
            eol = false; // current token followed by EOL?

        // Strip the trailing newline.
        if (text.charCodeAt(N - 1) === NEWLINE) --N;
        if (text.charCodeAt(N - 1) === RETURN) --N;

        function token() {
          if (eof) return EOF;
          if (eol) return eol = false, EOL;

          // Unescape quotes.
          var i, j = I, c;
          if (text.charCodeAt(j) === QUOTE) {
            while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
            if ((i = I) >= N) eof = true;
            else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            return text.slice(j + 1, i - 1).replace(/""/g, "\"");
          }

          // Find next delimiter or newline.
          while (I < N) {
            if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
            else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
            else if (c !== DELIMITER) continue;
            return text.slice(j, i);
          }

          // Return last token before EOF.
          return eof = true, text.slice(j, N);
        }

        while ((t = token()) !== EOF) {
          var row = [];
          while (t !== EOL && t !== EOF) row.push(t), t = token();
          if (f && (row = f(row, n++)) == null) continue;
          rows.push(row);
        }

        return rows;
      }

      function preformatBody(rows, columns) {
        return rows.map(function(row) {
          return columns.map(function(column) {
            return formatValue(row[column]);
          }).join(delimiter);
        });
      }

      function format(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join("\n");
      }

      function formatBody(rows, columns) {
        if (columns == null) columns = inferColumns(rows);
        return preformatBody(rows, columns).join("\n");
      }

      function formatRows(rows) {
        return rows.map(formatRow).join("\n");
      }

      function formatRow(row) {
        return row.map(formatValue).join(delimiter);
      }

      function formatValue(value) {
        return value == null ? ""
            : value instanceof Date ? formatDate(value)
            : reFormat.test(value += "") ? "\"" + value.replace(/"/g, "\"\"") + "\""
            : value;
      }

      return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatBody: formatBody,
        formatRows: formatRows
      };
    }

    var csv = dsvFormat(",");

    var tsv = dsvFormat("\t");

    function delimitedFormat(delimiter) {
      const parse = function(data, format) {
        const delim = {delimiter: delimiter};
        return dsv(data, format ? extend(format, delim) : delim);
      };

      parse.responseType = 'text';

      return parse;
    }

    function dsv(data, format) {
      if (format.header) {
        data = format.header
          .map($)
          .join(format.delimiter) + '\n' + data;
      }
      return dsvFormat(format.delimiter).parse(data + '');
    }

    dsv.responseType = 'text';

    function isBuffer(_) {
      return (typeof Buffer === 'function' && isFunction(Buffer.isBuffer))
        ? Buffer.isBuffer(_) : false;
    }

    function json(data, format) {
      const prop = (format && format.property) ? field(format.property) : identity;
      return isObject(data) && !isBuffer(data)
        ? parseJSON(prop(data))
        : prop(JSON.parse(data));
    }

    json.responseType = 'json';

    function parseJSON(data, format) {
      return (format && format.copy)
        ? JSON.parse(JSON.stringify(data))
        : data;
    }

    function identity$1(x) {
      return x;
    }

    function transform(transform) {
      if (transform == null) return identity$1;
      var x0,
          y0,
          kx = transform.scale[0],
          ky = transform.scale[1],
          dx = transform.translate[0],
          dy = transform.translate[1];
      return function(input, i) {
        if (!i) x0 = y0 = 0;
        var j = 2, n = input.length, output = new Array(n);
        output[0] = (x0 += input[0]) * kx + dx;
        output[1] = (y0 += input[1]) * ky + dy;
        while (j < n) output[j] = input[j], ++j;
        return output;
      };
    }

    function reverse(array, n) {
      var t, j = array.length, i = j - n;
      while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
    }

    function feature(topology, o) {
      return o.type === "GeometryCollection"
          ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature$1(topology, o); })}
          : feature$1(topology, o);
    }

    function feature$1(topology, o) {
      var id = o.id,
          bbox = o.bbox,
          properties = o.properties == null ? {} : o.properties,
          geometry = object(topology, o);
      return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}
          : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}
          : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};
    }

    function object(topology, o) {
      var transformPoint = transform(topology.transform),
          arcs = topology.arcs;

      function arc(i, points) {
        if (points.length) points.pop();
        for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
          points.push(transformPoint(a[k], k));
        }
        if (i < 0) reverse(points, n);
      }

      function point(p) {
        return transformPoint(p);
      }

      function line(arcs) {
        var points = [];
        for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
        if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
        return points;
      }

      function ring(arcs) {
        var points = line(arcs);
        while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
        return points;
      }

      function polygon(arcs) {
        return arcs.map(ring);
      }

      function geometry(o) {
        var type = o.type, coordinates;
        switch (type) {
          case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};
          case "Point": coordinates = point(o.coordinates); break;
          case "MultiPoint": coordinates = o.coordinates.map(point); break;
          case "LineString": coordinates = line(o.arcs); break;
          case "MultiLineString": coordinates = o.arcs.map(line); break;
          case "Polygon": coordinates = polygon(o.arcs); break;
          case "MultiPolygon": coordinates = o.arcs.map(polygon); break;
          default: return null;
        }
        return {type: type, coordinates: coordinates};
      }

      return geometry(o);
    }

    function stitch(topology, arcs) {
      var stitchedArcs = {},
          fragmentByStart = {},
          fragmentByEnd = {},
          fragments = [],
          emptyIndex = -1;

      // Stitch empty arcs first, since they may be subsumed by other arcs.
      arcs.forEach(function(i, j) {
        var arc = topology.arcs[i < 0 ? ~i : i], t;
        if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
          t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
        }
      });

      arcs.forEach(function(i) {
        var e = ends(i),
            start = e[0],
            end = e[1],
            f, g;

        if (f = fragmentByEnd[start]) {
          delete fragmentByEnd[f.end];
          f.push(i);
          f.end = end;
          if (g = fragmentByStart[end]) {
            delete fragmentByStart[g.start];
            var fg = g === f ? f : f.concat(g);
            fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
          } else {
            fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
          }
        } else if (f = fragmentByStart[end]) {
          delete fragmentByStart[f.start];
          f.unshift(i);
          f.start = start;
          if (g = fragmentByEnd[start]) {
            delete fragmentByEnd[g.end];
            var gf = g === f ? f : g.concat(f);
            fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
          } else {
            fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
          }
        } else {
          f = [i];
          fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
        }
      });

      function ends(i) {
        var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
        if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
        else p1 = arc[arc.length - 1];
        return i < 0 ? [p1, p0] : [p0, p1];
      }

      function flush(fragmentByEnd, fragmentByStart) {
        for (var k in fragmentByEnd) {
          var f = fragmentByEnd[k];
          delete fragmentByStart[f.start];
          delete f.start;
          delete f.end;
          f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
          fragments.push(f);
        }
      }

      flush(fragmentByEnd, fragmentByStart);
      flush(fragmentByStart, fragmentByEnd);
      arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });

      return fragments;
    }

    function mesh(topology) {
      return object(topology, meshArcs.apply(this, arguments));
    }

    function meshArcs(topology, object, filter) {
      var arcs, i, n;
      if (arguments.length > 1) arcs = extractArcs(topology, object, filter);
      else for (i = 0, arcs = new Array(n = topology.arcs.length); i < n; ++i) arcs[i] = i;
      return {type: "MultiLineString", arcs: stitch(topology, arcs)};
    }

    function extractArcs(topology, object, filter) {
      var arcs = [],
          geomsByArc = [],
          geom;

      function extract0(i) {
        var j = i < 0 ? ~i : i;
        (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
      }

      function extract1(arcs) {
        arcs.forEach(extract0);
      }

      function extract2(arcs) {
        arcs.forEach(extract1);
      }

      function extract3(arcs) {
        arcs.forEach(extract2);
      }

      function geometry(o) {
        switch (geom = o, o.type) {
          case "GeometryCollection": o.geometries.forEach(geometry); break;
          case "LineString": extract1(o.arcs); break;
          case "MultiLineString": case "Polygon": extract2(o.arcs); break;
          case "MultiPolygon": extract3(o.arcs); break;
        }
      }

      geometry(object);

      geomsByArc.forEach(filter == null
          ? function(geoms) { arcs.push(geoms[0].i); }
          : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });

      return arcs;
    }

    function topojson(data, format) {
      var method, object, property;
      data = json(data, format);

      method = (format && (property = format.feature)) ? feature
        : (format && (property = format.mesh)) ? mesh
        : error('Missing TopoJSON feature or mesh parameter.');

      object = (object = data.objects[property])
        ? method(data, object)
        : error('Invalid TopoJSON object: ' + property);

      return object && object.features || [object];
    }

    topojson.responseType = 'json';

    const format$1 = {
      dsv: dsv,
      csv: delimitedFormat(','),
      tsv: delimitedFormat('\t'),
      json: json,
      topojson: topojson
    };

    function formats(name, reader) {
      if (arguments.length > 1) {
        format$1[name] = reader;
        return this;
      } else {
        return format$1.hasOwnProperty(name) ? format$1[name] : null;
      }
    }

    function responseType(type) {
      const f = formats(type);
      return f && f.responseType || 'text';
    }

    var t0 = new Date,
        t1 = new Date;

    function newInterval(floori, offseti, count, field) {

      function interval(date) {
        return floori(date = new Date(+date)), date;
      }

      interval.floor = interval;

      interval.ceil = function(date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
      };

      interval.round = function(date) {
        var d0 = interval(date),
            d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
      };

      interval.offset = function(date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
      };

      interval.range = function(start, stop, step) {
        var range = [], previous;
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
      };

      interval.filter = function(test) {
        return newInterval(function(date) {
          if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
        }, function(date, step) {
          if (date >= date) {
            if (step < 0) while (++step <= 0) {
              while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
            } else while (--step >= 0) {
              while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
            }
          }
        });
      };

      if (count) {
        interval.count = function(start, end) {
          t0.setTime(+start), t1.setTime(+end);
          floori(t0), floori(t1);
          return Math.floor(count(t0, t1));
        };

        interval.every = function(step) {
          step = Math.floor(step);
          return !isFinite(step) || !(step > 0) ? null
              : !(step > 1) ? interval
              : interval.filter(field
                  ? function(d) { return field(d) % step === 0; }
                  : function(d) { return interval.count(0, d) % step === 0; });
        };
      }

      return interval;
    }

    var millisecond = newInterval(function() {
      // noop
    }, function(date, step) {
      date.setTime(+date + step);
    }, function(start, end) {
      return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = function(k) {
      k = Math.floor(k);
      if (!isFinite(k) || !(k > 0)) return null;
      if (!(k > 1)) return millisecond;
      return newInterval(function(date) {
        date.setTime(Math.floor(date / k) * k);
      }, function(date, step) {
        date.setTime(+date + step * k);
      }, function(start, end) {
        return (end - start) / k;
      });
    };
    var milliseconds = millisecond.range;

    var durationSecond = 1e3;
    var durationMinute = 6e4;
    var durationHour = 36e5;
    var durationDay = 864e5;
    var durationWeek = 6048e5;

    var second = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds());
    }, function(date, step) {
      date.setTime(+date + step * durationSecond);
    }, function(start, end) {
      return (end - start) / durationSecond;
    }, function(date) {
      return date.getUTCSeconds();
    });
    var seconds = second.range;

    var minute = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getMinutes();
    });
    var minutes = minute.range;

    var hour = newInterval(function(date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getHours();
    });
    var hours = hour.range;

    var day = newInterval(function(date) {
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setDate(date.getDate() + step);
    }, function(start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
    }, function(date) {
      return date.getDate() - 1;
    });
    var days = day.range;

    function weekday(i) {
      return newInterval(function(date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setDate(date.getDate() + step * 7);
      }, function(start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
      });
    }

    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    var sundays = sunday.range;
    var mondays = monday.range;
    var thursdays = thursday.range;

    var month = newInterval(function(date) {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setMonth(date.getMonth() + step);
    }, function(start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
      return date.getMonth();
    });
    var months = month.range;

    var year = newInterval(function(date) {
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setFullYear(date.getFullYear() + step * k);
      });
    };
    var years = year.range;

    var utcMinute = newInterval(function(date) {
      date.setUTCSeconds(0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationMinute);
    }, function(start, end) {
      return (end - start) / durationMinute;
    }, function(date) {
      return date.getUTCMinutes();
    });
    var utcMinutes = utcMinute.range;

    var utcHour = newInterval(function(date) {
      date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
      date.setTime(+date + step * durationHour);
    }, function(start, end) {
      return (end - start) / durationHour;
    }, function(date) {
      return date.getUTCHours();
    });
    var utcHours = utcHour.range;

    var utcDay = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / durationDay;
    }, function(date) {
      return date.getUTCDate() - 1;
    });
    var utcDays = utcDay.range;

    function utcWeekday(i) {
      return newInterval(function(date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
      }, function(start, end) {
        return (end - start) / durationWeek;
      });
    }

    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);

    var utcSundays = utcSunday.range;
    var utcMondays = utcMonday.range;
    var utcThursdays = utcThursday.range;

    var utcMonth = newInterval(function(date) {
      date.setUTCDate(1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
      return date.getUTCMonth();
    });
    var utcMonths = utcMonth.range;

    var utcYear = newInterval(function(date) {
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = function(k) {
      return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
      }, function(date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
      });
    };
    var utcYears = utcYear.range;

    function localDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
      }
      return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }

    function utcDate(d) {
      if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
      }
      return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }

    function newYear(y) {
      return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
    }

    function formatLocale(locale) {
      var locale_dateTime = locale.dateTime,
          locale_date = locale.date,
          locale_time = locale.time,
          locale_periods = locale.periods,
          locale_weekdays = locale.days,
          locale_shortWeekdays = locale.shortDays,
          locale_months = locale.months,
          locale_shortMonths = locale.shortMonths;

      var periodRe = formatRe(locale_periods),
          periodLookup = formatLookup(locale_periods),
          weekdayRe = formatRe(locale_weekdays),
          weekdayLookup = formatLookup(locale_weekdays),
          shortWeekdayRe = formatRe(locale_shortWeekdays),
          shortWeekdayLookup = formatLookup(locale_shortWeekdays),
          monthRe = formatRe(locale_months),
          monthLookup = formatLookup(locale_months),
          shortMonthRe = formatRe(locale_shortMonths),
          shortMonthLookup = formatLookup(locale_shortMonths);

      var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear$1,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
      };

      var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
      };

      var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
      };

      // These recursive directive definitions must be deferred.
      formats.x = newFormat(locale_date, formats);
      formats.X = newFormat(locale_time, formats);
      formats.c = newFormat(locale_dateTime, formats);
      utcFormats.x = newFormat(locale_date, utcFormats);
      utcFormats.X = newFormat(locale_time, utcFormats);
      utcFormats.c = newFormat(locale_dateTime, utcFormats);

      function newFormat(specifier, formats) {
        return function(date) {
          var string = [],
              i = -1,
              j = 0,
              n = specifier.length,
              c,
              pad,
              format;

          if (!(date instanceof Date)) date = new Date(+date);

          while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
              string.push(specifier.slice(j, i));
              if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
              else pad = c === "e" ? " " : "0";
              if (format = formats[c]) c = format(date, pad);
              string.push(c);
              j = i + 1;
            }
          }

          string.push(specifier.slice(j, i));
          return string.join("");
        };
      }

      function newParse(specifier, newDate) {
        return function(string) {
          var d = newYear(1900),
              i = parseSpecifier(d, specifier, string += "", 0),
              week, day$1;
          if (i != string.length) return null;

          // If a UNIX timestamp is specified, return it.
          if ("Q" in d) return new Date(d.Q);

          // The am-pm flag is 0 for AM, and 1 for PM.
          if ("p" in d) d.H = d.H % 12 + d.p * 12;

          // Convert day-of-week and week-of-year to day-of-year.
          if ("V" in d) {
            if (d.V < 1 || d.V > 53) return null;
            if (!("w" in d)) d.w = 1;
            if ("Z" in d) {
              week = utcDate(newYear(d.y)), day$1 = week.getUTCDay();
              week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
              week = utcDay.offset(week, (d.V - 1) * 7);
              d.y = week.getUTCFullYear();
              d.m = week.getUTCMonth();
              d.d = week.getUTCDate() + (d.w + 6) % 7;
            } else {
              week = newDate(newYear(d.y)), day$1 = week.getDay();
              week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
              week = day.offset(week, (d.V - 1) * 7);
              d.y = week.getFullYear();
              d.m = week.getMonth();
              d.d = week.getDate() + (d.w + 6) % 7;
            }
          } else if ("W" in d || "U" in d) {
            if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
            day$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
            d.m = 0;
            d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
          }

          // If a time zone is specified, all fields are interpreted as UTC and then
          // offset according to the specified time zone.
          if ("Z" in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
          }

          // Otherwise, all fields are in local time.
          return newDate(d);
        };
      }

      function parseSpecifier(d, specifier, string, j) {
        var i = 0,
            n = specifier.length,
            m = string.length,
            c,
            parse;

        while (i < n) {
          if (j >= m) return -1;
          c = specifier.charCodeAt(i++);
          if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
          } else if (c != string.charCodeAt(j++)) {
            return -1;
          }
        }

        return j;
      }

      function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
      }

      function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
      }

      function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
      }

      function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
      }

      function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
      }

      function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
      }

      function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
      }

      function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
      }

      function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
      }

      function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
      }

      function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
      }

      function formatMonth(d) {
        return locale_months[d.getMonth()];
      }

      function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
      }

      function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
      }

      function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
      }

      function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
      }

      function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
      }

      function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
      }

      return {
        format: function(specifier) {
          var f = newFormat(specifier += "", formats);
          f.toString = function() { return specifier; };
          return f;
        },
        parse: function(specifier) {
          var p = newParse(specifier += "", localDate);
          p.toString = function() { return specifier; };
          return p;
        },
        utcFormat: function(specifier) {
          var f = newFormat(specifier += "", utcFormats);
          f.toString = function() { return specifier; };
          return f;
        },
        utcParse: function(specifier) {
          var p = newParse(specifier, utcDate);
          p.toString = function() { return specifier; };
          return p;
        }
      };
    }

    var pads = {"-": "", "_": " ", "0": "0"},
        numberRe = /^\s*\d+/, // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;

    function pad$2(value, fill, width) {
      var sign = value < 0 ? "-" : "",
          string = (sign ? -value : value) + "",
          length = string.length;
      return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }

    function requote(s) {
      return s.replace(requoteRe, "\\$&");
    }

    function formatRe(names) {
      return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }

    function formatLookup(names) {
      var map = {}, i = -1, n = names.length;
      while (++i < n) map[names[i].toLowerCase()] = i;
      return map;
    }

    function parseWeekdayNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.w = +n[0], i + n[0].length) : -1;
    }

    function parseWeekdayNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 1));
      return n ? (d.u = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberSunday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.U = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberISO(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.V = +n[0], i + n[0].length) : -1;
    }

    function parseWeekNumberMonday(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.W = +n[0], i + n[0].length) : -1;
    }

    function parseFullYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 4));
      return n ? (d.y = +n[0], i + n[0].length) : -1;
    }

    function parseYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }

    function parseZone(d, string, i) {
      var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
      return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }

    function parseMonthNumber(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }

    function parseDayOfMonth(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.d = +n[0], i + n[0].length) : -1;
    }

    function parseDayOfYear(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }

    function parseHour24(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.H = +n[0], i + n[0].length) : -1;
    }

    function parseMinutes(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.M = +n[0], i + n[0].length) : -1;
    }

    function parseSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 2));
      return n ? (d.S = +n[0], i + n[0].length) : -1;
    }

    function parseMilliseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 3));
      return n ? (d.L = +n[0], i + n[0].length) : -1;
    }

    function parseMicroseconds(d, string, i) {
      var n = numberRe.exec(string.slice(i, i + 6));
      return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }

    function parseLiteralPercent(d, string, i) {
      var n = percentRe.exec(string.slice(i, i + 1));
      return n ? i + n[0].length : -1;
    }

    function parseUnixTimestamp(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }

    function parseUnixTimestampSeconds(d, string, i) {
      var n = numberRe.exec(string.slice(i));
      return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
    }

    function formatDayOfMonth(d, p) {
      return pad$2(d.getDate(), p, 2);
    }

    function formatHour24(d, p) {
      return pad$2(d.getHours(), p, 2);
    }

    function formatHour12(d, p) {
      return pad$2(d.getHours() % 12 || 12, p, 2);
    }

    function formatDayOfYear(d, p) {
      return pad$2(1 + day.count(year(d), d), p, 3);
    }

    function formatMilliseconds(d, p) {
      return pad$2(d.getMilliseconds(), p, 3);
    }

    function formatMicroseconds(d, p) {
      return formatMilliseconds(d, p) + "000";
    }

    function formatMonthNumber(d, p) {
      return pad$2(d.getMonth() + 1, p, 2);
    }

    function formatMinutes(d, p) {
      return pad$2(d.getMinutes(), p, 2);
    }

    function formatSeconds(d, p) {
      return pad$2(d.getSeconds(), p, 2);
    }

    function formatWeekdayNumberMonday(d) {
      var day = d.getDay();
      return day === 0 ? 7 : day;
    }

    function formatWeekNumberSunday(d, p) {
      return pad$2(sunday.count(year(d), d), p, 2);
    }

    function formatWeekNumberISO(d, p) {
      var day = d.getDay();
      d = (day >= 4 || day === 0) ? thursday(d) : thursday.ceil(d);
      return pad$2(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
    }

    function formatWeekdayNumberSunday(d) {
      return d.getDay();
    }

    function formatWeekNumberMonday(d, p) {
      return pad$2(monday.count(year(d), d), p, 2);
    }

    function formatYear$1(d, p) {
      return pad$2(d.getFullYear() % 100, p, 2);
    }

    function formatFullYear(d, p) {
      return pad$2(d.getFullYear() % 10000, p, 4);
    }

    function formatZone(d) {
      var z = d.getTimezoneOffset();
      return (z > 0 ? "-" : (z *= -1, "+"))
          + pad$2(z / 60 | 0, "0", 2)
          + pad$2(z % 60, "0", 2);
    }

    function formatUTCDayOfMonth(d, p) {
      return pad$2(d.getUTCDate(), p, 2);
    }

    function formatUTCHour24(d, p) {
      return pad$2(d.getUTCHours(), p, 2);
    }

    function formatUTCHour12(d, p) {
      return pad$2(d.getUTCHours() % 12 || 12, p, 2);
    }

    function formatUTCDayOfYear(d, p) {
      return pad$2(1 + utcDay.count(utcYear(d), d), p, 3);
    }

    function formatUTCMilliseconds(d, p) {
      return pad$2(d.getUTCMilliseconds(), p, 3);
    }

    function formatUTCMicroseconds(d, p) {
      return formatUTCMilliseconds(d, p) + "000";
    }

    function formatUTCMonthNumber(d, p) {
      return pad$2(d.getUTCMonth() + 1, p, 2);
    }

    function formatUTCMinutes(d, p) {
      return pad$2(d.getUTCMinutes(), p, 2);
    }

    function formatUTCSeconds(d, p) {
      return pad$2(d.getUTCSeconds(), p, 2);
    }

    function formatUTCWeekdayNumberMonday(d) {
      var dow = d.getUTCDay();
      return dow === 0 ? 7 : dow;
    }

    function formatUTCWeekNumberSunday(d, p) {
      return pad$2(utcSunday.count(utcYear(d), d), p, 2);
    }

    function formatUTCWeekNumberISO(d, p) {
      var day = d.getUTCDay();
      d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);
      return pad$2(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
    }

    function formatUTCWeekdayNumberSunday(d) {
      return d.getUTCDay();
    }

    function formatUTCWeekNumberMonday(d, p) {
      return pad$2(utcMonday.count(utcYear(d), d), p, 2);
    }

    function formatUTCYear(d, p) {
      return pad$2(d.getUTCFullYear() % 100, p, 2);
    }

    function formatUTCFullYear(d, p) {
      return pad$2(d.getUTCFullYear() % 10000, p, 4);
    }

    function formatUTCZone() {
      return "+0000";
    }

    function formatLiteralPercent() {
      return "%";
    }

    function formatUnixTimestamp(d) {
      return +d;
    }

    function formatUnixTimestampSeconds(d) {
      return Math.floor(+d / 1000);
    }

    var locale;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;

    defaultLocale({
      dateTime: "%x, %X",
      date: "%-m/%-d/%Y",
      time: "%-I:%M:%S %p",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });

    function defaultLocale(definition) {
      locale = formatLocale(definition);
      timeFormat = locale.format;
      timeParse = locale.parse;
      utcFormat = locale.utcFormat;
      utcParse = locale.utcParse;
      return locale;
    }

    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

    function formatIsoNative(date) {
      return date.toISOString();
    }

    var formatIso = Date.prototype.toISOString
        ? formatIsoNative
        : utcFormat(isoSpecifier);

    function parseIsoNative(string) {
      var date = new Date(string);
      return isNaN(date) ? null : date;
    }

    var parseIso = +new Date("2000-01-01T00:00:00.000Z")
        ? parseIsoNative
        : utcParse(isoSpecifier);

    function read(data, schema, dateParse) {
      schema = schema || {};

      const reader = formats(schema.type || 'json');
      if (!reader) error('Unknown data format type: ' + schema.type);

      data = reader(data, schema);
      if (schema.parse) parse(data, schema.parse, dateParse);

      if (data.hasOwnProperty('columns')) delete data.columns;
      return data;
    }

    function parse(data, types, dateParse) {
      if (!data.length) return; // early exit for empty data

      dateParse = dateParse || timeParse;

      var fields = data.columns || Object.keys(data[0]),
          parsers, datum, field, i, j, n, m;

      if (types === 'auto') types = inferTypes(data, fields);

      fields = Object.keys(types);
      parsers = fields.map(function(field) {
        var type = types[field],
            parts, pattern;

        if (type && (type.indexOf('date:') === 0 || type.indexOf('utc:') === 0)) {
          parts = type.split(/:(.+)?/, 2);  // split on first :
          pattern = parts[1];

          if ((pattern[0] === '\'' && pattern[pattern.length-1] === '\'') ||
              (pattern[0] === '"'  && pattern[pattern.length-1] === '"')) {
            pattern = pattern.slice(1, -1);
          }

          return parts[0] === 'utc' ? utcParse(pattern) : dateParse(pattern);
        }

        if (!typeParsers[type]) {
          throw Error('Illegal format pattern: ' + field + ':' + type);
        }

        return typeParsers[type];
      });

      for (i=0, n=data.length, m=fields.length; i<n; ++i) {
        datum = data[i];
        for (j=0; j<m; ++j) {
          field = fields[j];
          datum[field] = parsers[j](datum[field]);
        }
      }
    }

    var loader = loaderFactory(
      typeof fetch !== 'undefined' && fetch, // use built-in fetch API
      null // no file system access
    );

    const parse$1 = read;

    /**
     * Ingests new data into the dataflow. First parses the data using the
     * vega-loader read method, then pulses a changeset to the target operator.
     * @param {Operator} target - The Operator to target with ingested data,
     *   typically a Collect transform instance.
     * @param {*} data - The input data, prior to parsing. For JSON this may
     *   be a string or an object. For CSV, TSV, etc should be a string.
     * @param {object} format - The data format description for parsing
     *   loaded data. This object is passed to the vega-loader read method.
     * @returns {Dataflow}
     */
    function ingest$1(target, data, format) {
      return this.pulse(target, this.changeset().insert(parse$1(data, format)));
    }

    /**
     * Request data from an external source, parse it, and return a Promise.
     * @param {string} url - The URL from which to load the data. This string
     *   is passed to the vega-loader load method.
     * @param {object} [format] - The data format description for parsing
     *   loaded data. This object is passed to the vega-loader read method.
     * @return {Promise} A Promise that resolves upon completion of the request.
     *   The resolved object contains the following properties:
     *   - data: an array of parsed data (or null upon error)
     *   - status: a code for success (0), load fail (-1), or parse fail (-2)
     */
    async function request(url, format) {
      const df = this;
      let status = 0, data;

      try {
        data = await df.loader().load(url, {
          context: 'dataflow',
          response: responseType(format && format.type)
        });
        try {
          data = parse$1(data, format);
        } catch (err) {
          status = -2;
          df.warn('Data ingestion failed', url, err);
        }
      } catch (err) {
        status = -1;
        df.warn('Loading failed', url, err);
      }

      return {data, status};
    }

    async function preload(target, url, format) {
      const df = this,
            pending = df._pending || loadPending(df);

      pending.requests += 1;

      const res = await df.request(url, format);
      df.pulse(target, df.changeset().remove(truthy).insert(res.data || []));

      pending.done();
      return res;
    }

    function loadPending(df) {
      var pending = new Promise(function(a) { accept = a; }),
          accept;

      pending.requests = 0;

      pending.done = function() {
        if (--pending.requests === 0) {
          df._pending = null;
          accept(df);
        }
      };

      return (df._pending = pending);
    }

    var SKIP$1 = {skip: true};

    /**
     * Perform operator updates in response to events. Applies an
     * update function to compute a new operator value. If the update function
     * returns a {@link ChangeSet}, the operator will be pulsed with those tuple
     * changes. Otherwise, the operator value will be updated to the return value.
     * @param {EventStream|Operator} source - The event source to react to.
     *   This argument can be either an EventStream or an Operator.
     * @param {Operator|function(object):Operator} target - The operator to update.
     *   This argument can either be an Operator instance or (if the source
     *   argument is an EventStream), a function that accepts an event object as
     *   input and returns an Operator to target.
     * @param {function(Parameters,Event): *} [update] - Optional update function
     *   to compute the new operator value, or a literal value to set. Update
     *   functions expect to receive a parameter object and event as arguments.
     *   This function can either return a new operator value or (if the source
     *   argument is an EventStream) a {@link ChangeSet} instance to pulse
     *   the target operator with tuple changes.
     * @param {object} [params] - The update function parameters.
     * @param {object} [options] - Additional options hash. If not overridden,
     *   updated operators will be skipped by default.
     * @param {boolean} [options.skip] - If true, the operator will
     *  be skipped: it will not be evaluated, but its dependents will be.
     * @param {boolean} [options.force] - If true, the operator will
     *   be re-evaluated even if its value has not changed.
     * @return {Dataflow}
     */
    function on(source, target, update, params, options) {
      var fn = source instanceof Operator ? onOperator : onStream;
      fn(this, source, target, update, params, options);
      return this;
    }

    function onStream(df, stream, target, update, params, options) {
      var opt = extend({}, options, SKIP$1), func, op;

      if (!isFunction(target)) target = constant(target);

      if (update === undefined) {
        func = function(e) {
          df.touch(target(e));
        };
      } else if (isFunction(update)) {
        op = new Operator(null, update, params, false);
        func = function(e) {
          var v, t = target(e);
          op.evaluate(e);
          isChangeSet(v = op.value) ? df.pulse(t, v, options) : df.update(t, v, opt);
        };
      } else {
        func = function(e) {
          df.update(target(e), update, opt);
        };
      }

      stream.apply(func);
    }

    function onOperator(df, source, target, update, params, options) {
      var func, op;

      if (update === undefined) {
        op = target;
      } else {
        func = isFunction(update) ? update : constant(update);
        update = !target ? func : function(_, pulse) {
          var value = func(_, pulse);
          if (!target.skip()) {
            target.skip(value !== this.value).value = value;
          }
          return value;
        };

        op = new Operator(null, update, params, false);
        op.modified(options && options.force);
        op.rank = 0;

        if (target) {
          op.skip(true); // skip first invocation
          op.value = target.value;
          op.targets().add(target);
        }
      }

      source.targets().add(op);
    }

    /**
     * Assigns a rank to an operator. Ranks are assigned in increasing order
     * by incrementing an internal rank counter.
     * @param {Operator} op - The operator to assign a rank.
     */
    function rank(op) {
      op.rank = ++this._rank;
    }

    /**
     * Re-ranks an operator and all downstream target dependencies. This
     * is necessary when upstream depencies of higher rank are added to
     * a target operator.
     * @param {Operator} op - The operator to re-rank.
     */
    function rerank(op) {
      var queue = [op],
          cur, list, i;

      while (queue.length) {
        this.rank(cur = queue.pop());
        if (list = cur._targets) {
          for (i=list.length; --i >= 0;) {
            queue.push(cur = list[i]);
            if (cur === op) error('Cycle detected in dataflow graph.');
          }
        }
      }
    }

    /**
     * Sentinel value indicating pulse propagation should stop.
     */
    var StopPropagation = {};

    // Pulse visit type flags
    var ADD       = (1 << 0),
        REM       = (1 << 1),
        MOD       = (1 << 2),
        ADD_REM   = ADD | REM,
        ADD_MOD   = ADD | MOD,
        ALL       = ADD | REM | MOD,
        REFLOW    = (1 << 3),
        SOURCE    = (1 << 4),
        NO_SOURCE = (1 << 5),
        NO_FIELDS = (1 << 6);

    /**
     * A Pulse enables inter-operator communication during a run of the
     * dataflow graph. In addition to the current timestamp, a pulse may also
     * contain a change-set of added, removed or modified data tuples, as well as
     * a pointer to a full backing data source. Tuple change sets may not
     * be fully materialized; for example, to prevent needless array creation
     * a change set may include larger arrays and corresponding filter functions.
     * The pulse provides a {@link visit} method to enable proper and efficient
     * iteration over requested data tuples.
     *
     * In addition, each pulse can track modification flags for data tuple fields.
     * Responsible transform operators should call the {@link modifies} method to
     * indicate changes to data fields. The {@link modified} method enables
     * querying of this modification state.
     *
     * @constructor
     * @param {Dataflow} dataflow - The backing dataflow instance.
     * @param {number} stamp - The current propagation timestamp.
     * @param {string} [encode] - An optional encoding set name, which is then
     *   accessible as Pulse.encode. Operators can respond to (or ignore) this
     *   setting as appropriate. This parameter can be used in conjunction with
     *   the Encode transform in the vega-encode module.
     */
    function Pulse(dataflow, stamp, encode) {
      this.dataflow = dataflow;
      this.stamp = stamp == null ? -1 : stamp;
      this.add = [];
      this.rem = [];
      this.mod = [];
      this.fields = null;
      this.encode = encode || null;
    }

    var prototype$3 = Pulse.prototype;

    /**
     * Sentinel value indicating pulse propagation should stop.
     */
    prototype$3.StopPropagation = StopPropagation;

    /**
     * Boolean flag indicating ADD (added) tuples.
     */
    prototype$3.ADD = ADD;

    /**
     * Boolean flag indicating REM (removed) tuples.
     */
    prototype$3.REM = REM;

    /**
     * Boolean flag indicating MOD (modified) tuples.
     */
    prototype$3.MOD = MOD;

    /**
     * Boolean flag indicating ADD (added) and REM (removed) tuples.
     */
    prototype$3.ADD_REM = ADD_REM;

    /**
     * Boolean flag indicating ADD (added) and MOD (modified) tuples.
     */
    prototype$3.ADD_MOD = ADD_MOD;

    /**
     * Boolean flag indicating ADD, REM and MOD tuples.
     */
    prototype$3.ALL = ALL;

    /**
     * Boolean flag indicating all tuples in a data source
     * except for the ADD, REM and MOD tuples.
     */
    prototype$3.REFLOW = REFLOW;

    /**
     * Boolean flag indicating a 'pass-through' to a
     * backing data source, ignoring ADD, REM and MOD tuples.
     */
    prototype$3.SOURCE = SOURCE;

    /**
     * Boolean flag indicating that source data should be
     * suppressed when creating a forked pulse.
     */
    prototype$3.NO_SOURCE = NO_SOURCE;

    /**
     * Boolean flag indicating that field modifications should be
     * suppressed when creating a forked pulse.
     */
    prototype$3.NO_FIELDS = NO_FIELDS;

    /**
     * Creates a new pulse based on the values of this pulse.
     * The dataflow, time stamp and field modification values are copied over.
     * By default, new empty ADD, REM and MOD arrays are created.
     * @param {number} flags - Integer of boolean flags indicating which (if any)
     *   tuple arrays should be copied to the new pulse. The supported flag values
     *   are ADD, REM and MOD. Array references are copied directly: new array
     *   instances are not created.
     * @return {Pulse} - The forked pulse instance.
     * @see init
     */
    prototype$3.fork = function(flags) {
      return new Pulse(this.dataflow).init(this, flags);
    };

    /**
     * Creates a copy of this pulse with new materialized array
     * instances for the ADD, REM, MOD, and SOURCE arrays.
     * The dataflow, time stamp and field modification values are copied over.
     * @return {Pulse} - The cloned pulse instance.
     * @see init
     */
    prototype$3.clone = function() {
      var p = this.fork(ALL);
      p.add = p.add.slice();
      p.rem = p.rem.slice();
      p.mod = p.mod.slice();
      if (p.source) p.source = p.source.slice();
      return p.materialize(ALL | SOURCE);
    };

    /**
     * Returns a pulse that adds all tuples from a backing source. This is
     * useful for cases where operators are added to a dataflow after an
     * upstream data pipeline has already been processed, ensuring that
     * new operators can observe all tuples within a stream.
     * @return {Pulse} - A pulse instance with all source tuples included
     *   in the add array. If the current pulse already has all source
     *   tuples in its add array, it is returned directly. If the current
     *   pulse does not have a backing source, it is returned directly.
     */
    prototype$3.addAll = function() {
      var p = this;
      if (!this.source || this.source.length === this.add.length) {
        return p;
      } else {
        p = new Pulse(this.dataflow).init(this);
        p.add = p.source;
        return p;
      }
    };

    /**
     * Initialize this pulse based on the values of another pulse. This method
     * is used internally by {@link fork} to initialize a new forked tuple.
     * The dataflow, time stamp and field modification values are copied over.
     * By default, new empty ADD, REM and MOD arrays are created.
     * @param {Pulse} src - The source pulse to copy from.
     * @param {number} flags - Integer of boolean flags indicating which (if any)
     *   tuple arrays should be copied to the new pulse. The supported flag values
     *   are ADD, REM and MOD. Array references are copied directly: new array
     *   instances are not created. By default, source data arrays are copied
     *   to the new pulse. Use the NO_SOURCE flag to enforce a null source.
     * @return {Pulse} - Returns this Pulse instance.
     */
    prototype$3.init = function(src, flags) {
      var p = this;
      p.stamp = src.stamp;
      p.encode = src.encode;

      if (src.fields && !(flags & NO_FIELDS)) {
        p.fields = src.fields;
      }

      if (flags & ADD) {
        p.addF = src.addF;
        p.add = src.add;
      } else {
        p.addF = null;
        p.add = [];
      }

      if (flags & REM) {
        p.remF = src.remF;
        p.rem = src.rem;
      } else {
        p.remF = null;
        p.rem = [];
      }

      if (flags & MOD) {
        p.modF = src.modF;
        p.mod = src.mod;
      } else {
        p.modF = null;
        p.mod = [];
      }

      if (flags & NO_SOURCE) {
        p.srcF = null;
        p.source = null;
      } else {
        p.srcF = src.srcF;
        p.source = src.source;
      }

      return p;
    };

    /**
     * Schedules a function to run after pulse propagation completes.
     * @param {function} func - The function to run.
     */
    prototype$3.runAfter = function(func) {
      this.dataflow.runAfter(func);
    };

    /**
     * Indicates if tuples have been added, removed or modified.
     * @param {number} [flags] - The tuple types (ADD, REM or MOD) to query.
     *   Defaults to ALL, returning true if any tuple type has changed.
     * @return {boolean} - Returns true if one or more queried tuple types have
     *   changed, false otherwise.
     */
    prototype$3.changed = function(flags) {
      var f = flags || ALL;
      return ((f & ADD) && this.add.length)
          || ((f & REM) && this.rem.length)
          || ((f & MOD) && this.mod.length);
    };

    /**
     * Forces a "reflow" of tuple values, such that all tuples in the backing
     * source are added to the MOD set, unless already present in the ADD set.
     * @param {boolean} [fork=false] - If true, returns a forked copy of this
     *   pulse, and invokes reflow on that derived pulse.
     * @return {Pulse} - The reflowed pulse instance.
     */
    prototype$3.reflow = function(fork) {
      if (fork) return this.fork(ALL).reflow();

      var len = this.add.length,
          src = this.source && this.source.length;
      if (src && src !== len) {
        this.mod = this.source;
        if (len) this.filter(MOD, filter(this, ADD));
      }
      return this;
    };

    /**
     * Marks one or more data field names as modified to assist dependency
     * tracking and incremental processing by transform operators.
     * @param {string|Array<string>} _ - The field(s) to mark as modified.
     * @return {Pulse} - This pulse instance.
     */
    prototype$3.modifies = function(_) {
      var fields = array(_),
          hash = this.fields || (this.fields = {});
      fields.forEach(function(f) { hash[f] = true; });
      return this;
    };

    /**
     * Checks if one or more data fields have been modified during this pulse
     * propagation timestamp.
     * @param {string|Array<string>} _ - The field(s) to check for modified.
     * @return {boolean} - Returns true if any of the provided fields has been
     *   marked as modified, false otherwise.
     */
    prototype$3.modified = function(_) {
      var fields = this.fields;
      return !(this.mod.length && fields) ? false
        : !arguments.length ? !!fields
        : isArray(_) ? _.some(function(f) { return fields[f]; })
        : fields[_];
    };

    /**
     * Adds a filter function to one more tuple sets. Filters are applied to
     * backing tuple arrays, to determine the actual set of tuples considered
     * added, removed or modified. They can be used to delay materialization of
     * a tuple set in order to avoid expensive array copies. In addition, the
     * filter functions can serve as value transformers: unlike standard predicate
     * function (which return boolean values), Pulse filters should return the
     * actual tuple value to process. If a tuple set is already filtered, the
     * new filter function will be appended into a conjuntive ('and') query.
     * @param {number} flags - Flags indicating the tuple set(s) to filter.
     * @param {function(*):object} filter - Filter function that will be applied
     *   to the tuple set array, and should return a data tuple if the value
     *   should be included in the tuple set, and falsy (or null) otherwise.
     * @return {Pulse} - Returns this pulse instance.
     */
    prototype$3.filter = function(flags, filter) {
      var p = this;
      if (flags & ADD) p.addF = addFilter(p.addF, filter);
      if (flags & REM) p.remF = addFilter(p.remF, filter);
      if (flags & MOD) p.modF = addFilter(p.modF, filter);
      if (flags & SOURCE) p.srcF = addFilter(p.srcF, filter);
      return p;
    };

    function addFilter(a, b) {
      return a ? function(t,i) { return a(t,i) && b(t,i); } : b;
    }

    /**
     * Materialize one or more tuple sets in this pulse. If the tuple set(s) have
     * a registered filter function, it will be applied and the tuple set(s) will
     * be replaced with materialized tuple arrays.
     * @param {number} flags - Flags indicating the tuple set(s) to materialize.
     * @return {Pulse} - Returns this pulse instance.
     */
    prototype$3.materialize = function(flags) {
      flags = flags || ALL;
      var p = this;
      if ((flags & ADD) && p.addF) {
        p.add = materialize(p.add, p.addF);
        p.addF = null;
      }
      if ((flags & REM) && p.remF) {
        p.rem = materialize(p.rem, p.remF);
        p.remF = null;
      }
      if ((flags & MOD) && p.modF) {
        p.mod = materialize(p.mod, p.modF);
        p.modF = null;
      }
      if ((flags & SOURCE) && p.srcF) {
        p.source = p.source.filter(p.srcF);
        p.srcF = null;
      }
      return p;
    };

    function materialize(data, filter) {
      var out = [];
      visitArray(data, filter, function(_) { out.push(_); });
      return out;
    }

    function filter(pulse, flags) {
      var map = {};
      pulse.visit(flags, function(t) { map[tupleid(t)] = 1; });
      return function(t) { return map[tupleid(t)] ? null : t; };
    }

    /**
     * Visit one or more tuple sets in this pulse.
     * @param {number} flags - Flags indicating the tuple set(s) to visit.
     *   Legal values are ADD, REM, MOD and SOURCE (if a backing data source
     *   has been set).
     * @param {function(object):*} - Visitor function invoked per-tuple.
     * @return {Pulse} - Returns this pulse instance.
     */
    prototype$3.visit = function(flags, visitor) {
      var p = this, v = visitor, src, sum;

      if (flags & SOURCE) {
        visitArray(p.source, p.srcF, v);
        return p;
      }

      if (flags & ADD) visitArray(p.add, p.addF, v);
      if (flags & REM) visitArray(p.rem, p.remF, v);
      if (flags & MOD) visitArray(p.mod, p.modF, v);

      if ((flags & REFLOW) && (src = p.source)) {
        sum = p.add.length + p.mod.length;
        if (sum === src.length) ; else if (sum) {
          visitArray(src, filter(p, ADD_MOD), v);
        } else {
          // if no add/rem/mod tuples, visit source
          visitArray(src, p.srcF, v);
        }
      }

      return p;
    };

    /**
     * Represents a set of multiple pulses. Used as input for operators
     * that accept multiple pulses at a time. Contained pulses are
     * accessible via the public "pulses" array property. This pulse doe
     * not carry added, removed or modified tuples directly. However,
     * the visit method can be used to traverse all such tuples contained
     * in sub-pulses with a timestamp matching this parent multi-pulse.
     * @constructor
     * @param {Dataflow} dataflow - The backing dataflow instance.
     * @param {number} stamp - The timestamp.
     * @param {Array<Pulse>} pulses - The sub-pulses for this multi-pulse.
     */
    function MultiPulse(dataflow, stamp, pulses, encode) {
      var p = this,
          c = 0,
          pulse, hash, i, n, f;

      this.dataflow = dataflow;
      this.stamp = stamp;
      this.fields = null;
      this.encode = encode || null;
      this.pulses = pulses;

      for (i=0, n=pulses.length; i<n; ++i) {
        pulse = pulses[i];
        if (pulse.stamp !== stamp) continue;

        if (pulse.fields) {
          hash = p.fields || (p.fields = {});
          for (f in pulse.fields) { hash[f] = 1; }
        }

        if (pulse.changed(p.ADD)) c |= p.ADD;
        if (pulse.changed(p.REM)) c |= p.REM;
        if (pulse.changed(p.MOD)) c |= p.MOD;
      }

      this.changes = c;
    }

    var prototype$4 = inherits(MultiPulse, Pulse);

    /**
     * Creates a new pulse based on the values of this pulse.
     * The dataflow, time stamp and field modification values are copied over.
     * @return {Pulse}
     */
    prototype$4.fork = function(flags) {
      var p = new Pulse(this.dataflow).init(this, flags & this.NO_FIELDS);
      if (flags !== undefined) {
        if (flags & p.ADD) {
          this.visit(p.ADD, function(t) { return p.add.push(t); });
        }
        if (flags & p.REM) {
          this.visit(p.REM, function(t) { return p.rem.push(t); });
        }
        if (flags & p.MOD) {
          this.visit(p.MOD, function(t) { return p.mod.push(t); });
        }
      }
      return p;
    };

    prototype$4.changed = function(flags) {
      return this.changes & flags;
    };

    prototype$4.modified = function(_) {
      var p = this, fields = p.fields;
      return !(fields && (p.changes & p.MOD)) ? 0
        : isArray(_) ? _.some(function(f) { return fields[f]; })
        : fields[_];
    };

    prototype$4.filter = function() {
      error('MultiPulse does not support filtering.');
    };

    prototype$4.materialize = function() {
      error('MultiPulse does not support materialization.');
    };

    prototype$4.visit = function(flags, visitor) {
      var p = this,
          pulses = p.pulses,
          n = pulses.length,
          i = 0;

      if (flags & p.SOURCE) {
        for (; i<n; ++i) {
          pulses[i].visit(flags, visitor);
        }
      } else {
        for (; i<n; ++i) {
          if (pulses[i].stamp === p.stamp) {
            pulses[i].visit(flags, visitor);
          }
        }
      }

      return p;
    };

    /**
     * Evaluates the dataflow and returns a Promise that resolves when pulse
     * propagation completes. This method will increment the current timestamp
     * and process all updated, pulsed and touched operators. When invoked for
     * the first time, all registered operators will be processed. This method
     * should not be invoked by third-party clients, use {@link runAsync} or
     * {@link run} instead.
     * @param {string} [encode] - The name of an encoding set to invoke during
     *   propagation. This value is added to generated Pulse instances;
     *   operators can then respond to (or ignore) this setting as appropriate.
     *   This parameter can be used in conjunction with the Encode transform in
     *   the vega-encode package.
     * @param {function} [prerun] - An optional callback function to invoke
     *   immediately before dataflow evaluation commences.
     * @param {function} [postrun] - An optional callback function to invoke
     *   after dataflow evaluation completes. The callback will be invoked
     *   after those registered via {@link runAfter}.
     * @return {Promise} - A promise that resolves to this dataflow after
     *   evaluation completes.
     */
    async function evaluate(encode, prerun, postrun) {
      const df = this,
            level = df.logLevel();

      // if the pulse value is set, this is a re-entrant call
      if (df._pulse) return reentrant(df);

      // wait for pending datasets to load
      if (df._pending) {
        await df._pending;
      }

      // invoke prerun function, if provided
      if (prerun) await asyncCallback(df, prerun);

      // exit early if there are no updates
      if (!df._touched.length) {
        df.info('Dataflow invoked, but nothing to do.');
        return df;
      }

      // increment timestamp clock
      let stamp = ++df._clock,
        count = 0, op, next, dt, error;

      // set the current pulse
      df._pulse = new Pulse(df, stamp, encode);

      if (level >= Info) {
        dt = Date.now();
        df.debug('-- START PROPAGATION (' + stamp + ') -----');
      }

      // initialize priority queue, reset touched operators
      df._touched.forEach(function(op) { df._enqueue(op, true); });
      df._touched = UniqueList(id);

      try {
        while (df._heap.size() > 0) {
          // dequeue operator with highest priority
          op = df._heap.pop();

          // re-queue if rank changed
          if (op.rank !== op.qrank) { df._enqueue(op, true); continue; }

          // otherwise, evaluate the operator
          next = op.run(df._getPulse(op, encode));

          // await if operator returned a promise
          if (next.then) {
            next = await next;
          }

          if (level >= Debug) {
            df.debug(op.id, next === StopPropagation ? 'STOP' : next, op);
          }

          // propagate evaluation, enqueue dependent operators
          if (next !== StopPropagation) {
            df._pulse = next;
            if (op._targets) op._targets.forEach(op => df._enqueue(op));
          }

          // increment visit counter
          ++count;
        }
      } catch (err) {
        error = err;
      }

      // reset pulse map
      df._pulses = {};
      df._pulse = null;

      if (level >= Info) {
        dt = Date.now() - dt;
        df.info('> Pulse ' + stamp + ': ' + count + ' operators; ' + dt + 'ms');
      }

      if (error) {
        df._postrun = [];
        df.error(error);
      }

      // invoke callbacks queued via runAfter
      if (df._postrun.length) {
        const pr = df._postrun;
        df._postrun = [];
        pr.sort((a, b) => b.priority - a.priority)
          .forEach(async function(_) {
            await asyncCallback(df, _.callback);
          });
      }

      // invoke postrun function, if provided
      if (postrun) await asyncCallback(df, postrun);

      return df;
    }

    /**
     * Queues dataflow evaluation to run once any other queued evaluations have
     * completed and returns a Promise that resolves when the queued pulse
     * propagation completes. If provided, a callback function will be invoked
     * immediately before evaluation commences. This method will ensure a
     * separate evaluation is invoked for each time it is called.
     * @param {string} [encode] - The name of an encoding set to invoke during
     *   propagation. This value is added to generated Pulse instances;
     *   operators can then respond to (or ignore) this setting as appropriate.
     *   This parameter can be used in conjunction with the Encode transform in
     *   the vega-encode package.
     * @param {function} [prerun] - An optional callback function to invoke
     *   immediately before dataflow evaluation commences.
     * @param {function} [postrun] - An optional callback function to invoke
     *   after dataflow evaluation completes. The callback will be invoked
     *   after those registered via {@link runAfter}.
     * @return {Promise} - A promise that resolves to this dataflow after
     *   evaluation completes.
     */
    async function runAsync(encode, prerun, postrun) {
      // await previously queued functions
      while (this._running) await this._running;

      // run dataflow, manage running promise
      const clear = () => this._running = null;
      (this._running = this.evaluate(encode, prerun, postrun))
        .then(clear, clear);

      return this._running;
    }

    /**
     * Requests dataflow evaluation and the immediately returns this dataflow
     * instance. If there are pending data loading or other asynchronous
     * operations, the dataflow will evaluate asynchronously after this method
     * has been invoked. To track when dataflow evaluation completes, use the
     * {@link runAsync} method instead. This method will raise an error if
     * invoked while the dataflow is already in the midst of evaluation.
     * @param {string} [encode] - The name of an encoding set to invoke during
     *   propagation. This value is added to generated Pulse instances;
     *   operators can then respond to (or ignore) this setting as appropriate.
     *   This parameter can be used in conjunction with the Encode transform in
     *   the vega-encode module.
     * @param {function} [prerun] - An optional callback function to invoke
     *   immediately before dataflow evaluation commences.
     * @param {function} [postrun] - An optional callback function to invoke
     *   after dataflow evaluation completes. The callback will be invoked
     *   after those registered via {@link runAfter}.
     * @return {Dataflow} - This dataflow instance.
     */
    function run(encode, prerun, postrun) {
      return this._pulse ? reentrant(this)
        : (this.evaluate(encode, prerun, postrun), this);
    }

    /**
     * Schedules a callback function to be invoked after the current pulse
     * propagation completes. If no propagation is currently occurring,
     * the function is invoked immediately. Callbacks scheduled via runAfter
     * are invoked immediately upon completion of the current cycle, before
     * any request queued via runAsync. This method is primarily intended for
     * internal use. Third-party callers using runAfter to schedule a callback
     * that invokes {@link run} or {@link runAsync} should not use this method,
     * but instead use {@link runAsync} with prerun or postrun arguments.
     * @param {function(Dataflow)} callback - The callback function to run.
     *   The callback will be invoked with this Dataflow instance as its
     *   sole argument.
     * @param {boolean} enqueue - A boolean flag indicating that the
     *   callback should be queued up to run after the next propagation
     *   cycle, suppressing immediate invocation when propagation is not
     *   currently occurring.
     * @param {number} [priority] - A priority value used to sort registered
     *   callbacks to determine execution order. This argument is intended
     *   for internal Vega use only.
     */
    function runAfter(callback, enqueue, priority) {
      if (this._pulse || enqueue) {
        // pulse propagation is currently running, queue to run after
        this._postrun.push({
          priority: priority || 0,
          callback: callback
        });
      } else {
        // pulse propagation already complete, invoke immediately
        try { callback(this); } catch (err) { this.error(err); }
      }
    }

    /**
     * Raise an error for re-entrant dataflow evaluation.
     */
    function reentrant(df) {
      df.error('Dataflow already running. Use runAsync() to chain invocations.');
      return df;
    }

    /**
     * Enqueue an operator into the priority queue for evaluation. The operator
     * will be enqueued if it has no registered pulse for the current cycle, or if
     * the force argument is true. Upon enqueue, this method also sets the
     * operator's qrank to the current rank value.
     * @param {Operator} op - The operator to enqueue.
     * @param {boolean} [force] - A flag indicating if the operator should be
     *   forceably added to the queue, even if it has already been previously
     *   enqueued during the current pulse propagation. This is useful when the
     *   dataflow graph is dynamically modified and the operator rank changes.
     */
    function enqueue(op, force) {
      var p = !this._pulses[op.id];
      if (p) this._pulses[op.id] = this._pulse;
      if (p || force) {
        op.qrank = op.rank;
        this._heap.push(op);
      }
    }

    /**
     * Provide a correct pulse for evaluating an operator. If the operator has an
     * explicit source operator, we will try to pull the pulse(s) from it.
     * If there is an array of source operators, we build a multi-pulse.
     * Otherwise, we return a current pulse with correct source data.
     * If the pulse is the pulse map has an explicit target set, we use that.
     * Else if the pulse on the upstream source operator is current, we use that.
     * Else we use the pulse from the pulse map, but copy the source tuple array.
     * @param {Operator} op - The operator for which to get an input pulse.
     * @param {string} [encode] - An (optional) encoding set name with which to
     *   annotate the returned pulse. See {@link run} for more information.
     */
    function getPulse(op, encode) {
      var s = op.source,
          stamp = this._clock,
          p;

      if (s && isArray(s)) {
        p = s.map(function(_) { return _.pulse; });
        return new MultiPulse(this, stamp, p, encode);
      }

      p = this._pulses[op.id];
      if (s) {
        s = s.pulse;
        if (!s || s === StopPropagation) {
          p.source = [];
        } else if (s.stamp === stamp && p.target !== op) {
          p = s;
        } else {
          p.source = s.source;
        }
      }

      return p;
    }

    var NO_OPT = {skip: false, force: false};

    /**
     * Touches an operator, scheduling it to be evaluated. If invoked outside of
     * a pulse propagation, the operator will be evaluated the next time this
     * dataflow is run. If invoked in the midst of pulse propagation, the operator
     * will be queued for evaluation if and only if the operator has not yet been
     * evaluated on the current propagation timestamp.
     * @param {Operator} op - The operator to touch.
     * @param {object} [options] - Additional options hash.
     * @param {boolean} [options.skip] - If true, the operator will
     *   be skipped: it will not be evaluated, but its dependents will be.
     * @return {Dataflow}
     */
    function touch(op, options) {
      var opt = options || NO_OPT;
      if (this._pulse) {
        // if in midst of propagation, add to priority queue
        this._enqueue(op);
      } else {
        // otherwise, queue for next propagation
        this._touched.add(op);
      }
      if (opt.skip) op.skip(true);
      return this;
    }

    /**
     * Updates the value of the given operator.
     * @param {Operator} op - The operator to update.
     * @param {*} value - The value to set.
     * @param {object} [options] - Additional options hash.
     * @param {boolean} [options.force] - If true, the operator will
     *   be re-evaluated even if its value has not changed.
     * @param {boolean} [options.skip] - If true, the operator will
     *   be skipped: it will not be evaluated, but its dependents will be.
     * @return {Dataflow}
     */
    function update(op, value, options) {
      var opt = options || NO_OPT;
      if (op.set(value) || opt.force) {
        this.touch(op, opt);
      }
      return this;
    }

    /**
     * Pulses an operator with a changeset of tuples. If invoked outside of
     * a pulse propagation, the pulse will be applied the next time this
     * dataflow is run. If invoked in the midst of pulse propagation, the pulse
     * will be added to the set of active pulses and will be applied if and
     * only if the target operator has not yet been evaluated on the current
     * propagation timestamp.
     * @param {Operator} op - The operator to pulse.
     * @param {ChangeSet} value - The tuple changeset to apply.
     * @param {object} [options] - Additional options hash.
     * @param {boolean} [options.skip] - If true, the operator will
     *   be skipped: it will not be evaluated, but its dependents will be.
     * @return {Dataflow}
     */
    function pulse(op, changeset, options) {
      this.touch(op, options || NO_OPT);

      var p = new Pulse(this, this._clock + (this._pulse ? 0 : 1)),
          t = op.pulse && op.pulse.source || [];
      p.target = op;
      this._pulses[op.id] = changeset.pulse(p, t);

      return this;
    }

    function Heap(comparator) {
      this.cmp = comparator;
      this.nodes = [];
    }

    var prototype$5 = Heap.prototype;

    prototype$5.size = function() {
      return this.nodes.length;
    };

    prototype$5.clear = function() {
      this.nodes = [];
      return this;
    };

    prototype$5.peek = function() {
      return this.nodes[0];
    };

    prototype$5.push = function(x) {
      var array = this.nodes;
      array.push(x);
      return siftdown(array, 0, array.length-1, this.cmp);
    };

    prototype$5.pop = function() {
      var array = this.nodes,
          last = array.pop(),
          item;

      if (array.length) {
        item = array[0];
        array[0] = last;
        siftup(array, 0, this.cmp);
      } else {
        item = last;
      }
      return item;
    };

    prototype$5.replace = function(item) {
      var array = this.nodes,
          retval = array[0];
      array[0] = item;
      siftup(array, 0, this.cmp);
      return retval;
    };

    prototype$5.pushpop = function(item) {
      var array = this.nodes, ref = array[0];
      if (array.length && this.cmp(ref, item) < 0) {
        array[0] = item;
        item = ref;
        siftup(array, 0, this.cmp);
      }
      return item;
    };

    function siftdown(array, start, idx, cmp) {
      var item, parent, pidx;

      item = array[idx];
      while (idx > start) {
        pidx = (idx - 1) >> 1;
        parent = array[pidx];
        if (cmp(item, parent) < 0) {
          array[idx] = parent;
          idx = pidx;
          continue;
        }
        break;
      }
      return (array[idx] = item);
    }

    function siftup(array, idx, cmp) {
      var start = idx,
          end = array.length,
          item = array[idx],
          cidx = 2 * idx + 1, ridx;

      while (cidx < end) {
        ridx = cidx + 1;
        if (ridx < end && cmp(array[cidx], array[ridx]) >= 0) {
          cidx = ridx;
        }
        array[idx] = array[cidx];
        idx = cidx;
        cidx = 2 * idx + 1;
      }
      array[idx] = item;
      return siftdown(array, start, idx, cmp);
    }

    /**
     * A dataflow graph for reactive processing of data streams.
     * @constructor
     */
    function Dataflow() {
      this._log = logger();
      this.logLevel(Error$1);

      this._clock = 0;
      this._rank = 0;
      try {
        this._loader = loader();
      } catch (e) {
        // do nothing if loader module is unavailable
      }

      this._touched = UniqueList(id);
      this._pulses = {};
      this._pulse = null;

      this._heap = new Heap(function(a, b) { return a.qrank - b.qrank; });
      this._postrun = [];
    }

    var prototype$6 = Dataflow.prototype;

    /**
     * The current timestamp of this dataflow. This value reflects the
     * timestamp of the previous dataflow run. The dataflow is initialized
     * with a stamp value of 0. The initial run of the dataflow will have
     * a timestap of 1, and so on. This value will match the
     * {@link Pulse.stamp} property.
     * @return {number} - The current timestamp value.
     */
    prototype$6.stamp = function() {
      return this._clock;
    };

    /**
     * Gets or sets the loader instance to use for data file loading. A
     * loader object must provide a "load" method for loading files and a
     * "sanitize" method for checking URL/filename validity. Both methods
     * should accept a URI and options hash as arguments, and return a Promise
     * that resolves to the loaded file contents (load) or a hash containing
     * sanitized URI data with the sanitized url assigned to the "href" property
     * (sanitize).
     * @param {object} _ - The loader instance to use.
     * @return {object|Dataflow} - If no arguments are provided, returns
     *   the current loader instance. Otherwise returns this Dataflow instance.
     */
    prototype$6.loader = function(_) {
      if (arguments.length) {
        this._loader = _;
        return this;
      } else {
        return this._loader;
      }
    };

    /**
     * Empty entry threshold for garbage cleaning. Map data structures will
     * perform cleaning once the number of empty entries exceeds this value.
     */
    prototype$6.cleanThreshold = 1e4;

    // OPERATOR REGISTRATION
    prototype$6.add = add$1;
    prototype$6.connect = connect;
    prototype$6.rank = rank;
    prototype$6.rerank = rerank;

    // OPERATOR UPDATES
    prototype$6.pulse = pulse;
    prototype$6.touch = touch;
    prototype$6.update = update;
    prototype$6.changeset = changeset;

    // DATA LOADING
    prototype$6.ingest = ingest$1;
    prototype$6.parse  = parse$1;
    prototype$6.preload = preload;
    prototype$6.request = request;

    // EVENT HANDLING
    prototype$6.events = events;
    prototype$6.on = on;

    // PULSE PROPAGATION
    prototype$6.evaluate = evaluate;
    prototype$6.run = run;
    prototype$6.runAsync = runAsync;
    prototype$6.runAfter = runAfter;
    prototype$6._enqueue = enqueue;
    prototype$6._getPulse = getPulse;

    // LOGGING AND ERROR HANDLING

    function logMethod(method) {
      return function() {
        return this._log[method].apply(this, arguments);
      };
    }

    /**
     * Logs an error message. By default, logged messages are written to console
     * output. The message will only be logged if the current log level is high
     * enough to permit error messages.
     */
    prototype$6.error = logMethod('error');

    /**
     * Logs a warning message. By default, logged messages are written to console
     * output. The message will only be logged if the current log level is high
     * enough to permit warning messages.
     */
    prototype$6.warn = logMethod('warn');

    /**
     * Logs a information message. By default, logged messages are written to
     * console output. The message will only be logged if the current log level is
     * high enough to permit information messages.
     */
    prototype$6.info = logMethod('info');

    /**
     * Logs a debug message. By default, logged messages are written to console
     * output. The message will only be logged if the current log level is high
     * enough to permit debug messages.
     */
    prototype$6.debug = logMethod('debug');

    /**
     * Get or set the current log level. If an argument is provided, it
     * will be used as the new log level.
     * @param {number} [level] - Should be one of None, Warn, Info
     * @return {number} - The current log level.
     */
    prototype$6.logLevel = logMethod('level');

    /**
     * Abstract class for operators that process data tuples.
     * Subclasses must provide a {@link transform} method for operator processing.
     * @constructor
     * @param {*} [init] - The initial value for this operator.
     * @param {object} [params] - The parameters for this operator.
     * @param {Operator} [source] - The operator from which to receive pulses.
     */
    function Transform(init, params) {
      Operator.call(this, init, null, params);
    }

    var prototype$7 = inherits(Transform, Operator);

    /**
     * Overrides {@link Operator.evaluate} for transform operators.
     * Internally, this method calls {@link evaluate} to perform processing.
     * If {@link evaluate} returns a falsy value, the input pulse is returned.
     * This method should NOT be overridden, instead overrride {@link evaluate}.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return the output pulse for this operator (or StopPropagation)
     */
    prototype$7.run = function(pulse) {
      if (pulse.stamp <= this.stamp) return pulse.StopPropagation;

      var rv;
      if (this.skip()) {
        this.skip(false);
      } else {
        rv = this.evaluate(pulse);
      }
      rv = rv || pulse;

      this.stamp = pulse.stamp;

      if (rv.then) {
        rv = rv.then(_ => this.pulse =_);
      } else if (rv !== pulse.StopPropagation) {
        this.pulse = rv;
      }

      return rv;
    };

    /**
     * Overrides {@link Operator.evaluate} for transform operators.
     * Marshalls parameter values and then invokes {@link transform}.
     * @param {Pulse} pulse - the current dataflow pulse.
     * @return {Pulse} The output pulse (or StopPropagation). A falsy return
         value (including undefined) will let the input pulse pass through.
     */
    prototype$7.evaluate = function(pulse) {
      var params = this.marshall(pulse.stamp),
          out = this.transform(params, pulse);
      params.clear();
      return out;
    };

    /**
     * Process incoming pulses.
     * Subclasses should override this method to implement transforms.
     * @param {Parameters} _ - The operator parameter values.
     * @param {Pulse} pulse - The current dataflow pulse.
     * @return {Pulse} The output pulse (or StopPropagation). A falsy return
     *   value (including undefined) will let the input pulse pass through.
     */
    prototype$7.transform = function() {};

    var transforms = {};

    // Utilities

    function multikey(f) {
      return function(x) {
        var n = f.length,
            i = 1,
            k = String(f[0](x));

        for (; i<n; ++i) {
          k += '|' + f[i](x);
        }

        return k;
      };
    }

    function groupkey(fields) {
      return !fields || !fields.length ? function() { return ''; }
        : fields.length === 1 ? fields[0]
        : multikey(fields);
    }

    function measureName(op, field, as) {
      return as || (op + (!field ? '' : '_' + field));
    }

    var AggregateOps = {
      'values': measure({
        name: 'values',
        init: 'cell.store = true;',
        set:  'cell.data.values()', idx: -1
      }),
      'count': measure({
        name: 'count',
        set:  'cell.num'
      }),
      '__count__': measure({
        name: 'count',
        set:  'this.missing + this.valid'
      }),
      'missing': measure({
        name: 'missing',
        set:  'this.missing'
      }),
      'valid': measure({
        name: 'valid',
        set:  'this.valid'
      }),
      'sum': measure({
        name: 'sum',
        init: 'this.sum = 0;',
        add:  'this.sum += +v;',
        rem:  'this.sum -= v;',
        set:  'this.sum'
      }),
      'mean': measure({
        name: 'mean',
        init: 'this.mean = 0;',
        add:  'var d = v - this.mean; this.mean += d / this.valid;',
        rem:  'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',
        set:  'this.valid ? this.mean : undefined'
      }),
      'average': measure({
        name: 'average',
        set:  'this.valid ? this.mean : undefined',
        req:  ['mean'], idx: 1
      }),
      'variance': measure({
        name: 'variance',
        init: 'this.dev = 0;',
        add:  'this.dev += d * (v - this.mean);',
        rem:  'this.dev -= d * (v - this.mean);',
        set:  'this.valid > 1 ? this.dev / (this.valid-1) : undefined',
        req:  ['mean'], idx: 1
      }),
      'variancep': measure({
        name: 'variancep',
        set:  'this.valid > 1 ? this.dev / this.valid : undefined',
        req:  ['variance'], idx: 2
      }),
      'stdev': measure({
        name: 'stdev',
        set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : undefined',
        req:  ['variance'], idx: 2
      }),
      'stdevp': measure({
        name: 'stdevp',
        set:  'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : undefined',
        req:  ['variance'], idx: 2
      }),
      'stderr': measure({
        name: 'stderr',
        set:  'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : undefined',
        req:  ['variance'], idx: 2
      }),
      'distinct': measure({
        name: 'distinct',
        set:  'cell.data.distinct(this.get)',
        req:  ['values'], idx: 3
      }),
      'ci0': measure({
        name: 'ci0',
        set:  'cell.data.ci0(this.get)',
        req:  ['values'], idx: 3
      }),
      'ci1': measure({
        name: 'ci1',
        set:  'cell.data.ci1(this.get)',
        req:  ['values'], idx: 3
      }),
      'median': measure({
        name: 'median',
        set:  'cell.data.q2(this.get)',
        req:  ['values'], idx: 3
      }),
      'q1': measure({
        name: 'q1',
        set:  'cell.data.q1(this.get)',
        req:  ['values'], idx: 3
      }),
      'q3': measure({
        name: 'q3',
        set:  'cell.data.q3(this.get)',
        req:  ['values'], idx: 3
      }),
      'argmin': measure({
        name: 'argmin',
        init: 'this.argmin = undefined;',
        add:  'if (v < this.min) this.argmin = t;',
        rem:  'if (v <= this.min) this.argmin = undefined;',
        set:  'this.argmin || cell.data.argmin(this.get)',
        req:  ['min'], str: ['values'], idx: 3
      }),
      'argmax': measure({
        name: 'argmax',
        init: 'this.argmax = undefined;',
        add:  'if (v > this.max) this.argmax = t;',
        rem:  'if (v >= this.max) this.argmax = undefined;',
        set:  'this.argmax || cell.data.argmax(this.get)',
        req:  ['max'], str: ['values'], idx: 3
      }),
      'min': measure({
        name: 'min',
        init: 'this.min = undefined;',
        add:  'if (v < this.min || this.min === undefined) this.min = v;',
        rem:  'if (v <= this.min) this.min = NaN;',
        set:  'this.min = (isNaN(this.min) ? cell.data.min(this.get) : this.min)',
        str:  ['values'], idx: 4
      }),
      'max': measure({
        name: 'max',
        init: 'this.max = undefined;',
        add:  'if (v > this.max || this.max === undefined) this.max = v;',
        rem:  'if (v >= this.max) this.max = NaN;',
        set:  'this.max = (isNaN(this.max) ? cell.data.max(this.get) : this.max)',
        str:  ['values'], idx: 4
      })
    };

    var ValidAggregateOps = Object.keys(AggregateOps);

    function createMeasure(op, name) {
      return AggregateOps[op](name);
    }

    function measure(base) {
      return function(out) {
        var m = extend({init:'', add:'', rem:'', idx:0}, base);
        m.out = out || base.name;
        return m;
      };
    }

    function compareIndex(a, b) {
      return a.idx - b.idx;
    }

    function resolve(agg, stream) {
      function collect(m, a) {
        function helper(r) { if (!m[r]) collect(m, m[r] = AggregateOps[r]()); }
        if (a.req) a.req.forEach(helper);
        if (stream && a.str) a.str.forEach(helper);
        return m;
      }
      var map = agg.reduce(
        collect,
        agg.reduce(function(m, a) {
          m[a.name] = a;
          return m;
        }, {})
      );
      var values = [], key;
      for (key in map) values.push(map[key]);
      return values.sort(compareIndex);
    }

    function compileMeasures(agg, field) {
      var get = field || identity,
          all = resolve(agg, true), // assume streaming removes may occur
          init = 'var cell = this.cell; this.valid = 0; this.missing = 0;',
          ctr = 'this.cell = cell; this.init();',
          add = 'if(v==null){++this.missing; return;} if(v!==v) return; ++this.valid;',
          rem = 'if(v==null){--this.missing; return;} if(v!==v) return; --this.valid;',
          set = 'var cell = this.cell;';

      all.forEach(function(a) {
        init += a.init;
        add += a.add;
        rem += a.rem;
      });
      agg.slice().sort(compareIndex).forEach(function(a) {
        set += 't[\'' + a.out + '\']=' + a.set + ';';
      });
      set += 'return t;';

      ctr = Function('cell', ctr);
      ctr.prototype.init = Function(init);
      ctr.prototype.add = Function('v', 't', add);
      ctr.prototype.rem = Function('v', 't', rem);
      ctr.prototype.set = Function('t', set);
      ctr.prototype.get = get;
      ctr.fields = agg.map(function(_) { return _.out; });
      return ctr;
    }

    function bin$1(_) {
      // determine range
      var maxb = _.maxbins || 20,
          base = _.base || 10,
          logb = Math.log(base),
          div  = _.divide || [5, 2],
          min  = _.extent[0],
          max  = _.extent[1],
          span = max - min,
          step, level, minstep, precision, v, i, n, eps;

      if (_.step) {
        // if step size is explicitly given, use that
        step = _.step;
      } else if (_.steps) {
        // if provided, limit choice to acceptable step sizes
        v = span / maxb;
        for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);
        step = _.steps[Math.max(0, i-1)];
      } else {
        // else use span to determine step size
        level = Math.ceil(Math.log(maxb) / logb);
        minstep = _.minstep || 0;
        step = Math.max(
          minstep,
          Math.pow(base, Math.round(Math.log(span) / logb) - level)
        );

        // increase step size if too many bins
        while (Math.ceil(span/step) > maxb) { step *= base; }

        // decrease step size if allowed
        for (i=0, n=div.length; i<n; ++i) {
          v = step / div[i];
          if (v >= minstep && span / v <= maxb) step = v;
        }
      }

      // update precision, min and max
      v = Math.log(step);
      precision = v >= 0 ? 0 : ~~(-v / logb) + 1;
      eps = Math.pow(base, -precision - 1);
      if (_.nice || _.nice === undefined) {
        v = Math.floor(min / step + eps) * step;
        min = min < v ? v - step : v;
        max = Math.ceil(max / step) * step;
      }

      return {
        start: min,
        stop:  max,
        step:  step
      };
    }

    function numbers(array, f) {
      var numbers = [],
          n = array.length,
          i = -1, a;

      if (f == null) {
        while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);
      } else {
        while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
      }
      return numbers;
    }

    function number(x) {
      return x === null ? NaN : +x;
    }

    var random = Math.random;

    function ascending(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector(compare) {
      if (compare.length === 1) compare = ascendingComparator(compare);
      return {
        left: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        },
        right: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;
            else lo = mid + 1;
          }
          return lo;
        }
      };
    }

    function ascendingComparator(f) {
      return function(d, x) {
        return ascending(f(d), x);
      };
    }

    var ascendingBisect = bisector(ascending);
    var bisectRight = ascendingBisect.right;
    var bisectLeft = ascendingBisect.left;

    function variance(values, valueof) {
      let count = 0;
      let delta;
      let mean = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
          }
        }
      }
      if (count > 1) return sum / (count - 1);
    }

    function extent$1(values, valueof) {
      let min;
      let max;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && value >= value) {
            if (min === undefined) {
              min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && value >= value) {
            if (min === undefined) {
              min = max = value;
            } else {
              if (min > value) min = value;
              if (max < value) max = value;
            }
          }
        }
      }
      return [min, max];
    }

    function range(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);

    function tickStep(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10) step1 *= 10;
      else if (error >= e5) step1 *= 5;
      else if (error >= e2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function number$1(x) {
      return x === null ? NaN : +x;
    }

    function quantile(values, p, valueof = number$1) {
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
      if (p >= 1) return +valueof(values[n - 1], n - 1, values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = +valueof(values[i0], i0, values),
          value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i - i0);
    }

    function max(values, valueof) {
      let max;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null
              && value >= value
              && (max === undefined || max < value)) {
            max = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && value >= value
              && (max === undefined || max < value)) {
            max = value;
          }
        }
      }
      return max;
    }

    function mean(values, valueof) {
      let count = 0;
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            ++count, sum += value;
          }
        }
      }
      if (count) return sum / count;
    }

    // Based on https://github.com/mourner/quickselect
    // ISC license, Copyright 2018 Vladimir Agafonkin.
    function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
      while (right > left) {
        if (right - left > 600) {
          const n = right - left + 1;
          const m = k - left + 1;
          const z = Math.log(n);
          const s = 0.5 * Math.exp(2 * z / 3);
          const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
          const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
          const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
          quickselect(array, k, newLeft, newRight, compare);
        }

        const t = array[k];
        let i = left;
        let j = right;

        swap(array, left, k);
        if (compare(array[right], t) > 0) swap(array, left, right);

        while (i < j) {
          swap(array, i, j), ++i, --j;
          while (compare(array[i], t) < 0) ++i;
          while (compare(array[j], t) > 0) --j;
        }

        if (compare(array[left], t) === 0) swap(array, left, j);
        else ++j, swap(array, j, right);

        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
      }
      return array;
    }

    function swap(array, i, j) {
      const t = array[i];
      array[i] = array[j];
      array[j] = t;
    }

    function* numbers$1(values, valueof) {
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null && (value = +value) >= value) {
            yield value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            yield value;
          }
        }
      }
    }

    function median(values, valueof) {
      values = Float64Array.from(numbers$1(values, valueof));
      if (!values.length) return;
      const n = values.length;
      const i = n >> 1;
      quickselect(values, i - 1, 0);
      if ((n & 1) === 0) quickselect(values, i, i);
      return quantile(values, 0.5);
    }

    function min(values, valueof) {
      let min;
      if (valueof === undefined) {
        for (let value of values) {
          if (value != null
              && value >= value
              && (min === undefined || min > value)) {
            min = value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if ((value = valueof(value, ++index, values)) != null
              && value >= value
              && (min === undefined || min > value)) {
            min = value;
          }
        }
      }
      return min;
    }

    function permute(array, indexes) {
      var i = indexes.length, permutes = new Array(i);
      while (i--) permutes[i] = array[indexes[i]];
      return permutes;
    }

    function sum(values, valueof) {
      let sum = 0;
      if (valueof === undefined) {
        for (let value of values) {
          if (value = +value) {
            sum += value;
          }
        }
      } else {
        let index = -1;
        for (let value of values) {
          if (value = +valueof(value, ++index, values)) {
            sum += value;
          }
        }
      }
      return sum;
    }

    function bootstrapCI(array, samples, alpha, f) {
      if (!array.length) return [undefined, undefined];

      var values = numbers(array, f),
          n = values.length,
          m = samples,
          a, i, j, mu;

      for (j=0, mu=Array(m); j<m; ++j) {
        for (a=0, i=0; i<n; ++i) {
          a += values[~~(random() * n)];
        }
        mu[j] = a / n;
      }

      return [
        quantile(mu.sort(ascending), alpha/2),
        quantile(mu, 1-(alpha/2))
      ];
    }

    function quartiles(array, f) {
      var values = numbers(array, f);

      return [
        quantile(values.sort(ascending), 0.25),
        quantile(values, 0.50),
        quantile(values, 0.75)
      ];
    }

    function gaussian(mean, stdev) {
      var mu,
          sigma,
          next = NaN,
          dist = {};

      dist.mean = function(_) {
        if (arguments.length) {
          mu = _ || 0;
          next = NaN;
          return dist;
        } else {
          return mu;
        }
      };

      dist.stdev = function(_) {
        if (arguments.length) {
          sigma = _ == null ? 1 : _;
          next = NaN;
          return dist;
        } else {
          return sigma;
        }
      };

      dist.sample = function() {
        var x = 0, y = 0, rds, c;
        if (next === next) {
          x = next;
          next = NaN;
          return x;
        }
        do {
          x = random() * 2 - 1;
          y = random() * 2 - 1;
          rds = x * x + y * y;
        } while (rds === 0 || rds > 1);
        c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform
        next = mu + y * c * sigma;
        return mu + x * c * sigma;
      };

      dist.pdf = function(x) {
        var exp = Math.exp(Math.pow(x-mu, 2) / (-2 * Math.pow(sigma, 2)));
        return (1 / (sigma * Math.sqrt(2*Math.PI))) * exp;
      };

      // Approximation from West (2009)
      // Better Approximations to Cumulative Normal Functions
      dist.cdf = function(x) {
        var cd,
            z = (x - mu) / sigma,
            Z = Math.abs(z);
        if (Z > 37) {
          cd = 0;
        } else {
          var sum, exp = Math.exp(-Z*Z/2);
          if (Z < 7.07106781186547) {
            sum = 3.52624965998911e-02 * Z + 0.700383064443688;
            sum = sum * Z + 6.37396220353165;
            sum = sum * Z + 33.912866078383;
            sum = sum * Z + 112.079291497871;
            sum = sum * Z + 221.213596169931;
            sum = sum * Z + 220.206867912376;
            cd = exp * sum;
            sum = 8.83883476483184e-02 * Z + 1.75566716318264;
            sum = sum * Z + 16.064177579207;
            sum = sum * Z + 86.7807322029461;
            sum = sum * Z + 296.564248779674;
            sum = sum * Z + 637.333633378831;
            sum = sum * Z + 793.826512519948;
            sum = sum * Z + 440.413735824752;
            cd = cd / sum;
          } else {
            sum = Z + 0.65;
            sum = Z + 4 / sum;
            sum = Z + 3 / sum;
            sum = Z + 2 / sum;
            sum = Z + 1 / sum;
            cd = exp / sum / 2.506628274631;
          }
        }
        return z > 0 ? 1 - cd : cd;
      };

      // Approximation of Probit function using inverse error function.
      dist.icdf = function(p) {
        if (p <= 0 || p >= 1) return NaN;
        var x = 2*p - 1,
            v = (8 * (Math.PI - 3)) / (3 * Math.PI * (4-Math.PI)),
            a = (2 / (Math.PI*v)) + (Math.log(1 - Math.pow(x,2)) / 2),
            b = Math.log(1 - (x*x)) / v,
            s = (x > 0 ? 1 : -1) * Math.sqrt(Math.sqrt((a*a) - b) - a);
        return mu + sigma * Math.SQRT2 * s;
      };

      return dist.mean(mean).stdev(stdev);
    }

    // TODO: support for additional kernels?
    function randomKDE(support, bandwidth) {
      var kernel = gaussian(),
          dist = {},
          n = 0;

      dist.data = function(_) {
        if (arguments.length) {
          support = _;
          n = _ ? _.length : 0;
          return dist.bandwidth(bandwidth);
        } else {
          return support;
        }
      };

      dist.bandwidth = function(_) {
        if (!arguments.length) return bandwidth;
        bandwidth = _;
        if (!bandwidth && support) bandwidth = estimateBandwidth(support);
        return dist;
      };

      dist.sample = function() {
        return support[~~(random() * n)] + bandwidth * kernel.sample();
      };

      dist.pdf = function(x) {
        for (var y=0, i=0; i<n; ++i) {
          y += kernel.pdf((x - support[i]) / bandwidth);
        }
        return y / bandwidth / n;
      };

      dist.cdf = function(x) {
        for (var y=0, i=0; i<n; ++i) {
          y += kernel.cdf((x - support[i]) / bandwidth);
        }
        return y / n;
      };

      dist.icdf = function() {
        throw Error('KDE icdf not supported.');
      };

      return dist.data(support);
    }

    // Scott, D. W. (1992) Multivariate Density Estimation:
    // Theory, Practice, and Visualization. Wiley.
    function estimateBandwidth(array) {
      var n = array.length,
          q = quartiles(array),
          h = (q[2] - q[0]) / 1.34;
      return 1.06 * Math.min(Math.sqrt(variance(array)), h) * Math.pow(n, -0.2);
    }

    function randomMixture(dists, weights) {
      var dist = {}, m = 0, w;

      function normalize(x) {
        var w = [], sum = 0, i;
        for (i=0; i<m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }
        for (i=0; i<m; ++i) { w[i] /= sum; }
        return w;
      }

      dist.weights = function(_) {
        if (arguments.length) {
          w = normalize(weights = (_ || []));
          return dist;
        }
        return weights;
      };

      dist.distributions = function(_) {
        if (arguments.length) {
          if (_) {
            m = _.length;
            dists = _;
          } else {
            m = 0;
            dists = [];
          }
          return dist.weights(weights);
        }
        return dists;
      };

      dist.sample = function() {
        var r = random(),
            d = dists[m-1],
            v = w[0],
            i = 0;

        // first select distribution
        for (; i<m-1; v += w[++i]) {
          if (r < v) { d = dists[i]; break; }
        }
        // then sample from it
        return d.sample();
      };

      dist.pdf = function(x) {
        for (var p=0, i=0; i<m; ++i) {
          p += w[i] * dists[i].pdf(x);
        }
        return p;
      };

      dist.cdf = function(x) {
        for (var p=0, i=0; i<m; ++i) {
          p += w[i] * dists[i].cdf(x);
        }
        return p;
      };

      dist.icdf = function() {
        throw Error('Mixture icdf not supported.');
      };

      return dist.distributions(dists).weights(weights);
    }

    function randomUniform(min, max) {
      if (max == null) {
        max = (min == null ? 1 : min);
        min = 0;
      }

      var dist = {},
          a, b, d;

      dist.min = function(_) {
        if (arguments.length) {
          a = _ || 0;
          d = b - a;
          return dist;
        } else {
          return a;
        }
      };

      dist.max = function(_) {
        if (arguments.length) {
          b = _ || 0;
          d = b - a;
          return dist;
        } else {
          return b;
        }
      };

      dist.sample = function() {
        return a + d * random();
      };

      dist.pdf = function(x) {
        return (x >= a && x <= b) ? 1 / d : 0;
      };

      dist.cdf = function(x) {
        return x < a ? 0 : x > b ? 1 : (x - a) / d;
      };

      dist.icdf = function(p) {
        return (p >= 0 && p <= 1) ? a + p * d : NaN;
      };

      return dist.min(min).max(max);
    }

    function TupleStore(key) {
      this._key = key ? field(key) : tupleid;
      this.reset();
    }

    var prototype$8 = TupleStore.prototype;

    prototype$8.reset = function() {
      this._add = [];
      this._rem = [];
      this._ext = null;
      this._get = null;
      this._q = null;
    };

    prototype$8.add = function(v) {
      this._add.push(v);
    };

    prototype$8.rem = function(v) {
      this._rem.push(v);
    };

    prototype$8.values = function() {
      this._get = null;
      if (this._rem.length === 0) return this._add;

      var a = this._add,
          r = this._rem,
          k = this._key,
          n = a.length,
          m = r.length,
          x = Array(n - m),
          map = {}, i, j, v;

      // use unique key field to clear removed values
      for (i=0; i<m; ++i) {
        map[k(r[i])] = 1;
      }
      for (i=0, j=0; i<n; ++i) {
        if (map[k(v = a[i])]) {
          map[k(v)] = 0;
        } else {
          x[j++] = v;
        }
      }

      this._rem = [];
      return (this._add = x);
    };

    // memoizing statistics methods

    prototype$8.distinct = function(get) {
      var v = this.values(),
          n = v.length,
          map = {},
          count = 0, s;

      while (--n >= 0) {
        s = get(v[n]) + '';
        if (!map.hasOwnProperty(s)) {
          map[s] = 1;
          ++count;
        }
      }

      return count;
    };

    prototype$8.extent = function(get) {
      if (this._get !== get || !this._ext) {
        var v = this.values(),
            i = extentIndex(v, get);
        this._ext = [v[i[0]], v[i[1]]];
        this._get = get;
      }
      return this._ext;
    };

    prototype$8.argmin = function(get) {
      return this.extent(get)[0] || {};
    };

    prototype$8.argmax = function(get) {
      return this.extent(get)[1] || {};
    };

    prototype$8.min = function(get) {
      var m = this.extent(get)[0];
      return m != null ? get(m) : undefined;
    };

    prototype$8.max = function(get) {
      var m = this.extent(get)[1];
      return m != null ? get(m) : undefined;
    };

    prototype$8.quartile = function(get) {
      if (this._get !== get || !this._q) {
        this._q = quartiles(this.values(), get);
        this._get = get;
      }
      return this._q;
    };

    prototype$8.q1 = function(get) {
      return this.quartile(get)[0];
    };

    prototype$8.q2 = function(get) {
      return this.quartile(get)[1];
    };

    prototype$8.q3 = function(get) {
      return this.quartile(get)[2];
    };

    prototype$8.ci = function(get) {
      if (this._get !== get || !this._ci) {
        this._ci = bootstrapCI(this.values(), 1000, 0.05, get);
        this._get = get;
      }
      return this._ci;
    };

    prototype$8.ci0 = function(get) {
      return this.ci(get)[0];
    };

    prototype$8.ci1 = function(get) {
      return this.ci(get)[1];
    };

    /**
     * Group-by aggregation operator.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
     * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.
     * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.
     * @param {Array<string>} [params.as] - An array of output field names for aggregated values.
     * @param {boolean} [params.cross=false] - A flag indicating that the full
     *   cross-product of groupby values should be generated, including empty cells.
     *   If true, the drop parameter is ignored and empty cells are retained.
     * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.
     */
    function Aggregate(params) {
      Transform.call(this, null, params);

      this._adds = []; // array of added output tuples
      this._mods = []; // array of modified output tuples
      this._alen = 0;  // number of active added tuples
      this._mlen = 0;  // number of active modified tuples
      this._drop = true;   // should empty aggregation cells be removed
      this._cross = false; // produce full cross-product of group-by values

      this._dims = [];   // group-by dimension accessors
      this._dnames = []; // group-by dimension names

      this._measures = []; // collection of aggregation monoids
      this._countOnly = false; // flag indicating only count aggregation
      this._counts = null; // collection of count fields
      this._prev = null;   // previous aggregation cells

      this._inputs = null;  // array of dependent input tuple field names
      this._outputs = null; // array of output tuple field names
    }

    Aggregate.Definition = {
      "type": "Aggregate",
      "metadata": {"generates": true, "changes": true},
      "params": [
        { "name": "groupby", "type": "field", "array": true },
        { "name": "ops", "type": "enum", "array": true, "values": ValidAggregateOps },
        { "name": "fields", "type": "field", "null": true, "array": true },
        { "name": "as", "type": "string", "null": true, "array": true },
        { "name": "drop", "type": "boolean", "default": true },
        { "name": "cross", "type": "boolean", "default": false },
        { "name": "key", "type": "field" }
      ]
    };

    var prototype$9 = inherits(Aggregate, Transform);

    prototype$9.transform = function(_, pulse) {
      var aggr = this,
          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
          mod;

      this.stamp = out.stamp;

      if (this.value && ((mod = _.modified()) || pulse.modified(this._inputs))) {
        this._prev = this.value;
        this.value = mod ? this.init(_) : {};
        pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });
      } else {
        this.value = this.value || this.init(_);
        pulse.visit(pulse.REM, function(t) { aggr.rem(t); });
        pulse.visit(pulse.ADD, function(t) { aggr.add(t); });
      }

      // Indicate output fields and return aggregate tuples.
      out.modifies(this._outputs);

      // Should empty cells be dropped?
      aggr._drop = _.drop !== false;

      // If domain cross-product requested, generate empty cells as needed
      // and ensure that empty cells are not dropped
      if (_.cross && aggr._dims.length > 1) {
        aggr._drop = false;
        this.cross();
      }

      return aggr.changes(out);
    };

    prototype$9.cross = function() {
      var aggr = this,
          curr = aggr.value,
          dims = aggr._dnames,
          vals = dims.map(function() { return {}; }),
          n = dims.length;

      // collect all group-by domain values
      function collect(cells) {
        var key, i, t, v;
        for (key in cells) {
          t = cells[key].tuple;
          for (i=0; i<n; ++i) {
            vals[i][(v = t[dims[i]])] = v;
          }
        }
      }
      collect(aggr._prev);
      collect(curr);

      // iterate over key cross-product, create cells as needed
      function generate(base, tuple, index) {
        var name = dims[index],
            v = vals[index++],
            k, key;

        for (k in v) {
          tuple[name] = v[k];
          key = base ? base + '|' + k : k;
          if (index < n) generate(key, tuple, index);
          else if (!curr[key]) aggr.cell(key, tuple);
        }
      }
      generate('', {}, 0);
    };

    prototype$9.init = function(_) {
      // initialize input and output fields
      var inputs = (this._inputs = []),
          outputs = (this._outputs = []),
          inputMap = {};

      function inputVisit(get) {
        var fields = array(accessorFields(get)),
            i = 0, n = fields.length, f;
        for (; i<n; ++i) {
          if (!inputMap[f=fields[i]]) {
            inputMap[f] = 1;
            inputs.push(f);
          }
        }
      }

      // initialize group-by dimensions
      this._dims = array(_.groupby);
      this._dnames = this._dims.map(function(d) {
        var dname = accessorName(d);
        inputVisit(d);
        outputs.push(dname);
        return dname;
      });
      this.cellkey = _.key ? _.key : groupkey(this._dims);

      // initialize aggregate measures
      this._countOnly = true;
      this._counts = [];
      this._measures = [];

      var fields = _.fields || [null],
          ops = _.ops || ['count'],
          as = _.as || [],
          n = fields.length,
          map = {},
          field, op, m, mname, outname, i;

      if (n !== ops.length) {
        error('Unmatched number of fields and aggregate ops.');
      }

      for (i=0; i<n; ++i) {
        field = fields[i];
        op = ops[i];

        if (field == null && op !== 'count') {
          error('Null aggregate field specified.');
        }
        mname = accessorName(field);
        outname = measureName(op, mname, as[i]);
        outputs.push(outname);

        if (op === 'count') {
          this._counts.push(outname);
          continue;
        }

        m = map[mname];
        if (!m) {
          inputVisit(field);
          m = (map[mname] = []);
          m.field = field;
          this._measures.push(m);
        }

        if (op !== 'count') this._countOnly = false;
        m.push(createMeasure(op, outname));
      }

      this._measures = this._measures.map(function(m) {
        return compileMeasures(m, m.field);
      });

      return {}; // aggregation cells (this.value)
    };

    // -- Cell Management -----

    prototype$9.cellkey = groupkey();

    prototype$9.cell = function(key, t) {
      var cell = this.value[key];
      if (!cell) {
        cell = this.value[key] = this.newcell(key, t);
        this._adds[this._alen++] = cell;
      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {
        cell.stamp = this.stamp;
        this._adds[this._alen++] = cell;
      } else if (cell.stamp < this.stamp) {
        cell.stamp = this.stamp;
        this._mods[this._mlen++] = cell;
      }
      return cell;
    };

    prototype$9.newcell = function(key, t) {
      var cell = {
        key:   key,
        num:   0,
        agg:   null,
        tuple: this.newtuple(t, this._prev && this._prev[key]),
        stamp: this.stamp,
        store: false
      };

      if (!this._countOnly) {
        var measures = this._measures,
            n = measures.length, i;

        cell.agg = Array(n);
        for (i=0; i<n; ++i) {
          cell.agg[i] = new measures[i](cell);
        }
      }

      if (cell.store) {
        cell.data = new TupleStore();
      }

      return cell;
    };

    prototype$9.newtuple = function(t, p) {
      var names = this._dnames,
          dims = this._dims,
          x = {}, i, n;

      for (i=0, n=dims.length; i<n; ++i) {
        x[names[i]] = dims[i](t);
      }

      return p ? replace(p.tuple, x) : ingest(x);
    };

    // -- Process Tuples -----

    prototype$9.add = function(t) {
      var key = this.cellkey(t),
          cell = this.cell(key, t),
          agg, i, n;

      cell.num += 1;
      if (this._countOnly) return;

      if (cell.store) cell.data.add(t);

      agg = cell.agg;
      for (i=0, n=agg.length; i<n; ++i) {
        agg[i].add(agg[i].get(t), t);
      }
    };

    prototype$9.rem = function(t) {
      var key = this.cellkey(t),
          cell = this.cell(key, t),
          agg, i, n;

      cell.num -= 1;
      if (this._countOnly) return;

      if (cell.store) cell.data.rem(t);

      agg = cell.agg;
      for (i=0, n=agg.length; i<n; ++i) {
        agg[i].rem(agg[i].get(t), t);
      }
    };

    prototype$9.celltuple = function(cell) {
      var tuple = cell.tuple,
          counts = this._counts,
          agg, i, n;

      // consolidate stored values
      if (cell.store) {
        cell.data.values();
      }

      // update tuple properties
      for (i=0, n=counts.length; i<n; ++i) {
        tuple[counts[i]] = cell.num;
      }
      if (!this._countOnly) {
        agg = cell.agg;
        for (i=0, n=agg.length; i<n; ++i) {
          agg[i].set(tuple);
        }
      }

      return tuple;
    };

    prototype$9.changes = function(out) {
      var adds = this._adds,
          mods = this._mods,
          prev = this._prev,
          drop = this._drop,
          add = out.add,
          rem = out.rem,
          mod = out.mod,
          cell, key, i, n;

      if (prev) for (key in prev) {
        cell = prev[key];
        if (!drop || cell.num) rem.push(cell.tuple);
      }

      for (i=0, n=this._alen; i<n; ++i) {
        add.push(this.celltuple(adds[i]));
        adds[i] = null; // for garbage collection
      }

      for (i=0, n=this._mlen; i<n; ++i) {
        cell = mods[i];
        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));
        mods[i] = null; // for garbage collection
      }

      this._alen = this._mlen = 0; // reset list of active cells
      this._prev = null;
      return out;
    };

    /**
     * Generates a binning function for discretizing data.
     * @constructor
     * @param {object} params - The parameters for this operator. The
     *   provided values should be valid options for the {@link bin} function.
     * @param {function(object): *} params.field - The data field to bin.
     */
    function Bin(params) {
      Transform.call(this, null, params);
    }

    Bin.Definition = {
      "type": "Bin",
      "metadata": {"modifies": true},
      "params": [
        { "name": "field", "type": "field", "required": true },
        { "name": "anchor", "type": "number" },
        { "name": "maxbins", "type": "number", "default": 20 },
        { "name": "base", "type": "number", "default": 10 },
        { "name": "divide", "type": "number", "array": true, "default": [5, 2] },
        { "name": "extent", "type": "number", "array": true, "length": 2, "required": true },
        { "name": "step", "type": "number" },
        { "name": "steps", "type": "number", "array": true },
        { "name": "minstep", "type": "number", "default": 0 },
        { "name": "nice", "type": "boolean", "default": true },
        { "name": "name", "type": "string" },
        { "name": "as", "type": "string", "array": true, "length": 2, "default": ["bin0", "bin1"] }
      ]
    };

    var prototype$a = inherits(Bin, Transform);

    prototype$a.transform = function(_, pulse) {
      var bins = this._bins(_),
          start = bins.start,
          step = bins.step,
          as = _.as || ['bin0', 'bin1'],
          b0 = as[0],
          b1 = as[1],
          flag;

      if (_.modified()) {
        pulse = pulse.reflow(true);
        flag = pulse.SOURCE;
      } else {
        flag = pulse.modified(accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;
      }

      pulse.visit(flag, function(t) {
        var v = bins(t);
        // minimum bin value (inclusive)
        t[b0] = v;
        // maximum bin value (exclusive)
        // use convoluted math for better floating point agreement
        // see https://github.com/vega/vega/issues/830
        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);
      });

      return pulse.modifies(as);
    };

    prototype$a._bins = function(_) {
      if (this.value && !_.modified()) {
        return this.value;
      }

      var field = _.field,
          bins  = bin$1(_),
          start = bins.start,
          stop  = bins.stop,
          step  = bins.step,
          a, d;

      if ((a = _.anchor) != null) {
        d = a - (start + step * Math.floor((a - start) / step));
        start += d;
        stop += d;
      }

      var f = function(t) {
        var v = field(t);
        if (v == null) {
          return null;
        } else {
          v = Math.max(start, Math.min(+v, stop - step));
          return start + step * Math.floor((v - start) / step);
        }
      };

      f.start = start;
      f.stop = stop;
      f.step = step;

      return this.value = accessor(
        f,
        accessorFields(field),
        _.name || 'bin_' + accessorName(field)
      );
    };

    function SortedList(idFunc, source, input) {
      var $ = idFunc,
          data = source || [],
          add = input || [],
          rem = {},
          cnt = 0;

      return {
        add: function(t) { add.push(t); },
        remove: function(t) { rem[$(t)] = ++cnt; },
        size: function() { return data.length; },
        data: function(compare, resort) {
          if (cnt) {
            data = data.filter(function(t) { return !rem[$(t)]; });
            rem = {};
            cnt = 0;
          }
          if (resort && compare) {
            data.sort(compare);
          }
          if (add.length) {
            data = compare
              ? merge(compare, data, add.sort(compare))
              : data.concat(add);
            add = [];
          }
          return data;
        }
      }
    }

    /**
     * Collects all data tuples that pass through this operator.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(*,*): number} [params.sort] - An optional
     *   comparator function for additionally sorting the collected tuples.
     */
    function Collect(params) {
      Transform.call(this, [], params);
    }

    Collect.Definition = {
      "type": "Collect",
      "metadata": {"source": true},
      "params": [
        { "name": "sort", "type": "compare" }
      ]
    };

    var prototype$b = inherits(Collect, Transform);

    prototype$b.transform = function(_, pulse) {
      var out = pulse.fork(pulse.ALL),
          list = SortedList(tupleid, this.value, out.materialize(out.ADD).add),
          sort = _.sort,
          mod = pulse.changed() || (sort &&
                (_.modified('sort') || pulse.modified(sort.fields)));

      out.visit(out.REM, list.remove);

      this.modified(mod);
      this.value = out.source = list.data(sort, mod);

      // propagate tree root if defined
      if (pulse.source && pulse.source.root) {
        this.value.root = pulse.source.root;
      }

      return out;
    };

    /**
     * Generates a comparator function.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<string>} params.fields - The fields to compare.
     * @param {Array<string>} [params.orders] - The sort orders.
     *   Each entry should be one of "ascending" (default) or "descending".
     */
    function Compare(params) {
      Operator.call(this, null, update$1, params);
    }

    inherits(Compare, Operator);

    function update$1(_) {
      return (this.value && !_.modified())
        ? this.value
        : compare(_.fields, _.orders);
    }

    /**
     * Count regexp-defined pattern occurrences in a text field.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - An accessor for the text field.
     * @param {string} [params.pattern] - RegExp string defining the text pattern.
     * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.
     * @param {string} [params.stopwords] - RegExp string of words to ignore.
     */
    function CountPattern(params) {
      Transform.call(this, null, params);
    }

    CountPattern.Definition = {
      "type": "CountPattern",
      "metadata": {"generates": true, "changes": true},
      "params": [
        { "name": "field", "type": "field", "required": true },
        { "name": "case", "type": "enum", "values": ["upper", "lower", "mixed"], "default": "mixed" },
        { "name": "pattern", "type": "string", "default": "[\\w\"]+" },
        { "name": "stopwords", "type": "string", "default": "" },
        { "name": "as", "type": "string", "array": true, "length": 2, "default": ["text", "count"] }
      ]
    };

    function tokenize(text, tcase, match) {
      switch (tcase) {
        case 'upper': text = text.toUpperCase(); break;
        case 'lower': text = text.toLowerCase(); break;
      }
      return text.match(match);
    }

    var prototype$c = inherits(CountPattern, Transform);

    prototype$c.transform = function(_, pulse) {
      function process(update) {
        return function(tuple) {
          var tokens = tokenize(get(tuple), _.case, match) || [], t;
          for (var i=0, n=tokens.length; i<n; ++i) {
            if (!stop.test(t = tokens[i])) update(t);
          }
        };
      }

      var init = this._parameterCheck(_, pulse),
          counts = this._counts,
          match = this._match,
          stop = this._stop,
          get = _.field,
          as = _.as || ['text', 'count'],
          add = process(function(t) { counts[t] = 1 + (counts[t] || 0); }),
          rem = process(function(t) { counts[t] -= 1; });

      if (init) {
        pulse.visit(pulse.SOURCE, add);
      } else {
        pulse.visit(pulse.ADD, add);
        pulse.visit(pulse.REM, rem);
      }

      return this._finish(pulse, as); // generate output tuples
    };

    prototype$c._parameterCheck = function(_, pulse) {
      var init = false;

      if (_.modified('stopwords') || !this._stop) {
        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');
        init = true;
      }

      if (_.modified('pattern') || !this._match) {
        this._match = new RegExp((_.pattern || '[\\w\']+'), 'g');
        init = true;
      }

      if (_.modified('field') || pulse.modified(_.field.fields)) {
        init = true;
      }

      if (init) this._counts = {};
      return init;
    };

    prototype$c._finish = function(pulse, as) {
      var counts = this._counts,
          tuples = this._tuples || (this._tuples = {}),
          text = as[0],
          count = as[1],
          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
          w, t, c;

      for (w in counts) {
        t = tuples[w];
        c = counts[w] || 0;
        if (!t && c) {
          tuples[w] = (t = ingest({}));
          t[text] = w;
          t[count] = c;
          out.add.push(t);
        } else if (c === 0) {
          if (t) out.rem.push(t);
          counts[w] = null;
          tuples[w] = null;
        } else if (t[count] !== c) {
          t[count] = c;
          out.mod.push(t);
        }
      }

      return out.modifies(as);
    };

    /**
     * Perform a cross-product of a tuple stream with itself.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object):boolean} [params.filter] - An optional filter
     *   function for selectively including tuples in the cross product.
     * @param {Array<string>} [params.as] - The names of the output fields.
     */
    function Cross(params) {
      Transform.call(this, null, params);
    }

    Cross.Definition = {
      "type": "Cross",
      "metadata": {"generates": true},
      "params": [
        { "name": "filter", "type": "expr" },
        { "name": "as", "type": "string", "array": true, "length": 2, "default": ["a", "b"] }
      ]
    };

    var prototype$d = inherits(Cross, Transform);

    prototype$d.transform = function(_, pulse) {
      var out = pulse.fork(pulse.NO_SOURCE),
          data = this.value,
          as = _.as || ['a', 'b'],
          a = as[0], b = as[1],
          reset = !data
              || pulse.changed(pulse.ADD_REM)
              || _.modified('as')
              || _.modified('filter');

      if (reset) {
        if (data) out.rem = data;
        data = pulse.materialize(pulse.SOURCE).source;
        out.add = this.value = cross(data, a, b, _.filter || truthy);
      } else {
        out.mod = data;
      }

      out.source = this.value;
      return out.modifies(as);
    };

    function cross(input, a, b, filter) {
      var data = [],
          t = {},
          n = input.length,
          i = 0,
          j, left;

      for (; i<n; ++i) {
        t[a] = left = input[i];
        for (j=0; j<n; ++j) {
          t[b] = input[j];
          if (filter(t)) {
            data.push(ingest(t));
            t = {};
            t[a] = left;
          }
        }
      }

      return data;
    }

    var Distributions = {
      kde:     randomKDE,
      mixture: randomMixture,
      normal:  gaussian,
      uniform: randomUniform
    };

    var DISTRIBUTIONS = 'distributions',
        FUNCTION = 'function',
        FIELD = 'field';

    /**
     * Parse a parameter object for a probability distribution.
     * @param {object} def - The distribution parameter object.
     * @param {function():Array<object>} - A method for requesting
     *   source data. Used for distributions (such as KDE) that
     *   require sample data points. This method will only be
     *   invoked if the 'from' parameter for a target data source
     *   is not provided. Typically this method returns backing
     *   source data for a Pulse object.
     * @return {object} - The output distribution object.
     */
    function parse$2(def, data) {
      var func = def[FUNCTION];
      if (!Distributions.hasOwnProperty(func)) {
        error('Unknown distribution function: ' + func);
      }

      var d = Distributions[func]();

      for (var name in def) {
        // if data field, extract values
        if (name === FIELD) {
          d.data((def.from || data()).map(def[name]));
        }

        // if distribution mixture, recurse to parse each definition
        else if (name === DISTRIBUTIONS) {
          d[name](def[name].map(function(_) { return parse$2(_, data); }));
        }

        // otherwise, simply set the parameter
        else if (typeof d[name] === FUNCTION) {
          d[name](def[name]);
        }
      }

      return d;
    }

    /**
     * Grid sample points for a probability density. Given a distribution and
     * a sampling extent, will generate points suitable for plotting either
     * PDF (probability density function) or CDF (cumulative distribution
     * function) curves.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {object} params.distribution - The probability distribution. This
     *   is an object parameter dependent on the distribution type.
     * @param {string} [params.method='pdf'] - The distribution method to sample.
     *   One of 'pdf' or 'cdf'.
     * @param {Array<number>} [params.extent] - The [min, max] extent over which
     *   to sample the distribution. This argument is required in most cases, but
     *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method
     *   that returns numerical sample points from which the extent can be deduced.
     * @param {number} [params.steps=100] - The number of sampling steps.
     */
    function Density(params) {
      Transform.call(this, null, params);
    }

    var distributions = [
      {
        "key": {"function": "normal"},
        "params": [
          { "name": "mean", "type": "number", "default": 0 },
          { "name": "stdev", "type": "number", "default": 1 }
        ]
      },
      {
        "key": {"function": "uniform"},
        "params": [
          { "name": "min", "type": "number", "default": 0 },
          { "name": "max", "type": "number", "default": 1 }
        ]
      },
      {
        "key": {"function": "kde"},
        "params": [
          { "name": "field", "type": "field", "required": true },
          { "name": "from", "type": "data" },
          { "name": "bandwidth", "type": "number", "default": 0 }
        ]
      }
    ];

    var mixture = {
      "key": {"function": "mixture"},
      "params": [
        { "name": "distributions", "type": "param", "array": true,
          "params": distributions },
        { "name": "weights", "type": "number", "array": true }
      ]
    };

    Density.Definition = {
      "type": "Density",
      "metadata": {"generates": true},
      "params": [
        { "name": "extent", "type": "number", "array": true, "length": 2 },
        { "name": "steps", "type": "number", "default": 100 },
        { "name": "method", "type": "string", "default": "pdf",
          "values": ["pdf", "cdf"] },
        { "name": "distribution", "type": "param",
          "params": distributions.concat(mixture) },
        { "name": "as", "type": "string", "array": true,
          "default": ["value", "density"] }
      ]
    };

    var prototype$e = inherits(Density, Transform);

    prototype$e.transform = function(_, pulse) {
      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);

      if (!this.value || pulse.changed() || _.modified()) {
        var dist = parse$2(_.distribution, source(pulse)),
            method = _.method || 'pdf';

        if (method !== 'pdf' && method !== 'cdf') {
          error('Invalid density method: ' + method);
        }
        if (!_.extent && !dist.data) {
          error('Missing density extent parameter.');
        }
        method = dist[method];

        var as = _.as || ['value', 'density'],
            domain = _.extent || extent$1(dist.data()),
            step = (domain[1] - domain[0]) / (_.steps || 100),
            values = range(domain[0], domain[1] + step/2, step)
              .map(function(v) {
                var tuple = {};
                tuple[as[0]] = v;
                tuple[as[1]] = method(v);
                return ingest(tuple);
              });

        if (this.value) out.rem = this.value;
        this.value = out.add = out.source = values;
      }

      return out;
    };

    function source(pulse) {
      return function() { return pulse.materialize(pulse.SOURCE).source; };
    }

    /**
     * Wraps an expression function with access to external parameters.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function} params.expr - The expression function. The
     *  function should accept both a datum and a parameter object.
     *  This operator's value will be a new function that wraps the
     *  expression function with access to this operator's parameters.
     */
    function Expression(params) {
      Operator.call(this, null, update$2, params);
      this.modified(true);
    }

    inherits(Expression, Operator);

    function update$2(_) {
      var expr = _.expr;
      return this.value && !_.modified('expr')
        ? this.value
        : accessor(
            function(datum) { return expr(datum, _); },
            accessorFields(expr),
            accessorName(expr)
          );
    }

    /**
     * Computes extents (min/max) for a data field.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The field over which to compute extends.
     */
    function Extent(params) {
      Transform.call(this, [undefined, undefined], params);
    }

    Extent.Definition = {
      "type": "Extent",
      "metadata": {},
      "params": [
        { "name": "field", "type": "field", "required": true }
      ]
    };

    var prototype$f = inherits(Extent, Transform);

    prototype$f.transform = function(_, pulse) {
      var extent = this.value,
          field = _.field,
          min = extent[0],
          max = extent[1],
          mod;

      mod = pulse.changed()
         || pulse.modified(field.fields)
         || _.modified('field');

      if (mod || min == null) {
        min = +Infinity;
        max = -Infinity;
      }

      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, function(t) {
        var v = field(t);
        if (v != null) {
          // coerce to number
          v = +v;
          // NaNs will fail all comparisons!
          if (v < min) min = v;
          if (v > max) max = v;
        }
      });

      if (!isFinite(min) || !isFinite(max)) {
        min = max = undefined;
      }
      this.value = [min, max];
    };

    /**
     * Provides a bridge between a parent transform and a target subflow that
     * consumes only a subset of the tuples that pass through the parent.
     * @constructor
     * @param {Pulse} pulse - A pulse to use as the value of this operator.
     * @param {Transform} parent - The parent transform (typically a Facet instance).
     * @param {Transform} target - A transform that receives the subflow of tuples.
     */
    function Subflow(pulse, parent) {
      Operator.call(this, pulse);
      this.parent = parent;
    }

    var prototype$g = inherits(Subflow, Operator);

    prototype$g.connect = function(target) {
      this.targets().add(target);
      return (target.source = this);
    };

    /**
     * Add an 'add' tuple to the subflow pulse.
     * @param {Tuple} t - The tuple being added.
     */
    prototype$g.add = function(t) {
      this.value.add.push(t);
    };

    /**
     * Add a 'rem' tuple to the subflow pulse.
     * @param {Tuple} t - The tuple being removed.
     */
    prototype$g.rem = function(t) {
      this.value.rem.push(t);
    };

    /**
     * Add a 'mod' tuple to the subflow pulse.
     * @param {Tuple} t - The tuple being modified.
     */
    prototype$g.mod = function(t) {
      this.value.mod.push(t);
    };

    /**
     * Re-initialize this operator's pulse value.
     * @param {Pulse} pulse - The pulse to copy from.
     * @see Pulse.init
     */
    prototype$g.init = function(pulse) {
      this.value.init(pulse, pulse.NO_SOURCE);
    };

    /**
     * Evaluate this operator. This method overrides the
     * default behavior to simply return the contained pulse value.
     * @return {Pulse}
     */
    prototype$g.evaluate = function() {
      // assert: this.value.stamp === pulse.stamp
      return this.value;
    };

    /**
     * Facets a dataflow into a set of subflows based on a key.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(Dataflow, string): Operator} params.subflow - A function
     *   that generates a subflow of operators and returns its root operator.
     * @param {function(object): *} params.key - The key field to facet by.
     */
    function Facet(params) {
      Transform.call(this, {}, params);
      this._keys = fastmap(); // cache previously calculated key values

      // keep track of active subflows, use as targets array for listeners
      // this allows us to limit propagation to only updated subflows
      var a = this._targets = [];
      a.active = 0;
      a.forEach = function(f) {
        for (var i=0, n=a.active; i<n; ++i) f(a[i], i, a);
      };
    }

    var prototype$h = inherits(Facet, Transform);

    prototype$h.activate = function(flow) {
      this._targets[this._targets.active++] = flow;
    };

    prototype$h.subflow = function(key, flow, pulse, parent) {
      var flows = this.value,
          sf = flows.hasOwnProperty(key) && flows[key],
          df, p;

      if (!sf) {
        p = parent || (p = this._group[key]) && p.tuple;
        df = pulse.dataflow;
        sf = df.add(new Subflow(pulse.fork(pulse.NO_SOURCE), this))
          .connect(flow(df, key, p));
        flows[key] = sf;
        this.activate(sf);
      } else if (sf.value.stamp < pulse.stamp) {
        sf.init(pulse);
        this.activate(sf);
      }

      return sf;
    };

    prototype$h.transform = function(_, pulse) {
      var df = pulse.dataflow,
          self = this,
          key = _.key,
          flow = _.subflow,
          cache = this._keys,
          rekey = _.modified('key');

      function subflow(key) {
        return self.subflow(key, flow, pulse);
      }

      this._group = _.group || {};
      this._targets.active = 0; // reset list of active subflows

      pulse.visit(pulse.REM, function(t) {
        var id = tupleid(t),
            k = cache.get(id);
        if (k !== undefined) {
          cache.delete(id);
          subflow(k).rem(t);
        }
      });

      pulse.visit(pulse.ADD, function(t) {
        var k = key(t);
        cache.set(tupleid(t), k);
        subflow(k).add(t);
      });

      if (rekey || pulse.modified(key.fields)) {
        pulse.visit(pulse.MOD, function(t) {
          var id = tupleid(t),
              k0 = cache.get(id),
              k1 = key(t);
          if (k0 === k1) {
            subflow(k1).mod(t);
          } else {
            cache.set(id, k1);
            subflow(k0).rem(t);
            subflow(k1).add(t);
          }
        });
      } else if (pulse.changed(pulse.MOD)) {
        pulse.visit(pulse.MOD, function(t) {
          subflow(cache.get(tupleid(t))).mod(t);
        });
      }

      if (rekey) {
        pulse.visit(pulse.REFLOW, function(t) {
          var id = tupleid(t),
              k0 = cache.get(id),
              k1 = key(t);
          if (k0 !== k1) {
            cache.set(id, k1);
            subflow(k0).rem(t);
            subflow(k1).add(t);
          }
        });
      }

      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
      return pulse;
    };

    /**
     * Generates one or more field accessor functions.
     * If the 'name' parameter is an array, an array of field accessors
     * will be created and the 'as' parameter will be ignored.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {string} params.name - The field name(s) to access.
     * @param {string} params.as - The accessor function name.
     */
    function Field(params) {
      Operator.call(this, null, update$3, params);
    }

    inherits(Field, Operator);

    function update$3(_) {
      return (this.value && !_.modified()) ? this.value
        : isArray(_.name) ? array(_.name).map(function(f) { return field(f); })
        : field(_.name, _.as);
    }

    /**
     * Filters data tuples according to a predicate function.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.expr - The predicate expression function
     *   that determines a tuple's filter status. Truthy values pass the filter.
     */
    function Filter(params) {
      Transform.call(this, fastmap(), params);
    }

    Filter.Definition = {
      "type": "Filter",
      "metadata": {"changes": true},
      "params": [
        { "name": "expr", "type": "expr", "required": true }
      ]
    };

    var prototype$i = inherits(Filter, Transform);

    prototype$i.transform = function(_, pulse) {
      var df = pulse.dataflow,
          cache = this.value, // cache ids of filtered tuples
          output = pulse.fork(),
          add = output.add,
          rem = output.rem,
          mod = output.mod,
          test = _.expr,
          isMod = true;

      pulse.visit(pulse.REM, function(t) {
        var id = tupleid(t);
        if (!cache.has(id)) rem.push(t);
        else cache.delete(id);
      });

      pulse.visit(pulse.ADD, function(t) {
        if (test(t, _)) add.push(t);
        else cache.set(tupleid(t), 1);
      });

      function revisit(t) {
        var id = tupleid(t),
            b = test(t, _),
            s = cache.get(id);
        if (b && s) {
          cache.delete(id);
          add.push(t);
        } else if (!b && !s) {
          cache.set(id, 1);
          rem.push(t);
        } else if (isMod && b && !s) {
          mod.push(t);
        }
      }

      pulse.visit(pulse.MOD, revisit);

      if (_.modified()) {
        isMod = false;
        pulse.visit(pulse.REFLOW, revisit);
      }

      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);
      return output;
    };

    // use either provided alias or accessor field name
    function fieldNames(fields, as) {
      if (!fields) return null;
      return fields.map(function(f, i) {
        return as[i] || accessorName(f);
      });
    }

    /**
     * Flattens array-typed field values into new data objects.
     * If multiple fields are specified, they are treated as parallel arrays,
     * with output values included for each matching index (or null if missing).
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<function(object): *>} params.fields - An array of field
     *   accessors for the tuple fields that should be flattened.
     * @param {Array<string>} [params.as] - Output field names for flattened
     *   array fields. Any unspecified fields will use the field name provided
     *   by the fields accessors.
     */
    function Flatten(params) {
      Transform.call(this, [], params);
    }

    Flatten.Definition = {
      "type": "Flatten",
      "metadata": {"generates": true},
      "params": [
        { "name": "fields", "type": "field", "array": true, "required": true },
        { "name": "as", "type": "string", "array": true }
      ]
    };

    var prototype$j = inherits(Flatten, Transform);

    prototype$j.transform = function(_, pulse) {
      var out = pulse.fork(pulse.NO_SOURCE),
          fields = _.fields,
          as = fieldNames(fields, _.as || []),
          m = as.length;

      // remove any previous results
      out.rem = this.value;

      // generate flattened tuples
      pulse.visit(pulse.SOURCE, function(t) {
        var arrays = fields.map(function(f) { return f(t); }),
            maxlen = arrays.reduce(function(l, a) { return Math.max(l, a.length); }, 0),
            i = 0, j, d, v;

        for (; i<maxlen; ++i) {
          d = derive(t);
          for (j=0; j<m; ++j) {
            d[as[j]] = (v = arrays[j][i]) == null ? null : v;
          }
          out.add.push(d);
        }
      });

      this.value = out.source = out.add;
      return out.modifies(as);
    };

    /**
     * Folds one more tuple fields into multiple tuples in which the field
     * name and values are available under new 'key' and 'value' fields.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.fields - An array of field accessors
     *   for the tuple fields that should be folded.
     * @param {Array<string>} [params.as] - Output field names for folded key
     *   and value fields, defaults to ['key', 'value'].
     */
    function Fold(params) {
      Transform.call(this, [], params);
    }

    Fold.Definition = {
      "type": "Fold",
      "metadata": {"generates": true},
      "params": [
        { "name": "fields", "type": "field", "array": true, "required": true },
        { "name": "as", "type": "string", "array": true, "length": 2, "default": ["key", "value"] }
      ]
    };

    var prototype$k = inherits(Fold, Transform);

    prototype$k.transform = function(_, pulse) {
      var out = pulse.fork(pulse.NO_SOURCE),
          fields = _.fields,
          fnames = fields.map(accessorName),
          as = _.as || ['key', 'value'],
          k = as[0],
          v = as[1],
          n = fields.length;

      out.rem = this.value;

      pulse.visit(pulse.SOURCE, function(t) {
        for (var i=0, d; i<n; ++i) {
          d = derive(t);
          d[k] = fnames[i];
          d[v] = fields[i](t);
          out.add.push(d);
        }
      });

      this.value = out.source = out.add;
      return out.modifies(as);
    };

    /**
     * Invokes a function for each data tuple and saves the results as a new field.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.expr - The formula function to invoke for each tuple.
     * @param {string} params.as - The field name under which to save the result.
     * @param {boolean} [params.initonly=false] - If true, the formula is applied to
     *   added tuples only, and does not update in response to modifications.
     */
    function Formula(params) {
      Transform.call(this, null, params);
    }

    Formula.Definition = {
      "type": "Formula",
      "metadata": {"modifies": true},
      "params": [
        { "name": "expr", "type": "expr", "required": true },
        { "name": "as", "type": "string", "required": true },
        { "name": "initonly", "type": "boolean" }
      ]
    };

    var prototype$l = inherits(Formula, Transform);

    prototype$l.transform = function(_, pulse) {
      var func = _.expr,
          as = _.as,
          mod = _.modified(),
          flag = _.initonly ? pulse.ADD
            : mod ? pulse.SOURCE
            : pulse.modified(func.fields) ? pulse.ADD_MOD
            : pulse.ADD;

      function set(t) {
        t[as] = func(t, _);
      }

      if (mod) {
        // parameters updated, need to reflow
        pulse = pulse.materialize().reflow(true);
      }

      if (!_.initonly) {
        pulse.modifies(as);
      }

      return pulse.visit(flag, set);
    };

    /**
     * Generates data tuples using a provided generator function.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(Parameters): object} params.generator - A tuple generator
     *   function. This function is given the operator parameters as input.
     *   Changes to any additional parameters will not trigger re-calculation
     *   of previously generated tuples. Only future tuples are affected.
     * @param {number} params.size - The number of tuples to produce.
     */
    function Generate(params) {
      Transform.call(this, [], params);
    }

    var prototype$m = inherits(Generate, Transform);

    prototype$m.transform = function(_, pulse) {
      var data = this.value,
          out = pulse.fork(pulse.ALL),
          num = _.size - data.length,
          gen = _.generator,
          add, rem, t;

      if (num > 0) {
        // need more tuples, generate and add
        for (add=[]; --num >= 0;) {
          add.push(t = ingest(gen(_)));
          data.push(t);
        }
        out.add = out.add.length
          ? out.materialize(out.ADD).add.concat(add)
          : add;
      } else {
        // need fewer tuples, remove
        rem = data.slice(0, -num);
        out.rem = out.rem.length
          ? out.materialize(out.REM).rem.concat(rem)
          : rem;
        data = data.slice(-num);
      }

      out.source = this.value = data;
      return out;
    };

    var Methods = {
      value: 'value',
      median: median,
      mean: mean,
      min: min,
      max: max
    };

    var Empty = [];

    /**
     * Impute missing values.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The value field to impute.
     * @param {Array<function(object): *>} [params.groupby] - An array of
     *   accessors to determine series within which to perform imputation.
     * @param {function(object): *} params.key - An accessor for a key value.
     *   Each key value should be unique within a group. New tuples will be
     *   imputed for any key values that are not found within a group.
     * @param {Array<*>} [params.keyvals] - Optional array of required key
     *   values. New tuples will be imputed for any key values that are not
     *   found within a group. In addition, these values will be automatically
     *   augmented with the key values observed in the input data.
     * @param {string} [method='value'] - The imputation method to use. One of
     *   'value', 'mean', 'median', 'max', 'min'.
     * @param {*} [value=0] - The constant value to use for imputation
     *   when using method 'value'.
     */
    function Impute(params) {
      Transform.call(this, [], params);
    }

    Impute.Definition = {
      "type": "Impute",
      "metadata": {"changes": true},
      "params": [
        { "name": "field", "type": "field", "required": true },
        { "name": "key", "type": "field", "required": true },
        { "name": "keyvals", "array": true },
        { "name": "groupby", "type": "field", "array": true },
        { "name": "method", "type": "enum", "default": "value",
          "values": ["value", "mean", "median", "max", "min"] },
        { "name": "value", "default": 0 }
      ]
    };

    var prototype$n = inherits(Impute, Transform);

    function getValue(_) {
      var m = _.method || Methods.value, v;

      if (Methods[m] == null) {
        error('Unrecognized imputation method: ' + m);
      } else if (m === Methods.value) {
        v = _.value !== undefined ? _.value : 0;
        return function() { return v; };
      } else {
        return Methods[m];
      }
    }

    function getField(_) {
      var f = _.field;
      return function(t) { return t ? f(t) : NaN; };
    }

    prototype$n.transform = function(_, pulse) {
      var out = pulse.fork(pulse.ALL),
          impute = getValue(_),
          field = getField(_),
          fName = accessorName(_.field),
          kName = accessorName(_.key),
          gNames = (_.groupby || []).map(accessorName),
          groups = partition(pulse.source, _.groupby, _.key, _.keyvals),
          curr = [],
          prev = this.value,
          m = groups.domain.length,
          group, value, gVals, kVal, g, i, j, l, n, t;

      for (g=0, l=groups.length; g<l; ++g) {
        group = groups[g];
        gVals = group.values;
        value = NaN;

        // add tuples for missing values
        for (j=0; j<m; ++j) {
          if (group[j] != null) continue;
          kVal = groups.domain[j];

          t = {_impute: true};
          for (i=0, n=gVals.length; i<n; ++i) t[gNames[i]] = gVals[i];
          t[kName] = kVal;
          t[fName] = isNaN(value) ? (value = impute(group, field)) : value;

          curr.push(ingest(t));
        }
      }

      // update pulse with imputed tuples
      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);
      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);
      this.value = curr;

      return out;
    };

    function partition(data, groupby, key, keyvals) {
      var get = function(f) { return f(t); },
          groups = [],
          domain = keyvals ? keyvals.slice() : [],
          kMap = {},
          gMap = {}, gVals, gKey,
          group, i, j, k, n, t;

      domain.forEach(function(k, i) { kMap[k] = i + 1; });

      for (i=0, n=data.length; i<n; ++i) {
        t = data[i];
        k = key(t);
        j = kMap[k] || (kMap[k] = domain.push(k));

        gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';
        if (!(group = gMap[gKey])) {
          group = (gMap[gKey] = []);
          groups.push(group);
          group.values = gVals;
        }
        group[j-1] = t;
      }

      groups.domain = domain;
      return groups;
    }

    /**
     * Extend input tuples with aggregate values.
     * Calcuates aggregate values and joins them with the input stream.
     * @constructor
     */
    function JoinAggregate(params) {
      Aggregate.call(this, params);
    }

    JoinAggregate.Definition = {
      "type": "JoinAggregate",
      "metadata": {"modifies": true},
      "params": [
        { "name": "groupby", "type": "field", "array": true },
        { "name": "fields", "type": "field", "null": true, "array": true },
        { "name": "ops", "type": "enum", "array": true, "values": ValidAggregateOps },
        { "name": "as", "type": "string", "null": true, "array": true },
        { "name": "key", "type": "field" }
      ]
    };

    var prototype$o = inherits(JoinAggregate, Aggregate);

    prototype$o.transform = function(_, pulse) {
      var aggr = this,
          mod = _.modified(),
          cells;

      // process all input tuples to calculate aggregates
      if (aggr.value && (mod || pulse.modified(aggr._inputs))) {
        cells = aggr.value = mod ? aggr.init(_) : {};
        pulse.visit(pulse.SOURCE, function(t) { aggr.add(t); });
      } else {
        cells = aggr.value = aggr.value || this.init(_);
        pulse.visit(pulse.REM, function(t) { aggr.rem(t); });
        pulse.visit(pulse.ADD, function(t) { aggr.add(t); });
      }

      // update aggregation cells
      aggr.changes();

      // write aggregate values to input tuples
      pulse.visit(pulse.SOURCE, function(t) {
        extend(t, cells[aggr.cellkey(t)].tuple);
      });

      return pulse.reflow(mod).modifies(this._outputs);
    };

    prototype$o.changes = function() {
      var adds = this._adds,
          mods = this._mods,
          i, n;

      for (i=0, n=this._alen; i<n; ++i) {
        this.celltuple(adds[i]);
        adds[i] = null; // for garbage collection
      }

      for (i=0, n=this._mlen; i<n; ++i) {
        this.celltuple(mods[i]);
        mods[i] = null; // for garbage collection
      }

      this._alen = this._mlen = 0; // reset list of active cells
    };

    /**
     * Generates a key function.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<string>} params.fields - The field name(s) for the key function.
     * @param {boolean} params.flat - A boolean flag indicating if the field names
     *  should be treated as flat property names, side-stepping nested field
     *  lookups normally indicated by dot or bracket notation.
     */
    function Key(params) {
      Operator.call(this, null, update$4, params);
    }

    inherits(Key, Operator);

    function update$4(_) {
      return (this.value && !_.modified()) ? this.value : key(_.fields, _.flat);
    }

    /**
     * Load and parse data from an external source. Marshalls parameter
     * values and then invokes the Dataflow request method.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {string} params.url - The URL to load from.
     * @param {object} params.format - The data format options.
     */
    function Load(params) {
      Transform.call(this, [], params);
    }

    var prototype$p = inherits(Load, Transform);

    prototype$p.transform = function(_, pulse) {
      const df = pulse.dataflow;

      if (_.values) {
        // parse and ingest values
        return output(this, pulse, df.parse(_.values, _.format));
      } else {
        // return promise for async loading
        return df.request(_.url, _.format)
          .then(res => output(this, pulse, res.data || []));
      }
    };

    function output(op, pulse, data) {
      data.forEach(ingest);
      const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);
      out.rem = op.value;
      op.value = out.add = out.source = data;
      return out;
    }

    /**
     * Extend tuples by joining them with values from a lookup table.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Map} params.index - The lookup table map.
     * @param {Array<function(object): *} params.fields - The fields to lookup.
     * @param {Array<string>} params.as - Output field names for each lookup value.
     * @param {*} [params.default] - A default value to use if lookup fails.
     */
    function Lookup(params) {
      Transform.call(this, {}, params);
    }

    Lookup.Definition = {
      "type": "Lookup",
      "metadata": {"modifies": true},
      "params": [
        { "name": "index", "type": "index", "params": [
            {"name": "from", "type": "data", "required": true },
            {"name": "key", "type": "field", "required": true }
          ] },
        { "name": "values", "type": "field", "array": true },
        { "name": "fields", "type": "field", "array": true, "required": true },
        { "name": "as", "type": "string", "array": true },
        { "name": "default", "default": null }
      ]
    };

    var prototype$q = inherits(Lookup, Transform);

    prototype$q.transform = function(_, pulse) {
      var out = pulse,
          as = _.as,
          keys = _.fields,
          index = _.index,
          values = _.values,
          defaultValue = _.default==null ? null : _.default,
          reset = _.modified(),
          flag = reset ? pulse.SOURCE : pulse.ADD,
          n = keys.length,
          set, m, mods;

      if (values) {
        m = values.length;

        if (n > 1 && !as) {
          error('Multi-field lookup requires explicit "as" parameter.');
        }
        if (as && as.length !== n * m) {
          error('The "as" parameter has too few output field names.');
        }
        as = as || values.map(accessorName);

        set = function(t) {
          for (var i=0, k=0, j, v; i<n; ++i) {
            v = index.get(keys[i](t));
            if (v == null) for (j=0; j<m; ++j, ++k) t[as[k]] = defaultValue;
            else for (j=0; j<m; ++j, ++k) t[as[k]] = values[j](v);
          }
        };
      } else {
        if (!as) {
          error('Missing output field names.');
        }

        set = function(t) {
          for (var i=0, v; i<n; ++i) {
            v = index.get(keys[i](t));
            t[as[i]] = v==null ? defaultValue : v;
          }
        };
      }

      if (reset) {
        out = pulse.reflow(true);
      } else {
        mods = keys.some(function(k) { return pulse.modified(k.fields); });
        flag |= (mods ? pulse.MOD : 0);
      }
      pulse.visit(flag, set);

      return out.modifies(as);
    };

    /**
     * Computes global min/max extents over a collection of extents.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<Array<number>>} params.extents - The input extents.
     */
    function MultiExtent(params) {
      Operator.call(this, null, update$5, params);
    }

    inherits(MultiExtent, Operator);

    function update$5(_) {
      if (this.value && !_.modified()) {
        return this.value;
      }

      var min = +Infinity,
          max = -Infinity,
          ext = _.extents,
          i, n, e;

      for (i=0, n=ext.length; i<n; ++i) {
        e = ext[i];
        if (e[0] < min) min = e[0];
        if (e[1] > max) max = e[1];
      }
      return [min, max];
    }

    /**
     * Merge a collection of value arrays.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<Array<*>>} params.values - The input value arrrays.
     */
    function MultiValues(params) {
      Operator.call(this, null, update$6, params);
    }

    inherits(MultiValues, Operator);

    function update$6(_) {
      return (this.value && !_.modified())
        ? this.value
        : _.values.reduce(function(data, _) { return data.concat(_); }, []);
    }

    /**
     * Operator whose value is simply its parameter hash. This operator is
     * useful for enabling reactive updates to values of nested objects.
     * @constructor
     * @param {object} params - The parameters for this operator.
     */
    function Params(params) {
      Transform.call(this, null, params);
    }

    inherits(Params, Transform);

    Params.prototype.transform = function(_, pulse) {
      this.modified(_.modified());
      this.value = _;
      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples
    };

    /**
     * Aggregate and pivot selected field values to become new fields.
     * This operator is useful to construction cross-tabulations.
     * @constructor
     * @param {Array<function(object): *>} [params.groupby] - An array of accessors
     *  to groupby. These fields act just like groupby fields of an Aggregate transform.
     * @param {function(object): *} params.field - The field to pivot on. The unique
     *  values of this field become new field names in the output stream.
     * @param {function(object): *} params.value - The field to populate pivoted fields.
     *  The aggregate values of this field become the values of the new pivoted fields.
     * @param {string} [params.op] - The aggregation operation for the value field,
     *  applied per cell in the output stream. The default is "sum".
     * @param {number} [params.limit] - An optional parameter indicating the maximum
     *  number of pivoted fields to generate. The pivoted field names are sorted in
     *  ascending order prior to enforcing the limit.
     */
    function Pivot(params) {
      Aggregate.call(this, params);
    }

    Pivot.Definition = {
      "type": "Pivot",
      "metadata": {"generates": true, "changes": true},
      "params": [
        { "name": "groupby", "type": "field", "array": true },
        { "name": "field", "type": "field", "required": true },
        { "name": "value", "type": "field", "required": true },
        { "name": "op", "type": "enum", "values": ValidAggregateOps, "default": "sum" },
        { "name": "limit", "type": "number", "default": 0 },
        { "name": "key", "type": "field" }
      ]
    };

    var prototype$r = inherits(Pivot, Aggregate);

    prototype$r._transform = prototype$r.transform;

    prototype$r.transform = function(_, pulse) {
      return this._transform(aggregateParams(_, pulse), pulse);
    };

    // Shoehorn a pivot transform into an aggregate transform!
    // First collect all unique pivot field values.
    // Then generate aggregate fields for each output pivot field.
    function aggregateParams(_, pulse) {
      var key    = _.field,
      value  = _.value,
          op     = (_.op === 'count' ? '__count__' : _.op) || 'sum',
          fields = accessorFields(key).concat(accessorFields(value)),
          keys   = pivotKeys(key, _.limit || 0, pulse);

      return {
        key:      _.key,
        groupby:  _.groupby,
        ops:      keys.map(function() { return op; }),
        fields:   keys.map(function(k) { return get(k, key, value, fields); }),
        as:       keys.map(function(k) { return k + ''; }),
        modified: _.modified.bind(_)
      };
    }

    // Generate aggregate field accessor.
    // Output NaN for non-existent values; aggregator will ignore!
    function get(k, key, value, fields) {
      return accessor(
        function(d) { return key(d) === k ? value(d) : NaN; },
        fields,
        k + ''
      );
    }

    // Collect (and optionally limit) all unique pivot values.
    function pivotKeys(key, limit, pulse) {
      var map = {},
          list = [];

      pulse.visit(pulse.SOURCE, function(t) {
        var k = key(t);
        if (!map[k]) {
          map[k] = 1;
          list.push(k);
        }
      });

      // TODO? Move this comparator to vega-util?
      list.sort(function(u, v) {
        return (u<v||u==null) && v!=null ? -1
          : (u>v||v==null) && u!=null ? 1
          : ((v=v instanceof Date?+v:v),(u=u instanceof Date?+u:u))!==u && v===v ? -1
          : v!==v && u===u ? 1 : 0;
      });

      return limit ? list.slice(0, limit) : list;
    }

    /**
     * Partitions pre-faceted data into tuple subflows.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(Dataflow, string): Operator} params.subflow - A function
     *   that generates a subflow of operators and returns its root operator.
     * @param {function(object): Array<object>} params.field - The field
     *   accessor for an array of subflow tuple objects.
     */
    function PreFacet(params) {
      Facet.call(this, params);
    }

    var prototype$s = inherits(PreFacet, Facet);

    prototype$s.transform = function(_, pulse) {
      var self = this,
          flow = _.subflow,
          field = _.field;

      if (_.modified('field') || field && pulse.modified(accessorFields(field))) {
        error('PreFacet does not support field modification.');
      }

      this._targets.active = 0; // reset list of active subflows

      pulse.visit(pulse.MOD, function(t) {
        var sf = self.subflow(tupleid(t), flow, pulse, t);
        field ? field(t).forEach(function(_) { sf.mod(_); }) : sf.mod(t);
      });

      pulse.visit(pulse.ADD, function(t) {
        var sf = self.subflow(tupleid(t), flow, pulse, t);
        field ? field(t).forEach(function(_) { sf.add(ingest(_)); }) : sf.add(t);
      });

      pulse.visit(pulse.REM, function(t) {
        var sf = self.subflow(tupleid(t), flow, pulse, t);
        field ? field(t).forEach(function(_) { sf.rem(_); }) : sf.rem(t);
      });

      return pulse;
    };

    /**
     * Performs a relational projection, copying selected fields from source
     * tuples to a new set of derived tuples.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<function(object): *} params.fields - The fields to project,
     *   as an array of field accessors. If unspecified, all fields will be
     *   copied with names unchanged.
     * @param {Array<string>} [params.as] - Output field names for each projected
     *   field. Any unspecified fields will use the field name provided by
     *   the field accessor.
     */
    function Project(params) {
      Transform.call(this, null, params);
    }

    Project.Definition = {
      "type": "Project",
      "metadata": {"generates": true, "changes": true},
      "params": [
        { "name": "fields", "type": "field", "array": true },
        { "name": "as", "type": "string", "null": true, "array": true },
      ]
    };

    var prototype$t = inherits(Project, Transform);

    prototype$t.transform = function(_, pulse) {
      var fields = _.fields,
          as = fieldNames(_.fields, _.as || []),
          derive = fields
            ? function(s, t) { return project(s, t, fields, as); }
            : rederive,
          out, lut;

      if (this.value) {
        lut = this.value;
      } else {
        pulse = pulse.addAll();
        lut = this.value = {};
      }

      out = pulse.fork(pulse.NO_SOURCE);

      pulse.visit(pulse.REM, function(t) {
        var id = tupleid(t);
        out.rem.push(lut[id]);
        lut[id] = null;
      });

      pulse.visit(pulse.ADD, function(t) {
        var dt = derive(t, ingest({}));
        lut[tupleid(t)] = dt;
        out.add.push(dt);
      });

      pulse.visit(pulse.MOD, function(t) {
        out.mod.push(derive(t, lut[tupleid(t)]));
      });

      return out;
    };

    function project(s, t, fields, as) {
      for (var i=0, n=fields.length; i<n; ++i) {
        t[as[i]] = fields[i](s);
      }
      return t;
    }

    /**
     * Proxy the value of another operator as a pure signal value.
     * Ensures no tuples are propagated.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {*} params.value - The value to proxy, becomes the value of this operator.
     */
    function Proxy(params) {
      Transform.call(this, null, params);
    }

    var prototype$u = inherits(Proxy, Transform);

    prototype$u.transform = function(_, pulse) {
      this.value = _.value;
      return _.modified('value')
        ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)
        : pulse.StopPropagation;
    };

    /**
     * Relays a data stream between data processing pipelines.
     * If the derive parameter is set, this transform will create derived
     * copies of observed tuples. This provides derived data streams in which
     * modifications to the tuples do not pollute an upstream data source.
     * @param {object} params - The parameters for this operator.
     * @param {number} [params.derive=false] - Boolean flag indicating if
     *   the transform should make derived copies of incoming tuples.
     * @constructor
     */
    function Relay(params) {
      Transform.call(this, null, params);
    }

    var prototype$v = inherits(Relay, Transform);

    prototype$v.transform = function(_, pulse) {
      var out, lut;

      if (this.value) {
        lut = this.value;
      } else {
        out = pulse = pulse.addAll();
        lut = this.value = {};
      }

      if (_.derive) {
        out = pulse.fork(pulse.NO_SOURCE);

        pulse.visit(pulse.REM, function(t) {
          var id = tupleid(t);
          out.rem.push(lut[id]);
          lut[id] = null;
        });

        pulse.visit(pulse.ADD, function(t) {
          var dt = derive(t);
          lut[tupleid(t)] = dt;
          out.add.push(dt);
        });

        pulse.visit(pulse.MOD, function(t) {
          out.mod.push(rederive(t, lut[tupleid(t)]));
        });
      }

      return out;
    };

    /**
     * Samples tuples passing through this operator.
     * Uses reservoir sampling to maintain a representative sample.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {number} [params.size=1000] - The maximum number of samples.
     */
    function Sample(params) {
      Transform.call(this, [], params);
      this.count = 0;
    }

    Sample.Definition = {
      "type": "Sample",
      "metadata": {},
      "params": [
        { "name": "size", "type": "number", "default": 1000 }
      ]
    };

    var prototype$w = inherits(Sample, Transform);

    prototype$w.transform = function(_, pulse) {
      var out = pulse.fork(pulse.NO_SOURCE),
          mod = _.modified('size'),
          num = _.size,
          res = this.value,
          cnt = this.count,
          cap = 0,
          map = res.reduce(function(m, t) {
            m[tupleid(t)] = 1;
            return m;
          }, {});

      // sample reservoir update function
      function update(t) {
        var p, idx;

        if (res.length < num) {
          res.push(t);
        } else {
          idx = ~~((cnt + 1) * random());
          if (idx < res.length && idx >= cap) {
            p = res[idx];
            if (map[tupleid(p)]) out.rem.push(p); // eviction
            res[idx] = t;
          }
        }
        ++cnt;
      }

      if (pulse.rem.length) {
        // find all tuples that should be removed, add to output
        pulse.visit(pulse.REM, function(t) {
          var id = tupleid(t);
          if (map[id]) {
            map[id] = -1;
            out.rem.push(t);
          }
          --cnt;
        });

        // filter removed tuples out of the sample reservoir
        res = res.filter(function(t) { return map[tupleid(t)] !== -1; });
      }

      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {
        // replenish sample if backing data source is available
        cap = cnt = res.length;
        pulse.visit(pulse.SOURCE, function(t) {
          // update, but skip previously sampled tuples
          if (!map[tupleid(t)]) update(t);
        });
        cap = -1;
      }

      if (mod && res.length > num) {
        for (var i=0, n=res.length-num; i<n; ++i) {
          map[tupleid(res[i])] = -1;
          out.rem.push(res[i]);
        }
        res = res.slice(n);
      }

      if (pulse.mod.length) {
        // propagate modified tuples in the sample reservoir
        pulse.visit(pulse.MOD, function(t) {
          if (map[tupleid(t)]) out.mod.push(t);
        });
      }

      if (pulse.add.length) {
        // update sample reservoir
        pulse.visit(pulse.ADD, update);
      }

      if (pulse.add.length || cap < 0) {
        // output newly added tuples
        out.add = res.filter(function(t) { return !map[tupleid(t)]; });
      }

      this.count = cnt;
      this.value = out.source = res;
      return out;
    };

    /**
     * Generates data tuples for a specified sequence range of numbers.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {number} params.start - The first number in the sequence.
     * @param {number} params.stop - The last number (exclusive) in the sequence.
     * @param {number} [params.step=1] - The step size between numbers in the sequence.
     */
    function Sequence(params) {
      Transform.call(this, null, params);
    }

    Sequence.Definition = {
      "type": "Sequence",
      "metadata": {"changes": true},
      "params": [
        { "name": "start", "type": "number", "required": true },
        { "name": "stop", "type": "number", "required": true },
        { "name": "step", "type": "number", "default": 1 },
        { "name": "as", "type": "string", "default": "data" }
      ]
    };

    var prototype$x = inherits(Sequence, Transform);

    prototype$x.transform = function(_, pulse) {
      if (this.value && !_.modified()) return;

      var out = pulse.materialize().fork(pulse.MOD),
          as = _.as || 'data';

      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;

      this.value = range(_.start, _.stop, _.step || 1).map(function(v) {
        var t = {};
        t[as] = v;
        return ingest(t);
      });

      out.add = pulse.add.concat(this.value);

      return out;
    };

    /**
     * Propagates a new pulse without any tuples so long as the input
     * pulse contains some added, removed or modified tuples.
     * @param {object} params - The parameters for this operator.
     * @constructor
     */
    function Sieve(params) {
      Transform.call(this, null, params);
      this.modified(true); // always treat as modified
    }

    var prototype$y = inherits(Sieve, Transform);

    prototype$y.transform = function(_, pulse) {
      this.value = pulse.source;
      return pulse.changed()
        ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS)
        : pulse.StopPropagation;
    };

    /**
     * An index that maps from unique, string-coerced, field values to tuples.
     * Assumes that the field serves as a unique key with no duplicate values.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The field accessor to index.
     */
    function TupleIndex(params) {
      Transform.call(this, fastmap(), params);
    }

    var prototype$z = inherits(TupleIndex, Transform);

    prototype$z.transform = function(_, pulse) {
      var df = pulse.dataflow,
          field = _.field,
          index = this.value,
          mod = true;

      function set(t) { index.set(field(t), t); }

      if (_.modified('field') || pulse.modified(field.fields)) {
        index.clear();
        pulse.visit(pulse.SOURCE, set);
      } else if (pulse.changed()) {
        pulse.visit(pulse.REM, function(t) { index.delete(field(t)); });
        pulse.visit(pulse.ADD, set);
      } else {
        mod = false;
      }

      this.modified(mod);
      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);
      return pulse.fork();
    };

    /**
     * Extracts an array of values. Assumes the source data has already been
     * reduced as needed (e.g., by an upstream Aggregate transform).
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The domain field to extract.
     * @param {function(*,*): number} [params.sort] - An optional
     *   comparator function for sorting the values. The comparator will be
     *   applied to backing tuples prior to value extraction.
     */
    function Values(params) {
      Transform.call(this, null, params);
    }

    var prototype$A = inherits(Values, Transform);

    prototype$A.transform = function(_, pulse) {
      var run = !this.value
        || _.modified('field')
        || _.modified('sort')
        || pulse.changed()
        || (_.sort && pulse.modified(_.sort.fields));

      if (run) {
        this.value = (_.sort
          ? pulse.source.slice().sort(_.sort)
          : pulse.source).map(_.field);
      }
    };

    function WindowOp(op, field, param, as) {
      var fn = WindowOps[op](field, param);
      return {
        init:   fn.init || zero,
        update: function(w, t) { t[as] = fn.next(w); }
      };
    }

    var WindowOps = {
      row_number: function() {
        return {
          next: function(w) { return w.index + 1; }
        };
      },
      rank: function() {
        var rank;
        return {
          init: function() { rank = 1; },
          next: function(w) {
            var i = w.index,
                data = w.data;
            return (i && w.compare(data[i - 1], data[i])) ? (rank = i + 1) : rank;
          }
        };
      },
      dense_rank: function() {
        var drank;
        return {
          init: function() { drank = 1; },
          next: function(w) {
            var i = w.index,
                d = w.data;
            return (i && w.compare(d[i - 1], d[i])) ? ++drank : drank;
          }
        };
      },
      percent_rank: function() {
        var rank = WindowOps.rank(),
            next = rank.next;
        return {
          init: rank.init,
          next: function(w) {
            return (next(w) - 1) / (w.data.length - 1);
          }
        };
      },
      cume_dist: function() {
        var cume;
        return {
          init: function() { cume = 0; },
          next: function(w) {
            var i = w.index,
                d = w.data,
                c = w.compare;
            if (cume < i) {
              while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;
              cume = i;
            }
            return (1 + cume) / d.length;
          }
        };
      },
      ntile: function(field, num) {
        num = +num;
        if (!(num > 0)) error('ntile num must be greater than zero.');
        var cume = WindowOps.cume_dist(),
            next = cume.next;
        return {
          init: cume.init,
          next: function(w) { return Math.ceil(num * next(w)); }
        };
      },

      lag: function(field, offset) {
        offset = +offset || 1;
        return {
          next: function(w) {
            var i = w.index - offset;
            return i >= 0 ? field(w.data[i]) : null;
          }
        };
      },
      lead: function(field, offset) {
        offset = +offset || 1;
        return {
          next: function(w) {
            var i = w.index + offset,
                d = w.data;
            return i < d.length ? field(d[i]) : null;
          }
        };
      },

      first_value: function(field) {
        return {
          next: function(w) { return field(w.data[w.i0]); }
        };
      },
      last_value: function(field) {
        return {
          next: function(w) { return field(w.data[w.i1 - 1]); }
        }
      },
      nth_value: function(field, nth) {
        nth = +nth;
        if (!(nth > 0)) error('nth_value nth must be greater than zero.');
        return {
          next: function(w) {
            var i = w.i0 + (nth - 1);
            return i < w.i1 ? field(w.data[i]) : null;
          }
        }
      }
    };

    var ValidWindowOps = Object.keys(WindowOps);

    function WindowState(_) {
      var self = this,
          ops = array(_.ops),
          fields = array(_.fields),
          params = array(_.params),
          as = array(_.as),
          outputs = self.outputs = [],
          windows = self.windows = [],
          inputs = {},
          map = {},
          countOnly = true,
          counts = [],
          measures = [];

      function visitInputs(f) {
        array(accessorFields(f)).forEach(function(_) { inputs[_] = 1; });
      }
      visitInputs(_.sort);

      ops.forEach(function(op, i) {
        var field = fields[i],
            mname = accessorName(field),
            name = measureName(op, mname, as[i]);

        visitInputs(field);
        outputs.push(name);

        // Window operation
        if (WindowOps.hasOwnProperty(op)) {
          windows.push(WindowOp(op, fields[i], params[i], name));
        }

        // Aggregate operation
        else {
          if (field == null && op !== 'count') {
            error('Null aggregate field specified.');
          }
          if (op === 'count') {
            counts.push(name);
            return;
          }

          countOnly = false;
          var m = map[mname];
          if (!m) {
            m = (map[mname] = []);
            m.field = field;
            measures.push(m);
          }
          m.push(createMeasure(op, name));
        }
      });

      if (counts.length || measures.length) {
        self.cell = cell(measures, counts, countOnly);
      }

      self.inputs = Object.keys(inputs);
    }

    var prototype$B = WindowState.prototype;

    prototype$B.init = function() {
      this.windows.forEach(function(_) { _.init(); });
      if (this.cell) this.cell.init();
    };

    prototype$B.update = function(w, t) {
      var self = this,
          cell = self.cell,
          wind = self.windows,
          data = w.data,
          m = wind && wind.length,
          j;

      if (cell) {
        for (j=w.p0; j<w.i0; ++j) cell.rem(data[j]);
        for (j=w.p1; j<w.i1; ++j) cell.add(data[j]);
        cell.set(t);
      }
      for (j=0; j<m; ++j) wind[j].update(w, t);
    };

    function cell(measures, counts, countOnly) {
      measures = measures.map(function(m) {
        return compileMeasures(m, m.field);
      });

      var cell = {
        num:   0,
        agg:   null,
        store: false,
        count: counts
      };

      if (!countOnly) {
        var n = measures.length,
            a = cell.agg = Array(n),
            i = 0;
        for (; i<n; ++i) a[i] = new measures[i](cell);
      }

      if (cell.store) {
        var store = cell.data = new TupleStore();
      }

      cell.add = function(t) {
        cell.num += 1;
        if (countOnly) return;
        if (store) store.add(t);
        for (var i=0; i<n; ++i) {
          a[i].add(a[i].get(t), t);
        }
      };

      cell.rem = function(t) {
        cell.num -= 1;
        if (countOnly) return;
        if (store) store.rem(t);
        for (var i=0; i<n; ++i) {
          a[i].rem(a[i].get(t), t);
        }
      };

      cell.set = function(t) {
        var i, n;

        // consolidate stored values
        if (store) store.values();

        // update tuple properties
        for (i=0, n=counts.length; i<n; ++i) t[counts[i]] = cell.num;
        if (!countOnly) for (i=0, n=a.length; i<n; ++i) a[i].set(t);
      };

      cell.init = function() {
        cell.num = 0;
        if (store) store.reset();
        for (var i=0; i<n; ++i) a[i].init();
      };

      return cell;
    }

    /**
     * Perform window calculations and write results to the input stream.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.
     * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.
     * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.
     * @param {Array<function(object): *>} [params.fields] - An array of accessors
     *   for data fields to use as inputs to window operations.
     * @param {Array<*>} [params.params] - An array of parameter values for window operations.
     * @param {Array<string>} [params.as] - An array of output field names for window operations.
     * @param {Array<number>} [params.frame] - Window frame definition as two-element array.
     * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row
     *   number alone, ignoring peers with identical sort values. If false (default),
     *   the window boundaries will be adjusted to include peer values.
     */
    function Window(params) {
      Transform.call(this, {}, params);
      this._mlen = 0;
      this._mods = [];
    }

    Window.Definition = {
      "type": "Window",
      "metadata": {"modifies": true},
      "params": [
        { "name": "sort", "type": "compare" },
        { "name": "groupby", "type": "field", "array": true },
        { "name": "ops", "type": "enum", "array": true, "values": ValidWindowOps.concat(ValidAggregateOps) },
        { "name": "params", "type": "number", "null": true, "array": true },
        { "name": "fields", "type": "field", "null": true, "array": true },
        { "name": "as", "type": "string", "null": true, "array": true },
        { "name": "frame", "type": "number", "null": true, "array": true, "length": 2, "default": [null, 0] },
        { "name": "ignorePeers", "type": "boolean", "default": false }
      ]
    };

    var prototype$C = inherits(Window, Transform);

    prototype$C.transform = function(_, pulse) {
      var self = this,
          state = self.state,
          mod = _.modified(),
          i, n;

      this.stamp = pulse.stamp;

      // initialize window state
      if (!state || mod) {
        state = self.state = new WindowState(_);
      }

      // retrieve group for a tuple
      var key = groupkey(_.groupby);
      function group(t) { return self.group(key(t)); }

      // partition input tuples
      if (mod || pulse.modified(state.inputs)) {
        self.value = {};
        pulse.visit(pulse.SOURCE, function(t) { group(t).add(t); });
      } else {
        pulse.visit(pulse.REM, function(t) { group(t).remove(t); });
        pulse.visit(pulse.ADD, function(t) { group(t).add(t); });
      }

      // perform window calculations for each modified partition
      for (i=0, n=self._mlen; i<n; ++i) {
        processPartition(self._mods[i], state, _);
      }
      self._mlen = 0;
      self._mods = [];

      // TODO don't reflow everything?
      return pulse.reflow(mod).modifies(state.outputs);
    };

    prototype$C.group = function(key) {
      var self = this,
          group = self.value[key];

      if (!group) {
        group = self.value[key] = SortedList(tupleid);
        group.stamp = -1;
      }

      if (group.stamp < self.stamp) {
        group.stamp = self.stamp;
        self._mods[self._mlen++] = group;
      }

      return group;
    };

    function processPartition(list, state, _) {
      var sort = _.sort,
          range = sort && !_.ignorePeers,
          frame = _.frame || [null, 0],
          data = list.data(sort),
          n = data.length,
          i = 0,
          b = range ? bisector(sort) : null,
          w = {
            i0: 0, i1: 0, p0: 0, p1: 0, index: 0,
            data: data, compare: sort || constant(-1)
          };

      for (state.init(); i<n; ++i) {
        setWindow(w, frame, i, n);
        if (range) adjustRange(w, b);
        state.update(w, data[i]);
      }
    }

    function setWindow(w, f, i, n) {
      w.p0 = w.i0;
      w.p1 = w.i1;
      w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));
      w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);
      w.index = i;
    }

    // if frame type is 'range', adjust window for peer values
    function adjustRange(w, bisect) {
      var r0 = w.i0,
          r1 = w.i1 - 1,
          c = w.compare,
          d = w.data,
          n = d.length - 1;

      if (r0 > 0 && !c(d[r0], d[r0-1])) w.i0 = bisect.left(d, d[r0]);
      if (r1 < n && !c(d[r1], d[r1+1])) w.i1 = bisect.right(d, d[r1]);
    }



    var tx = /*#__PURE__*/Object.freeze({
        aggregate: Aggregate,
        bin: Bin,
        collect: Collect,
        compare: Compare,
        countpattern: CountPattern,
        cross: Cross,
        density: Density,
        expression: Expression,
        extent: Extent,
        facet: Facet,
        field: Field,
        filter: Filter,
        flatten: Flatten,
        fold: Fold,
        formula: Formula,
        generate: Generate,
        impute: Impute,
        joinaggregate: JoinAggregate,
        key: Key,
        load: Load,
        lookup: Lookup,
        multiextent: MultiExtent,
        multivalues: MultiValues,
        params: Params,
        pivot: Pivot,
        prefacet: PreFacet,
        project: Project,
        proxy: Proxy,
        relay: Relay,
        sample: Sample,
        sequence: Sequence,
        sieve: Sieve,
        subflow: Subflow,
        tupleindex: TupleIndex,
        values: Values,
        window: Window
    });

    const Top = 'top';
    const Left = 'left';
    const Right = 'right';
    const Bottom = 'bottom';

    const TopLeft = 'top-left';
    const TopRight = 'top-right';
    const BottomLeft = 'bottom-left';
    const BottomRight = 'bottom-right';

    const Start = 'start';
    const Middle = 'middle';
    const End = 'end';

    const X$1 = 'x';
    const Y$1 = 'y';

    const Group = 'group';

    const AxisRole = 'axis';
    const TitleRole = 'title';
    const FrameRole = 'frame';
    const ScopeRole = 'scope';
    const LegendRole = 'legend';

    const RowHeader = 'row-header';
    const RowFooter = 'row-footer';
    const RowTitle  = 'row-title';
    const ColHeader = 'column-header';
    const ColFooter = 'column-footer';
    const ColTitle  = 'column-title';

    const Padding = 'padding';

    const Symbols = 'symbol';

    const Fit  = 'fit';
    const FitX = 'fit-x';
    const FitY = 'fit-y';
    const Pad  = 'pad';
    const None$1 = 'none';

    const All = 'all';
    const Each = 'each';
    const Flush = 'flush';

    const Column = 'column';
    const Row = 'row';

    function Bounds(b) {
      this.clear();
      if (b) this.union(b);
    }

    var prototype$D = Bounds.prototype;

    prototype$D.clone = function() {
      return new Bounds(this);
    };

    prototype$D.clear = function() {
      this.x1 = +Number.MAX_VALUE;
      this.y1 = +Number.MAX_VALUE;
      this.x2 = -Number.MAX_VALUE;
      this.y2 = -Number.MAX_VALUE;
      return this;
    };

    prototype$D.empty = function() {
      return (
        this.x1 === +Number.MAX_VALUE &&
        this.y1 === +Number.MAX_VALUE &&
        this.x2 === -Number.MAX_VALUE &&
        this.y2 === -Number.MAX_VALUE
      );
    };

    prototype$D.equals = function(b) {
      return (
        this.x1 === b.x1 &&
        this.y1 === b.y1 &&
        this.x2 === b.x2 &&
        this.y2 === b.y2
      );
    };

    prototype$D.set = function(x1, y1, x2, y2) {
      if (x2 < x1) {
        this.x2 = x1;
        this.x1 = x2;
      } else {
        this.x1 = x1;
        this.x2 = x2;
      }
      if (y2 < y1) {
        this.y2 = y1;
        this.y1 = y2;
      } else {
        this.y1 = y1;
        this.y2 = y2;
      }
      return this;
    };

    prototype$D.add = function(x, y) {
      if (x < this.x1) this.x1 = x;
      if (y < this.y1) this.y1 = y;
      if (x > this.x2) this.x2 = x;
      if (y > this.y2) this.y2 = y;
      return this;
    };

    prototype$D.expand = function(d) {
      this.x1 -= d;
      this.y1 -= d;
      this.x2 += d;
      this.y2 += d;
      return this;
    };

    prototype$D.round = function() {
      this.x1 = Math.floor(this.x1);
      this.y1 = Math.floor(this.y1);
      this.x2 = Math.ceil(this.x2);
      this.y2 = Math.ceil(this.y2);
      return this;
    };

    prototype$D.translate = function(dx, dy) {
      this.x1 += dx;
      this.x2 += dx;
      this.y1 += dy;
      this.y2 += dy;
      return this;
    };

    prototype$D.rotate = function(angle, x, y) {
      const p = this.rotatedPoints(angle, x, y);
      return this.clear()
        .add(p[0], p[1])
        .add(p[2], p[3])
        .add(p[4], p[5])
        .add(p[6], p[7]);
    };

    prototype$D.rotatedPoints = function(angle, x, y) {
      var {x1, y1, x2, y2} = this,
          cos = Math.cos(angle),
          sin = Math.sin(angle),
          cx = x - x*cos + y*sin,
          cy = y - x*sin - y*cos;

      return [
        cos*x1 - sin*y1 + cx, sin*x1 + cos*y1 + cy,
        cos*x1 - sin*y2 + cx, sin*x1 + cos*y2 + cy,
        cos*x2 - sin*y1 + cx, sin*x2 + cos*y1 + cy,
        cos*x2 - sin*y2 + cx, sin*x2 + cos*y2 + cy
      ];
    };

    prototype$D.union = function(b) {
      if (b.x1 < this.x1) this.x1 = b.x1;
      if (b.y1 < this.y1) this.y1 = b.y1;
      if (b.x2 > this.x2) this.x2 = b.x2;
      if (b.y2 > this.y2) this.y2 = b.y2;
      return this;
    };

    prototype$D.intersect = function(b) {
      if (b.x1 > this.x1) this.x1 = b.x1;
      if (b.y1 > this.y1) this.y1 = b.y1;
      if (b.x2 < this.x2) this.x2 = b.x2;
      if (b.y2 < this.y2) this.y2 = b.y2;
      return this;
    };

    prototype$D.encloses = function(b) {
      return b && (
        this.x1 <= b.x1 &&
        this.x2 >= b.x2 &&
        this.y1 <= b.y1 &&
        this.y2 >= b.y2
      );
    };

    prototype$D.alignsWith = function(b) {
      return b && (
        this.x1 == b.x1 ||
        this.x2 == b.x2 ||
        this.y1 == b.y1 ||
        this.y2 == b.y2
      );
    };

    prototype$D.intersects = function(b) {
      return b && !(
        this.x2 < b.x1 ||
        this.x1 > b.x2 ||
        this.y2 < b.y1 ||
        this.y1 > b.y2
      );
    };

    prototype$D.contains = function(x, y) {
      return !(
        x < this.x1 ||
        x > this.x2 ||
        y < this.y1 ||
        y > this.y2
      );
    };

    prototype$D.width = function() {
      return this.x2 - this.x1;
    };

    prototype$D.height = function() {
      return this.y2 - this.y1;
    };

    function Item(mark) {
      this.mark = mark;
      this.bounds = (this.bounds || new Bounds());
    }

    function GroupItem(mark) {
      Item.call(this, mark);
      this.items = (this.items || []);
    }

    inherits(GroupItem, Item);

    function domCanvas(w, h) {
      if (typeof document !== 'undefined' && document.createElement) {
        var c = document.createElement('canvas');
        if (c && c.getContext) {
          c.width = w;
          c.height = h;
          return c;
        }
      }
      return null;
    }

    function domImage() {
      return typeof Image !== 'undefined' ? Image : null;
    }

    // Matches absolute URLs with optional protocol
    //   https://...    file://...    //...
    var protocol_re$1 = /^([A-Za-z]+:)?\/\//;

    // Special treatment in node.js for the file: protocol
    var fileProtocol$1 = 'file://';

    /**
     * Factory for a loader constructor that provides methods for requesting
     * files from either the network or disk, and for sanitizing request URIs.
     * @param {function} fetch - The Fetch API for HTTP network requests.
     *   If null or undefined, HTTP loading will be disabled.
     * @param {object} fs - The file system interface for file loading.
     *   If null or undefined, local file loading will be disabled.
     * @return {function} A loader constructor with the following signature:
     *   param {object} [options] - Optional default loading options to use.
     *   return {object} - A new loader instance.
     */
    function loaderFactory$1(fetch, fs) {
      return function(options) {
        return {
          options: options || {},
          sanitize: sanitize$1,
          load: load$1,
          fileAccess: !!fs,
          file: fileLoader$1(fs),
          http: httpLoader$1(fetch)
        };
      };
    }

    /**
     * Load an external resource, typically either from the web or from the local
     * filesystem. This function uses {@link sanitize} to first sanitize the uri,
     * then calls either {@link http} (for web requests) or {@link file} (for
     * filesystem loading).
     * @param {string} uri - The resource indicator (e.g., URL or filename).
     * @param {object} [options] - Optional loading options. These options will
     *   override any existing default options.
     * @return {Promise} - A promise that resolves to the loaded content.
     */
    async function load$1(uri, options) {
      const opt = await this.sanitize(uri, options),
            url = opt.href;

      return opt.localFile
        ? this.file(url)
        : this.http(url, options);
    }

    /**
     * URI sanitizer function.
     * @param {string} uri - The uri (url or filename) to sanity check.
     * @param {object} options - An options hash.
     * @return {Promise} - A promise that resolves to an object containing
     *  sanitized uri data, or rejects it the input uri is deemed invalid.
     *  The properties of the resolved object are assumed to be
     *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
     *  provided by the 'href' property of the returned object.
     */
    async function sanitize$1(uri, options) {
      options = extend({}, this.options, options);

      const fileAccess = this.fileAccess,
            result = {href: null};

      let isFile, hasProtocol, loadFile, base;

      if (uri == null || typeof uri !== 'string') {
        error('Sanitize failure, invalid URI: ' + $(uri));
      }

      hasProtocol = protocol_re$1.test(uri);

      // if relative url (no protocol/host), prepend baseURL
      if ((base = options.baseURL) && !hasProtocol) {
        // Ensure that there is a slash between the baseURL (e.g. hostname) and url
        if (!uri.startsWith('/') && base[base.length-1] !== '/') {
          uri = '/' + uri;
        }
        uri = base + uri;
      }

      // should we load from file system?
      loadFile = (isFile = uri.startsWith(fileProtocol$1))
        || options.mode === 'file'
        || options.mode !== 'http' && !hasProtocol && fileAccess;

      if (isFile) {
        // strip file protocol
        uri = uri.slice(fileProtocol$1.length);
      } else if (uri.startsWith('//')) {
        if (options.defaultProtocol === 'file') {
          // if is file, strip protocol and set loadFile flag
          uri = uri.slice(2);
          loadFile = true;
        } else {
          // if relative protocol (starts with '//'), prepend default protocol
          uri = (options.defaultProtocol || 'http') + ':' + uri;
        }
      }

      // set non-enumerable mode flag to indicate local file load
      Object.defineProperty(result, 'localFile', {value: !!loadFile});

      // set uri
      result.href = uri;

      // set default result target, if specified
      if (options.target) {
        result.target = options.target + '';
      }

      // set default result rel, if specified (#1542)
      if (options.rel) {
        result.rel = options.rel + '';
      }

      // return
      return result;
    }

    /**
     * File system loader factory.
     * @param {object} fs - The file system interface.
     * @return {function} - A file loader with the following signature:
     *   param {string} filename - The file system path to load.
     *   param {string} filename - The file system path to load.
     *   return {Promise} A promise that resolves to the file contents.
     */
    function fileLoader$1(fs) {
      return fs
        ? function(filename) {
            return new Promise(function(accept, reject) {
              fs.readFile(filename, function(error, data) {
                if (error) reject(error);
                else accept(data);
              });
            });
          }
        : fileReject$1;
    }

    /**
     * Default file system loader that simply rejects.
     */
    async function fileReject$1() {
      error('No file system access.');
    }

    /**
     * HTTP request handler factory.
     * @param {function} fetch - The Fetch API method.
     * @return {function} - An http loader with the following signature:
     *   param {string} url - The url to request.
     *   param {object} options - An options hash.
     *   return {Promise} - A promise that resolves to the file contents.
     */
    function httpLoader$1(fetch) {
      return fetch
        ? async function(url, options) {
            const opt = extend({}, this.options.http, options),
                  type = options && options.response,
                  response = await fetch(url, opt);

            return !response.ok
              ? error(response.status + '' + response.statusText)
              : isFunction(response[type]) ? response[type]()
              : response.text();
          }
        : httpReject$1;
    }

    /**
     * Default http request handler that simply rejects.
     */
    async function httpReject$1() {
      error('No HTTP fetch method available.');
    }

    var loader$1 = loaderFactory$1(
      typeof fetch !== 'undefined' && fetch, // use built-in fetch API
      null // no file system access
    );

    function ResourceLoader(customLoader) {
      this._pending = 0;
      this._loader = customLoader || loader$1();
    }

    var prototype$E = ResourceLoader.prototype;

    prototype$E.pending = function() {
      return this._pending;
    };

    function increment(loader) {
      loader._pending += 1;
    }

    function decrement(loader) {
      loader._pending -= 1;
    }

    prototype$E.sanitizeURL = function(uri) {
      var loader = this;
      increment(loader);

      return loader._loader.sanitize(uri, {context:'href'})
        .then(function(opt) {
          decrement(loader);
          return opt;
        })
        .catch(function() {
          decrement(loader);
          return null;
        });
    };

    prototype$E.loadImage = function(uri) {
      var loader = this,
          Image = domImage();
      increment(loader);

      return loader._loader
        .sanitize(uri, {context: 'image'})
        .then(function(opt) {
          var url = opt.href;
          if (!url || !Image) throw {url: url};

          var img = new Image();

          img.onload = function() {
            decrement(loader);
            img.loaded = true;
          };

          img.onerror = function() {
            decrement(loader);
            img.loaded = false;
          };

          img.src = url;
          return img;
        })
        .catch(function(e) {
          decrement(loader);
          return {loaded: false, width: 0, height: 0, src: e && e.url || ''};
        });
    };

    prototype$E.ready = function() {
      var loader = this;
      return new Promise(function(accept) {
        function poll(value) {
          if (!loader.pending()) accept(value);
          else setTimeout(function() { poll(true); }, 10);
        }
        poll(false);
      });
    };

    var pi = Math.PI,
        tau = 2 * pi,
        epsilon = 1e-6,
        tauEpsilon = tau - epsilon;

    function Path() {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null; // end of current subpath
      this._ = "";
    }

    function path() {
      return new Path;
    }

    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x, y) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._ += "Z";
        }
      },
      lineTo: function(x, y) {
        this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      quadraticCurveTo: function(x1, y1, x, y) {
        this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1,
            y0 = this._y1,
            x21 = x2 - x1,
            y21 = y2 - y1,
            x01 = x0 - x1,
            y01 = y0 - y1,
            l01_2 = x01 * x01 + y01 * y01;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) {
          this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
        else if (!(l01_2 > epsilon));

        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
          this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
        }

        // Otherwise, draw an arc!
        else {
          var x20 = x2 - x0,
              y20 = y2 - y0,
              l21_2 = x21 * x21 + y21 * y21,
              l20_2 = x20 * x20 + y20 * y20,
              l21 = Math.sqrt(l21_2),
              l01 = Math.sqrt(l01_2),
              l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
              t01 = l / l01,
              t21 = l / l21;

          // If the start tangent is not coincident with (x0,y0), line to.
          if (Math.abs(t01 - 1) > epsilon) {
            this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
          }

          this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
        }
      },
      arc: function(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r;
        var dx = r * Math.cos(a0),
            dy = r * Math.sin(a0),
            x0 = x + dx,
            y0 = y + dy,
            cw = 1 ^ ccw,
            da = ccw ? a0 - a1 : a1 - a0;

        // Is the radius negative? Error.
        if (r < 0) throw new Error("negative radius: " + r);

        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) {
          this._ += "M" + x0 + "," + y0;
        }

        // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
          this._ += "L" + x0 + "," + y0;
        }

        // Is this arc empty? We’re done.
        if (!r) return;

        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau + tau;

        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) {
          this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
        }

        // Is this arc non-empty? Draw an arc!
        else if (da > epsilon) {
          this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
        }
      },
      rect: function(x, y, w, h) {
        this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
      },
      toString: function() {
        return this._;
      }
    };

    function constant$1(x) {
      return function constant() {
        return x;
      };
    }

    var abs = Math.abs;
    var atan2 = Math.atan2;
    var cos = Math.cos;
    var max$1 = Math.max;
    var min$1 = Math.min;
    var sin = Math.sin;
    var sqrt = Math.sqrt;

    var epsilon$1 = 1e-12;
    var pi$1 = Math.PI;
    var halfPi = pi$1 / 2;
    var tau$1 = 2 * pi$1;

    function acos(x) {
      return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
    }

    function asin(x) {
      return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
    }

    function arcInnerRadius(d) {
      return d.innerRadius;
    }

    function arcOuterRadius(d) {
      return d.outerRadius;
    }

    function arcStartAngle(d) {
      return d.startAngle;
    }

    function arcEndAngle(d) {
      return d.endAngle;
    }

    function arcPadAngle(d) {
      return d && d.padAngle; // Note: optional!
    }

    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
      var x10 = x1 - x0, y10 = y1 - y0,
          x32 = x3 - x2, y32 = y3 - y2,
          t = y32 * x10 - x32 * y10;
      if (t * t < epsilon$1) return;
      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
      return [x0 + t * x10, y0 + t * y10];
    }

    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
      var x01 = x0 - x1,
          y01 = y0 - y1,
          lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
          ox = lo * y01,
          oy = -lo * x01,
          x11 = x0 + ox,
          y11 = y0 + oy,
          x10 = x1 + ox,
          y10 = y1 + oy,
          x00 = (x11 + x10) / 2,
          y00 = (y11 + y10) / 2,
          dx = x10 - x11,
          dy = y10 - y11,
          d2 = dx * dx + dy * dy,
          r = r1 - rc,
          D = x11 * y10 - x10 * y11,
          d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
          cx0 = (D * dy - dx * d) / d2,
          cy0 = (-D * dx - dy * d) / d2,
          cx1 = (D * dy + dx * d) / d2,
          cy1 = (-D * dx + dy * d) / d2,
          dx0 = cx0 - x00,
          dy0 = cy0 - y00,
          dx1 = cx1 - x00,
          dy1 = cy1 - y00;

      // Pick the closer of the two intersection points.
      // TODO Is there a faster way to determine which intersection to use?
      if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

      return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
      };
    }

    function d3_arc() {
      var innerRadius = arcInnerRadius,
          outerRadius = arcOuterRadius,
          cornerRadius = constant$1(0),
          padRadius = null,
          startAngle = arcStartAngle,
          endAngle = arcEndAngle,
          padAngle = arcPadAngle,
          context = null;

      function arc() {
        var buffer,
            r,
            r0 = +innerRadius.apply(this, arguments),
            r1 = +outerRadius.apply(this, arguments),
            a0 = startAngle.apply(this, arguments) - halfPi,
            a1 = endAngle.apply(this, arguments) - halfPi,
            da = abs(a1 - a0),
            cw = a1 > a0;

        if (!context) context = buffer = path();

        // Ensure that the outer radius is always larger than the inner radius.
        if (r1 < r0) r = r1, r1 = r0, r0 = r;

        // Is it a point?
        if (!(r1 > epsilon$1)) context.moveTo(0, 0);

        // Or is it a circle or annulus?
        else if (da > tau$1 - epsilon$1) {
          context.moveTo(r1 * cos(a0), r1 * sin(a0));
          context.arc(0, 0, r1, a0, a1, !cw);
          if (r0 > epsilon$1) {
            context.moveTo(r0 * cos(a1), r0 * sin(a1));
            context.arc(0, 0, r0, a1, a0, cw);
          }
        }

        // Or is it a circular or annular sector?
        else {
          var a01 = a0,
              a11 = a1,
              a00 = a0,
              a10 = a1,
              da0 = da,
              da1 = da,
              ap = padAngle.apply(this, arguments) / 2,
              rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
              rc = min$1(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
              rc0 = rc,
              rc1 = rc,
              t0,
              t1;

          // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
          if (rp > epsilon$1) {
            var p0 = asin(rp / r0 * sin(ap)),
                p1 = asin(rp / r1 * sin(ap));
            if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
            else da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
            else da1 = 0, a01 = a11 = (a0 + a1) / 2;
          }

          var x01 = r1 * cos(a01),
              y01 = r1 * sin(a01),
              x10 = r0 * cos(a10),
              y10 = r0 * sin(a10);

          // Apply rounded corners?
          if (rc > epsilon$1) {
            var x11 = r1 * cos(a11),
                y11 = r1 * sin(a11),
                x00 = r0 * cos(a00),
                y00 = r0 * sin(a00),
                oc;

            // Restrict the corner radius according to the sector angle.
            if (da < pi$1 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
              var ax = x01 - oc[0],
                  ay = y01 - oc[1],
                  bx = x11 - oc[0],
                  by = y11 - oc[1],
                  kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                  lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = min$1(rc, (r0 - lc) / (kc - 1));
              rc1 = min$1(rc, (r1 - lc) / (kc + 1));
            }
          }

          // Is the sector collapsed to a line?
          if (!(da1 > epsilon$1)) context.moveTo(x01, y01);

          // Does the sector’s outer ring have rounded corners?
          else if (rc1 > epsilon$1) {
            t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

            context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
              context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the outer ring just a circular arc?
          else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

          // Is there no inner ring, and it’s a circular sector?
          // Or perhaps it’s an annular sector collapsed due to padding?
          if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);

          // Does the sector’s inner ring (or point) have rounded corners?
          else if (rc0 > epsilon$1) {
            t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

            context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

            // Have the corners merged?
            if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

            // Otherwise, draw the two corners and the ring.
            else {
              context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
              context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
              context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
            }
          }

          // Or is the inner ring just a circular arc?
          else context.arc(0, 0, r0, a10, a00, cw);
        }

        context.closePath();

        if (buffer) return context = null, buffer + "" || null;
      }

      arc.centroid = function() {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
            a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$1 / 2;
        return [cos(a) * r, sin(a) * r];
      };

      arc.innerRadius = function(_) {
        return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : innerRadius;
      };

      arc.outerRadius = function(_) {
        return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : outerRadius;
      };

      arc.cornerRadius = function(_) {
        return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : cornerRadius;
      };

      arc.padRadius = function(_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), arc) : padRadius;
      };

      arc.startAngle = function(_) {
        return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : startAngle;
      };

      arc.endAngle = function(_) {
        return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : endAngle;
      };

      arc.padAngle = function(_) {
        return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : padAngle;
      };

      arc.context = function(_) {
        return arguments.length ? ((context = _ == null ? null : _), arc) : context;
      };

      return arc;
    }

    function Linear(context) {
      this._context = context;
    }

    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // proceed
          default: this._context.lineTo(x, y); break;
        }
      }
    };

    function curveLinear(context) {
      return new Linear(context);
    }

    function x(p) {
      return p[0];
    }

    function y(p) {
      return p[1];
    }

    function line() {
      var x$1 = x,
          y$1 = y,
          defined = constant$1(true),
          context = null,
          curve = curveLinear,
          output = null;

      function line(data) {
        var i,
            n = data.length,
            d,
            defined0 = false,
            buffer;

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) output.lineStart();
            else output.lineEnd();
          }
          if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      line.x = function(_) {
        return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$1(+_), line) : x$1;
      };

      line.y = function(_) {
        return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$1(+_), line) : y$1;
      };

      line.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), line) : defined;
      };

      line.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
      };

      line.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
      };

      return line;
    }

    function area() {
      var x0 = x,
          x1 = null,
          y0 = constant$1(0),
          y1 = y,
          defined = constant$1(true),
          context = null,
          curve = curveLinear,
          output = null;

      function area(data) {
        var i,
            j,
            k,
            n = data.length,
            d,
            defined0 = false,
            buffer,
            x0z = new Array(n),
            y0z = new Array(n);

        if (context == null) output = curve(buffer = path());

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
              j = i;
              output.areaStart();
              output.lineStart();
            } else {
              output.lineEnd();
              output.lineStart();
              for (k = i - 1; k >= j; --k) {
                output.point(x0z[k], y0z[k]);
              }
              output.lineEnd();
              output.areaEnd();
            }
          }
          if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
          }
        }

        if (buffer) return output = null, buffer + "" || null;
      }

      function arealine() {
        return line().defined(defined).curve(curve).context(context);
      }

      area.x = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
      };

      area.x0 = function(_) {
        return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
      };

      area.x1 = function(_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
      };

      area.y = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
      };

      area.y0 = function(_) {
        return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
      };

      area.y1 = function(_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
      };

      area.lineX0 =
      area.lineY0 = function() {
        return arealine().x(x0).y(y0);
      };

      area.lineY1 = function() {
        return arealine().x(x0).y(y1);
      };

      area.lineX1 = function() {
        return arealine().x(x1).y(y0);
      };

      area.defined = function(_) {
        return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), area) : defined;
      };

      area.curve = function(_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
      };

      area.context = function(_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
      };

      return area;
    }

    var circle = {
      draw: function(context, size) {
        var r = Math.sqrt(size / pi$1);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau$1);
      }
    };

    function d3_symbol() {
      var type = constant$1(circle),
          size = constant$1(64),
          context = null;

      function symbol() {
        var buffer;
        if (!context) context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
      }

      symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
      };

      symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : constant$1(+_), symbol) : size;
      };

      symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
      };

      return symbol;
    }

    function noop() {}

    function point(that, x, y) {
      that._context.bezierCurveTo(
        (2 * that._x0 + that._x1) / 3,
        (2 * that._y0 + that._y1) / 3,
        (that._x0 + 2 * that._x1) / 3,
        (that._y0 + 2 * that._y1) / 3,
        (that._x0 + 4 * that._x1 + x) / 6,
        (that._y0 + 4 * that._y1 + y) / 6
      );
    }

    function Basis(context) {
      this._context = context;
    }

    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3: point(this, this._x1, this._y1); // proceed
          case 2: this._context.lineTo(this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
          default: point(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function curveBasis(context) {
      return new Basis(context);
    }

    function BasisClosed(context) {
      this._context = context;
    }

    BasisClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
          case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
          case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
          default: point(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function curveBasisClosed(context) {
      return new BasisClosed(context);
    }

    function BasisOpen(context) {
      this._context = context;
    }

    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
          case 3: this._point = 4; // proceed
          default: point(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
      }
    };

    function curveBasisOpen(context) {
      return new BasisOpen(context);
    }

    function Bundle(context, beta) {
      this._basis = new Basis(context);
      this._beta = beta;
    }

    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            j = x.length - 1;

        if (j > 0) {
          var x0 = x[0],
              y0 = y[0],
              dx = x[j] - x0,
              dy = y[j] - y0,
              i = -1,
              t;

          while (++i <= j) {
            t = i / j;
            this._basis.point(
              this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
              this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
            );
          }
        }

        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    var curveBundle = (function custom(beta) {

      function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
      }

      bundle.beta = function(beta) {
        return custom(+beta);
      };

      return bundle;
    })(0.85);

    function point$1(that, x, y) {
      that._context.bezierCurveTo(
        that._x1 + that._k * (that._x2 - that._x0),
        that._y1 + that._k * (that._y2 - that._y0),
        that._x2 + that._k * (that._x1 - x),
        that._y2 + that._k * (that._y1 - y),
        that._x2,
        that._y2
      );
    }

    function Cardinal(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: point$1(this, this._x1, this._y1); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
          case 2: this._point = 3; // proceed
          default: point$1(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCardinal = (function custom(tension) {

      function cardinal(context) {
        return new Cardinal(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalClosed(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$1(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCardinalClosed = (function custom(tension) {

      function cardinal(context) {
        return new CardinalClosed(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function CardinalOpen(context, tension) {
      this._context = context;
      this._k = (1 - tension) / 6;
    }

    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // proceed
          default: point$1(this, x, y); break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCardinalOpen = (function custom(tension) {

      function cardinal(context) {
        return new CardinalOpen(context, tension);
      }

      cardinal.tension = function(tension) {
        return custom(+tension);
      };

      return cardinal;
    })(0);

    function point$2(that, x, y) {
      var x1 = that._x1,
          y1 = that._y1,
          x2 = that._x2,
          y2 = that._y2;

      if (that._l01_a > epsilon$1) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
            n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
      }

      if (that._l23_a > epsilon$1) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
            m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
      }

      that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
    }

    function CatmullRom(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x2, this._y2); break;
          case 3: this.point(this._x2, this._y2); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; // proceed
          default: point$2(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCatmullRom = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomClosed(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
        this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
          case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
          case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
          default: point$2(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCatmullRomClosed = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function CatmullRomOpen(context, alpha) {
      this._context = context;
      this._alpha = alpha;
    }

    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 =
        this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a =
        this._l01_2a = this._l12_2a = this._l23_2a =
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;

        if (this._point) {
          var x23 = this._x2 - x,
              y23 = this._y2 - y;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }

        switch (this._point) {
          case 0: this._point = 1; break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
          case 3: this._point = 4; // proceed
          default: point$2(this, x, y); break;
        }

        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
      }
    };

    var curveCatmullRomOpen = (function custom(alpha) {

      function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
      }

      catmullRom.alpha = function(alpha) {
        return custom(+alpha);
      };

      return catmullRom;
    })(0.5);

    function LinearClosed(context) {
      this._context = context;
    }

    LinearClosed.prototype = {
      areaStart: noop,
      areaEnd: noop,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point) this._context.closePath();
      },
      point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
      }
    };

    function curveLinearClosed(context) {
      return new LinearClosed(context);
    }

    function sign(x) {
      return x < 0 ? -1 : 1;
    }

    // Calculate the slopes of the tangents (Hermite-type interpolation) based on
    // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
    // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
    // NOV(II), P. 443, 1990.
    function slope3(that, x2, y2) {
      var h0 = that._x1 - that._x0,
          h1 = x2 - that._x1,
          s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
          s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
          p = (s0 * h1 + s1 * h0) / (h0 + h1);
      return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }

    // Calculate a one-sided slope.
    function slope2(that, t) {
      var h = that._x1 - that._x0;
      return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }

    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
    // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
    function point$3(that, t0, t1) {
      var x0 = that._x0,
          y0 = that._y0,
          x1 = that._x1,
          y1 = that._y1,
          dx = (x1 - x0) / 3;
      that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }

    function MonotoneX(context) {
      this._context = context;
    }

    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 =
        this._y0 = this._y1 =
        this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2: this._context.lineTo(this._x1, this._y1); break;
          case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
        }
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x, y) {
        var t1 = NaN;

        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; break;
          case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
          default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
        }

        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
      }
    };

    function MonotoneY(context) {
      this._context = new ReflectContext(context);
    }

    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
      MonotoneX.prototype.point.call(this, y, x);
    };

    function ReflectContext(context) {
      this._context = context;
    }

    ReflectContext.prototype = {
      moveTo: function(x, y) { this._context.moveTo(y, x); },
      closePath: function() { this._context.closePath(); },
      lineTo: function(x, y) { this._context.lineTo(y, x); },
      bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
    };

    function monotoneX(context) {
      return new MonotoneX(context);
    }

    function monotoneY(context) {
      return new MonotoneY(context);
    }

    function Natural(context) {
      this._context = context;
    }

    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x = this._x,
            y = this._y,
            n = x.length;

        if (n) {
          this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
          if (n === 2) {
            this._context.lineTo(x[1], y[1]);
          } else {
            var px = controlPoints(x),
                py = controlPoints(y);
            for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
          }
        }

        if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
      }
    };

    // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
    function controlPoints(x) {
      var i,
          n = x.length - 1,
          m,
          a = new Array(n),
          b = new Array(n),
          r = new Array(n);
      a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
      for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
      a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
      for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
      a[n - 1] = r[n - 1] / b[n - 1];
      for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
      b[n - 1] = (x[n] + a[n - 1]) / 2;
      for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
      return [a, b];
    }

    function curveNatural(context) {
      return new Natural(context);
    }

    function Step(context, t) {
      this._context = context;
      this._t = t;
    }

    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
      },
      point: function(x, y) {
        x = +x, y = +y;
        switch (this._point) {
          case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
          case 1: this._point = 2; // proceed
          default: {
            if (this._t <= 0) {
              this._context.lineTo(this._x, y);
              this._context.lineTo(x, y);
            } else {
              var x1 = this._x * (1 - this._t) + x * this._t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y);
            }
            break;
          }
        }
        this._x = x, this._y = y;
      }
    };

    function curveStep(context) {
      return new Step(context, 0.5);
    }

    function stepBefore(context) {
      return new Step(context, 0);
    }

    function stepAfter(context) {
      return new Step(context, 1);
    }

    var lookup = {
      'basis': {
        curve: curveBasis
      },
      'basis-closed': {
        curve: curveBasisClosed
      },
      'basis-open': {
        curve: curveBasisOpen
      },
      'bundle': {
        curve: curveBundle,
        tension: 'beta',
        value: 0.85
      },
      'cardinal': {
        curve: curveCardinal,
        tension: 'tension',
        value: 0
      },
      'cardinal-open': {
        curve: curveCardinalOpen,
        tension: 'tension',
        value: 0
      },
      'cardinal-closed': {
        curve: curveCardinalClosed,
        tension: 'tension',
        value: 0
      },
      'catmull-rom': {
        curve: curveCatmullRom,
        tension: 'alpha',
        value: 0.5
      },
      'catmull-rom-closed': {
        curve: curveCatmullRomClosed,
        tension: 'alpha',
        value: 0.5
      },
      'catmull-rom-open': {
        curve: curveCatmullRomOpen,
        tension: 'alpha',
        value: 0.5
      },
      'linear': {
        curve: curveLinear
      },
      'linear-closed': {
        curve: curveLinearClosed
      },
      'monotone': {
        horizontal: monotoneY,
        vertical:   monotoneX
      },
      'natural': {
        curve: curveNatural
      },
      'step': {
        curve: curveStep
      },
      'step-after': {
        curve: stepAfter
      },
      'step-before': {
        curve: stepBefore
      }
    };

    function curves(type, orientation, tension) {
      var entry = lookup.hasOwnProperty(type) && lookup[type],
          curve = null;

      if (entry) {
        curve = entry.curve || entry[orientation || 'vertical'];
        if (entry.tension && tension != null) {
          curve = curve[entry.tension](tension);
        }
      }

      return curve;
    }

    // Path parsing and rendering code adapted from fabric.js -- Thanks!
    var cmdlen = { m:2, l:2, h:1, v:1, c:6, s:4, q:4, t:2, a:7 },
        regexp = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\d)([-+])/g, /\s|,|###/];

    function pathParse(pathstr) {
      var result = [],
          path,
          curr,
          chunks,
          parsed, param,
          cmd, len, i, j, n, m;

      // First, break path into command sequence
      path = pathstr
        .slice()
        .replace(regexp[0], '###$1')
        .split(regexp[1])
        .slice(1);

      // Next, parse each command in turn
      for (i=0, n=path.length; i<n; ++i) {
        curr = path[i];
        chunks = curr
          .slice(1)
          .trim()
          .replace(regexp[2],'$1###$2')
          .split(regexp[3]);
        cmd = curr.charAt(0);

        parsed = [cmd];
        for (j=0, m=chunks.length; j<m; ++j) {
          if ((param = +chunks[j]) === param) { // not NaN
            parsed.push(param);
          }
        }

        len = cmdlen[cmd.toLowerCase()];
        if (parsed.length-1 > len) {
          for (j=1, m=parsed.length; j<m; j+=len) {
            result.push([cmd].concat(parsed.slice(j, j+len)));
          }
        }
        else {
          result.push(parsed);
        }
      }

      return result;
    }

    var DegToRad = Math.PI / 180;
    var HalfPi = Math.PI / 2;
    var Tau = Math.PI * 2;
    var HalfSqrt3 = Math.sqrt(3) / 2;

    var segmentCache = {};
    var bezierCache = {};

    var join = [].join;

    // Copied from Inkscape svgtopdf, thanks!
    function segments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
      var key = join.call(arguments);
      if (segmentCache[key]) {
        return segmentCache[key];
      }

      var th = rotateX * DegToRad;
      var sin_th = Math.sin(th);
      var cos_th = Math.cos(th);
      rx = Math.abs(rx);
      ry = Math.abs(ry);
      var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
      var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
      var pl = (px*px) / (rx*rx) + (py*py) / (ry*ry);
      if (pl > 1) {
        pl = Math.sqrt(pl);
        rx *= pl;
        ry *= pl;
      }

      var a00 = cos_th / rx;
      var a01 = sin_th / rx;
      var a10 = (-sin_th) / ry;
      var a11 = (cos_th) / ry;
      var x0 = a00 * ox + a01 * oy;
      var y0 = a10 * ox + a11 * oy;
      var x1 = a00 * x + a01 * y;
      var y1 = a10 * x + a11 * y;

      var d = (x1-x0) * (x1-x0) + (y1-y0) * (y1-y0);
      var sfactor_sq = 1 / d - 0.25;
      if (sfactor_sq < 0) sfactor_sq = 0;
      var sfactor = Math.sqrt(sfactor_sq);
      if (sweep == large) sfactor = -sfactor;
      var xc = 0.5 * (x0 + x1) - sfactor * (y1-y0);
      var yc = 0.5 * (y0 + y1) + sfactor * (x1-x0);

      var th0 = Math.atan2(y0-yc, x0-xc);
      var th1 = Math.atan2(y1-yc, x1-xc);

      var th_arc = th1-th0;
      if (th_arc < 0 && sweep === 1) {
        th_arc += Tau;
      } else if (th_arc > 0 && sweep === 0) {
        th_arc -= Tau;
      }

      var segs = Math.ceil(Math.abs(th_arc / (HalfPi + 0.001)));
      var result = [];
      for (var i=0; i<segs; ++i) {
        var th2 = th0 + i * th_arc / segs;
        var th3 = th0 + (i+1) * th_arc / segs;
        result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
      }

      return (segmentCache[key] = result);
    }

    function bezier(params) {
      var key = join.call(params);
      if (bezierCache[key]) {
        return bezierCache[key];
      }

      var cx = params[0],
          cy = params[1],
          th0 = params[2],
          th1 = params[3],
          rx = params[4],
          ry = params[5],
          sin_th = params[6],
          cos_th = params[7];

      var a00 = cos_th * rx;
      var a01 = -sin_th * ry;
      var a10 = sin_th * rx;
      var a11 = cos_th * ry;

      var cos_th0 = Math.cos(th0);
      var sin_th0 = Math.sin(th0);
      var cos_th1 = Math.cos(th1);
      var sin_th1 = Math.sin(th1);

      var th_half = 0.5 * (th1 - th0);
      var sin_th_h2 = Math.sin(th_half * 0.5);
      var t = (8/3) * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
      var x1 = cx + cos_th0 - t * sin_th0;
      var y1 = cy + sin_th0 + t * cos_th0;
      var x3 = cx + cos_th1;
      var y3 = cy + sin_th1;
      var x2 = x3 + t * sin_th1;
      var y2 = y3 - t * cos_th1;

      return (bezierCache[key] = [
        a00 * x1 + a01 * y1,  a10 * x1 + a11 * y1,
        a00 * x2 + a01 * y2,  a10 * x2 + a11 * y2,
        a00 * x3 + a01 * y3,  a10 * x3 + a11 * y3
      ]);
    }

    var temp = ['l', 0, 0, 0, 0, 0, 0, 0];

    function scale(current, s) {
      var c = (temp[0] = current[0]);
      if (c === 'a' || c === 'A') {
        temp[1] = s * current[1];
        temp[2] = s * current[2];
        temp[3] = current[3];
        temp[4] = current[4];
        temp[5] = current[5];
        temp[6] = s * current[6];
        temp[7] = s * current[7];
      } else {
        for (var i=1, n=current.length; i<n; ++i) {
          temp[i] = s * current[i];
        }
      }
      return temp;
    }

    function pathRender(context, path, l, t, s) {
      var current, // current instruction
          previous = null,
          x = 0, // current x
          y = 0, // current y
          controlX = 0, // current control point x
          controlY = 0, // current control point y
          tempX,
          tempY,
          tempControlX,
          tempControlY;

      if (l == null) l = 0;
      if (t == null) t = 0;
      if (s == null) s = 1;

      if (context.beginPath) context.beginPath();

      for (var i=0, len=path.length; i<len; ++i) {
        current = path[i];
        if (s !== 1) current = scale(current, s);

        switch (current[0]) { // first letter

          case 'l': // lineto, relative
            x += current[1];
            y += current[2];
            context.lineTo(x + l, y + t);
            break;

          case 'L': // lineto, absolute
            x = current[1];
            y = current[2];
            context.lineTo(x + l, y + t);
            break;

          case 'h': // horizontal lineto, relative
            x += current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'H': // horizontal lineto, absolute
            x = current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'v': // vertical lineto, relative
            y += current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'V': // verical lineto, absolute
            y = current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'm': // moveTo, relative
            x += current[1];
            y += current[2];
            context.moveTo(x + l, y + t);
            break;

          case 'M': // moveTo, absolute
            x = current[1];
            y = current[2];
            context.moveTo(x + l, y + t);
            break;

          case 'c': // bezierCurveTo, relative
            tempX = x + current[5];
            tempY = y + current[6];
            controlX = x + current[3];
            controlY = y + current[4];
            context.bezierCurveTo(
              x + current[1] + l, // x1
              y + current[2] + t, // y1
              controlX + l, // x2
              controlY + t, // y2
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            break;

          case 'C': // bezierCurveTo, absolute
            x = current[5];
            y = current[6];
            controlX = current[3];
            controlY = current[4];
            context.bezierCurveTo(
              current[1] + l,
              current[2] + t,
              controlX + l,
              controlY + t,
              x + l,
              y + t
            );
            break;

          case 's': // shorthand cubic bezierCurveTo, relative
            // transform to absolute x,y
            tempX = x + current[3];
            tempY = y + current[4];
            // calculate reflection of previous control points
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
            context.bezierCurveTo(
              controlX + l,
              controlY + t,
              x + current[1] + l,
              y + current[2] + t,
              tempX + l,
              tempY + t
            );

            // set control point to 2nd one of this command
            // the first control point is assumed to be the reflection of
            // the second control point on the previous command relative
            // to the current point.
            controlX = x + current[1];
            controlY = y + current[2];

            x = tempX;
            y = tempY;
            break;

          case 'S': // shorthand cubic bezierCurveTo, absolute
            tempX = current[3];
            tempY = current[4];
            // calculate reflection of previous control points
            controlX = 2*x - controlX;
            controlY = 2*y - controlY;
            context.bezierCurveTo(
              controlX + l,
              controlY + t,
              current[1] + l,
              current[2] + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            // set control point to 2nd one of this command
            // the first control point is assumed to be the reflection of
            // the second control point on the previous command relative
            // to the current point.
            controlX = current[1];
            controlY = current[2];

            break;

          case 'q': // quadraticCurveTo, relative
            // transform to absolute x,y
            tempX = x + current[3];
            tempY = y + current[4];

            controlX = x + current[1];
            controlY = y + current[2];

            context.quadraticCurveTo(
              controlX + l,
              controlY + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            break;

          case 'Q': // quadraticCurveTo, absolute
            tempX = current[3];
            tempY = current[4];

            context.quadraticCurveTo(
              current[1] + l,
              current[2] + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            controlX = current[1];
            controlY = current[2];
            break;

          case 't': // shorthand quadraticCurveTo, relative

            // transform to absolute x,y
            tempX = x + current[1];
            tempY = y + current[2];

            if (previous[0].match(/[QqTt]/) === null) {
              // If there is no previous command or if the previous command was not a Q, q, T or t,
              // assume the control point is coincident with the current point
              controlX = x;
              controlY = y;
            }
            else if (previous[0] === 't') {
              // calculate reflection of previous control points for t
              controlX = 2 * x - tempControlX;
              controlY = 2 * y - tempControlY;
            }
            else if (previous[0] === 'q') {
              // calculate reflection of previous control points for q
              controlX = 2 * x - controlX;
              controlY = 2 * y - controlY;
            }

            tempControlX = controlX;
            tempControlY = controlY;

            context.quadraticCurveTo(
              controlX + l,
              controlY + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            controlX = x + current[1];
            controlY = y + current[2];
            break;

          case 'T':
            tempX = current[1];
            tempY = current[2];

            // calculate reflection of previous control points
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
            context.quadraticCurveTo(
              controlX + l,
              controlY + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            break;

          case 'a':
            drawArc(context, x + l, y + t, [
              current[1],
              current[2],
              current[3],
              current[4],
              current[5],
              current[6] + x + l,
              current[7] + y + t
            ]);
            x += current[6];
            y += current[7];
            break;

          case 'A':
            drawArc(context, x + l, y + t, [
              current[1],
              current[2],
              current[3],
              current[4],
              current[5],
              current[6] + l,
              current[7] + t
            ]);
            x = current[6];
            y = current[7];
            break;

          case 'z':
          case 'Z':
            context.closePath();
            break;
        }
        previous = current;
      }
    }

    function drawArc(context, x, y, coords) {
      var seg = segments(
        coords[5], // end x
        coords[6], // end y
        coords[0], // radius x
        coords[1], // radius y
        coords[3], // large flag
        coords[4], // sweep flag
        coords[2], // rotation
        x, y
      );
      for (var i=0; i<seg.length; ++i) {
        var bez = bezier(seg[i]);
        context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
      }
    }

    var Tan30 = 0.5773502691896257;

    var builtins = {
      'circle': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2;
          context.moveTo(r, 0);
          context.arc(0, 0, r, 0, Tau);
        }
      },
      'cross': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              s = r / 2.5;
          context.moveTo(-r, -s);
          context.lineTo(-r, s);
          context.lineTo(-s, s);
          context.lineTo(-s, r);
          context.lineTo(s, r);
          context.lineTo(s, s);
          context.lineTo(r, s);
          context.lineTo(r, -s);
          context.lineTo(s, -s);
          context.lineTo(s, -r);
          context.lineTo(-s, -r);
          context.lineTo(-s, -s);
          context.closePath();
        }
      },
      'diamond': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2;
          context.moveTo(-r, 0);
          context.lineTo(0, -r);
          context.lineTo(r, 0);
          context.lineTo(0, r);
          context.closePath();
        }
      },
      'square': {
        draw: function(context, size) {
          var w = Math.sqrt(size),
              x = -w / 2;
          context.rect(x, x, w, w);
        }
      },
      'arrow': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              s = r / 7,
              t = r / 2.5,
              v = r / 8;
          context.moveTo(-s, r);
          context.lineTo(s, r);
          context.lineTo(s, -v);
          context.lineTo(t, -v);
          context.lineTo(0, -r);
          context.lineTo(-t, -v);
          context.lineTo(-s, -v);
          context.closePath();
        }
      },
      'wedge': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3 * r,
              o = (h - r * Tan30),
              b = r / 4;
          context.moveTo(0, -h - o);
          context.lineTo(-b, h - o);
          context.lineTo(b, h - o);
          context.closePath();
        }
      },
      'triangle': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3 * r,
              o = (h - r * Tan30);
          context.moveTo(0, -h - o);
          context.lineTo(-r, h - o);
          context.lineTo(r, h - o);
          context.closePath();
        }
      },
      'triangle-up': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3 * r;
          context.moveTo(0, -h);
          context.lineTo(-r, h);
          context.lineTo(r, h);
          context.closePath();
        }
      },
      'triangle-down': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3 * r;
          context.moveTo(0, h);
          context.lineTo(-r, -h);
          context.lineTo(r, -h);
          context.closePath();
        }
      },
      'triangle-right': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3 * r;
          context.moveTo(h, 0);
          context.lineTo(-h, -r);
          context.lineTo(-h, r);
          context.closePath();
        }
      },
      'triangle-left': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3 * r;
          context.moveTo(-h, 0);
          context.lineTo(h, -r);
          context.lineTo(h, r);
          context.closePath();
        }
      },
      'stroke': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2;
          context.moveTo(-r, 0);
          context.lineTo(r, 0);
        }
      }
    };

    function symbols(_) {
      return builtins.hasOwnProperty(_) ? builtins[_] : customSymbol(_);
    }

    var custom = {};

    function customSymbol(path) {
      if (!custom.hasOwnProperty(path)) {
        var parsed = pathParse(path);
        custom[path] = {
          draw: function(context, size) {
            pathRender(context, parsed, 0, 0, Math.sqrt(size) / 2);
          }
        };
      }
      return custom[path];
    }

    function rectangleX(d) {
      return d.x;
    }

    function rectangleY(d) {
      return d.y;
    }

    function rectangleWidth(d) {
      return d.width;
    }

    function rectangleHeight(d) {
      return d.height;
    }

    function constant$2(_) {
      return function() { return _; };
    }

    function vg_rect() {
      var x = rectangleX,
          y = rectangleY,
          width = rectangleWidth,
          height = rectangleHeight,
          cornerRadius = constant$2(0),
          context = null;

      function rectangle(_, x0, y0) {
        var buffer,
            x1 = x0 != null ? x0 : +x.call(this, _),
            y1 = y0 != null ? y0 : +y.call(this, _),
            w  = +width.call(this, _),
            h  = +height.call(this, _),
            cr = +cornerRadius.call(this, _);

        if (!context) context = buffer = path();

        if (cr <= 0) {
          context.rect(x1, y1, w, h);
        } else {
          var x2 = x1 + w,
              y2 = y1 + h;
          context.moveTo(x1 + cr, y1);
          context.lineTo(x2 - cr, y1);
          context.quadraticCurveTo(x2, y1, x2, y1 + cr);
          context.lineTo(x2, y2 - cr);
          context.quadraticCurveTo(x2, y2, x2 - cr, y2);
          context.lineTo(x1 + cr, y2);
          context.quadraticCurveTo(x1, y2, x1, y2 - cr);
          context.lineTo(x1, y1 + cr);
          context.quadraticCurveTo(x1, y1, x1 + cr, y1);
          context.closePath();
        }

        if (buffer) {
          context = null;
          return buffer + '' || null;
        }
      }

      rectangle.x = function(_) {
        if (arguments.length) {
          x = typeof _ === 'function' ? _ : constant$2(+_);
          return rectangle;
        } else {
          return x;
        }
      };

      rectangle.y = function(_) {
        if (arguments.length) {
          y = typeof _ === 'function' ? _ : constant$2(+_);
          return rectangle;
        } else {
          return y;
        }
      };

      rectangle.width = function(_) {
        if (arguments.length) {
          width = typeof _ === 'function' ? _ : constant$2(+_);
          return rectangle;
        } else {
          return width;
        }
      };

      rectangle.height = function(_) {
        if (arguments.length) {
          height = typeof _ === 'function' ? _ : constant$2(+_);
          return rectangle;
        } else {
          return height;
        }
      };

      rectangle.cornerRadius = function(_) {
        if (arguments.length) {
          cornerRadius = typeof _ === 'function' ? _ : constant$2(+_);
          return rectangle;
        } else {
          return cornerRadius;
        }
      };

      rectangle.context = function(_) {
        if (arguments.length) {
          context = _ == null ? null : _;
          return rectangle;
        } else {
          return context;
        }
      };

      return rectangle;
    }

    function vg_trail() {
      var x,
          y,
          size,
          defined,
          context = null,
          ready, x1, y1, r1;

      function point(x2, y2, w2) {
        var r2 = w2 / 2;

        if (ready) {
          var ux = y1 - y2,
              uy = x2 - x1;

          if (ux || uy) {
            // get normal vector
            var ud = Math.sqrt(ux * ux + uy * uy),
                rx = (ux /= ud) * r1,
                ry = (uy /= ud) * r1,
                t = Math.atan2(uy, ux);

            // draw segment
            context.moveTo(x1 - rx, y1 - ry);
            context.lineTo(x2 - ux * r2, y2 - uy * r2);
            context.arc(x2, y2, r2, t - Math.PI, t);
            context.lineTo(x1 + rx, y1 + ry);
            context.arc(x1, y1, r1, t, t + Math.PI);
          } else {
            context.arc(x2, y2, r2, 0, Tau);
          }
          context.closePath();
        } else {
          ready = 1;
        }
        x1 = x2;
        y1 = y2;
        r1 = r2;
      }

      function trail(data) {
        var i,
            n = data.length,
            d,
            defined0 = false,
            buffer;

        if (context == null) context = buffer = path();

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) ready = 0;
          }
          if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
        }

        if (buffer) {
          context = null;
          return buffer + '' || null;
        }
      }

      trail.x = function(_) {
        if (arguments.length) {
          x = _;
          return trail;
        } else {
          return x;
        }
      };

      trail.y = function(_) {
        if (arguments.length) {
          y = _;
          return trail;
        } else {
          return y;
        }
      };

      trail.size = function(_) {
        if (arguments.length) {
          size = _;
          return trail;
        } else {
          return size;
        }
      };

      trail.defined = function(_) {
        if (arguments.length) {
          defined = _;
          return trail;
        } else {
          return defined;
        }
      };

      trail.context = function(_) {
        if (arguments.length) {
          if (_ == null) {
            context = null;
          } else {
            context = _;
          }
          return trail;
        } else {
          return context;
        }
      };

      return trail;
    }

    function x$1(item)    { return item.x || 0; }
    function y$1(item)    { return item.y || 0; }
    function w(item)    { return item.width || 0; }
    function ts(item)   { return item.size || 1; }
    function h(item)    { return item.height || 0; }
    function xw(item)   { return (item.x || 0) + (item.width || 0); }
    function yh(item)   { return (item.y || 0) + (item.height || 0); }
    function sa(item)   { return item.startAngle || 0; }
    function ea(item)   { return item.endAngle || 0; }
    function pa(item)   { return item.padAngle || 0; }
    function ir(item)   { return item.innerRadius || 0; }
    function or(item)   { return item.outerRadius || 0; }
    function cr(item)   { return item.cornerRadius || 0; }
    function def(item)  { return !(item.defined === false); }
    function size(item) { return item.size == null ? 64 : item.size; }
    function type(item) { return symbols(item.shape || 'circle'); }

    var arcShape    = d3_arc().startAngle(sa).endAngle(ea).padAngle(pa)
                              .innerRadius(ir).outerRadius(or).cornerRadius(cr),
        areavShape  = area().x(x$1).y1(y$1).y0(yh).defined(def),
        areahShape  = area().y(y$1).x1(x$1).x0(xw).defined(def),
        lineShape   = line().x(x$1).y(y$1).defined(def),
        rectShape   = vg_rect().x(x$1).y(y$1).width(w).height(h).cornerRadius(cr),
        symbolShape = d3_symbol().type(type).size(size),
        trailShape  = vg_trail().x(x$1).y(y$1).defined(def).size(ts);

    function arc(context, item) {
      return arcShape.context(context)(item);
    }

    function area$1(context, items) {
      var item = items[0],
          interp = item.interpolate || 'linear';
      return (item.orient === 'horizontal' ? areahShape : areavShape)
        .curve(curves(interp, item.orient, item.tension))
        .context(context)(items);
    }

    function line$1(context, items) {
      var item = items[0],
          interp = item.interpolate || 'linear';
      return lineShape.curve(curves(interp, item.orient, item.tension))
        .context(context)(items);
    }

    function rectangle(context, item, x, y) {
      return rectShape.context(context)(item, x, y);
    }

    function shape(context, item) {
      return (item.mark.shape || item.shape)
        .context(context)(item);
    }

    function symbol(context, item) {
      return symbolShape.context(context)(item);
    }

    function trail(context, items) {
      return trailShape.context(context)(items);
    }

    function boundStroke(bounds, item) {
      if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
        bounds.expand(item.strokeWidth != null ? +item.strokeWidth : 1);
      }
      return bounds;
    }

    var bounds,
        circleThreshold = Tau - 1e-8;

    function context(_) {
      bounds = _;
      return context;
    }

    function noop$1() {}

    function add$2(x, y) { bounds.add(x, y); }

    context.beginPath = noop$1;

    context.closePath = noop$1;

    context.moveTo = add$2;

    context.lineTo = add$2;

    context.rect = function(x, y, w, h) {
      add$2(x, y);
      add$2(x + w, y + h);
    };

    context.quadraticCurveTo = function(x1, y1, x2, y2) {
      add$2(x1, y1);
      add$2(x2, y2);
    };

    context.bezierCurveTo = function(x1, y1, x2, y2, x3, y3) {
      add$2(x1, y1);
      add$2(x2, y2);
      add$2(x3, y3);
    };

    context.arc = function(cx, cy, r, sa, ea, ccw) {
      if (Math.abs(ea - sa) > circleThreshold) {
        add$2(cx - r, cy - r);
        add$2(cx + r, cy + r);
        return;
      }

      var xmin = Infinity, xmax = -Infinity,
          ymin = Infinity, ymax = -Infinity,
          s, i, x, y;

      function update(a) {
        x = r * Math.cos(a);
        y = r * Math.sin(a);
        if (x < xmin) xmin = x;
        if (x > xmax) xmax = x;
        if (y < ymin) ymin = y;
        if (y > ymax) ymax = y;
      }

      // Sample end points and interior points aligned with 90 degrees
      update(sa);
      update(ea);

      if (ea !== sa) {
        sa = sa % Tau; if (sa < 0) sa += Tau;
        ea = ea % Tau; if (ea < 0) ea += Tau;

        if (ea < sa) {
          ccw = !ccw; // flip direction
          s = sa; sa = ea; ea = s; // swap end-points
        }

        if (ccw) {
          ea -= Tau;
          s = sa - (sa % HalfPi);
          for (i=0; i<4 && s>ea; ++i, s-=HalfPi) update(s);
        } else {
          s = sa - (sa % HalfPi) + HalfPi;
          for (i=0; i<4 && s<ea; ++i, s=s+HalfPi) update(s);
        }
      }

      add$2(cx + xmin, cy + ymin);
      add$2(cx + xmax, cy + ymax);
    };

    var context$1 = (context$1 = domCanvas(1,1))
      ? context$1.getContext('2d')
      : null;

    const b = new Bounds();

    function intersectPath(draw) {
      return function(item, brush) {
        // rely on (inaccurate) bounds intersection if no context
        if (!context$1) return true;

        // add path to offscreen graphics context
        draw(context$1, item);

        // get bounds intersection region
        b.clear().union(item.bounds).intersect(brush).round();
        const {x1, y1, x2, y2} = b;

        // iterate over intersection region
        // perform fine grained inclusion test
        for (let y = y1; y <= y2; ++y) {
          for (let x = x1; x <= x2; ++x) {
            if (context$1.isPointInPath(x, y)) {
              return true;
            }
          }
        }

        // false if no hits in intersection region
        return false;
      }
    }

    function intersectPoint(item, box) {
      return box.contains(item.x || 0, item.y || 0);
    }

    function intersectRect(item, box) {
      const x = item.x || 0,
            y = item.y || 0,
            w = item.width || 0,
            h = item.height || 0;
      return box.intersects(b.set(x, y, x + w, y + h));
    }

    function intersectRule(item, box) {
      const x = item.x || 0,
            y = item.y || 0,
            x2 = item.x2 != null ? item.x2 : x,
            y2 = item.y2 != null ? item.y2 : y;
      return intersectBoxLine(box, x, y, x2, y2);
    }

    function intersectBoxLine(box, x, y, u, v) {
      const {x1, y1, x2, y2} = box,
            dx = u - x,
            dy = v - y;

      let t0 = 0, t1 = 1, p, q, r, e;

      for (e=0; e<4; ++e) {
        if (e === 0) { p = -dx; q = -(x1 - x); }
        if (e === 1) { p =  dx; q =  (x2 - x); }
        if (e === 2) { p = -dy; q = -(y1 - y); }
        if (e === 3) { p =  dy; q =  (y2 - y); }

        if (Math.abs(p) < 1e-10 && q < 0) return false;

        r = q / p;

        if (p < 0) {
          if (r > t1) return false;
          else if (r > t0) t0 = r;
        } else if (p > 0) {
          if (r < t0) return false;
          else if (r < t1) t1 = r;
        }
      }

      return true;
    }

    function gradient(context, gradient, bounds) {
      var w = bounds.width(),
          h = bounds.height(),
          x1 = bounds.x1 + gradient.x1 * w,
          y1 = bounds.y1 + gradient.y1 * h,
          x2 = bounds.x1 + gradient.x2 * w,
          y2 = bounds.y1 + gradient.y2 * h,
          stop = gradient.stops,
          i = 0,
          n = stop.length,
          linearGradient = context.createLinearGradient(x1, y1, x2, y2);

      for (; i<n; ++i) {
        linearGradient.addColorStop(stop[i].offset, stop[i].color);
      }

      return linearGradient;
    }

    function color(context, item, value) {
      return (value.id) ?
        gradient(context, value, item.bounds) :
        value;
    }

    function fill(context, item, opacity) {
      opacity *= (item.fillOpacity==null ? 1 : item.fillOpacity);
      if (opacity > 0) {
        context.globalAlpha = opacity;
        context.fillStyle = color(context, item, item.fill);
        return true;
      } else {
        return false;
      }
    }

    var Empty$1 = [];

    function stroke(context, item, opacity) {
      var lw = (lw = item.strokeWidth) != null ? lw : 1;

      if (lw <= 0) return false;

      opacity *= (item.strokeOpacity==null ? 1 : item.strokeOpacity);
      if (opacity > 0) {
        context.globalAlpha = opacity;
        context.strokeStyle = color(context, item, item.stroke);

        context.lineWidth = lw;
        context.lineCap = item.strokeCap || 'butt';
        context.lineJoin = item.strokeJoin || 'miter';
        context.miterLimit = item.strokeMiterLimit || 10;

        if (context.setLineDash) {
          context.setLineDash(item.strokeDash || Empty$1);
          context.lineDashOffset = item.strokeDashOffset || 0;
        }
        return true;
      } else {
        return false;
      }
    }

    function compare$1(a, b) {
      return a.zindex - b.zindex || a.index - b.index;
    }

    function zorder(scene) {
      if (!scene.zdirty) return scene.zitems;

      var items = scene.items,
          output = [], item, i, n;

      for (i=0, n=items.length; i<n; ++i) {
        item = items[i];
        item.index = i;
        if (item.zindex) output.push(item);
      }

      scene.zdirty = false;
      return scene.zitems = output.sort(compare$1);
    }

    function visit(scene, visitor) {
      var items = scene.items, i, n;
      if (!items || !items.length) return;

      var zitems = zorder(scene);

      if (zitems && zitems.length) {
        for (i=0, n=items.length; i<n; ++i) {
          if (!items[i].zindex) visitor(items[i]);
        }
        items = zitems;
      }

      for (i=0, n=items.length; i<n; ++i) {
        visitor(items[i]);
      }
    }

    function pickVisit(scene, visitor) {
      var items = scene.items, hit, i;
      if (!items || !items.length) return null;

      var zitems = zorder(scene);
      if (zitems && zitems.length) items = zitems;

      for (i=items.length; --i >= 0;) {
        if (hit = visitor(items[i])) return hit;
      }

      if (items === zitems) {
        for (items=scene.items, i=items.length; --i >= 0;) {
          if (!items[i].zindex) {
            if (hit = visitor(items[i])) return hit;
          }
        }
      }

      return null;
    }

    function drawAll(path) {
      return function(context, scene, bounds) {
        visit(scene, function(item) {
          if (!bounds || bounds.intersects(item.bounds)) {
            drawPath(path, context, item, item);
          }
        });
      };
    }

    function drawOne(path) {
      return function(context, scene, bounds) {
        if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {
          drawPath(path, context, scene.items[0], scene.items);
        }
      };
    }

    function drawPath(path, context, item, items) {
      var opacity = item.opacity == null ? 1 : item.opacity;
      if (opacity === 0) return;

      if (path(context, items)) return;

      if (item.fill && fill(context, item, opacity)) {
        context.fill();
      }

      if (item.stroke && stroke(context, item, opacity)) {
        context.stroke();
      }
    }

    function pick$1(test) {
      test = test || truthy;

      return function(context, scene, x, y, gx, gy) {
        x *= context.pixelRatio;
        y *= context.pixelRatio;

        return pickVisit(scene, function(item) {
          var b = item.bounds;
          // first hit test against bounding box
          if ((b && !b.contains(gx, gy)) || !b) return;
          // if in bounding box, perform more careful test
          if (test(context, item, x, y, gx, gy)) return item;
        });
      };
    }

    function hitPath(path, filled) {
      return function(context, o, x, y) {
        var item = Array.isArray(o) ? o[0] : o,
            fill = (filled == null) ? item.fill : filled,
            stroke = item.stroke && context.isPointInStroke, lw, lc;

        if (stroke) {
          lw = item.strokeWidth;
          lc = item.strokeCap;
          context.lineWidth = lw != null ? lw : 1;
          context.lineCap   = lc != null ? lc : 'butt';
        }

        return path(context, o) ? false :
          (fill && context.isPointInPath(x, y)) ||
          (stroke && context.isPointInStroke(x, y));
      };
    }

    function pickPath(path) {
      return pick$1(hitPath(path));
    }

    function translate(x, y) {
      return 'translate(' + x + ',' + y + ')';
    }

    function rotate(a) {
      return 'rotate(' + a + ')';
    }

    function translateItem(item) {
      return translate(item.x || 0, item.y || 0);
    }

    function transformItem(item) {
      return translate(item.x || 0, item.y || 0)
        + (item.angle ? ' ' + rotate(item.angle) : '');
    }

    function markItemPath(type, shape, isect) {

      function attr(emit, item) {
        emit('transform', transformItem(item));
        emit('d', shape(null, item));
      }

      function bound(bounds, item) {
        var x = item.x || 0,
            y = item.y || 0;

        shape(context(bounds), item);
        boundStroke(bounds, item).translate(x, y);
        if (item.angle) {
          bounds.rotate(item.angle * DegToRad, x, y);
        }

        return bounds;
      }

      function draw(context, item) {
        var x = item.x || 0,
            y = item.y || 0,
            a = item.angle || 0;

        context.translate(x, y);
        if (a) context.rotate(a *= DegToRad);
        context.beginPath();
        shape(context, item);
        if (a) context.rotate(-a);
        context.translate(-x, -y);
      }

      return {
        type:   type,
        tag:    'path',
        nested: false,
        attr:   attr,
        bound:  bound,
        draw:   drawAll(draw),
        pick:   pickPath(draw),
        isect:  isect || intersectPath(draw)
      };

    }

    var arc$1 = markItemPath('arc', arc);

    function pickArea(a, p) {
      var v = a[0].orient === 'horizontal' ? p[1] : p[0],
          z = a[0].orient === 'horizontal' ? 'y' : 'x',
          i = a.length,
          min = +Infinity, hit, d;

      while (--i >= 0) {
        if (a[i].defined === false) continue;
        d = Math.abs(a[i][z] - v);
        if (d < min) {
          min = d;
          hit = a[i];
        }
      }

      return hit;
    }

    function pickLine(a, p) {
      var t = Math.pow(a[0].strokeWidth || 1, 2),
          i = a.length, dx, dy, dd;

      while (--i >= 0) {
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        if (dd < t) return a[i];
      }

      return null;
    }

    function pickTrail(a, p) {
      var i = a.length, dx, dy, dd;

      while (--i >= 0) {
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        dx = a[i].size || 1;
        if (dd < dx*dx) return a[i];
      }

      return null;
    }

    function markMultiItemPath(type, shape, tip) {

      function attr(emit, item) {
        var items = item.mark.items;
        if (items.length) emit('d', shape(null, items));
      }

      function bound(bounds, mark) {
        var items = mark.items;
        if (items.length === 0) {
          return bounds;
        } else {
          shape(context(bounds), items);
          return boundStroke(bounds, items[0]);
        }
      }

      function draw(context, items) {
        context.beginPath();
        shape(context, items);
      }

      var hit = hitPath(draw);

      function pick(context, scene, x, y, gx, gy) {
        var items = scene.items,
            b = scene.bounds;

        if (!items || !items.length || b && !b.contains(gx, gy)) {
          return null;
        }

        x *= context.pixelRatio;
        y *= context.pixelRatio;
        return hit(context, items, x, y) ? items[0] : null;
      }

      return {
        type:   type,
        tag:    'path',
        nested: true,
        attr:   attr,
        bound:  bound,
        draw:   drawOne(draw),
        pick:   pick,
        isect:  intersectPoint,
        tip:    tip
      };

    }

    var area$2 = markMultiItemPath('area', area$1, pickArea);

    var clip_id = 1;

    function clip(renderer, item, size) {
      var clip = item.clip,
          defs = renderer._defs,
          id = item.clip_id || (item.clip_id = 'clip' + clip_id++),
          c = defs.clipping[id] || (defs.clipping[id] = {id: id});

      if (isFunction(clip)) {
        c.path = clip(null);
      } else {
        c.width = size.width || 0;
        c.height = size.height || 0;
      }

      return 'url(#' + id + ')';
    }

    var StrokeOffset = 0.5;

    function attr(emit, item) {
      emit('transform', translateItem(item));
    }

    function background(emit, item) {
      var offset = item.stroke ? StrokeOffset : 0;
      emit('class', 'background');
      emit('d', rectangle(null, item, offset, offset));
    }

    function foreground(emit, item, renderer) {
      var url = item.clip ? clip(renderer, item, item) : null;
      emit('clip-path', url);
    }

    function bound(bounds, group) {
      if (!group.clip && group.items) {
        var items = group.items;
        for (var j=0, m=items.length; j<m; ++j) {
          bounds.union(items[j].bounds);
        }
      }

      if ((group.clip || group.width || group.height) && !group.noBound) {
        bounds.add(0, 0).add(group.width || 0, group.height || 0);
      }

      boundStroke(bounds, group);

      return bounds.translate(group.x || 0, group.y || 0);
    }

    function backgroundPath(context, group) {
      var offset = group.stroke ? StrokeOffset : 0;
      context.beginPath();
      rectangle(context, group, offset, offset);
    }

    var hitBackground = hitPath(backgroundPath);

    function draw(context, scene, bounds) {
      var renderer = this;

      visit(scene, function(group) {
        var gx = group.x || 0,
            gy = group.y || 0,
            w = group.width || 0,
            h = group.height || 0,
            opacity;

        // setup graphics context
        context.save();
        context.translate(gx, gy);

        // draw group background
        if (group.stroke || group.fill) {
          opacity = group.opacity == null ? 1 : group.opacity;
          if (opacity > 0) {
            backgroundPath(context, group);
            if (group.fill && fill(context, group, opacity)) {
              context.fill();
            }
            if (group.stroke && stroke(context, group, opacity)) {
              context.stroke();
            }
          }
        }

        // set clip and bounds
        if (group.clip) {
          context.beginPath();
          context.rect(0, 0, w, h);
          context.clip();
        }
        if (bounds) bounds.translate(-gx, -gy);

        // draw group contents
        visit(group, function(item) {
          renderer.draw(context, item, bounds);
        });

        // restore graphics context
        if (bounds) bounds.translate(gx, gy);
        context.restore();
      });
    }

    function pick$2(context, scene, x, y, gx, gy) {
      if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
        return null;
      }

      var handler = this,
          cx = x * context.pixelRatio,
          cy = y * context.pixelRatio;

      return pickVisit(scene, function(group) {
        var hit, dx, dy, b;

        // first hit test against bounding box
        // if a group is clipped, that should be handled by the bounds check.
        b = group.bounds;
        if (b && !b.contains(gx, gy)) return;

        // passed bounds check, so test sub-groups
        dx = (group.x || 0);
        dy = (group.y || 0);

        context.save();
        context.translate(dx, dy);

        dx = gx - dx;
        dy = gy - dy;

        // hit test against contained marks
        hit = pickVisit(group, function(mark) {
          return pickMark(mark, dx, dy)
            ? handler.pick(mark, x, y, dx, dy)
            : null;
        });

        // hit test against group background
        if (!hit && scene.interactive !== false
            && (group.fill || group.stroke)
            && hitBackground(context, group, cx, cy)) {
          hit = group;
        }

        context.restore();
        return hit || null;
      });
    }

    function pickMark(mark, x, y) {
      return (mark.interactive !== false || mark.marktype === 'group')
        && mark.bounds && mark.bounds.contains(x, y);
    }

    var group = {
      type:       'group',
      tag:        'g',
      nested:     false,
      attr:       attr,
      bound:      bound,
      draw:       draw,
      pick:       pick$2,
      isect:      intersectRect,
      background: background,
      foreground: foreground
    };

    function getImage(item, renderer) {
      var image = item.image;
      if (!image || image.url !== item.url) {
        image = {loaded: false, width: 0, height: 0};
        renderer.loadImage(item.url).then(function(image) {
          item.image = image;
          item.image.url = item.url;
        });
      }
      return image;
    }

    function imageXOffset(align, w) {
      return align === 'center' ? w / 2 : align === 'right' ? w : 0;
    }

    function imageYOffset(baseline, h) {
      return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;
    }

    function attr$1(emit, item, renderer) {
      var image = getImage(item, renderer),
          x = item.x || 0,
          y = item.y || 0,
          w = (item.width != null ? item.width : image.width) || 0,
          h = (item.height != null ? item.height : image.height) || 0,
          a = item.aspect === false ? 'none' : 'xMidYMid';

      x -= imageXOffset(item.align, w);
      y -= imageYOffset(item.baseline, h);

      emit('href', image.src || '', 'http://www.w3.org/1999/xlink', 'xlink:href');
      emit('transform', translate(x, y));
      emit('width', w);
      emit('height', h);
      emit('preserveAspectRatio', a);
    }

    function bound$1(bounds, item) {
      var image = item.image,
          x = item.x || 0,
          y = item.y || 0,
          w = (item.width != null ? item.width : (image && image.width)) || 0,
          h = (item.height != null ? item.height : (image && image.height)) || 0;

      x -= imageXOffset(item.align, w);
      y -= imageYOffset(item.baseline, h);

      return bounds.set(x, y, x + w, y + h);
    }

    function draw$1(context, scene, bounds) {
      var renderer = this;

      visit(scene, function(item) {
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

        var image = getImage(item, renderer),
            x = item.x || 0,
            y = item.y || 0,
            w = (item.width != null ? item.width : image.width) || 0,
            h = (item.height != null ? item.height : image.height) || 0,
            opacity, ar0, ar1, t;

        x -= imageXOffset(item.align, w);
        y -= imageYOffset(item.baseline, h);

        if (item.aspect !== false) {
          ar0 = image.width / image.height;
          ar1 = item.width / item.height;
          if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
            if (ar1 < ar0) {
              t = w / ar0;
              y += (h - t) / 2;
              h = t;
            } else {
              t = h * ar0;
              x += (w - t) / 2;
              w = t;
            }
          }
        }

        if (image.loaded) {
          context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
          context.drawImage(image, x, y, w, h);
        }
      });
    }

    var image = {
      type:     'image',
      tag:      'image',
      nested:   false,
      attr:     attr$1,
      bound:    bound$1,
      draw:     draw$1,
      pick:     pick$1(),
      isect:    truthy, // bounds check is sufficient
      get:      getImage,
      xOffset:  imageXOffset,
      yOffset:  imageYOffset
    };

    var line$2 = markMultiItemPath('line', line$1, pickLine);

    function attr$2(emit, item) {
      emit('transform', translateItem(item));
      emit('d', item.path);
    }

    function path$1(context, item) {
      var path = item.path;
      if (path == null) return true;

      var cache = item.pathCache;
      if (!cache || cache.path !== path) {
        (item.pathCache = cache = pathParse(path)).path = path;
      }
      pathRender(context, cache, item.x, item.y);
    }

    function bound$2(bounds, item) {
      return path$1(context(bounds), item)
        ? bounds.set(0, 0, 0, 0)
        : boundStroke(bounds, item);
    }

    var path$2 = {
      type:   'path',
      tag:    'path',
      nested: false,
      attr:   attr$2,
      bound:  bound$2,
      draw:   drawAll(path$1),
      pick:   pickPath(path$1),
      isect:  intersectPath(path$1)
    };

    function attr$3(emit, item) {
      emit('d', rectangle(null, item));
    }

    function bound$3(bounds, item) {
      var x, y;
      return boundStroke(bounds.set(
        x = item.x || 0,
        y = item.y || 0,
        (x + item.width) || 0,
        (y + item.height) || 0
      ), item);
    }

    function draw$2(context, item) {
      context.beginPath();
      rectangle(context, item);
    }

    var rect = {
      type:   'rect',
      tag:    'path',
      nested: false,
      attr:   attr$3,
      bound:  bound$3,
      draw:   drawAll(draw$2),
      pick:   pickPath(draw$2),
      isect:  intersectRect
    };

    function attr$4(emit, item) {
      emit('transform', translateItem(item));
      emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);
      emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);
    }

    function bound$4(bounds, item) {
      var x1, y1;
      return boundStroke(bounds.set(
        x1 = item.x || 0,
        y1 = item.y || 0,
        item.x2 != null ? item.x2 : x1,
        item.y2 != null ? item.y2 : y1
      ), item);
    }

    function path$3(context, item, opacity) {
      var x1, y1, x2, y2;

      if (item.stroke && stroke(context, item, opacity)) {
        x1 = item.x || 0;
        y1 = item.y || 0;
        x2 = item.x2 != null ? item.x2 : x1;
        y2 = item.y2 != null ? item.y2 : y1;
        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        return true;
      }
      return false;
    }

    function draw$3(context, scene, bounds) {
      visit(scene, function(item) {
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        var opacity = item.opacity == null ? 1 : item.opacity;
        if (opacity && path$3(context, item, opacity)) {
          context.stroke();
        }
      });
    }

    function hit(context, item, x, y) {
      if (!context.isPointInStroke) return false;
      return path$3(context, item, 1) && context.isPointInStroke(x, y);
    }

    var rule = {
      type:   'rule',
      tag:    'line',
      nested: false,
      attr:   attr$4,
      bound:  bound$4,
      draw:   draw$3,
      pick:   pick$1(hit),
      isect:  intersectRule
    };

    var shape$1 = markItemPath('shape', shape);

    var symbol$1 = markItemPath('symbol', symbol, intersectPoint);

    var currFontHeight;

    var textMetrics = {
      height: fontSize,
      measureWidth: measureWidth,
      estimateWidth: estimateWidth,
      width: estimateWidth,
      canvas: useCanvas
    };

    useCanvas(true);

    // make dumb, simple estimate if no canvas is available
    function estimateWidth(item) {
      currFontHeight = fontSize(item);
      return estimate(textValue(item));
    }

    function estimate(text) {
      return ~~(0.8 * text.length * currFontHeight);
    }

    // measure text width if canvas is available
    function measureWidth(item) {
      return fontSize(item) <= 0 ? 0
        : (context$1.font = font(item), measure$1(textValue(item)));
    }

    function measure$1(text) {
      return context$1.measureText(text).width;
    }

    function fontSize(item) {
      return item.fontSize != null ? item.fontSize : 11;
    }

    function useCanvas(use) {
      textMetrics.width = (use && context$1) ? measureWidth : estimateWidth;
    }

    function textValue(item) {
      var s = item.text;
      if (s == null) {
        return '';
      } else {
        return item.limit > 0 ? truncate$1(item) : s + '';
      }
    }

    function truncate$1(item) {
      var limit = +item.limit,
          text = item.text + '',
          width;

      if (textMetrics.width === measureWidth) {
        // we are using canvas
        context$1.font = font(item);
        width = measure$1;
      } else {
        // we are relying on estimates
        currFontHeight = fontSize(item);
        width = estimate;
      }

      if (width(text) < limit) return text;

      var ellipsis = item.ellipsis || '\u2026',
          rtl = item.dir === 'rtl',
          lo = 0,
          hi = text.length, mid;

      limit -= width(ellipsis);

      if (rtl) {
        while (lo < hi) {
          mid = (lo + hi >>> 1);
          if (width(text.slice(mid)) > limit) lo = mid + 1;
          else hi = mid;
        }
        return ellipsis + text.slice(lo);
      } else {
        while (lo < hi) {
          mid = 1 + (lo + hi >>> 1);
          if (width(text.slice(0, mid)) < limit) lo = mid;
          else hi = mid - 1;
        }
        return text.slice(0, lo) + ellipsis;
      }
    }

    function fontFamily(item, quote) {
      var font = item.font;
      return (quote && font
        ? String(font).replace(/"/g, '\'')
        : font) || 'sans-serif';
    }

    function font(item, quote) {
      return '' +
        (item.fontStyle ? item.fontStyle + ' ' : '') +
        (item.fontVariant ? item.fontVariant + ' ' : '') +
        (item.fontWeight ? item.fontWeight + ' ' : '') +
        fontSize(item) + 'px ' +
        fontFamily(item, quote);
    }

    function offset(item) {
      // perform our own font baseline calculation
      // why? not all browsers support SVG 1.1 'alignment-baseline' :(
      var baseline = item.baseline,
          h = fontSize(item);
      return Math.round(
        baseline === 'top'    ?  0.79*h :
        baseline === 'middle' ?  0.30*h :
        baseline === 'bottom' ? -0.21*h : 0
      );
    }

    var textAlign = {
      'left':   'start',
      'center': 'middle',
      'right':  'end'
    };

    var tempBounds = new Bounds();

    function anchorPoint(item) {
      var x = item.x || 0,
          y = item.y || 0,
          r = item.radius || 0, t;

      if (r) {
        t = (item.theta || 0) - HalfPi;
        x += r * Math.cos(t);
        y += r * Math.sin(t);
      }

      tempBounds.x1 = x;
      tempBounds.y1 = y;
      return tempBounds;
    }

    function attr$5(emit, item) {
      var dx = item.dx || 0,
          dy = (item.dy || 0) + offset(item),
          p = anchorPoint(item),
          x = p.x1,
          y = p.y1,
          a = item.angle || 0, t;

      emit('text-anchor', textAlign[item.align] || 'start');

      if (a) {
        t = translate(x, y) + ' ' + rotate(a);
        if (dx || dy) t += ' ' + translate(dx, dy);
      } else {
        t = translate(x + dx, y + dy);
      }
      emit('transform', t);
    }

    function bound$5(bounds, item, mode) {
      var h = textMetrics.height(item),
          a = item.align,
          p = anchorPoint(item),
          x = p.x1,
          y = p.y1,
          dx = item.dx || 0,
          dy = (item.dy || 0) + offset(item) - Math.round(0.8*h), // use 4/5 offset
          w;

      // horizontal alignment
      w = textMetrics.width(item);
      if (a === 'center') {
        dx -= (w / 2);
      } else if (a === 'right') {
        dx -= w;
      }

      bounds.set(dx+=x, dy+=y, dx+w, dy+h);
      if (item.angle && !mode) {
        bounds.rotate(item.angle * DegToRad, x, y);
      } else if (mode === 2) {
        return bounds.rotatedPoints(item.angle * DegToRad, x, y);
      }
      return bounds;
    }

    function draw$4(context, scene, bounds) {
      visit(scene, function(item) {
        var opacity, p, x, y, str;
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        if (!(str = textValue(item))) return; // get text string

        opacity = item.opacity == null ? 1 : item.opacity;
        if (opacity === 0 || item.fontSize <= 0) return;

        context.font = font(item);
        context.textAlign = item.align || 'left';

        p = anchorPoint(item);
        x = p.x1,
        y = p.y1;

        if (item.angle) {
          context.save();
          context.translate(x, y);
          context.rotate(item.angle * DegToRad);
          x = y = 0; // reset x, y
        }
        x += (item.dx || 0);
        y += (item.dy || 0) + offset(item);

        if (item.fill && fill(context, item, opacity)) {
          context.fillText(str, x, y);
        }
        if (item.stroke && stroke(context, item, opacity)) {
          context.strokeText(str, x, y);
        }
        if (item.angle) context.restore();
      });
    }

    function hit$1(context, item, x, y, gx, gy) {
      if (item.fontSize <= 0) return false;
      if (!item.angle) return true; // bounds sufficient if no rotation

      // project point into space of unrotated bounds
      var p = anchorPoint(item),
          ax = p.x1,
          ay = p.y1,
          b = bound$5(tempBounds, item, 1),
          a = -item.angle * DegToRad,
          cos = Math.cos(a),
          sin = Math.sin(a),
          px = cos * gx - sin * gy + (ax - cos * ax + sin * ay),
          py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);

      return b.contains(px, py);
    }

    function intersectText(item, box) {
      var p = bound$5(tempBounds, item, 2);
      return intersectBoxLine(box, p[0], p[1], p[2], p[3])
          || intersectBoxLine(box, p[0], p[1], p[4], p[5])
          || intersectBoxLine(box, p[4], p[5], p[6], p[7])
          || intersectBoxLine(box, p[2], p[3], p[6], p[7]);
    }

    var text = {
      type:   'text',
      tag:    'text',
      nested: false,
      attr:   attr$5,
      bound:  bound$5,
      draw:   draw$4,
      pick:   pick$1(hit$1),
      isect:  intersectText
    };

    var trail$1 = markMultiItemPath('trail', trail, pickTrail);

    var marks = {
      arc:     arc$1,
      area:    area$2,
      group:   group,
      image:   image,
      line:    line$2,
      path:    path$2,
      rect:    rect,
      rule:    rule,
      shape:   shape$1,
      symbol:  symbol$1,
      text:    text,
      trail:   trail$1
    };

    function boundItem(item, func, opt) {
      var type = marks[item.mark.marktype],
          bound = func || type.bound;
      if (type.nested) item = item.mark;

      return bound(item.bounds || (item.bounds = new Bounds()), item, opt);
    }

    var DUMMY = {mark: null};

    function boundMark(mark, bounds, opt) {
      var type  = marks[mark.marktype],
          bound = type.bound,
          items = mark.items,
          hasItems = items && items.length,
          i, n, item, b;

      if (type.nested) {
        if (hasItems) {
          item = items[0];
        } else {
          // no items, fake it
          DUMMY.mark = mark;
          item = DUMMY;
        }
        b = boundItem(item, bound, opt);
        bounds = bounds && bounds.union(b) || b;
        return bounds;
      }

      bounds = bounds
        || mark.bounds && mark.bounds.clear()
        || new Bounds();

      if (hasItems) {
        for (i=0, n=items.length; i<n; ++i) {
          bounds.union(boundItem(items[i], bound, opt));
        }
      }

      return mark.bounds = bounds;
    }

    var keys$1 = [
      'marktype', 'name', 'role', 'interactive', 'clip', 'items', 'zindex',
      'x', 'y', 'width', 'height', 'align', 'baseline',             // layout
      'fill', 'fillOpacity', 'opacity',                             // fill
      'stroke', 'strokeOpacity', 'strokeWidth', 'strokeCap',        // stroke
      'strokeDash', 'strokeDashOffset',                             // stroke dash
      'startAngle', 'endAngle', 'innerRadius', 'outerRadius',       // arc
      'cornerRadius', 'padAngle',                                   // arc, rect
      'interpolate', 'tension', 'orient', 'defined',                // area, line
      'url',                                                        // image
      'path',                                                       // path
      'x2', 'y2',                                                   // rule
      'size', 'shape',                                              // symbol
      'text', 'angle', 'theta', 'radius', 'dx', 'dy',               // text
      'font', 'fontSize', 'fontWeight', 'fontStyle', 'fontVariant'  // font
    ];

    function sceneToJSON(scene, indent) {
      return JSON.stringify(scene, keys$1, indent);
    }

    function sceneFromJSON(json) {
      var scene = (typeof json === 'string' ? JSON.parse(json) : json);
      return initialize(scene);
    }

    function initialize(scene) {
      var type = scene.marktype,
          items = scene.items,
          parent, i, n;

      if (items) {
        for (i=0, n=items.length; i<n; ++i) {
          parent = type ? 'mark' : 'group';
          items[i][parent] = scene;
          if (items[i].zindex) items[i][parent].zdirty = true;
          if ('group' === (type || parent)) initialize(items[i]);
        }
      }

      if (type) boundMark(scene);
      return scene;
    }

    function Scenegraph(scene) {
      if (arguments.length) {
        this.root = sceneFromJSON(scene);
      } else {
        this.root = createMark({
          marktype: 'group',
          name: 'root',
          role: 'frame'
        });
        this.root.items = [new GroupItem(this.root)];
      }
    }

    var prototype$F = Scenegraph.prototype;

    prototype$F.toJSON = function(indent) {
      return sceneToJSON(this.root, indent || 0);
    };

    prototype$F.mark = function(markdef, group, index) {
      group = group || this.root.items[0];
      var mark = createMark(markdef, group);
      group.items[index] = mark;
      if (mark.zindex) mark.group.zdirty = true;
      return mark;
    };

    function createMark(def, group) {
      return {
        bounds:      new Bounds(),
        clip:        !!def.clip,
        group:       group,
        interactive: def.interactive === false ? false : true,
        items:       [],
        marktype:    def.marktype,
        name:        def.name || undefined,
        role:        def.role || undefined,
        zindex:      def.zindex || 0
      };
    }

    // create a new DOM element
    function domCreate(doc, tag, ns) {
      if (!doc && typeof document !== 'undefined' && document.createElement) {
        doc = document;
      }
      return doc
        ? (ns ? doc.createElementNS(ns, tag) : doc.createElement(tag))
        : null;
    }

    // find first child element with matching tag
    function domFind(el, tag) {
      tag = tag.toLowerCase();
      var nodes = el.childNodes, i = 0, n = nodes.length;
      for (; i<n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {
        return nodes[i];
      }
    }

    // retrieve child element at given index
    // create & insert if doesn't exist or if tags do not match
    function domChild(el, index, tag, ns) {
      var a = el.childNodes[index], b;
      if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
        b = a || null;
        a = domCreate(el.ownerDocument, tag, ns);
        el.insertBefore(a, b);
      }
      return a;
    }

    // remove all child elements at or above the given index
    function domClear(el, index) {
      var nodes = el.childNodes,
          curr = nodes.length;
      while (curr > index) el.removeChild(nodes[--curr]);
      return el;
    }

    // generate css class name for mark
    function cssClass(mark) {
      return 'mark-' + mark.marktype
        + (mark.role ? ' role-' + mark.role : '')
        + (mark.name ? ' ' + mark.name : '');
    }

    function point$4(event, el) {
      var rect = el.getBoundingClientRect();
      return [
        event.clientX - rect.left - (el.clientLeft || 0),
        event.clientY - rect.top - (el.clientTop || 0)
      ];
    }

    function resolveItem(item, event, el, origin) {
      var mark = item && item.mark,
          mdef, p;

      if (mark && (mdef = marks[mark.marktype]).tip) {
        p = point$4(event, el);
        p[0] -= origin[0];
        p[1] -= origin[1];
        while (item = item.mark.group) {
          p[0] -= item.x || 0;
          p[1] -= item.y || 0;
        }
        item = mdef.tip(mark.items, p);
      }

      return item;
    }

    /**
     * Create a new Handler instance.
     * @param {object} [customLoader] - Optional loader instance for
     *   href URL sanitization. If not specified, a standard loader
     *   instance will be generated.
     * @param {function} [customTooltip] - Optional tooltip handler
     *   function for custom tooltip display.
     * @constructor
     */
    function Handler(customLoader, customTooltip) {
      this._active = null;
      this._handlers = {};
      this._loader = customLoader || loader$1();
      this._tooltip = customTooltip || defaultTooltip;
    }

    // The default tooltip display handler.
    // Sets the HTML title attribute on the visualization container.
    function defaultTooltip(handler, event, item, value) {
      handler.element().setAttribute('title', value || '');
    }

    var prototype$G = Handler.prototype;

    /**
     * Initialize a new Handler instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {object} [obj] - Optional context object that should serve as
     *   the "this" context for event callbacks.
     * @return {Handler} - This handler instance.
     */
    prototype$G.initialize = function(el, origin, obj) {
      this._el = el;
      this._obj = obj || null;
      return this.origin(origin);
    };

    /**
     * Returns the parent container element for a visualization.
     * @return {DOMElement} - The containing DOM element.
     */
    prototype$G.element = function() {
      return this._el;
    };

    /**
     * Returns the scene element (e.g., canvas or SVG) of the visualization
     * Subclasses must override if the first child is not the scene element.
     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
     */
    prototype$G.canvas = function() {
      return this._el && this._el.firstChild;
    };

    /**
     * Get / set the origin coordinates of the visualization.
     */
    prototype$G.origin = function(origin) {
      if (arguments.length) {
        this._origin = origin || [0, 0];
        return this;
      } else {
        return this._origin.slice();
      }
    };

    /**
     * Get / set the scenegraph root.
     */
    prototype$G.scene = function(scene) {
      if (!arguments.length) return this._scene;
      this._scene = scene;
      return this;
    };

    /**
     * Add an event handler. Subclasses should override this method.
     */
    prototype$G.on = function(/*type, handler*/) {};

    /**
     * Remove an event handler. Subclasses should override this method.
     */
    prototype$G.off = function(/*type, handler*/) {};

    /**
     * Utility method for finding the array index of an event handler.
     * @param {Array} h - An array of registered event handlers.
     * @param {string} type - The event type.
     * @param {function} handler - The event handler instance to find.
     * @return {number} - The handler's array index or -1 if not registered.
     */
    prototype$G._handlerIndex = function(h, type, handler) {
      for (var i = h ? h.length : 0; --i>=0;) {
        if (h[i].type === type && (!handler || h[i].handler === handler)) {
          return i;
        }
      }
      return -1;
    };

    /**
     * Returns an array with registered event handlers.
     * @param {string} [type] - The event type to query. Any annotations
     *   are ignored; for example, for the argument "click.foo", ".foo" will
     *   be ignored and the method returns all "click" handlers. If type is
     *   null or unspecified, this method returns handlers for all types.
     * @return {Array} - A new array containing all registered event handlers.
     */
    prototype$G.handlers = function(type) {
      var h = this._handlers, a = [], k;
      if (type) {
        a.push.apply(a, h[this.eventName(type)]);
      } else {
        for (k in h) { a.push.apply(a, h[k]); }
      }
      return a;
    };

    /**
     * Parses an event name string to return the specific event type.
     * For example, given "click.foo" returns "click"
     * @param {string} name - The input event type string.
     * @return {string} - A string with the event type only.
     */
    prototype$G.eventName = function(name) {
      var i = name.indexOf('.');
      return i < 0 ? name : name.slice(0,i);
    };

    /**
     * Handle hyperlink navigation in response to an item.href value.
     * @param {Event} event - The event triggering hyperlink navigation.
     * @param {Item} item - The scenegraph item.
     * @param {string} href - The URL to navigate to.
     */
    prototype$G.handleHref = function(event, item, href) {
      this._loader
        .sanitize(href, {context:'href'})
        .then(function(opt) {
          var e = new MouseEvent(event.type, event),
              a = domCreate(null, 'a');
          for (var name in opt) a.setAttribute(name, opt[name]);
          a.dispatchEvent(e);
        })
        .catch(function() { /* do nothing */ });
    };

    /**
     * Handle tooltip display in response to an item.tooltip value.
     * @param {Event} event - The event triggering tooltip display.
     * @param {Item} item - The scenegraph item.
     * @param {boolean} show - A boolean flag indicating whether
     *   to show or hide a tooltip for the given item.
     */
    prototype$G.handleTooltip = function(event, item, show) {
      if (item && item.tooltip != null) {
        item = resolveItem(item, event, this.canvas(), this._origin);
        var value = (show && item && item.tooltip) || null;
        this._tooltip.call(this._obj, this, event, item, value);
      }
    };

    /**
     * Returns the size of a scenegraph item and its position relative
     * to the viewport.
     * @param {Item} item - The scenegraph item.
     * @return {object} - A bounding box object (compatible with the
     *   DOMRect type) consisting of x, y, width, heigh, top, left,
     *   right, and bottom properties.
     */
    prototype$G.getItemBoundingClientRect = function(item) {
      if (!(el = this.canvas())) return;

      var el, rect = el.getBoundingClientRect(),
          origin = this._origin,
          itemBounds = item.bounds,
          x = itemBounds.x1 + origin[0] + rect.left,
          y = itemBounds.y1 + origin[1] + rect.top,
          w = itemBounds.width(),
          h = itemBounds.height();

      // translate coordinate for each parent group
      while (item.mark && (item = item.mark.group)) {
        x += item.x || 0;
        y += item.y || 0;
      }

      // return DOMRect-compatible bounding box
      return {
        x:      x,
        y:      y,
        width:  w,
        height: h,
        left:   x,
        top:    y,
        right:  x + w,
        bottom: y + h
      };
    };

    /**
     * Create a new Renderer instance.
     * @param {object} [loader] - Optional loader instance for
     *   image and href URL sanitization. If not specified, a
     *   standard loader instance will be generated.
     * @constructor
     */
    function Renderer(loader) {
      this._el = null;
      this._bgcolor = null;
      this._loader = new ResourceLoader(loader);
    }

    var prototype$H = Renderer.prototype;

    /**
     * Initialize a new Renderer instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {number} width - The coordinate width of the display, in pixels.
     * @param {number} height - The coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {Renderer} - This renderer instance.
     */
    prototype$H.initialize = function(el, width, height, origin, scaleFactor) {
      this._el = el;
      return this.resize(width, height, origin, scaleFactor);
    };

    /**
     * Returns the parent container element for a visualization.
     * @return {DOMElement} - The containing DOM element.
     */
    prototype$H.element = function() {
      return this._el;
    };

    /**
     * Returns the scene element (e.g., canvas or SVG) of the visualization
     * Subclasses must override if the first child is not the scene element.
     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
     */
    prototype$H.canvas = function() {
      return this._el && this._el.firstChild;
    };

    /**
     * Get / set the background color.
     */
    prototype$H.background = function(bgcolor) {
      if (arguments.length === 0) return this._bgcolor;
      this._bgcolor = bgcolor;
      return this;
    };

    /**
     * Resize the display.
     * @param {number} width - The new coordinate width of the display, in pixels.
     * @param {number} height - The new coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The new origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {Renderer} - This renderer instance;
     */
    prototype$H.resize = function(width, height, origin, scaleFactor) {
      this._width = width;
      this._height = height;
      this._origin = origin || [0, 0];
      this._scale = scaleFactor || 1;
      return this;
    };

    /**
     * Report a dirty item whose bounds should be redrawn.
     * This base class method does nothing. Subclasses that perform
     * incremental should implement this method.
     * @param {Item} item - The dirty item whose bounds should be redrawn.
     */
    prototype$H.dirty = function(/*item*/) {
    };

    /**
     * Render an input scenegraph, potentially with a set of dirty items.
     * This method will perform an immediate rendering with available resources.
     * The renderer may also need to perform image loading to perform a complete
     * render. This process can lead to asynchronous re-rendering of the scene
     * after this method returns. To receive notification when rendering is
     * complete, use the renderAsync method instead.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @return {Renderer} - This renderer instance.
     */
    prototype$H.render = function(scene) {
      var r = this;

      // bind arguments into a render call, and cache it
      // this function may be subsequently called for async redraw
      r._call = function() { r._render(scene); };

      // invoke the renderer
      r._call();

      // clear the cached call for garbage collection
      // async redraws will stash their own copy
      r._call = null;

      return r;
    };

    /**
     * Internal rendering method. Renderer subclasses should override this
     * method to actually perform rendering.
     * @param {object} scene - The root mark of a scenegraph to render.
     */
    prototype$H._render = function(/*scene*/) {
      // subclasses to override
    };

    /**
     * Asynchronous rendering method. Similar to render, but returns a Promise
     * that resolves when all rendering is completed. Sometimes a renderer must
     * perform image loading to get a complete rendering. The returned
     * Promise will not resolve until this process completes.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @return {Promise} - A Promise that resolves when rendering is complete.
     */
    prototype$H.renderAsync = function(scene) {
      var r = this.render(scene);
      return this._ready
        ? this._ready.then(function() { return r; })
        : Promise.resolve(r);
    };

    /**
     * Internal method for asynchronous resource loading.
     * Proxies method calls to the ImageLoader, and tracks loading
     * progress to invoke a re-render once complete.
     * @param {string} method - The method name to invoke on the ImageLoader.
     * @param {string} uri - The URI for the requested resource.
     * @return {Promise} - A Promise that resolves to the requested resource.
     */
    prototype$H._load = function(method, uri) {
      var r = this,
          p = r._loader[method](uri);

      if (!r._ready) {
        // re-render the scene when loading completes
        var call = r._call;
        r._ready = r._loader.ready()
          .then(function(redraw) {
            if (redraw) call();
            r._ready = null;
          });
      }

      return p;
    };

    /**
     * Sanitize a URL to include as a hyperlink in the rendered scene.
     * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
     * image loading progress and invokes a re-render once complete.
     * @param {string} uri - The URI string to sanitize.
     * @return {Promise} - A Promise that resolves to the sanitized URL.
     */
    prototype$H.sanitizeURL = function(uri) {
      return this._load('sanitizeURL', uri);
    };

    /**
     * Requests an image to include in the rendered scene.
     * This method proxies a call to ImageLoader.loadImage, but also tracks
     * image loading progress and invokes a re-render once complete.
     * @param {string} uri - The URI string of the image.
     * @return {Promise} - A Promise that resolves to the loaded Image.
     */
    prototype$H.loadImage = function(uri) {
      return this._load('loadImage', uri);
    };

    var Events = [
      'keydown',
      'keypress',
      'keyup',
      'dragenter',
      'dragleave',
      'dragover',
      'mousedown',
      'mouseup',
      'mousemove',
      'mouseout',
      'mouseover',
      'click',
      'dblclick',
      'wheel',
      'mousewheel',
      'touchstart',
      'touchmove',
      'touchend'
    ];

    var TooltipShowEvent = 'mousemove';

    var TooltipHideEvent = 'mouseout';

    var HrefEvent = 'click';

    function CanvasHandler(loader, tooltip) {
      Handler.call(this, loader, tooltip);
      this._down = null;
      this._touch = null;
      this._first = true;
    }

    var prototype$I = inherits(CanvasHandler, Handler);

    prototype$I.initialize = function(el, origin, obj) {
      // add event listeners
      var canvas = this._canvas = el && domFind(el, 'canvas');
      if (canvas) {
        var that = this;
        this.events.forEach(function(type) {
          canvas.addEventListener(type, function(evt) {
            if (prototype$I[type]) {
              prototype$I[type].call(that, evt);
            } else {
              that.fire(type, evt);
            }
          });
        });
      }

      return Handler.prototype.initialize.call(this, el, origin, obj);
    };

    // return the backing canvas instance
    prototype$I.canvas = function() {
      return this._canvas;
    };

    // retrieve the current canvas context
    prototype$I.context = function() {
      return this._canvas.getContext('2d');
    };

    // supported events
    prototype$I.events = Events;

    // to keep old versions of firefox happy
    prototype$I.DOMMouseScroll = function(evt) {
      this.fire('mousewheel', evt);
    };

    function move(moveEvent, overEvent, outEvent) {
      return function(evt) {
        var a = this._active,
            p = this.pickEvent(evt);

        if (p === a) {
          // active item and picked item are the same
          this.fire(moveEvent, evt); // fire move
        } else {
          // active item and picked item are different
          if (!a || !a.exit) {
            // fire out for prior active item
            // suppress if active item was removed from scene
            this.fire(outEvent, evt);
          }
          this._active = p;          // set new active item
          this.fire(overEvent, evt); // fire over for new active item
          this.fire(moveEvent, evt); // fire move for new active item
        }
      };
    }

    function inactive(type) {
      return function(evt) {
        this.fire(type, evt);
        this._active = null;
      };
    }

    prototype$I.mousemove = move('mousemove', 'mouseover', 'mouseout');
    prototype$I.dragover  = move('dragover', 'dragenter', 'dragleave');

    prototype$I.mouseout  = inactive('mouseout');
    prototype$I.dragleave = inactive('dragleave');

    prototype$I.mousedown = function(evt) {
      this._down = this._active;
      this.fire('mousedown', evt);
    };

    prototype$I.click = function(evt) {
      if (this._down === this._active) {
        this.fire('click', evt);
        this._down = null;
      }
    };

    prototype$I.touchstart = function(evt) {
      this._touch = this.pickEvent(evt.changedTouches[0]);

      if (this._first) {
        this._active = this._touch;
        this._first = false;
      }

      this.fire('touchstart', evt, true);
    };

    prototype$I.touchmove = function(evt) {
      this.fire('touchmove', evt, true);
    };

    prototype$I.touchend = function(evt) {
      this.fire('touchend', evt, true);
      this._touch = null;
    };

    // fire an event
    prototype$I.fire = function(type, evt, touch) {
      var a = touch ? this._touch : this._active,
          h = this._handlers[type], i, len;

      // set event type relative to scenegraph items
      evt.vegaType = type;

      // handle hyperlinks and tooltips first
      if (type === HrefEvent && a && a.href) {
        this.handleHref(evt, a, a.href);
      } else if (type === TooltipShowEvent || type === TooltipHideEvent) {
        this.handleTooltip(evt, a, type !== TooltipHideEvent);
      }

      // invoke all registered handlers
      if (h) {
        for (i=0, len=h.length; i<len; ++i) {
          h[i].handler.call(this._obj, evt, a);
        }
      }
    };

    // add an event handler
    prototype$I.on = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers,
          i = this._handlerIndex(h[name], type, handler);

      if (i < 0) {
        (h[name] || (h[name] = [])).push({
          type:    type,
          handler: handler
        });
      }

      return this;
    };

    // remove an event handler
    prototype$I.off = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers[name],
          i = this._handlerIndex(h, type, handler);

      if (i >= 0) {
        h.splice(i, 1);
      }

      return this;
    };

    prototype$I.pickEvent = function(evt) {
      var p = point$4(evt, this._canvas),
          o = this._origin;
      return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
    };

    // find the scenegraph item at the current mouse position
    // x, y -- the absolute x, y mouse coordinates on the canvas element
    // gx, gy -- the relative coordinates within the current group
    prototype$I.pick = function(scene, x, y, gx, gy) {
      var g = this.context(),
          mark = marks[scene.marktype];
      return mark.pick.call(this, g, scene, x, y, gx, gy);
    };

    function clip$1(context, scene) {
      var clip = scene.clip;

      context.save();
      context.beginPath();

      if (isFunction(clip)) {
        clip(context);
      } else {
        var group = scene.group;
        context.rect(0, 0, group.width || 0, group.height || 0);
      }

      context.clip();
    }

    function devicePixelRatio() {
      return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;
    }

    var pixelRatio = devicePixelRatio();

    function resize(canvas, width, height, origin, scaleFactor, opt) {
      var inDOM = typeof HTMLElement !== 'undefined'
        && canvas instanceof HTMLElement
        && canvas.parentNode != null;

      var context = canvas.getContext('2d'),
          ratio = inDOM ? pixelRatio : scaleFactor,
          key;

      canvas.width = width * ratio;
      canvas.height = height * ratio;

      for (key in opt) {
        context[key] = opt[key];
      }

      if (inDOM && ratio !== 1) {
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
      }

      context.pixelRatio = ratio;
      context.setTransform(
        ratio, 0, 0, ratio,
        ratio * origin[0],
        ratio * origin[1]
      );

      return canvas;
    }

    function CanvasRenderer(loader) {
      Renderer.call(this, loader);
      this._redraw = false;
      this._dirty = new Bounds();
    }

    var prototype$J = inherits(CanvasRenderer, Renderer),
        base = Renderer.prototype,
        tempBounds$1 = new Bounds();

    prototype$J.initialize = function(el, width, height, origin, scaleFactor, options) {
      this._options = options;
      this._canvas = domCanvas(1, 1, options && options.type); // instantiate a small canvas

      if (el) {
        domClear(el, 0).appendChild(this._canvas);
        this._canvas.setAttribute('class', 'marks');
      }
      // this method will invoke resize to size the canvas appropriately
      return base.initialize.call(this, el, width, height, origin, scaleFactor);
    };

    prototype$J.resize = function(width, height, origin, scaleFactor) {
      base.resize.call(this, width, height, origin, scaleFactor);
      resize(this._canvas, this._width, this._height,
        this._origin, this._scale, this._options && this._options.context);
      this._redraw = true;
      return this;
    };

    prototype$J.canvas = function() {
      return this._canvas;
    };

    prototype$J.context = function() {
      return this._canvas ? this._canvas.getContext('2d') : null;
    };

    prototype$J.dirty = function(item) {
      var b = translate$1(item.bounds, item.mark.group);
      this._dirty.union(b);
    };

    function clipToBounds(g, b, origin) {
      // expand bounds by 1 pixel, then round to pixel boundaries
      b.expand(1).round();

      // to avoid artifacts translate if origin has fractional pixels
      b.translate(-(origin[0] % 1), -(origin[1] % 1));

      // set clipping path
      g.beginPath();
      g.rect(b.x1, b.y1, b.width(), b.height());
      g.clip();

      return b;
    }

    function translate$1(bounds, group) {
      if (group == null) return bounds;
      var b = tempBounds$1.clear().union(bounds);
      for (; group != null; group = group.mark.group) {
        b.translate(group.x || 0, group.y || 0);
      }
      return b;
    }

    prototype$J._render = function(scene) {
      var g = this.context(),
          o = this._origin,
          w = this._width,
          h = this._height,
          b = this._dirty;

      // setup
      g.save();
      if (this._redraw || b.empty()) {
        this._redraw = false;
        b = null;
      } else {
        b = clipToBounds(g, b, o);
      }

      this.clear(-o[0], -o[1], w, h);

      // render
      this.draw(g, scene, b);

      // takedown
      g.restore();

      this._dirty.clear();
      return this;
    };

    prototype$J.draw = function(ctx, scene, bounds) {
      var mark = marks[scene.marktype];
      if (scene.clip) clip$1(ctx, scene);
      mark.draw.call(this, ctx, scene, bounds);
      if (scene.clip) ctx.restore();
    };

    prototype$J.clear = function(x, y, w, h) {
      var g = this.context();
      g.clearRect(x, y, w, h);
      if (this._bgcolor != null) {
        g.fillStyle = this._bgcolor;
        g.fillRect(x, y, w, h);
      }
    };

    function SVGHandler(loader, tooltip) {
      Handler.call(this, loader, tooltip);
      var h = this;
      h._hrefHandler = listener(h, function(evt, item) {
        if (item && item.href) h.handleHref(evt, item, item.href);
      });
      h._tooltipHandler = listener(h, function(evt, item) {
        h.handleTooltip(evt, item, evt.type !== TooltipHideEvent);
      });
    }

    var prototype$K = inherits(SVGHandler, Handler);

    prototype$K.initialize = function(el, origin, obj) {
      var svg = this._svg;
      if (svg) {
        svg.removeEventListener(HrefEvent, this._hrefHandler);
        svg.removeEventListener(TooltipShowEvent, this._tooltipHandler);
        svg.removeEventListener(TooltipHideEvent, this._tooltipHandler);
      }
      this._svg = svg = el && domFind(el, 'svg');
      if (svg) {
        svg.addEventListener(HrefEvent, this._hrefHandler);
        svg.addEventListener(TooltipShowEvent, this._tooltipHandler);
        svg.addEventListener(TooltipHideEvent, this._tooltipHandler);
      }
      return Handler.prototype.initialize.call(this, el, origin, obj);
    };

    prototype$K.canvas = function() {
      return this._svg;
    };

    // wrap an event listener for the SVG DOM
    function listener(context, handler) {
      return function(evt) {
        var target = evt.target,
            item = target.__data__;
        evt.vegaType = evt.type;
        item = Array.isArray(item) ? item[0] : item;
        handler.call(context._obj, evt, item);
      };
    }

    // add an event handler
    prototype$K.on = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers,
          i = this._handlerIndex(h[name], type, handler);

      if (i < 0) {
        var x = {
          type:     type,
          handler:  handler,
          listener: listener(this, handler)
        };

        (h[name] || (h[name] = [])).push(x);
        if (this._svg) {
          this._svg.addEventListener(name, x.listener);
        }
      }

      return this;
    };

    // remove an event handler
    prototype$K.off = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers[name],
          i = this._handlerIndex(h, type, handler);

      if (i >= 0) {
        if (this._svg) {
          this._svg.removeEventListener(name, h[i].listener);
        }
        h.splice(i, 1);
      }

      return this;
    };

    // generate string for an opening xml tag
    // tag: the name of the xml tag
    // attr: hash of attribute name-value pairs to include
    // raw: additional raw string to include in tag markup
    function openTag(tag, attr, raw) {
      var s = '<' + tag, key, val;
      if (attr) {
        for (key in attr) {
          val = attr[key];
          if (val != null) {
            s += ' ' + key + '="' + val + '"';
          }
        }
      }
      if (raw) s += ' ' + raw;
      return s + '>';
    }

    // generate string for closing xml tag
    // tag: the name of the xml tag
    function closeTag(tag) {
      return '</' + tag + '>';
    }

    var metadata = {
      'version': '1.1',
      'xmlns': 'http://www.w3.org/2000/svg',
      'xmlns:xlink': 'http://www.w3.org/1999/xlink'
    };

    var styles = {
      'fill':             'fill',
      'fillOpacity':      'fill-opacity',
      'stroke':           'stroke',
      'strokeOpacity':    'stroke-opacity',
      'strokeWidth':      'stroke-width',
      'strokeCap':        'stroke-linecap',
      'strokeJoin':       'stroke-linejoin',
      'strokeDash':       'stroke-dasharray',
      'strokeDashOffset': 'stroke-dashoffset',
      'strokeMiterLimit': 'stroke-miterlimit',
      'opacity':          'opacity'
    };

    var styleProperties = Object.keys(styles);

    var ns = metadata.xmlns;

    function SVGRenderer(loader) {
      Renderer.call(this, loader);
      this._dirtyID = 1;
      this._dirty = [];
      this._svg = null;
      this._root = null;
      this._defs = null;
    }

    var prototype$L = inherits(SVGRenderer, Renderer);
    var base$1 = Renderer.prototype;

    prototype$L.initialize = function(el, width, height, padding) {
      if (el) {
        this._svg = domChild(el, 0, 'svg', ns);
        this._svg.setAttribute('class', 'marks');
        domClear(el, 1);
        // set the svg root group
        this._root = domChild(this._svg, 0, 'g', ns);
        domClear(this._svg, 1);
      }

      // create the svg definitions cache
      this._defs = {
        gradient: {},
        clipping: {}
      };

      // set background color if defined
      this.background(this._bgcolor);

      return base$1.initialize.call(this, el, width, height, padding);
    };

    prototype$L.background = function(bgcolor) {
      if (arguments.length && this._svg) {
        this._svg.style.setProperty('background-color', bgcolor);
      }
      return base$1.background.apply(this, arguments);
    };

    prototype$L.resize = function(width, height, origin, scaleFactor) {
      base$1.resize.call(this, width, height, origin, scaleFactor);

      if (this._svg) {
        this._svg.setAttribute('width', this._width * this._scale);
        this._svg.setAttribute('height', this._height * this._scale);
        this._svg.setAttribute('viewBox', '0 0 ' + this._width + ' ' + this._height);
        this._root.setAttribute('transform', 'translate(' + this._origin + ')');
      }

      this._dirty = [];

      return this;
    };

    prototype$L.canvas = function() {
      return this._svg;
    };

    prototype$L.svg = function() {
      if (!this._svg) return null;

      var attr = {
        class:   'marks',
        width:   this._width * this._scale,
        height:  this._height * this._scale,
        viewBox: '0 0 ' + this._width + ' ' + this._height
      };
      for (var key in metadata) {
        attr[key] = metadata[key];
      }

      var bg = !this._bgcolor ? ''
        : (openTag('rect', {
            width:  this._width,
            height: this._height,
            style:  'fill: ' + this._bgcolor + ';'
          }) + closeTag('rect'));

      return openTag('svg', attr) + bg + this._svg.innerHTML + closeTag('svg');
    };


    // -- Render entry point --

    prototype$L._render = function(scene) {
      // perform spot updates and re-render markup
      if (this._dirtyCheck()) {
        if (this._dirtyAll) this._resetDefs();
        this.draw(this._root, scene);
        domClear(this._root, 1);
      }

      this.updateDefs();

      this._dirty = [];
      ++this._dirtyID;

      return this;
    };

    // -- Manage SVG definitions ('defs') block --

    prototype$L.updateDefs = function() {
      var svg = this._svg,
          defs = this._defs,
          el = defs.el,
          index = 0, id;

      for (id in defs.gradient) {
        if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));
        updateGradient(el, defs.gradient[id], index++);
      }

      for (id in defs.clipping) {
        if (!el) defs.el = (el = domChild(svg, 0, 'defs', ns));
        updateClipping(el, defs.clipping[id], index++);
      }

      // clean-up
      if (el) {
        if (index === 0) {
          svg.removeChild(el);
          defs.el = null;
        } else {
          domClear(el, index);
        }
      }
    };

    function updateGradient(el, grad, index) {
      var i, n, stop;

      el = domChild(el, index, 'linearGradient', ns);
      el.setAttribute('id', grad.id);
      el.setAttribute('x1', grad.x1);
      el.setAttribute('x2', grad.x2);
      el.setAttribute('y1', grad.y1);
      el.setAttribute('y2', grad.y2);

      for (i=0, n=grad.stops.length; i<n; ++i) {
        stop = domChild(el, i, 'stop', ns);
        stop.setAttribute('offset', grad.stops[i].offset);
        stop.setAttribute('stop-color', grad.stops[i].color);
      }
      domClear(el, i);
    }

    function updateClipping(el, clip, index) {
      var mask;

      el = domChild(el, index, 'clipPath', ns);
      el.setAttribute('id', clip.id);

      if (clip.path) {
        mask = domChild(el, 0, 'path', ns);
        mask.setAttribute('d', clip.path);
      } else {
        mask = domChild(el, 0, 'rect', ns);
        mask.setAttribute('x', 0);
        mask.setAttribute('y', 0);
        mask.setAttribute('width', clip.width);
        mask.setAttribute('height', clip.height);
      }
    }

    prototype$L._resetDefs = function() {
      var def = this._defs;
      def.gradient = {};
      def.clipping = {};
    };


    // -- Manage rendering of items marked as dirty --

    prototype$L.dirty = function(item) {
      if (item.dirty !== this._dirtyID) {
        item.dirty = this._dirtyID;
        this._dirty.push(item);
      }
    };

    prototype$L.isDirty = function(item) {
      return this._dirtyAll
        || !item._svg
        || item.dirty === this._dirtyID;
    };

    prototype$L._dirtyCheck = function() {
      this._dirtyAll = true;
      var items = this._dirty;
      if (!items.length) return true;

      var id = ++this._dirtyID,
          item, mark, type, mdef, i, n, o;

      for (i=0, n=items.length; i<n; ++i) {
        item = items[i];
        mark = item.mark;

        if (mark.marktype !== type) {
          // memoize mark instance lookup
          type = mark.marktype;
          mdef = marks[type];
        }

        if (mark.zdirty && mark.dirty !== id) {
          this._dirtyAll = false;
          dirtyParents(item, id);
          mark.items.forEach(function(i) { i.dirty = id; });
        }
        if (mark.zdirty) continue; // handle in standard drawing pass

        if (item.exit) { // EXIT
          if (mdef.nested && mark.items.length) {
            // if nested mark with remaining points, update instead
            o = mark.items[0];
            if (o._svg) this._update(mdef, o._svg, o);
          } else if (item._svg) {
            // otherwise remove from DOM
            o = item._svg.parentNode;
            if (o) o.removeChild(item._svg);
          }
          item._svg = null;
          continue;
        }

        item = (mdef.nested ? mark.items[0] : item);
        if (item._update === id) continue; // already visited

        if (!item._svg || !item._svg.ownerSVGElement) {
          // ENTER
          this._dirtyAll = false;
          dirtyParents(item, id);
        } else {
          // IN-PLACE UPDATE
          this._update(mdef, item._svg, item);
        }
        item._update = id;
      }
      return !this._dirtyAll;
    };

    function dirtyParents(item, id) {
      for (; item && item.dirty !== id; item=item.mark.group) {
        item.dirty = id;
        if (item.mark && item.mark.dirty !== id) {
          item.mark.dirty = id;
        } else return;
      }
    }


    // -- Construct & maintain scenegraph to SVG mapping ---

    // Draw a mark container.
    prototype$L.draw = function(el, scene, prev) {
      if (!this.isDirty(scene)) return scene._svg;

      var renderer = this,
          svg = this._svg,
          mdef = marks[scene.marktype],
          events = scene.interactive === false ? 'none' : null,
          isGroup = mdef.tag === 'g',
          sibling = null,
          i = 0,
          parent;

      parent = bind(scene, el, prev, 'g', svg);
      parent.setAttribute('class', cssClass(scene));
      if (!isGroup) {
        parent.style.setProperty('pointer-events', events);
      }
      if (scene.clip) {
        parent.setAttribute('clip-path', clip(renderer, scene, scene.group));
      } else {
        parent.removeAttribute('clip-path');
      }

      function process(item) {
        var dirty = renderer.isDirty(item),
            node = bind(item, parent, sibling, mdef.tag, svg);

        if (dirty) {
          renderer._update(mdef, node, item);
          if (isGroup) recurse(renderer, node, item);
        }

        sibling = node;
        ++i;
      }

      if (mdef.nested) {
        if (scene.items.length) process(scene.items[0]);
      } else {
        visit(scene, process);
      }

      domClear(parent, i);
      return parent;
    };

    // Recursively process group contents.
    function recurse(renderer, el, group) {
      el = el.lastChild;
      var prev, idx = 0;

      visit(group, function(item) {
        prev = renderer.draw(el, item, prev);
        ++idx;
      });

      // remove any extraneous DOM elements
      domClear(el, 1 + idx);
    }

    // Bind a scenegraph item to an SVG DOM element.
    // Create new SVG elements as needed.
    function bind(item, el, sibling, tag, svg) {
      var node = item._svg, doc;

      // create a new dom node if needed
      if (!node) {
        doc = el.ownerDocument;
        node = domCreate(doc, tag, ns);
        item._svg = node;

        if (item.mark) {
          node.__data__ = item;
          node.__values__ = {fill: 'default'};

          // if group, create background and foreground elements
          if (tag === 'g') {
            var bg = domCreate(doc, 'path', ns);
            bg.setAttribute('class', 'background');
            node.appendChild(bg);
            bg.__data__ = item;

            var fg = domCreate(doc, 'g', ns);
            node.appendChild(fg);
            fg.__data__ = item;
          }
        }
      }

      // (re-)insert if (a) not contained in SVG or (b) sibling order has changed
      if (node.ownerSVGElement !== svg || hasSiblings(item) && node.previousSibling !== sibling) {
        el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
      }

      return node;
    }

    function hasSiblings(item) {
      var parent = item.mark || item.group;
      return parent && parent.items.length > 1;
    }


    // -- Set attributes & styles on SVG elements ---

    var element = null, // temp var for current SVG element
        values = null;  // temp var for current values hash

    // Extra configuration for certain mark types
    var mark_extras = {
      group: function(mdef, el, item) {
        values = el.__values__; // use parent's values hash

        element = el.childNodes[1];
        mdef.foreground(emit, item, this);

        element = el.childNodes[0];
        mdef.background(emit, item, this);

        var value = item.mark.interactive === false ? 'none' : null;
        if (value !== values.events) {
          element.style.setProperty('pointer-events', value);
          values.events = value;
        }
      },
      text: function(mdef, el, item) {
        var value;

        value = textValue(item);
        if (value !== values.text) {
          el.textContent = value;
          values.text = value;
        }

        setStyle(el, 'font-family', fontFamily(item));
        setStyle(el, 'font-size', fontSize(item) + 'px');
        setStyle(el, 'font-style', item.fontStyle);
        setStyle(el, 'font-variant', item.fontVariant);
        setStyle(el, 'font-weight', item.fontWeight);
      }
    };

    function setStyle(el, name, value) {
      if (value !== values[name]) {
        if (value == null) {
          el.style.removeProperty(name);
        } else {
          el.style.setProperty(name, value + '');
        }
        values[name] = value;
      }
    }

    prototype$L._update = function(mdef, el, item) {
      // set dom element and values cache
      // provides access to emit method
      element = el;
      values = el.__values__;

      // apply svg attributes
      mdef.attr(emit, item, this);

      // some marks need special treatment
      var extra = mark_extras[mdef.type];
      if (extra) extra.call(this, mdef, el, item);

      // apply svg css styles
      // note: element may be modified by 'extra' method
      this.style(element, item);
    };

    function emit(name, value, ns) {
      // early exit if value is unchanged
      if (value === values[name]) return;

      if (value != null) {
        // if value is provided, update DOM attribute
        if (ns) {
          element.setAttributeNS(ns, name, value);
        } else {
          element.setAttribute(name, value);
        }
      } else {
        // else remove DOM attribute
        if (ns) {
          element.removeAttributeNS(ns, name);
        } else {
          element.removeAttribute(name);
        }
      }

      // note current value for future comparison
      values[name] = value;
    }

    prototype$L.style = function(el, o) {
      if (o == null) return;
      var i, n, prop, name, value;

      for (i=0, n=styleProperties.length; i<n; ++i) {
        prop = styleProperties[i];
        value = o[prop];

        if (prop === 'font') {
          value = fontFamily(o);
        }

        if (value === values[prop]) continue;

        name = styles[prop];
        if (value == null) {
          if (name === 'fill') {
            el.style.setProperty(name, 'none');
          } else {
            el.style.removeProperty(name);
          }
        } else {
          if (value.id) {
            // ensure definition is included
            this._defs.gradient[value.id] = value;
            value = 'url(' + href() + '#' + value.id + ')';
          }
          el.style.setProperty(name, value + '');
        }

        values[prop] = value;
      }
    };

    function href() {
      var loc;
      return typeof window === 'undefined' ? ''
        : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length)
        : loc.href;
    }

    function SVGStringRenderer(loader) {
      Renderer.call(this, loader);

      this._text = {
        head: '',
        bg:   '',
        root: '',
        foot: '',
        defs: '',
        body: ''
      };

      this._defs = {
        gradient: {},
        clipping: {}
      };
    }

    var prototype$M = inherits(SVGStringRenderer, Renderer);
    var base$2 = Renderer.prototype;

    prototype$M.resize = function(width, height, origin, scaleFactor) {
      base$2.resize.call(this, width, height, origin, scaleFactor);
      var o = this._origin,
          t = this._text;

      var attr = {
        class:   'marks',
        width:   this._width * this._scale,
        height:  this._height * this._scale,
        viewBox: '0 0 ' + this._width + ' ' + this._height
      };
      for (var key in metadata) {
        attr[key] = metadata[key];
      }

      t.head = openTag('svg', attr);

      var bg = this._bgcolor;
      if (bg === 'transparent' || bg === 'none') bg = null;

      if (bg) {
        t.bg = openTag('rect', {
          width:  this._width,
          height: this._height,
          style:  'fill: ' + bg + ';'
        }) + closeTag('rect');
      } else {
        t.bg = '';
      }

      t.root = openTag('g', {
        transform: 'translate(' + o + ')'
      });

      t.foot = closeTag('g') + closeTag('svg');

      return this;
    };

    prototype$M.background = function() {
      var rv = base$2.background.apply(this, arguments);
      if (arguments.length && this._text.head) {
        this.resize(this._width, this._height, this._origin, this._scale);
      }
      return rv;
    };

    prototype$M.svg = function() {
      var t = this._text;
      return t.head + t.bg + t.defs + t.root + t.body + t.foot;
    };

    prototype$M._render = function(scene) {
      this._text.body = this.mark(scene);
      this._text.defs = this.buildDefs();
      return this;
    };

    prototype$M.buildDefs = function() {
      var all = this._defs,
          defs = '',
          i, id, def, stops;

      for (id in all.gradient) {
        def = all.gradient[id];
        stops = def.stops;

        defs += openTag('linearGradient', {
          id: id,
          x1: def.x1,
          x2: def.x2,
          y1: def.y1,
          y2: def.y2
        });

        for (i=0; i<stops.length; ++i) {
          defs += openTag('stop', {
            offset: stops[i].offset,
            'stop-color': stops[i].color
          }) + closeTag('stop');
        }

        defs += closeTag('linearGradient');
      }

      for (id in all.clipping) {
        def = all.clipping[id];

        defs += openTag('clipPath', {id: id});

        if (def.path) {
          defs += openTag('path', {
            d: def.path
          }) + closeTag('path');
        } else {
          defs += openTag('rect', {
            x: 0,
            y: 0,
            width: def.width,
            height: def.height
          }) + closeTag('rect');
        }

        defs += closeTag('clipPath');
      }

      return (defs.length > 0) ? openTag('defs') + defs + closeTag('defs') : '';
    };

    var object$1;

    function emit$1(name, value, ns, prefixed) {
      object$1[prefixed || name] = value;
    }

    prototype$M.attributes = function(attr, item) {
      object$1 = {};
      attr(emit$1, item, this);
      return object$1;
    };

    prototype$M.href = function(item) {
      var that = this,
          href = item.href,
          attr;

      if (href) {
        if (attr = that._hrefs && that._hrefs[href]) {
          return attr;
        } else {
          that.sanitizeURL(href).then(function(attr) {
            // rewrite to use xlink namespace
            // note that this will be deprecated in SVG 2.0
            attr['xlink:href'] = attr.href;
            attr.href = null;
            (that._hrefs || (that._hrefs = {}))[href] = attr;
          });
        }
      }
      return null;
    };

    prototype$M.mark = function(scene) {
      var renderer = this,
          mdef = marks[scene.marktype],
          tag  = mdef.tag,
          defs = this._defs,
          str = '',
          style;

      if (tag !== 'g' && scene.interactive === false) {
        style = 'style="pointer-events: none;"';
      }

      // render opening group tag
      str += openTag('g', {
        'class': cssClass(scene),
        'clip-path': scene.clip ? clip(renderer, scene, scene.group) : null
      }, style);

      // render contained elements
      function process(item) {
        var href = renderer.href(item);
        if (href) str += openTag('a', href);

        style = (tag !== 'g') ? applyStyles(item, scene, tag, defs) : null;
        str += openTag(tag, renderer.attributes(mdef.attr, item), style);

        if (tag === 'text') {
          str += escape_text(textValue(item));
        } else if (tag === 'g') {
          str += openTag('path', renderer.attributes(mdef.background, item),
            applyStyles(item, scene, 'bgrect', defs)) + closeTag('path');

          str += openTag('g', renderer.attributes(mdef.foreground, item))
            + renderer.markGroup(item)
            + closeTag('g');
        }

        str += closeTag(tag);
        if (href) str += closeTag('a');
      }

      if (mdef.nested) {
        if (scene.items && scene.items.length) process(scene.items[0]);
      } else {
        visit(scene, process);
      }

      // render closing group tag
      return str + closeTag('g');
    };

    prototype$M.markGroup = function(scene) {
      var renderer = this,
          str = '';

      visit(scene, function(item) {
        str += renderer.mark(item);
      });

      return str;
    };

    function applyStyles(o, mark, tag, defs) {
      if (o == null) return '';
      var i, n, prop, name, value, s = '';

      if (tag === 'bgrect' && mark.interactive === false) {
        s += 'pointer-events: none; ';
      }

      if (tag === 'text') {
        s += 'font-family: ' + fontFamily(o) + '; ';
        s += 'font-size: ' + fontSize(o) + 'px; ';
        if (o.fontStyle) s += 'font-style: ' + o.fontStyle + '; ';
        if (o.fontVariant) s += 'font-variant: ' + o.fontVariant + '; ';
        if (o.fontWeight) s += 'font-weight: ' + o.fontWeight + '; ';
      }

      for (i=0, n=styleProperties.length; i<n; ++i) {
        prop = styleProperties[i];
        name = styles[prop];
        value = o[prop];

        if (value == null) {
          if (name === 'fill') {
            s += 'fill: none; ';
          }
        } else if (value === 'transparent' && (name === 'fill' || name === 'stroke')) {
          // transparent is not a legal SVG value, so map to none instead
          s += name + ': none; ';
        } else {
          if (value.id) {
            // ensure definition is included
            defs.gradient[value.id] = value;
            value = 'url(#' + value.id + ')';
          }
          s += name + ': ' + value + '; ';
        }
      }

      return s ? 'style="' + s.trim() + '"' : null;
    }

    function escape_text(s) {
      return s.replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;');
    }

    var Canvas = 'canvas';
    var PNG = 'png';
    var SVG = 'svg';
    var None$2 = 'none';

    var RenderType = {
      Canvas: Canvas,
      PNG:    PNG,
      SVG:    SVG,
      None:   None$2
    };

    var modules = {};

    modules[Canvas] = modules[PNG] = {
      renderer: CanvasRenderer,
      headless: CanvasRenderer,
      handler:  CanvasHandler
    };

    modules[SVG] = {
      renderer: SVGRenderer,
      headless: SVGStringRenderer,
      handler:  SVGHandler
    };

    modules[None$2] = {};

    function renderModule(name, _) {
      name = String(name || '').toLowerCase();
      if (arguments.length > 1) {
        modules[name] = _;
        return this;
      } else {
        return modules[name];
      }
    }

    var clipBounds = new Bounds();

    function boundClip(mark) {
      var clip = mark.clip;

      if (isFunction(clip)) {
        clip(context(clipBounds.clear()));
      } else if (clip) {
        clipBounds.set(0, 0, mark.group.width, mark.group.height);
      } else return;

      mark.bounds.intersect(clipBounds);
    }

    /**
     * Calculate bounding boxes for scenegraph items.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {object} params.mark - The scenegraph mark instance to bound.
     */
    function Bound(params) {
      Transform.call(this, null, params);
    }

    var prototype$N = inherits(Bound, Transform);

    prototype$N.transform = function(_, pulse) {
      var view = pulse.dataflow,
          mark = _.mark,
          type = mark.marktype,
          entry = marks[type],
          bound = entry.bound,
          markBounds = mark.bounds, rebound;

      if (entry.nested) {
        // multi-item marks have a single bounds instance
        if (mark.items.length) view.dirty(mark.items[0]);
        markBounds = boundItem$1(mark, bound);
        mark.items.forEach(function(item) {
          item.bounds.clear().union(markBounds);
        });
      }

      else if (type === Group || _.modified()) {
        // operator parameters modified -> re-bound all items
        // updates group bounds in response to modified group content
        pulse.visit(pulse.MOD, function(item) { view.dirty(item); });
        markBounds.clear();
        mark.items.forEach(function(item) {
          markBounds.union(boundItem$1(item, bound));
        });

        // force reflow for legends to propagate any layout changes
        // suppress other types to prevent overall layout jumpiness
        if (mark.role === LegendRole) pulse.reflow();
      }

      else {
        // incrementally update bounds, re-bound mark as needed
        rebound = pulse.changed(pulse.REM);

        pulse.visit(pulse.ADD, function(item) {
          markBounds.union(boundItem$1(item, bound));
        });

        pulse.visit(pulse.MOD, function(item) {
          rebound = rebound || markBounds.alignsWith(item.bounds);
          view.dirty(item);
          markBounds.union(boundItem$1(item, bound));
        });

        if (rebound) {
          markBounds.clear();
          mark.items.forEach(function(item) { markBounds.union(item.bounds); });
        }
      }

      // ensure mark bounds do not exceed any clipping region
      boundClip(mark);

      return pulse.modifies('bounds');
    };

    function boundItem$1(item, bound, opt) {
      return bound(item.bounds.clear(), item, opt);
    }

    var COUNTER_NAME = ':vega_identifier:';

    /**
     * Adds a unique identifier to all added tuples.
     * This transform creates a new signal that serves as an id counter.
     * As a result, the id counter is shared across all instances of this
     * transform, generating unique ids across multiple data streams. In
     * addition, this signal value can be included in a snapshot of the
     * dataflow state, enabling correct resumption of id allocation.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {string} params.as - The field name for the generated identifier.
     */
    function Identifier(params) {
      Transform.call(this, 0, params);
    }

    Identifier.Definition = {
      "type": "Identifier",
      "metadata": {"modifies": true},
      "params": [
        { "name": "as", "type": "string", "required": true }
      ]
    };

    var prototype$O = inherits(Identifier, Transform);

    prototype$O.transform = function(_, pulse) {
      var counter = getCounter(pulse.dataflow),
          id = counter.value,
          as = _.as;

      pulse.visit(pulse.ADD, function(t) {
        if (!t[as]) t[as] = ++id;
      });

      counter.set(this.value = id);
      return pulse;
    };

    function getCounter(view) {
      var counter = view._signals[COUNTER_NAME];
      if (!counter) {
        view._signals[COUNTER_NAME] = (counter = view.add(0));
      }
      return counter;
    }

    /**
     * Bind scenegraph items to a scenegraph mark instance.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {object} params.markdef - The mark definition for creating the mark.
     *   This is an object of legal scenegraph mark properties which *must* include
     *   the 'marktype' property.
     */
    function Mark$1(params) {
      Transform.call(this, null, params);
    }

    var prototype$P = inherits(Mark$1, Transform);

    prototype$P.transform = function(_, pulse) {
      var mark = this.value;

      // acquire mark on first invocation, bind context and group
      if (!mark) {
        mark = pulse.dataflow.scenegraph().mark(_.markdef, lookup$1(_), _.index);
        mark.group.context = _.context;
        if (!_.context.group) _.context.group = mark.group;
        mark.source = this;
        mark.clip = _.clip;
        mark.interactive = _.interactive;
        this.value = mark;
      }

      // initialize entering items
      var Init = mark.marktype === Group ? GroupItem : Item;
      pulse.visit(pulse.ADD, function(item) { Init.call(item, mark); });

      // update clipping and/or interactive status
      if (_.modified('clip') || _.modified('interactive')) {
        mark.clip = _.clip;
        mark.interactive = !!_.interactive;
        mark.zdirty = true; // force scenegraph re-eval
        pulse.reflow();
      }

      // bind items array to scenegraph mark
      mark.items = pulse.source;
      return pulse;
    };

    function lookup$1(_) {
      var g = _.groups, p = _.parent;
      return g && g.size === 1 ? g.get(Object.keys(g.object)[0])
        : g && p ? g.lookup(p)
        : null;
    }

    /**
     * Analyze items for overlap, changing opacity to hide items with
     * overlapping bounding boxes. This transform will preserve at least
     * two items (e.g., first and last) even if overlap persists.
     * @param {object} params - The parameters for this operator.
     * @param {function(*,*): number} [params.sort] - A comparator
     *   function for sorting items.
     * @param {object} [params.method] - The overlap removal method to apply.
     *   One of 'parity' (default, hide every other item until there is no
     *   more overlap) or 'greedy' (sequentially scan and hide and items that
     *   overlap with the last visible item).
     * @param {object} [params.boundScale] - A scale whose range should be used
     *   to bound the items. Items exceeding the bounds of the scale range
     *   will be treated as overlapping. If null or undefined, no bounds check
     *   will be applied.
     * @param {object} [params.boundOrient] - The orientation of the scale
     *   (top, bottom, left, or right) used to bound items. This parameter is
     *   ignored if boundScale is null or undefined.
     * @param {object} [params.boundTolerance] - The tolerance in pixels for
     *   bound inclusion testing (default 1). This specifies by how many pixels
     *   an item's bounds may exceed the scale range bounds and not be culled.
     * @constructor
     */
    function Overlap(params) {
      Transform.call(this, null, params);
    }

    var prototype$Q = inherits(Overlap, Transform);

    var methods = {
      parity: function(items) {
        return items.filter(function(item, i) {
          return i % 2 ? (item.opacity = 0) : 1;
        });
      },
      greedy: function(items, sep) {
        var a;
        return items.filter(function(b, i) {
          if (!i || !intersect$1(a.bounds, b.bounds, sep)) {
            a = b;
            return 1;
          } else {
            return b.opacity = 0;
          }
        });
      }
    };

    // compute bounding box intersection
    // including padding pixels of separation
    function intersect$1(a, b, sep) {
      return sep > Math.max(
        b.x1 - a.x2,
        a.x1 - b.x2,
        b.y1 - a.y2,
        a.y1 - b.y2
      );
    }

    function hasOverlap(items, pad) {
      for (var i=1, n=items.length, a=items[0].bounds, b; i<n; a=b, ++i) {
        if (intersect$1(a, b = items[i].bounds, pad)) return true;
      }
    }

    function hasBounds(item) {
      var b = item.bounds;
      return b.width() > 1 && b.height() > 1;
    }

    function boundTest(scale, orient, tolerance) {
      var range = scale.range(),
          b = new Bounds();

      if (orient === Top || orient === Bottom) {
        b.set(range[0], -Infinity, range[1], +Infinity);
      } else {
        b.set(-Infinity, range[0], +Infinity, range[1]);
      }
      b.expand(tolerance || 1);

      return function(item) {
        return b.encloses(item.bounds);
      };
    }

    // reset all items to be fully opaque
    function reset$1(source) {
      source.forEach(function(item) { item.opacity = 1; });
      return source;
    }

    // add all tuples to mod, fork pulse if parameters were modified
    // fork prevents cross-stream tuple pollution (e.g., pulse from scale)
    function reflow(pulse, _) {
      return pulse.reflow(_.modified()).modifies('opacity');
    }

    prototype$Q.transform = function(_, pulse) {
      var reduce = methods[_.method] || methods.parity,
          source = pulse.materialize(pulse.SOURCE).source,
          sep = _.separation || 0,
          items, test;

      if (!source) return;

      if (!_.method) {
        // early exit if method is falsy
        if (_.modified('method')) {
          reset$1(source);
          pulse = reflow(pulse, _);
        }
        return pulse;
      }

      if (_.sort) {
        source = source.slice().sort(_.sort);
      }

      // skip labels with no content
      source = source.filter(hasBounds);

      items = reset$1(source);
      pulse = reflow(pulse, _);

      if (items.length >= 3 && hasOverlap(items, sep)) {
        do {
          items = reduce(items, sep);
        } while (items.length >= 3 && hasOverlap(items, sep));

        if (items.length < 3 && !peek(source).opacity) {
          if (items.length > 1) peek(items).opacity = 0;
          peek(source).opacity = 1;
        }
      }

      if (_.boundScale && _.boundTolerance >= 0) {
        test = boundTest(_.boundScale, _.boundOrient, +_.boundTolerance);
        source.forEach(function(item) {
          if (!test(item)) item.opacity = 0;
        });
      }

      return pulse;
    };

    /**
     * Queue modified scenegraph items for rendering.
     * @constructor
     */
    function Render(params) {
      Transform.call(this, null, params);
    }

    var prototype$R = inherits(Render, Transform);

    prototype$R.transform = function(_, pulse) {
      var view = pulse.dataflow;

      pulse.visit(pulse.ALL, function(item) { view.dirty(item); });

      // set z-index dirty flag as needed
      if (pulse.fields && pulse.fields['zindex']) {
        var item = pulse.source && pulse.source[0];
        if (item) item.mark.zdirty = true;
      }
    };

    const tempBounds$2 = new Bounds();

    function set$1(item, property, value) {
      return item[property] === value ? 0
        : (item[property] = value, 1);
    }

    const AxisOffset = 0.5;

    function isYAxis(mark) {
      var orient = mark.items[0].datum.orient;
      return orient === Left || orient === Right;
    }

    function axisIndices(datum) {
      var index = +datum.grid;
      return [
        datum.ticks  ? index++ : -1, // ticks index
        datum.labels ? index++ : -1, // labels index
        index + (+datum.domain)      // title index
      ];
    }

    function axisLayout(view, axis, width, height) {
      var item = axis.items[0],
          datum = item.datum,
          orient = datum.orient,
          indices = axisIndices(datum),
          range = item.range,
          offset = item.offset,
          position = item.position,
          minExtent = item.minExtent,
          maxExtent = item.maxExtent,
          title = datum.title && item.items[indices[2]].items[0],
          titlePadding = item.titlePadding,
          bounds = item.bounds,
          x = 0, y = 0, i, s;

      tempBounds$2.clear().union(bounds);
      bounds.clear();
      if ((i=indices[0]) > -1) bounds.union(item.items[i].bounds);
      if ((i=indices[1]) > -1) bounds.union(item.items[i].bounds);

      // position axis group and title
      switch (orient) {
        case Top:
          x = position || 0;
          y = -offset;
          s = Math.max(minExtent, Math.min(maxExtent, -bounds.y1));
          if (title) s = axisTitleLayout(title, s, titlePadding, 0, -1, bounds);
          bounds.add(0, -s).add(range, 0);
          break;
        case Left:
          x = -offset;
          y = position || 0;
          s = Math.max(minExtent, Math.min(maxExtent, -bounds.x1));
          if (title) s = axisTitleLayout(title, s, titlePadding, 1, -1, bounds);
          bounds.add(-s, 0).add(0, range);
          break;
        case Right:
          x = width + offset;
          y = position || 0;
          s = Math.max(minExtent, Math.min(maxExtent, bounds.x2));
          if (title) s = axisTitleLayout(title, s, titlePadding, 1, 1, bounds);
          bounds.add(0, 0).add(s, range);
          break;
        case Bottom:
          x = position || 0;
          y = height + offset;
          s = Math.max(minExtent, Math.min(maxExtent, bounds.y2));
          if (title) s = axisTitleLayout(title, s, titlePadding, 0, 1, bounds);
          bounds.add(0, 0).add(range, s);
          break;
        default:
          x = item.x;
          y = item.y;
      }

      // update bounds
      boundStroke(bounds.translate(x, y), item);

      if (set$1(item, 'x', x + AxisOffset) | set$1(item, 'y', y + AxisOffset)) {
        item.bounds = tempBounds$2;
        view.dirty(item);
        item.bounds = bounds;
        view.dirty(item);
      }

      return item.mark.bounds.clear().union(bounds);
    }

    function axisTitleLayout(title, offset, pad, isYAxis, sign, bounds) {
      var b = title.bounds, dx = 0, dy = 0;

      if (title.auto) {
        offset += pad;

        isYAxis
          ? dx = (title.x || 0) - (title.x = sign * offset)
          : dy = (title.y || 0) - (title.y = sign * offset);

        b.translate(-dx, -dy);
        title.mark.bounds.set(b.x1, b.y1, b.x2, b.y2);

        if (isYAxis) {
          bounds.add(0, b.y1).add(0, b.y2);
          offset += b.width();
        } else {
          bounds.add(b.x1, 0).add(b.x2, 0);
          offset += b.height();
        }
      } else {
        bounds.union(b);
      }

      return offset;
    }

    function gridLayoutGroups(group) {
      var groups = group.items,
          n = groups.length,
          i = 0, mark, items;

      var views = {
        marks:      [],
        rowheaders: [],
        rowfooters: [],
        colheaders: [],
        colfooters: [],
        rowtitle: null,
        coltitle: null
      };

      // layout axes, gather legends, collect bounds
      for (; i<n; ++i) {
        mark = groups[i];
        items = mark.items;
        if (mark.marktype === Group) {
          switch (mark.role) {
            case AxisRole:
            case LegendRole:
              break;
            case RowHeader: views.rowheaders.push(...items); break;
            case RowFooter: views.rowfooters.push(...items); break;
            case ColHeader: views.colheaders.push(...items); break;
            case ColFooter: views.colfooters.push(...items); break;
            case RowTitle:  views.rowtitle = items[0]; break;
            case ColTitle:  views.coltitle = items[0]; break;
            default:        views.marks.push(...items);
          }
        }
      }

      return views;
    }

    function bboxFlush(item) {
      return new Bounds().set(0, 0, item.width || 0, item.height || 0);
    }

    function bboxFull(item) {
      var b = item.bounds.clone();
      return b.empty()
        ? b.set(0, 0, 0, 0)
        : b.translate(-(item.x || 0), -(item.y || 0));
    }

    function get$1(opt, key, d) {
      var v = isObject(opt) ? opt[key] : opt;
      return v != null ? v : (d !== undefined ? d : 0);
    }

    function offsetValue(v) {
      return v < 0 ? Math.ceil(-v) : 0;
    }

    function gridLayout(view, groups, opt) {
      var dirty = !opt.nodirty,
          bbox = opt.bounds === Flush ? bboxFlush : bboxFull,
          bounds = tempBounds$2.set(0, 0, 0, 0),
          alignCol = get$1(opt.align, Column),
          alignRow = get$1(opt.align, Row),
          padCol = get$1(opt.padding, Column),
          padRow = get$1(opt.padding, Row),
          ncols = opt.columns || groups.length,
          nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),
          n = groups.length,
          xOffset = Array(n), xExtent = Array(ncols), xMax = 0,
          yOffset = Array(n), yExtent = Array(nrows), yMax = 0,
          dx = Array(n), dy = Array(n), boxes = Array(n),
          m, i, c, r, b, g, px, py, x, y, offset;

      for (i=0; i<ncols; ++i) xExtent[i] = 0;
      for (i=0; i<nrows; ++i) yExtent[i] = 0;

      // determine offsets for each group
      for (i=0; i<n; ++i) {
        g = groups[i];
        b = boxes[i] = bbox(g);
        g.x = g.x || 0; dx[i] = 0;
        g.y = g.y || 0; dy[i] = 0;
        c = i % ncols;
        r = ~~(i / ncols);
        xMax = Math.max(xMax, px = Math.ceil(b.x2));
        yMax = Math.max(yMax, py = Math.ceil(b.y2));
        xExtent[c] = Math.max(xExtent[c], px);
        yExtent[r] = Math.max(yExtent[r], py);
        xOffset[i] = padCol + offsetValue(b.x1);
        yOffset[i] = padRow + offsetValue(b.y1);
        if (dirty) view.dirty(groups[i]);
      }

      // set initial alignment offsets
      for (i=0; i<n; ++i) {
        if (i % ncols === 0) xOffset[i] = 0;
        if (i < ncols) yOffset[i] = 0;
      }

      // enforce column alignment constraints
      if (alignCol === Each) {
        for (c=1; c<ncols; ++c) {
          for (offset=0, i=c; i<n; i += ncols) {
            if (offset < xOffset[i]) offset = xOffset[i];
          }
          for (i=c; i<n; i += ncols) {
            xOffset[i] = offset + xExtent[c-1];
          }
        }
      } else if (alignCol === All) {
        for (offset=0, i=0; i<n; ++i) {
          if (i % ncols && offset < xOffset[i]) offset = xOffset[i];
        }
        for (i=0; i<n; ++i) {
          if (i % ncols) xOffset[i] = offset + xMax;
        }
      } else {
        for (alignCol=false, c=1; c<ncols; ++c) {
          for (i=c; i<n; i += ncols) {
            xOffset[i] += xExtent[c-1];
          }
        }
      }

      // enforce row alignment constraints
      if (alignRow === Each) {
        for (r=1; r<nrows; ++r) {
          for (offset=0, i=r*ncols, m=i+ncols; i<m; ++i) {
            if (offset < yOffset[i]) offset = yOffset[i];
          }
          for (i=r*ncols; i<m; ++i) {
            yOffset[i] = offset + yExtent[r-1];
          }
        }
      } else if (alignRow === All) {
        for (offset=0, i=ncols; i<n; ++i) {
          if (offset < yOffset[i]) offset = yOffset[i];
        }
        for (i=ncols; i<n; ++i) {
          yOffset[i] = offset + yMax;
        }
      } else {
        for (alignRow=false, r=1; r<nrows; ++r) {
          for (i=r*ncols, m=i+ncols; i<m; ++i) {
            yOffset[i] += yExtent[r-1];
          }
        }
      }

      // perform horizontal grid layout
      for (x=0, i=0; i<n; ++i) {
        x = xOffset[i] + (i % ncols ? x : 0);
        dx[i] += x - groups[i].x;
      }

      // perform vertical grid layout
      for (c=0; c<ncols; ++c) {
        for (y=0, i=c; i<n; i += ncols) {
          y += yOffset[i];
          dy[i] += y - groups[i].y;
        }
      }

      // perform horizontal centering
      if (alignCol && get$1(opt.center, Column) && nrows > 1) {
        for (i=0; i<n; ++i) {
          b = alignCol === All ? xMax : xExtent[i % ncols];
          x = b - boxes[i].x2 - groups[i].x - dx[i];
          if (x > 0) dx[i] += x / 2;
        }
      }

      // perform vertical centering
      if (alignRow && get$1(opt.center, Row) && ncols !== 1) {
        for (i=0; i<n; ++i) {
          b = alignRow === All ? yMax : yExtent[~~(i / ncols)];
          y = b - boxes[i].y2 - groups[i].y - dy[i];
          if (y > 0) dy[i] += y / 2;
        }
      }

      // position grid relative to anchor
      for (i=0; i<n; ++i) {
        bounds.union(boxes[i].translate(dx[i], dy[i]));
      }
      x = get$1(opt.anchor, X$1);
      y = get$1(opt.anchor, Y$1);
      switch (get$1(opt.anchor, Column)) {
        case End:    x -= bounds.width(); break;
        case Middle: x -= bounds.width() / 2;
      }
      switch (get$1(opt.anchor, Row)) {
        case End:    y -= bounds.height(); break;
        case Middle: y -= bounds.height() / 2;
      }
      x = Math.round(x);
      y = Math.round(y);

      // update mark positions, bounds, dirty
      bounds.clear();
      for (i=0; i<n; ++i) {
        groups[i].mark.bounds.clear();
      }
      for (i=0; i<n; ++i) {
        g = groups[i];
        g.x += (dx[i] += x);
        g.y += (dy[i] += y);
        bounds.union(g.mark.bounds.union(g.bounds.translate(dx[i], dy[i])));
        if (dirty) view.dirty(g);
      }

      return bounds;
    }

    function trellisLayout(view, group, opt) {
      var views = gridLayoutGroups(group),
          groups = views.marks,
          bbox = opt.bounds === Flush ? boundFlush : boundFull,
          off = opt.offset,
          ncols = opt.columns || groups.length,
          nrows = ncols < 0 ? 1 : Math.ceil(groups.length / ncols),
          cells = nrows * ncols,
          x, y, x2, y2, anchor, band, offset;

      // -- initial grid layout
      const bounds = gridLayout(view, groups, opt);

      // -- layout grid headers and footers --

      // perform row header layout
      if (views.rowheaders) {
        band = get$1(opt.headerBand, Row, null);
        x = layoutHeaders(view, views.rowheaders, groups, ncols, nrows, -get$1(off, 'rowHeader'), min$2, 0, bbox, 'x1', 0, ncols, 1, band);
      }

      // perform column header layout
      if (views.colheaders) {
        band = get$1(opt.headerBand, Column, null);
        y = layoutHeaders(view, views.colheaders, groups, ncols, ncols, -get$1(off, 'columnHeader'), min$2, 1, bbox, 'y1', 0, 1, ncols, band);
      }

      // perform row footer layout
      if (views.rowfooters) {
        band = get$1(opt.footerBand, Row, null);
        x2 = layoutHeaders(view, views.rowfooters, groups, ncols, nrows,  get$1(off, 'rowFooter'), max$2, 0, bbox, 'x2', ncols-1, ncols, 1, band);
      }

      // perform column footer layout
      if (views.colfooters) {
        band = get$1(opt.footerBand, Column, null);
        y2 = layoutHeaders(view, views.colfooters, groups, ncols, ncols,  get$1(off, 'columnFooter'), max$2, 1, bbox, 'y2', cells-ncols, 1, ncols, band);
      }

      // perform row title layout
      if (views.rowtitle) {
        anchor = get$1(opt.titleAnchor, Row);
        offset = get$1(off, 'rowTitle');
        offset = anchor === End ? x2 + offset : x - offset;
        band = get$1(opt.titleBand, Row, 0.5);
        layoutTitle(view, views.rowtitle, offset, 0, bounds, band);
      }

      // perform column title layout
      if (views.coltitle) {
        anchor = get$1(opt.titleAnchor, Column);
        offset = get$1(off, 'columnTitle');
        offset = anchor === End ? y2 + offset : y - offset;
        band = get$1(opt.titleBand, Column, 0.5);
        layoutTitle(view, views.coltitle, offset, 1, bounds, band);
      }
    }

    function boundFlush(item, field) {
      return field === 'x1' ? (item.x || 0)
        : field === 'y1' ? (item.y || 0)
        : field === 'x2' ? (item.x || 0) + (item.width || 0)
        : field === 'y2' ? (item.y || 0) + (item.height || 0)
        : undefined;
    }

    function boundFull(item, field) {
      return item.bounds[field];
    }

    // aggregation functions for grid margin determination
    function min$2(a, b) { return Math.floor(Math.min(a, b)); }
    function max$2(a, b) { return Math.ceil(Math.max(a, b)); }

    function layoutHeaders(view, headers, groups, ncols, limit, offset, agg, isX, bound, bf, start, stride, back, band) {
      var n = groups.length,
          init = 0,
          edge = 0,
          i, j, k, m, b, h, g, x, y;

      // if no groups, early exit and return 0
      if (!n) return init;

      // compute margin
      for (i=start; i<n; i+=stride) {
        if (groups[i]) init = agg(init, bound(groups[i], bf));
      }

      // if no headers, return margin calculation
      if (!headers.length) return init;

      // check if number of headers exceeds number of rows or columns
      if (headers.length > limit) {
        view.warn('Grid headers exceed limit: ' + limit);
        headers = headers.slice(0, limit);
      }

      // apply offset
      init += offset;

      // clear mark bounds for all headers
      for (j=0, m=headers.length; j<m; ++j) {
        view.dirty(headers[j]);
        headers[j].mark.bounds.clear();
      }

      // layout each header
      for (i=start, j=0, m=headers.length; j<m; ++j, i+=stride) {
        h = headers[j];
        b = h.mark.bounds;

        // search for nearest group to align to
        // necessary if table has empty cells
        for (k=i; k >= 0 && (g = groups[k]) == null; k-=back);

        // assign coordinates and update bounds
        if (isX) {
          x = band == null ? g.x : Math.round(g.bounds.x1 + band * g.bounds.width());
          y = init;
        } else {
          x = init;
          y = band == null ? g.y : Math.round(g.bounds.y1 + band * g.bounds.height());
        }
        b.union(h.bounds.translate(x - (h.x || 0), y - (h.y || 0)));
        h.x = x;
        h.y = y;
        view.dirty(h);

        // update current edge of layout bounds
        edge = agg(edge, b[bf]);
      }

      return edge;
    }

    function layoutTitle(view, g, offset, isX, bounds, band) {
      if (!g) return;
      view.dirty(g);

      // compute title coordinates
      var x = offset, y = offset;
      isX
        ? (x = Math.round(bounds.x1 + band * bounds.width()))
        : (y = Math.round(bounds.y1 + band * bounds.height()));

      // assign coordinates and update bounds
      g.bounds.translate(x - (g.x || 0), y - (g.y || 0));
      g.mark.bounds.clear().union(g.bounds);
      g.x = x;
      g.y = y;

      // queue title for redraw
      view.dirty(g);
    }

    // utility for looking up legend layout configuration
    function lookup$2(config, orient) {
      const opt = config[orient] || {};
      return (key, d) => opt[key] != null ? opt[key]
        : config[key] != null ? config[key]
        : d;
    }

    // if legends specify offset directly, use the maximum specified value
    function offsets(legends, value) {
      var max = -Infinity;
      legends.forEach(item => {
        if (item.offset != null) max = Math.max(max, item.offset);
      });
      return max > -Infinity ? max : value;
    }

    function legendParams(g, orient, config, xb, yb, w, h) {
      const _ = lookup$2(config, orient),
            offset = offsets(g, _('offset', 0)),
            anchor = _('anchor', Start),
            mult = anchor === End ? 1 : anchor === Middle ? 0.5 : 0;

      const p = {
        align:   Each,
        bounds:  _('bounds', Flush),
        columns: _('direction') === 'vertical' ? 1 : g.length,
        padding: _('margin', 8),
        center:  _('center'),
        nodirty: true
      };

      switch (orient) {
        case Left:
          p.anchor = {
            x: Math.floor(xb.x1) - offset, column: End,
            y: mult * (h || xb.height() + 2 * xb.y1), row: anchor
          };
          break;
        case Right:
          p.anchor = {
            x: Math.ceil(xb.x2) + offset,
            y: mult * (h || xb.height() + 2 * xb.y1), row: anchor
          };
          break;
        case Top:
          p.anchor = {
            y: Math.floor(yb.y1) - offset, row: End,
            x: mult * (w || yb.width() + 2 * yb.x1), column: anchor
          };
          break;
        case Bottom:
          p.anchor = {
            y: Math.ceil(yb.y2) + offset,
            x: mult * (w || yb.width() + 2 * yb.x1), column: anchor
          };
          break;
        case TopLeft:
          p.anchor = {x: offset, y: offset};
          break;
        case TopRight:
          p.anchor = {x: w - offset, y: offset, column: End};
          break;
        case BottomLeft:
          p.anchor = {x: offset, y: h - offset, row: End};
          break;
        case BottomRight:
          p.anchor = {x: w - offset, y: h - offset, column: End, row: End};
          break;
      }

      return p;
    }

    function legendLayout(view, legend) {
      var item = legend.items[0],
          datum = item.datum,
          orient = item.orient,
          bounds = item.bounds,
          x = item.x, y = item.y, w, h;

      // cache current bounds for later comparison
      item._bounds
        ? item._bounds.clear().union(bounds)
        : item._bounds = bounds.clone();
      bounds.clear();

      // adjust legend to accommodate padding and title
      legendGroupLayout(view, item, item.items[0].items[0]);

      // aggregate bounds to determine size, and include origin
      bounds = legendBounds(item, bounds);
      w = 2 * item.padding;
      h = 2 * item.padding;
      if (!bounds.empty()) {
        w = Math.ceil(bounds.width() + w);
        h = Math.ceil(bounds.height() + h);
      }

      if (datum.type === Symbols) {
        legendEntryLayout(item.items[0].items[0].items[0].items);
      }

      if (orient !== None$1) {
        item.x = x = 0;
        item.y = y = 0;
      }
      item.width = w;
      item.height = h;
      boundStroke(bounds.set(x, y, x + w, y + h), item);
      item.mark.bounds.clear().union(bounds);

      return item;
    }

    function legendBounds(item, b) {
      // aggregate item bounds
      item.items.forEach(_ => b.union(_.bounds));

      // anchor to legend origin
      b.x1 = item.padding;
      b.y1 = item.padding;

      return b;
    }

    function legendGroupLayout(view, item, entry) {
      var pad = item.padding,
          ex = pad - entry.x,
          ey = pad - entry.y;

      if (!item.datum.title) {
        if (ex || ey) translate$2(view, entry, ex, ey);
      } else {
        var title = item.items[1].items[0],
            anchor = title.anchor,
            tpad = item.titlePadding || 0,
            tx = pad - title.x,
            ty = pad - title.y;

        switch (title.orient) {
          case Left:
            ex += Math.ceil(title.bounds.width()) + tpad;
            break;
          case Right:
          case Bottom:
            break;
          default:
            ey += title.fontSize + tpad;
        }
        if (ex || ey) translate$2(view, entry, ex, ey);

        switch (title.orient) {
          case Left:
            ty += legendTitleOffset(item, entry, title, anchor, 0, 1);
            break;
          case Right:
            tx += legendTitleOffset(item, entry, title, End, 1, 0) + tpad;
            ty += legendTitleOffset(item, entry, title, anchor, 0, 1);
            break;
          case Bottom:
            tx += legendTitleOffset(item, entry, title, anchor, 1, 0);
            ty += legendTitleOffset(item, entry, title, End, 0, 0, 1) + tpad;
            break;
          default:
            tx += legendTitleOffset(item, entry, title, anchor, 1, 0);
        }
        if (tx || ty) translate$2(view, title, tx, ty);

        // translate legend if title pushes into negative coordinates
        if ((tx = Math.round(title.bounds.x1 - pad)) < 0) {
          translate$2(view, entry, -tx, 0);
          translate$2(view, title, -tx, 0);
        }
      }
    }

    function legendTitleOffset(item, entry, title, anchor, x, lr, noBar) {
      const grad = item.datum.type !== 'symbol',
            vgrad = title.datum.vgrad,
            e = grad && (lr || !vgrad) && !noBar ? entry.items[0] : entry,
            s = e.bounds[x ? 'x2' : 'y2'] - item.padding,
            u = vgrad && lr ? s : 0,
            v = vgrad && lr ? 0 : s;

      return Math.round(anchor === Start ? u : anchor === End ? v : 0.5 * s);
    }

    function translate$2(view, item, dx, dy) {
      item.x += dx;
      item.y += dy;
      item.bounds.translate(dx, dy);
      item.mark.bounds.translate(dx, dy);
      view.dirty(item);
    }

    function legendEntryLayout(entries) {
      // get max widths for each column
      var widths = entries.reduce(function(w, g) {
        w[g.column] = Math.max(g.bounds.x2 - g.x, w[g.column] || 0);
        return w;
      }, {});

      // set dimensions of legend entry groups
      entries.forEach(function(g) {
        g.width  = widths[g.column];
        g.height = g.bounds.y2 - g.y;
      });
    }

    function titleLayout(view, title, width, height, viewBounds) {
      var item = title.items[0],
          frame = item.frame,
          orient = item.orient,
          anchor = item.anchor,
          offset = item.offset,
          bounds = item.bounds,
          vertical = (orient === Left || orient === Right),
          start = 0,
          end = vertical ? height : width,
          x = 0, y = 0, pos;

      if (frame !== Group) {
        orient === Left ? (start = viewBounds.y2, end = viewBounds.y1)
          : orient === Right ? (start = viewBounds.y1, end = viewBounds.y2)
          : (start = viewBounds.x1, end = viewBounds.x2);
      } else if (orient === Left) {
        start = height, end = 0;
      }

      pos = (anchor === Start) ? start
        : (anchor === End) ? end
        : (start + end) / 2;

      tempBounds$2.clear().union(bounds);

      // position title text
      switch (orient) {
        case Top:
          x = pos;
          y = viewBounds.y1 - offset;
          break;
        case Left:
          x = viewBounds.x1 - offset;
          y = pos;
          break;
        case Right:
          x = viewBounds.x2 + offset;
          y = pos;
          break;
        case Bottom:
          x = pos;
          y = viewBounds.y2 + offset;
          break;
        default:
          x = item.x;
          y = item.y;
      }

      bounds.translate(x - (item.x || 0), y - (item.y || 0));
      if (set$1(item, 'x', x) | set$1(item, 'y', y)) {
        item.bounds = tempBounds$2;
        view.dirty(item);
        item.bounds = bounds;
        view.dirty(item);
      }

      // update bounds
      return title.bounds.clear().union(bounds);
    }

    /**
     * Layout view elements such as axes and legends.
     * Also performs size adjustments.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {object} params.mark - Scenegraph mark of groups to layout.
     */
    function ViewLayout(params) {
      Transform.call(this, null, params);
    }

    var prototype$S = inherits(ViewLayout, Transform);

    prototype$S.transform = function(_, pulse) {
      // TODO incremental update, output?
      var view = pulse.dataflow;
      _.mark.items.forEach(function(group) {
        if (_.layout) trellisLayout(view, group, _.layout);
        layoutGroup(view, group, _);
      });
      if (_.modified()) pulse.reflow();
      return pulse;
    };

    function layoutGroup(view, group, _) {
      var items = group.items,
          width = Math.max(0, group.width || 0),
          height = Math.max(0, group.height || 0),
          viewBounds = new Bounds().set(0, 0, width, height),
          xBounds = viewBounds.clone(),
          yBounds = viewBounds.clone(),
          legends = [], title,
          mark, orient, b, i, n;

      // layout axes, gather legends, collect bounds
      for (i=0, n=items.length; i<n; ++i) {
        mark = items[i];
        switch (mark.role) {
          case AxisRole:
            b = isYAxis(mark) ? xBounds : yBounds;
            b.union(axisLayout(view, mark, width, height));
            break;
          case TitleRole:
            title = mark;
            break;
          case LegendRole:
            legends.push(legendLayout(view, mark));
            break;
          case FrameRole:
          case ScopeRole:
          case RowHeader:
          case RowFooter:
          case RowTitle:
          case ColHeader:
          case ColFooter:
          case ColTitle:
            xBounds.union(mark.bounds);
            yBounds.union(mark.bounds);
            break;
          default:
            viewBounds.union(mark.bounds);
        }
      }

      // layout legends, adjust viewBounds
      if (legends.length) {
        // group legends by orient
        const l = {};
        legends.forEach(item => {
          orient = item.orient || Right;
          if (orient !== None$1) (l[orient] || (l[orient] = [])).push(item);
        });

        // perform grid layout for each orient group
        for (let orient in l) {
          const g = l[orient];
          gridLayout(view, g, legendParams(
            g, orient, _.legends, xBounds, yBounds, width, height
          ));
        }

        // update view bounds
        legends.forEach(item => {
          const b = item.bounds;

          if (!b.equals(item._bounds)) {
            item.bounds = item._bounds;
            view.dirty(item); // dirty previous location
            item.bounds = b;
            view.dirty(item);
          }

          if (_.autosize && _.autosize.type === Fit) {
            // For autosize fit, incorporate the orthogonal dimension only.
            // Legends that overrun the chart area will then be clipped;
            // otherwise the chart area gets reduced to nothing!
            switch(item.orient) {
              case Left:
              case Right:
                viewBounds.add(b.x1, 0).add(b.x2, 0);
                break;
              case Top:
              case Bottom:
                viewBounds.add(0, b.y1).add(0, b.y2);
            }
          } else {
            viewBounds.union(b);
          }
        });
      }

      // combine bounding boxes
      viewBounds.union(xBounds).union(yBounds);

      // layout title, adjust bounds
      if (title) {
        viewBounds.union(titleLayout(view, title, width, height, viewBounds));
      }

      // perform size adjustment
      viewSizeLayout(view, group, viewBounds, _);
    }

    function viewSizeLayout(view, group, viewBounds, _) {
      var auto = _.autosize || {},
          type = auto.type,
          viewWidth = view._width,
          viewHeight = view._height,
          padding = view.padding();

      if (view._autosize < 1 || !type) return;

      var width  = Math.max(0, group.width || 0),
          left   = Math.max(0, Math.ceil(-viewBounds.x1)),
          right  = Math.max(0, Math.ceil(viewBounds.x2 - width)),
          height = Math.max(0, group.height || 0),
          top    = Math.max(0, Math.ceil(-viewBounds.y1)),
          bottom = Math.max(0, Math.ceil(viewBounds.y2 - height));

      if (auto.contains === Padding) {
        viewWidth -= padding.left + padding.right;
        viewHeight -= padding.top + padding.bottom;
      }

      if (type === None$1) {
        left = 0;
        top = 0;
        width = viewWidth;
        height = viewHeight;
      }

      else if (type === Fit) {
        width = Math.max(0, viewWidth - left - right);
        height = Math.max(0, viewHeight - top - bottom);
      }

      else if (type === FitX) {
        width = Math.max(0, viewWidth - left - right);
        viewHeight = height + top + bottom;
      }

      else if (type === FitY) {
        viewWidth = width + left + right;
        height = Math.max(0, viewHeight - top - bottom);
      }

      else if (type === Pad) {
        viewWidth = width + left + right;
        viewHeight = height + top + bottom;
      }

      view._resizeView(
        viewWidth, viewHeight,
        width, height,
        [left, top],
        auto.resize
      );
    }



    var vtx = /*#__PURE__*/Object.freeze({
        bound: Bound,
        identifier: Identifier,
        mark: Mark$1,
        overlap: Overlap,
        render: Render,
        viewlayout: ViewLayout
    });

    function bandSpace(count, paddingInner, paddingOuter) {
      var space = count - paddingInner + paddingOuter * 2;
      return count ? (space > 0 ? space : 1) : 0;
    }

    const Identity = 'identity';

    const Linear$1 = 'linear';
    const Log = 'log';
    const Pow = 'pow';
    const Sqrt = 'sqrt';
    const Symlog = 'symlog';

    const Time = 'time';
    const UTC = 'utc';

    const Sequential = 'sequential';
    const Diverging = 'diverging';

    const Quantile = 'quantile';
    const Quantize = 'quantize';
    const Threshold = 'threshold';

    const Ordinal = 'ordinal';
    const Point = 'point';
    const Band = 'band';
    const BinOrdinal = 'bin-ordinal';

    function isSequential(key) {
      return key && key.startsWith(Sequential);
    }

    function isDiverging(key) {
      return key && key.startsWith(Diverging);
    }

    function isInterpolating(key) {
      return isSequential(key) || isDiverging(key);
    }

    function isLogarithmic(key) {
      return key === Log || key.endsWith('-log');
    }

    function isContinuous$1(key) {
      switch (key) {
        case Linear$1:
        case Log:
        case Pow:
        case Sqrt:
        case Symlog:
        case Time:
        case UTC:
        case Sequential:
          return true;
      }
      return false;
    }

    var time = {
      millisecond: millisecond,
      second:      second,
      minute:      minute,
      hour:        hour,
      day:         day,
      week:        sunday,
      month:       month,
      year:        year
    };

    var utc = {
      millisecond: millisecond,
      second:      second,
      minute:      utcMinute,
      hour:        utcHour,
      day:         utcDay,
      week:        utcSunday,
      month:       utcMonth,
      year:        utcYear
    };

    function timeInterval(unit, type) {
      const t = (type === UTC ? utc : time);
      return t.hasOwnProperty(unit) && t[unit];
    }

    function invertRange(scale) {
      return function(_) {
        var lo = _[0],
            hi = _[1],
            t;

        if (hi < lo) {
          t = lo;
          lo = hi;
          hi = t;
        }

        return [
          scale.invert(lo),
          scale.invert(hi)
        ];
      }
    }

    function invertRangeExtent(scale) {
      return function(_) {
        var range = scale.range(),
            lo = _[0],
            hi = _[1],
            min = -1, max, t, i, n;

        if (hi < lo) {
          t = lo;
          lo = hi;
          hi = t;
        }

        for (i=0, n=range.length; i<n; ++i) {
          if (range[i] >= lo && range[i] <= hi) {
            if (min < 0) min = i;
            max = i;
          }
        }

        if (min < 0) return undefined;

        lo = scale.invertExtent(range[min]);
        hi = scale.invertExtent(range[max]);

        return [
          lo[0] === undefined ? lo[1] : lo[0],
          hi[1] === undefined ? hi[0] : hi[1]
        ];
      }
    }

    function ascending$1(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector$1(compare) {
      if (compare.length === 1) compare = ascendingComparator$1(compare);
      return {
        left: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        },
        right: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;
            else lo = mid + 1;
          }
          return lo;
        }
      };
    }

    function ascendingComparator$1(f) {
      return function(d, x) {
        return ascending$1(f(d), x);
      };
    }

    var ascendingBisect$1 = bisector$1(ascending$1);
    var bisectRight$1 = ascendingBisect$1.right;

    function number$2(x) {
      return x === null ? NaN : +x;
    }

    var e10$1 = Math.sqrt(50),
        e5$1 = Math.sqrt(10),
        e2$1 = Math.sqrt(2);

    function ticks(start, stop, count) {
      var reverse,
          i = -1,
          n,
          ticks,
          step;

      stop = +stop, start = +start, count = +count;
      if (start === stop && count > 0) return [start];
      if (reverse = stop < start) n = start, start = stop, stop = n;
      if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

      if (step > 0) {
        start = Math.ceil(start / step);
        stop = Math.floor(stop / step);
        ticks = new Array(n = Math.ceil(stop - start + 1));
        while (++i < n) ticks[i] = (start + i) * step;
      } else {
        start = Math.floor(start * step);
        stop = Math.ceil(stop * step);
        ticks = new Array(n = Math.ceil(start - stop + 1));
        while (++i < n) ticks[i] = (start - i) / step;
      }

      if (reverse) ticks.reverse();

      return ticks;
    }

    function tickIncrement(start, stop, count) {
      var step = (stop - start) / Math.max(0, count),
          power = Math.floor(Math.log(step) / Math.LN10),
          error = step / Math.pow(10, power);
      return power >= 0
          ? (error >= e10$1 ? 10 : error >= e5$1 ? 5 : error >= e2$1 ? 2 : 1) * Math.pow(10, power)
          : -Math.pow(10, -power) / (error >= e10$1 ? 10 : error >= e5$1 ? 5 : error >= e2$1 ? 2 : 1);
    }

    function tickStep$1(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10$1) step1 *= 10;
      else if (error >= e5$1) step1 *= 5;
      else if (error >= e2$1) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function quantile$1(values, p, valueof) {
      if (valueof == null) valueof = number$2;
      if (!(n = values.length)) return;
      if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
      if (p >= 1) return +valueof(values[n - 1], n - 1, values);
      var n,
          i = (n - 1) * p,
          i0 = Math.floor(i),
          value0 = +valueof(values[i0], i0, values),
          value1 = +valueof(values[i0 + 1], i0 + 1, values);
      return value0 + (value1 - value0) * (i - i0);
    }

    function initRange(domain, range) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.range(domain); break;
        default: this.range(range).domain(domain); break;
      }
      return this;
    }

    function initInterpolator(domain, interpolator) {
      switch (arguments.length) {
        case 0: break;
        case 1: this.interpolator(domain); break;
        default: this.interpolator(interpolator).domain(domain); break;
      }
      return this;
    }

    var prefix = "$";

    function Map$1() {}

    Map$1.prototype = map.prototype = {
      constructor: Map$1,
      has: function(key) {
        return (prefix + key) in this;
      },
      get: function(key) {
        return this[prefix + key];
      },
      set: function(key, value) {
        this[prefix + key] = value;
        return this;
      },
      remove: function(key) {
        var property = prefix + key;
        return property in this && delete this[property];
      },
      clear: function() {
        for (var property in this) if (property[0] === prefix) delete this[property];
      },
      keys: function() {
        var keys = [];
        for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
        return keys;
      },
      values: function() {
        var values = [];
        for (var property in this) if (property[0] === prefix) values.push(this[property]);
        return values;
      },
      entries: function() {
        var entries = [];
        for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
        return entries;
      },
      size: function() {
        var size = 0;
        for (var property in this) if (property[0] === prefix) ++size;
        return size;
      },
      empty: function() {
        for (var property in this) if (property[0] === prefix) return false;
        return true;
      },
      each: function(f) {
        for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
      }
    };

    function map(object, f) {
      var map = new Map$1;

      // Copy constructor.
      if (object instanceof Map$1) object.each(function(value, key) { map.set(key, value); });

      // Index array by numeric index or specified key function.
      else if (Array.isArray(object)) {
        var i = -1,
            n = object.length,
            o;

        if (f == null) while (++i < n) map.set(i, object[i]);
        else while (++i < n) map.set(f(o = object[i], i, object), o);
      }

      // Convert object to map.
      else if (object) for (var key in object) map.set(key, object[key]);

      return map;
    }

    function Set$1() {}

    var proto = map.prototype;

    Set$1.prototype = set$2.prototype = {
      constructor: Set$1,
      has: proto.has,
      add: function(value) {
        value += "";
        this[prefix + value] = value;
        return this;
      },
      remove: proto.remove,
      clear: proto.clear,
      values: proto.keys,
      size: proto.size,
      empty: proto.empty,
      each: proto.each
    };

    function set$2(object, f) {
      var set = new Set$1;

      // Copy constructor.
      if (object instanceof Set$1) object.each(function(value) { set.add(value); });

      // Otherwise, assume it’s an array.
      else if (object) {
        var i = -1, n = object.length;
        if (f == null) while (++i < n) set.add(object[i]);
        else while (++i < n) set.add(f(object[i], i, object));
      }

      return set;
    }

    var array$1 = Array.prototype;

    var map$1 = array$1.map;
    var slice = array$1.slice;

    var implicit = {name: "implicit"};

    function ordinal() {
      var index = map(),
          domain = [],
          range = [],
          unknown = implicit;

      function scale(d) {
        var key = d + "", i = index.get(key);
        if (!i) {
          if (unknown !== implicit) return unknown;
          index.set(key, i = domain.push(d));
        }
        return range[(i - 1) % range.length];
      }

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = map();
        var i = -1, n = _.length, d, key;
        while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
        return scale;
      };

      scale.range = function(_) {
        return arguments.length ? (range = slice.call(_), scale) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function define(constructor, factory, prototype) {
      constructor.prototype = factory.prototype = prototype;
      prototype.constructor = constructor;
    }

    function extend$1(parent, definition) {
      var prototype = Object.create(parent.prototype);
      for (var key in definition) prototype[key] = definition[key];
      return prototype;
    }

    function Color() {}

    var darker = 0.7;
    var brighter = 1 / darker;

    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex3 = /^#([0-9a-f]{3})$/,
        reHex6 = /^#([0-9a-f]{6})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

    var named = {
      aliceblue: 0xf0f8ff,
      antiquewhite: 0xfaebd7,
      aqua: 0x00ffff,
      aquamarine: 0x7fffd4,
      azure: 0xf0ffff,
      beige: 0xf5f5dc,
      bisque: 0xffe4c4,
      black: 0x000000,
      blanchedalmond: 0xffebcd,
      blue: 0x0000ff,
      blueviolet: 0x8a2be2,
      brown: 0xa52a2a,
      burlywood: 0xdeb887,
      cadetblue: 0x5f9ea0,
      chartreuse: 0x7fff00,
      chocolate: 0xd2691e,
      coral: 0xff7f50,
      cornflowerblue: 0x6495ed,
      cornsilk: 0xfff8dc,
      crimson: 0xdc143c,
      cyan: 0x00ffff,
      darkblue: 0x00008b,
      darkcyan: 0x008b8b,
      darkgoldenrod: 0xb8860b,
      darkgray: 0xa9a9a9,
      darkgreen: 0x006400,
      darkgrey: 0xa9a9a9,
      darkkhaki: 0xbdb76b,
      darkmagenta: 0x8b008b,
      darkolivegreen: 0x556b2f,
      darkorange: 0xff8c00,
      darkorchid: 0x9932cc,
      darkred: 0x8b0000,
      darksalmon: 0xe9967a,
      darkseagreen: 0x8fbc8f,
      darkslateblue: 0x483d8b,
      darkslategray: 0x2f4f4f,
      darkslategrey: 0x2f4f4f,
      darkturquoise: 0x00ced1,
      darkviolet: 0x9400d3,
      deeppink: 0xff1493,
      deepskyblue: 0x00bfff,
      dimgray: 0x696969,
      dimgrey: 0x696969,
      dodgerblue: 0x1e90ff,
      firebrick: 0xb22222,
      floralwhite: 0xfffaf0,
      forestgreen: 0x228b22,
      fuchsia: 0xff00ff,
      gainsboro: 0xdcdcdc,
      ghostwhite: 0xf8f8ff,
      gold: 0xffd700,
      goldenrod: 0xdaa520,
      gray: 0x808080,
      green: 0x008000,
      greenyellow: 0xadff2f,
      grey: 0x808080,
      honeydew: 0xf0fff0,
      hotpink: 0xff69b4,
      indianred: 0xcd5c5c,
      indigo: 0x4b0082,
      ivory: 0xfffff0,
      khaki: 0xf0e68c,
      lavender: 0xe6e6fa,
      lavenderblush: 0xfff0f5,
      lawngreen: 0x7cfc00,
      lemonchiffon: 0xfffacd,
      lightblue: 0xadd8e6,
      lightcoral: 0xf08080,
      lightcyan: 0xe0ffff,
      lightgoldenrodyellow: 0xfafad2,
      lightgray: 0xd3d3d3,
      lightgreen: 0x90ee90,
      lightgrey: 0xd3d3d3,
      lightpink: 0xffb6c1,
      lightsalmon: 0xffa07a,
      lightseagreen: 0x20b2aa,
      lightskyblue: 0x87cefa,
      lightslategray: 0x778899,
      lightslategrey: 0x778899,
      lightsteelblue: 0xb0c4de,
      lightyellow: 0xffffe0,
      lime: 0x00ff00,
      limegreen: 0x32cd32,
      linen: 0xfaf0e6,
      magenta: 0xff00ff,
      maroon: 0x800000,
      mediumaquamarine: 0x66cdaa,
      mediumblue: 0x0000cd,
      mediumorchid: 0xba55d3,
      mediumpurple: 0x9370db,
      mediumseagreen: 0x3cb371,
      mediumslateblue: 0x7b68ee,
      mediumspringgreen: 0x00fa9a,
      mediumturquoise: 0x48d1cc,
      mediumvioletred: 0xc71585,
      midnightblue: 0x191970,
      mintcream: 0xf5fffa,
      mistyrose: 0xffe4e1,
      moccasin: 0xffe4b5,
      navajowhite: 0xffdead,
      navy: 0x000080,
      oldlace: 0xfdf5e6,
      olive: 0x808000,
      olivedrab: 0x6b8e23,
      orange: 0xffa500,
      orangered: 0xff4500,
      orchid: 0xda70d6,
      palegoldenrod: 0xeee8aa,
      palegreen: 0x98fb98,
      paleturquoise: 0xafeeee,
      palevioletred: 0xdb7093,
      papayawhip: 0xffefd5,
      peachpuff: 0xffdab9,
      peru: 0xcd853f,
      pink: 0xffc0cb,
      plum: 0xdda0dd,
      powderblue: 0xb0e0e6,
      purple: 0x800080,
      rebeccapurple: 0x663399,
      red: 0xff0000,
      rosybrown: 0xbc8f8f,
      royalblue: 0x4169e1,
      saddlebrown: 0x8b4513,
      salmon: 0xfa8072,
      sandybrown: 0xf4a460,
      seagreen: 0x2e8b57,
      seashell: 0xfff5ee,
      sienna: 0xa0522d,
      silver: 0xc0c0c0,
      skyblue: 0x87ceeb,
      slateblue: 0x6a5acd,
      slategray: 0x708090,
      slategrey: 0x708090,
      snow: 0xfffafa,
      springgreen: 0x00ff7f,
      steelblue: 0x4682b4,
      tan: 0xd2b48c,
      teal: 0x008080,
      thistle: 0xd8bfd8,
      tomato: 0xff6347,
      turquoise: 0x40e0d0,
      violet: 0xee82ee,
      wheat: 0xf5deb3,
      white: 0xffffff,
      whitesmoke: 0xf5f5f5,
      yellow: 0xffff00,
      yellowgreen: 0x9acd32
    };

    define(Color, color$1, {
      displayable: function() {
        return this.rgb().displayable();
      },
      hex: function() {
        return this.rgb().hex();
      },
      toString: function() {
        return this.rgb() + "";
      }
    });

    function color$1(format) {
      var m;
      format = (format + "").trim().toLowerCase();
      return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
          : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
          : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
          : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
          : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
          : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
          : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
          : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
          : named.hasOwnProperty(format) ? rgbn(named[format])
          : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
          : null;
    }

    function rgbn(n) {
      return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }

    function rgba(r, g, b, a) {
      if (a <= 0) r = g = b = NaN;
      return new Rgb(r, g, b, a);
    }

    function rgbConvert(o) {
      if (!(o instanceof Color)) o = color$1(o);
      if (!o) return new Rgb;
      o = o.rgb();
      return new Rgb(o.r, o.g, o.b, o.opacity);
    }

    function rgb(r, g, b, opacity) {
      return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }

    function Rgb(r, g, b, opacity) {
      this.r = +r;
      this.g = +g;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Rgb, rgb, extend$1(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return (0 <= this.r && this.r <= 255)
            && (0 <= this.g && this.g <= 255)
            && (0 <= this.b && this.b <= 255)
            && (0 <= this.opacity && this.opacity <= 1);
      },
      hex: function() {
        return "#" + hex(this.r) + hex(this.g) + hex(this.b);
      },
      toString: function() {
        var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "rgb(" : "rgba(")
            + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
            + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
            + Math.max(0, Math.min(255, Math.round(this.b) || 0))
            + (a === 1 ? ")" : ", " + a + ")");
      }
    }));

    function hex(value) {
      value = Math.max(0, Math.min(255, Math.round(value) || 0));
      return (value < 16 ? "0" : "") + value.toString(16);
    }

    function hsla(h, s, l, a) {
      if (a <= 0) h = s = l = NaN;
      else if (l <= 0 || l >= 1) h = s = NaN;
      else if (s <= 0) h = NaN;
      return new Hsl(h, s, l, a);
    }

    function hslConvert(o) {
      if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Color)) o = color$1(o);
      if (!o) return new Hsl;
      if (o instanceof Hsl) return o;
      o = o.rgb();
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          min = Math.min(r, g, b),
          max = Math.max(r, g, b),
          h = NaN,
          s = max - min,
          l = (max + min) / 2;
      if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
      } else {
        s = l > 0 && l < 1 ? 0 : h;
      }
      return new Hsl(h, s, l, o.opacity);
    }

    function hsl(h, s, l, opacity) {
      return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }

    function Hsl(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hsl, hsl, extend$1(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360,
            s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
            l = this.l,
            m2 = l + (l < 0.5 ? l : 1 - l) * s,
            m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s))
            && (0 <= this.l && this.l <= 1)
            && (0 <= this.opacity && this.opacity <= 1);
      }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
      return (h < 60 ? m1 + (m2 - m1) * h / 60
          : h < 180 ? m2
          : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
          : m1) * 255;
    }

    var deg2rad = Math.PI / 180;
    var rad2deg = 180 / Math.PI;

    // https://beta.observablehq.com/@mbostock/lab-and-rgb
    var K = 18,
        Xn = 0.96422,
        Yn = 1,
        Zn = 0.82521,
        t0$1 = 4 / 29,
        t1$1 = 6 / 29,
        t2 = 3 * t1$1 * t1$1,
        t3 = t1$1 * t1$1 * t1$1;

    function labConvert(o) {
      if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
      if (o instanceof Hcl) {
        if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
        var h = o.h * deg2rad;
        return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
      }
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = rgb2lrgb(o.r),
          g = rgb2lrgb(o.g),
          b = rgb2lrgb(o.b),
          y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
      if (r === g && g === b) x = z = y; else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
      }
      return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
    }

    function lab(l, a, b, opacity) {
      return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
    }

    function Lab(l, a, b, opacity) {
      this.l = +l;
      this.a = +a;
      this.b = +b;
      this.opacity = +opacity;
    }

    define(Lab, lab, extend$1(Color, {
      brighter: function(k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      darker: function(k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
      },
      rgb: function() {
        var y = (this.l + 16) / 116,
            x = isNaN(this.a) ? y : y + this.a / 500,
            z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new Rgb(
          lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
          lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
          this.opacity
        );
      }
    }));

    function xyz2lab(t) {
      return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0$1;
    }

    function lab2xyz(t) {
      return t > t1$1 ? t * t * t : t2 * (t - t0$1);
    }

    function lrgb2rgb(x) {
      return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
    }

    function rgb2lrgb(x) {
      return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
    }

    function hclConvert(o) {
      if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
      if (!(o instanceof Lab)) o = labConvert(o);
      if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);
      var h = Math.atan2(o.b, o.a) * rad2deg;
      return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
    }

    function hcl(h, c, l, opacity) {
      return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
    }

    function Hcl(h, c, l, opacity) {
      this.h = +h;
      this.c = +c;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Hcl, hcl, extend$1(Color, {
      brighter: function(k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
      },
      darker: function(k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
      },
      rgb: function() {
        return labConvert(this).rgb();
      }
    }));

    var A = -0.14861,
        B = +1.78277,
        C = -0.29227,
        D = -0.90649,
        E = +1.97294,
        ED = E * D,
        EB = E * B,
        BC_DA = B * C - D * A;

    function cubehelixConvert(o) {
      if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
      if (!(o instanceof Rgb)) o = rgbConvert(o);
      var r = o.r / 255,
          g = o.g / 255,
          b = o.b / 255,
          l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
          bl = b - l,
          k = (E * (g - l) - C * bl) / D,
          s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
          h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
      return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }

    function cubehelix(h, s, l, opacity) {
      return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }

    function Cubehelix(h, s, l, opacity) {
      this.h = +h;
      this.s = +s;
      this.l = +l;
      this.opacity = +opacity;
    }

    define(Cubehelix, cubehelix, extend$1(Color, {
      brighter: function(k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      darker: function(k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
      },
      rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
            l = +this.l,
            a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
            cosh = Math.cos(h),
            sinh = Math.sin(h);
        return new Rgb(
          255 * (l + a * (A * cosh + B * sinh)),
          255 * (l + a * (C * cosh + D * sinh)),
          255 * (l + a * (E * cosh)),
          this.opacity
        );
      }
    }));

    function basis(t1, v0, v1, v2, v3) {
      var t2 = t1 * t1, t3 = t2 * t1;
      return ((1 - 3 * t1 + 3 * t2 - t3) * v0
          + (4 - 6 * t2 + 3 * t3) * v1
          + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
          + t3 * v3) / 6;
    }

    function basis$1(values) {
      var n = values.length - 1;
      return function(t) {
        var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
            v1 = values[i],
            v2 = values[i + 1],
            v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
            v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    function basisClosed(values) {
      var n = values.length;
      return function(t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
            v0 = values[(i + n - 1) % n],
            v1 = values[i % n],
            v2 = values[(i + 1) % n],
            v3 = values[(i + 2) % n];
        return basis((t - i / n) * n, v0, v1, v2, v3);
      };
    }

    function constant$3(x) {
      return function() {
        return x;
      };
    }

    function linear(a, d) {
      return function(t) {
        return a + t * d;
      };
    }

    function exponential(a, b, y) {
      return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
      };
    }

    function hue(a, b) {
      var d = b - a;
      return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
    }

    function gamma(y) {
      return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);
      };
    }

    function nogamma(a, b) {
      var d = b - a;
      return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);
    }

    var rgb$1 = (function rgbGamma(y) {
      var color = gamma(y);

      function rgb$1(start, end) {
        var r = color((start = rgb(start)).r, (end = rgb(end)).r),
            g = color(start.g, end.g),
            b = color(start.b, end.b),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }

      rgb$1.gamma = rgbGamma;

      return rgb$1;
    })(1);

    function rgbSpline(spline) {
      return function(colors) {
        var n = colors.length,
            r = new Array(n),
            g = new Array(n),
            b = new Array(n),
            i, color;
        for (i = 0; i < n; ++i) {
          color = rgb(colors[i]);
          r[i] = color.r || 0;
          g[i] = color.g || 0;
          b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
          color.r = r(t);
          color.g = g(t);
          color.b = b(t);
          return color + "";
        };
      };
    }

    var rgbBasis = rgbSpline(basis$1);
    var rgbBasisClosed = rgbSpline(basisClosed);

    function array$2(a, b) {
      var nb = b ? b.length : 0,
          na = a ? Math.min(nb, a.length) : 0,
          x = new Array(na),
          c = new Array(nb),
          i;

      for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
      for (; i < nb; ++i) c[i] = b[i];

      return function(t) {
        for (i = 0; i < na; ++i) c[i] = x[i](t);
        return c;
      };
    }

    function date(a, b) {
      var d = new Date;
      return a = +a, b -= a, function(t) {
        return d.setTime(a + b * t), d;
      };
    }

    function number$3(a, b) {
      return a = +a, b -= a, function(t) {
        return a + b * t;
      };
    }

    function object$2(a, b) {
      var i = {},
          c = {},
          k;

      if (a === null || typeof a !== "object") a = {};
      if (b === null || typeof b !== "object") b = {};

      for (k in b) {
        if (k in a) {
          i[k] = value(a[k], b[k]);
        } else {
          c[k] = b[k];
        }
      }

      return function(t) {
        for (k in i) c[k] = i[k](t);
        return c;
      };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");

    function zero$1(b) {
      return function() {
        return b;
      };
    }

    function one$1(b) {
      return function(t) {
        return b(t) + "";
      };
    }

    function string(a, b) {
      var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
          am, // current match in a
          bm, // current match in b
          bs, // string preceding current number in b, if any
          i = -1, // index in s
          s = [], // string constants and placeholders
          q = []; // number interpolators

      // Coerce inputs to strings.
      a = a + "", b = b + "";

      // Interpolate pairs of numbers in a & b.
      while ((am = reA.exec(a))
          && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) { // a string precedes the next number in b
          bs = b.slice(bi, bs);
          if (s[i]) s[i] += bs; // coalesce with previous string
          else s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
          if (s[i]) s[i] += bm; // coalesce with previous string
          else s[++i] = bm;
        } else { // interpolate non-matching numbers
          s[++i] = null;
          q.push({i: i, x: number$3(am, bm)});
        }
        bi = reB.lastIndex;
      }

      // Add remains of b.
      if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }

      // Special optimization for only a single match.
      // Otherwise, interpolate each of the numbers and rejoin the string.
      return s.length < 2 ? (q[0]
          ? one$1(q[0].x)
          : zero$1(b))
          : (b = q.length, function(t) {
              for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
              return s.join("");
            });
    }

    function value(a, b) {
      var t = typeof b, c;
      return b == null || t === "boolean" ? constant$3(b)
          : (t === "number" ? number$3
          : t === "string" ? ((c = color$1(b)) ? (b = c, rgb$1) : string)
          : b instanceof color$1 ? rgb$1
          : b instanceof Date ? date
          : Array.isArray(b) ? array$2
          : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$2
          : number$3)(a, b);
    }

    function discrete(range) {
      var n = range.length;
      return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
      };
    }

    function hue$1(a, b) {
      var i = hue(+a, +b);
      return function(t) {
        var x = i(t);
        return x - 360 * Math.floor(x / 360);
      };
    }

    function interpolateRound(a, b) {
      return a = +a, b -= a, function(t) {
        return Math.round(a + b * t);
      };
    }

    var degrees = 180 / Math.PI;

    var identity$2 = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };

    function decompose(a, b, c, d, e, f) {
      var scaleX, scaleY, skewX;
      if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
      if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
      if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
      if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
      return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees,
        skewX: Math.atan(skewX) * degrees,
        scaleX: scaleX,
        scaleY: scaleY
      };
    }

    var cssNode,
        cssRoot,
        cssView,
        svgNode;

    function parseCss(value) {
      if (value === "none") return identity$2;
      if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
      cssNode.style.transform = value;
      value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
      cssRoot.removeChild(cssNode);
      value = value.slice(7, -1).split(",");
      return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
    }

    function parseSvg(value) {
      if (value == null) return identity$2;
      if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
      svgNode.setAttribute("transform", value);
      if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
      value = value.matrix;
      return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {

      function pop(s) {
        return s.length ? s.pop() + " " : "";
      }

      function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push("translate(", null, pxComma, null, pxParen);
          q.push({i: i - 4, x: number$3(xa, xb)}, {i: i - 2, x: number$3(ya, yb)});
        } else if (xb || yb) {
          s.push("translate(" + xb + pxComma + yb + pxParen);
        }
      }

      function rotate(a, b, s, q) {
        if (a !== b) {
          if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
          q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number$3(a, b)});
        } else if (b) {
          s.push(pop(s) + "rotate(" + b + degParen);
        }
      }

      function skewX(a, b, s, q) {
        if (a !== b) {
          q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number$3(a, b)});
        } else if (b) {
          s.push(pop(s) + "skewX(" + b + degParen);
        }
      }

      function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
          var i = s.push(pop(s) + "scale(", null, ",", null, ")");
          q.push({i: i - 4, x: number$3(xa, xb)}, {i: i - 2, x: number$3(ya, yb)});
        } else if (xb !== 1 || yb !== 1) {
          s.push(pop(s) + "scale(" + xb + "," + yb + ")");
        }
      }

      return function(a, b) {
        var s = [], // string constants and placeholders
            q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        };
      };
    }

    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var rho = Math.SQRT2,
        rho2 = 2,
        rho4 = 4,
        epsilon2 = 1e-12;

    function cosh(x) {
      return ((x = Math.exp(x)) + 1 / x) / 2;
    }

    function sinh(x) {
      return ((x = Math.exp(x)) - 1 / x) / 2;
    }

    function tanh(x) {
      return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function zoom$1(p0, p1) {
      var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
          ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
          dx = ux1 - ux0,
          dy = uy1 - uy0,
          d2 = dx * dx + dy * dy,
          i,
          S;

      // Special case for u0 ≅ u1.
      if (d2 < epsilon2) {
        S = Math.log(w1 / w0) / rho;
        i = function(t) {
          return [
            ux0 + t * dx,
            uy0 + t * dy,
            w0 * Math.exp(rho * t * S)
          ];
        };
      }

      // General case.
      else {
        var d1 = Math.sqrt(d2),
            b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
            b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
            r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
            r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;
        i = function(t) {
          var s = t * S,
              coshr0 = cosh(r0),
              u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
          return [
            ux0 + u * dx,
            uy0 + u * dy,
            w0 * coshr0 / cosh(rho * s + r0)
          ];
        };
      }

      i.duration = S * 1000;

      return i;
    }

    function hsl$1(hue) {
      return function(start, end) {
        var h = hue((start = hsl(start)).h, (end = hsl(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hsl$2 = hsl$1(hue);
    var hslLong = hsl$1(nogamma);

    function lab$1(start, end) {
      var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
          a = nogamma(start.a, end.a),
          b = nogamma(start.b, end.b),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    function hcl$1(hue) {
      return function(start, end) {
        var h = hue((start = hcl(start)).h, (end = hcl(end)).h),
            c = nogamma(start.c, end.c),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.c = c(t);
          start.l = l(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
    }

    var hcl$2 = hcl$1(hue);
    var hclLong = hcl$1(nogamma);

    function cubehelix$1(hue) {
      return (function cubehelixGamma(y) {
        y = +y;

        function cubehelix$1(start, end) {
          var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
              s = nogamma(start.s, end.s),
              l = nogamma(start.l, end.l),
              opacity = nogamma(start.opacity, end.opacity);
          return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + "";
          };
        }

        cubehelix$1.gamma = cubehelixGamma;

        return cubehelix$1;
      })(1);
    }

    var cubehelix$2 = cubehelix$1(hue);
    var cubehelixLong = cubehelix$1(nogamma);

    function piecewise(interpolate, values) {
      var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
      while (i < n) I[i] = interpolate(v, v = values[++i]);
      return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
      };
    }

    function quantize(interpolator, n) {
      var samples = new Array(n);
      for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
      return samples;
    }



    var $$1 = /*#__PURE__*/Object.freeze({
        interpolate: value,
        interpolateArray: array$2,
        interpolateBasis: basis$1,
        interpolateBasisClosed: basisClosed,
        interpolateDate: date,
        interpolateDiscrete: discrete,
        interpolateHue: hue$1,
        interpolateNumber: number$3,
        interpolateObject: object$2,
        interpolateRound: interpolateRound,
        interpolateString: string,
        interpolateTransformCss: interpolateTransformCss,
        interpolateTransformSvg: interpolateTransformSvg,
        interpolateZoom: zoom$1,
        interpolateRgb: rgb$1,
        interpolateRgbBasis: rgbBasis,
        interpolateRgbBasisClosed: rgbBasisClosed,
        interpolateHsl: hsl$2,
        interpolateHslLong: hslLong,
        interpolateLab: lab$1,
        interpolateHcl: hcl$2,
        interpolateHclLong: hclLong,
        interpolateCubehelix: cubehelix$2,
        interpolateCubehelixLong: cubehelixLong,
        piecewise: piecewise,
        quantize: quantize
    });

    function constant$4(x) {
      return function() {
        return x;
      };
    }

    function number$4(x) {
      return +x;
    }

    var unit = [0, 1];

    function identity$3(x) {
      return x;
    }

    function normalize$1(a, b) {
      return (b -= (a = +a))
          ? function(x) { return (x - a) / b; }
          : constant$4(isNaN(b) ? NaN : 0.5);
    }

    function clamper(domain) {
      var a = domain[0], b = domain[domain.length - 1], t;
      if (a > b) t = a, a = b, b = t;
      return function(x) { return Math.max(a, Math.min(b, x)); };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
      var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
      if (d1 < d0) d0 = normalize$1(d1, d0), r0 = interpolate(r1, r0);
      else d0 = normalize$1(d0, d1), r0 = interpolate(r0, r1);
      return function(x) { return r0(d0(x)); };
    }

    function polymap(domain, range, interpolate) {
      var j = Math.min(domain.length, range.length) - 1,
          d = new Array(j),
          r = new Array(j),
          i = -1;

      // Reverse descending domains.
      if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
      }

      while (++i < j) {
        d[i] = normalize$1(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
      }

      return function(x) {
        var i = bisectRight$1(domain, x, 1, j) - 1;
        return r[i](d[i](x));
      };
    }

    function copy(source, target) {
      return target
          .domain(source.domain())
          .range(source.range())
          .interpolate(source.interpolate())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function transformer() {
      var domain = unit,
          range = unit,
          interpolate = value,
          transform,
          untransform,
          unknown,
          clamp = identity$3,
          piecewise,
          output,
          input;

      function rescale() {
        piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
        output = input = null;
        return scale;
      }

      function scale(x) {
        return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
      }

      scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), number$3)))(y)));
      };

      scale.domain = function(_) {
        return arguments.length ? (domain = map$1.call(_, number$4), clamp === identity$3 || (clamp = clamper(domain)), rescale()) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
      };

      scale.rangeRound = function(_) {
        return range = slice.call(_), interpolate = interpolateRound, rescale();
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? clamper(domain) : identity$3, scale) : clamp !== identity$3;
      };

      scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t, u) {
        transform = t, untransform = u;
        return rescale();
      };
    }

    function continuous(transform, untransform) {
      return transformer()(transform, untransform);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimal(1.23) returns ["123", 0].
    function formatDecimal(x, p) {
      if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
      var i, coefficient = x.slice(0, i);

      // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
      // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
      return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
      ];
    }

    function exponent(x) {
      return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup(grouping, thousands) {
      return function(value, width) {
        var i = value.length,
            t = [],
            j = 0,
            g = grouping[0],
            length = 0;

        while (i > 0 && g > 0) {
          if (length + g + 1 > width) g = Math.max(1, width - length);
          t.push(value.substring(i -= g, i + g));
          if ((length += g + 1) > width) break;
          g = grouping[j = (j + 1) % grouping.length];
        }

        return t.reverse().join(thousands);
      };
    }

    function formatNumerals(numerals) {
      return function(value) {
        return value.replace(/[0-9]/g, function(i) {
          return numerals[+i];
        });
      };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

    function formatSpecifier(specifier) {
      return new FormatSpecifier(specifier);
    }

    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
      if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
      var match;
      this.fill = match[1] || " ";
      this.align = match[2] || ">";
      this.sign = match[3] || "-";
      this.symbol = match[4] || "";
      this.zero = !!match[5];
      this.width = match[6] && +match[6];
      this.comma = !!match[7];
      this.precision = match[8] && +match[8].slice(1);
      this.trim = !!match[9];
      this.type = match[10] || "";
    }

    FormatSpecifier.prototype.toString = function() {
      return this.fill
          + this.align
          + this.sign
          + this.symbol
          + (this.zero ? "0" : "")
          + (this.width == null ? "" : Math.max(1, this.width | 0))
          + (this.comma ? "," : "")
          + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
          + (this.trim ? "~" : "")
          + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim(s) {
      out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (s[i]) {
          case ".": i0 = i1 = i; break;
          case "0": if (i0 === 0) i0 = i; i1 = i; break;
          default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;
        }
      }
      return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;

    function formatPrefixAuto(x, p) {
      var d = formatDecimal(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1],
          i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
          n = coefficient.length;
      return i === n ? coefficient
          : i > n ? coefficient + new Array(i - n + 1).join("0")
          : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
          : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded(x, p) {
      var d = formatDecimal(x, p);
      if (!d) return x + "";
      var coefficient = d[0],
          exponent = d[1];
      return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
          : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
          : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
      "%": function(x, p) { return (x * 100).toFixed(p); },
      "b": function(x) { return Math.round(x).toString(2); },
      "c": function(x) { return x + ""; },
      "d": function(x) { return Math.round(x).toString(10); },
      "e": function(x, p) { return x.toExponential(p); },
      "f": function(x, p) { return x.toFixed(p); },
      "g": function(x, p) { return x.toPrecision(p); },
      "o": function(x) { return Math.round(x).toString(8); },
      "p": function(x, p) { return formatRounded(x * 100, p); },
      "r": formatRounded,
      "s": formatPrefixAuto,
      "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
      "x": function(x) { return Math.round(x).toString(16); }
    };

    function identity$4(x) {
      return x;
    }

    var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

    function formatLocale$1(locale) {
      var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$4,
          currency = locale.currency,
          decimal = locale.decimal,
          numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$4,
          percent = locale.percent || "%";

      function newFormat(specifier) {
        specifier = formatSpecifier(specifier);

        var fill = specifier.fill,
            align = specifier.align,
            sign = specifier.sign,
            symbol = specifier.symbol,
            zero = specifier.zero,
            width = specifier.width,
            comma = specifier.comma,
            precision = specifier.precision,
            trim = specifier.trim,
            type = specifier.type;

        // The "n" type is an alias for ",g".
        if (type === "n") comma = true, type = "g";

        // The "" type, and any invalid type, is an alias for ".12~g".
        else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = "g";

        // If zero fill is specified, padding goes after sign and before digits.
        if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

        // Compute the prefix and suffix.
        // For SI-prefix, the suffix is lazily computed.
        var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
            suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

        // What format function should we use?
        // Is this an integer type?
        // Can this type generate exponential notation?
        var formatType = formatTypes[type],
            maybeSuffix = /[defgprs%]/.test(type);

        // Set the default precision if not specified,
        // or clamp the specified precision to the supported range.
        // For significant precision, it must be in [1, 21].
        // For fixed precision, it must be in [0, 20].
        precision = precision == null ? 6
            : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
            : Math.max(0, Math.min(20, precision));

        function format(value) {
          var valuePrefix = prefix,
              valueSuffix = suffix,
              i, n, c;

          if (type === "c") {
            valueSuffix = formatType(value) + valueSuffix;
            value = "";
          } else {
            value = +value;

            // Perform the initial formatting.
            var valueNegative = value < 0;
            value = formatType(Math.abs(value), precision);

            // Trim insignificant zeros.
            if (trim) value = formatTrim(value);

            // If a negative value rounds to zero during formatting, treat as positive.
            if (valueNegative && +value === 0) valueNegative = false;

            // Compute the prefix and suffix.
            valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
            valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

            // Break the formatted value into the integer “value” part that can be
            // grouped, and fractional or exponential “suffix” part that is not.
            if (maybeSuffix) {
              i = -1, n = value.length;
              while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                  valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                  value = value.slice(0, i);
                  break;
                }
              }
            }
          }

          // If the fill character is not "0", grouping is applied before padding.
          if (comma && !zero) value = group(value, Infinity);

          // Compute the padding.
          var length = valuePrefix.length + value.length + valueSuffix.length,
              padding = length < width ? new Array(width - length + 1).join(fill) : "";

          // If the fill character is "0", grouping is applied after padding.
          if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

          // Reconstruct the final output based on the desired alignment.
          switch (align) {
            case "<": value = valuePrefix + value + valueSuffix + padding; break;
            case "=": value = valuePrefix + padding + value + valueSuffix; break;
            case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
            default: value = padding + valuePrefix + value + valueSuffix; break;
          }

          return numerals(value);
        }

        format.toString = function() {
          return specifier + "";
        };

        return format;
      }

      function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
            k = Math.pow(10, -e),
            prefix = prefixes[8 + e / 3];
        return function(value) {
          return f(k * value) + prefix;
        };
      }

      return {
        format: newFormat,
        formatPrefix: formatPrefix
      };
    }

    var locale$1;
    var format$2;
    var formatPrefix;

    defaultLocale$1({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });

    function defaultLocale$1(definition) {
      locale$1 = formatLocale$1(definition);
      format$2 = locale$1.format;
      formatPrefix = locale$1.formatPrefix;
      return locale$1;
    }

    function precisionFixed(step) {
      return Math.max(0, -exponent(Math.abs(step)));
    }

    function precisionPrefix(step, value) {
      return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
    }

    function precisionRound(step, max) {
      step = Math.abs(step), max = Math.abs(max) - step;
      return Math.max(0, exponent(max) - exponent(step)) + 1;
    }

    function tickFormat(start, stop, count, specifier) {
      var step = tickStep$1(start, stop, count),
          precision;
      specifier = formatSpecifier(specifier == null ? ",f" : specifier);
      switch (specifier.type) {
        case "s": {
          var value = Math.max(Math.abs(start), Math.abs(stop));
          if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
          return formatPrefix(specifier, value);
        }
        case "":
        case "e":
        case "g":
        case "p":
        case "r": {
          if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
          break;
        }
        case "f":
        case "%": {
          if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
          break;
        }
      }
      return format$2(specifier);
    }

    function linearish(scale) {
      var domain = scale.domain;

      scale.ticks = function(count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
      };

      scale.tickFormat = function(count, specifier) {
        var d = domain();
        return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
      };

      scale.nice = function(count) {
        if (count == null) count = 10;

        var d = domain(),
            i0 = 0,
            i1 = d.length - 1,
            start = d[i0],
            stop = d[i1],
            step;

        if (stop < start) {
          step = start, start = stop, stop = step;
          step = i0, i0 = i1, i1 = step;
        }

        step = tickIncrement(start, stop, count);

        if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
          step = tickIncrement(start, stop, count);
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
          step = tickIncrement(start, stop, count);
        }

        if (step > 0) {
          d[i0] = Math.floor(start / step) * step;
          d[i1] = Math.ceil(stop / step) * step;
          domain(d);
        } else if (step < 0) {
          d[i0] = Math.ceil(start * step) / step;
          d[i1] = Math.floor(stop * step) / step;
          domain(d);
        }

        return scale;
      };

      return scale;
    }

    function linear$1() {
      var scale = continuous(identity$3, identity$3);

      scale.copy = function() {
        return copy(scale, linear$1());
      };

      initRange.apply(scale, arguments);

      return linearish(scale);
    }

    function identity$5(domain) {
      var unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : x;
      }

      scale.invert = scale;

      scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = map$1.call(_, number$4), scale) : domain.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return identity$5(domain).unknown(unknown);
      };

      domain = arguments.length ? map$1.call(domain, number$4) : [0, 1];

      return linearish(scale);
    }

    function nice(domain, interval) {
      domain = domain.slice();

      var i0 = 0,
          i1 = domain.length - 1,
          x0 = domain[i0],
          x1 = domain[i1],
          t;

      if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
      }

      domain[i0] = interval.floor(x0);
      domain[i1] = interval.ceil(x1);
      return domain;
    }

    function transformLog(x) {
      return Math.log(x);
    }

    function transformExp(x) {
      return Math.exp(x);
    }

    function transformLogn(x) {
      return -Math.log(-x);
    }

    function transformExpn(x) {
      return -Math.exp(-x);
    }

    function pow10(x) {
      return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
    }

    function powp(base) {
      return base === 10 ? pow10
          : base === Math.E ? Math.exp
          : function(x) { return Math.pow(base, x); };
    }

    function logp(base) {
      return base === Math.E ? Math.log
          : base === 10 && Math.log10
          || base === 2 && Math.log2
          || (base = Math.log(base), function(x) { return Math.log(x) / base; });
    }

    function reflect(f) {
      return function(x) {
        return -f(-x);
      };
    }

    function loggish(transform) {
      var scale = transform(transformLog, transformExp),
          domain = scale.domain,
          base = 10,
          logs,
          pows;

      function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
          logs = reflect(logs), pows = reflect(pows);
          transform(transformLogn, transformExpn);
        } else {
          transform(transformLog, transformExp);
        }
        return scale;
      }

      scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
      };

      scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
      };

      scale.ticks = function(count) {
        var d = domain(),
            u = d[0],
            v = d[d.length - 1],
            r;

        if (r = v < u) i = u, u = v, v = i;

        var i = logs(u),
            j = logs(v),
            p,
            k,
            t,
            n = count == null ? 10 : +count,
            z = [];

        if (!(base % 1) && j - i < n) {
          i = Math.round(i) - 1, j = Math.round(j) + 1;
          if (u > 0) for (; i < j; ++i) {
            for (k = 1, p = pows(i); k < base; ++k) {
              t = p * k;
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          } else for (; i < j; ++i) {
            for (k = base - 1, p = pows(i); k >= 1; --k) {
              t = p * k;
              if (t < u) continue;
              if (t > v) break;
              z.push(t);
            }
          }
        } else {
          z = ticks(i, j, Math.min(j - i, n)).map(pows);
        }

        return r ? z.reverse() : z;
      };

      scale.tickFormat = function(count, specifier) {
        if (specifier == null) specifier = base === 10 ? ".0e" : ",";
        if (typeof specifier !== "function") specifier = format$2(specifier);
        if (count === Infinity) return specifier;
        if (count == null) count = 10;
        var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return function(d) {
          var i = d / pows(Math.round(logs(d)));
          if (i * base < base - 0.5) i *= base;
          return i <= k ? specifier(d) : "";
        };
      };

      scale.nice = function() {
        return domain(nice(domain(), {
          floor: function(x) { return pows(Math.floor(logs(x))); },
          ceil: function(x) { return pows(Math.ceil(logs(x))); }
        }));
      };

      return scale;
    }

    function log$2() {
      var scale = loggish(transformer()).domain([1, 10]);

      scale.copy = function() {
        return copy(scale, log$2()).base(scale.base());
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function transformSymlog(c) {
      return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
      };
    }

    function transformSymexp(c) {
      return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
      };
    }

    function symlogish(transform) {
      var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));

      scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
      };

      return linearish(scale);
    }

    function symlog$1() {
      var scale = symlogish(transformer());

      scale.copy = function() {
        return copy(scale, symlog$1()).constant(scale.constant());
      };

      return initRange.apply(scale, arguments);
    }

    function transformPow(exponent) {
      return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
      };
    }

    function transformSqrt(x) {
      return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
    }

    function transformSquare(x) {
      return x < 0 ? -x * x : x * x;
    }

    function powish(transform) {
      var scale = transform(identity$3, identity$3),
          exponent = 1;

      function rescale() {
        return exponent === 1 ? transform(identity$3, identity$3)
            : exponent === 0.5 ? transform(transformSqrt, transformSquare)
            : transform(transformPow(exponent), transformPow(1 / exponent));
      }

      scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
      };

      return linearish(scale);
    }

    function pow$1() {
      var scale = powish(transformer());

      scale.copy = function() {
        return copy(scale, pow$1()).exponent(scale.exponent());
      };

      initRange.apply(scale, arguments);

      return scale;
    }

    function sqrt$1() {
      return pow$1.apply(null, arguments).exponent(0.5);
    }

    function quantile$2() {
      var domain = [],
          range = [],
          thresholds = [],
          unknown;

      function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while (++i < n) thresholds[i - 1] = quantile$1(domain, i / n);
        return scale;
      }

      function scale(x) {
        return isNaN(x = +x) ? unknown : range[bisectRight$1(thresholds, x)];
      }

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN] : [
          i > 0 ? thresholds[i - 1] : domain[0],
          i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
      };

      scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort(ascending$1);
        return rescale();
      };

      scale.range = function(_) {
        return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.quantiles = function() {
        return thresholds.slice();
      };

      scale.copy = function() {
        return quantile$2()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    function quantize$1() {
      var x0 = 0,
          x1 = 1,
          n = 1,
          domain = [0.5],
          range = [0, 1],
          unknown;

      function scale(x) {
        return x <= x ? range[bisectRight$1(domain, x, 0, n)] : unknown;
      }

      function rescale() {
        var i = -1;
        domain = new Array(n);
        while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
      }

      scale.domain = function(_) {
        return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
      };

      scale.range = function(_) {
        return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [NaN, NaN]
            : i < 1 ? [x0, domain[0]]
            : i >= n ? [domain[n - 1], x1]
            : [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : scale;
      };

      scale.thresholds = function() {
        return domain.slice();
      };

      scale.copy = function() {
        return quantize$1()
            .domain([x0, x1])
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(linearish(scale), arguments);
    }

    function threshold() {
      var domain = [0.5],
          range = [0, 1],
          unknown,
          n = 1;

      function scale(x) {
        return x <= x ? range[bisectRight$1(domain, x, 0, n)] : unknown;
      }

      scale.domain = function(_) {
        return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
      };

      scale.range = function(_) {
        return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
      };

      scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [domain[i - 1], domain[i]];
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      scale.copy = function() {
        return threshold()
            .domain(domain)
            .range(range)
            .unknown(unknown);
      };

      return initRange.apply(scale, arguments);
    }

    var durationSecond$1 = 1000,
        durationMinute$1 = durationSecond$1 * 60,
        durationHour$1 = durationMinute$1 * 60,
        durationDay$1 = durationHour$1 * 24,
        durationWeek$1 = durationDay$1 * 7,
        durationMonth = durationDay$1 * 30,
        durationYear = durationDay$1 * 365;

    function date$1(t) {
      return new Date(t);
    }

    function number$5(t) {
      return t instanceof Date ? +t : +new Date(+t);
    }

    function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
      var scale = continuous(identity$3, identity$3),
          invert = scale.invert,
          domain = scale.domain;

      var formatMillisecond = format(".%L"),
          formatSecond = format(":%S"),
          formatMinute = format("%I:%M"),
          formatHour = format("%I %p"),
          formatDay = format("%a %d"),
          formatWeek = format("%b %d"),
          formatMonth = format("%B"),
          formatYear = format("%Y");

      var tickIntervals = [
        [second,  1,      durationSecond$1],
        [second,  5,  5 * durationSecond$1],
        [second, 15, 15 * durationSecond$1],
        [second, 30, 30 * durationSecond$1],
        [minute,  1,      durationMinute$1],
        [minute,  5,  5 * durationMinute$1],
        [minute, 15, 15 * durationMinute$1],
        [minute, 30, 30 * durationMinute$1],
        [  hour,  1,      durationHour$1  ],
        [  hour,  3,  3 * durationHour$1  ],
        [  hour,  6,  6 * durationHour$1  ],
        [  hour, 12, 12 * durationHour$1  ],
        [   day,  1,      durationDay$1   ],
        [   day,  2,  2 * durationDay$1   ],
        [  week,  1,      durationWeek$1  ],
        [ month,  1,      durationMonth ],
        [ month,  3,  3 * durationMonth ],
        [  year,  1,      durationYear  ]
      ];

      function tickFormat(date) {
        return (second(date) < date ? formatMillisecond
            : minute(date) < date ? formatSecond
            : hour(date) < date ? formatMinute
            : day(date) < date ? formatHour
            : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
            : year(date) < date ? formatMonth
            : formatYear)(date);
      }

      function tickInterval(interval, start, stop, step) {
        if (interval == null) interval = 10;

        // If a desired tick count is specified, pick a reasonable tick interval
        // based on the extent of the domain and a rough estimate of tick size.
        // Otherwise, assume interval is already a time interval and use it.
        if (typeof interval === "number") {
          var target = Math.abs(stop - start) / interval,
              i = bisector$1(function(i) { return i[2]; }).right(tickIntervals, target);
          if (i === tickIntervals.length) {
            step = tickStep$1(start / durationYear, stop / durationYear, interval);
            interval = year;
          } else if (i) {
            i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
            step = i[1];
            interval = i[0];
          } else {
            step = Math.max(tickStep$1(start, stop, interval), 1);
            interval = millisecond;
          }
        }

        return step == null ? interval : interval.every(step);
      }

      scale.invert = function(y) {
        return new Date(invert(y));
      };

      scale.domain = function(_) {
        return arguments.length ? domain(map$1.call(_, number$5)) : domain().map(date$1);
      };

      scale.ticks = function(interval, step) {
        var d = domain(),
            t0 = d[0],
            t1 = d[d.length - 1],
            r = t1 < t0,
            t;
        if (r) t = t0, t0 = t1, t1 = t;
        t = tickInterval(interval, t0, t1, step);
        t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
        return r ? t.reverse() : t;
      };

      scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
      };

      scale.nice = function(interval, step) {
        var d = domain();
        return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
            ? domain(nice(d, interval))
            : scale;
      };

      scale.copy = function() {
        return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
      };

      return scale;
    }

    function time$1() {
      return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
    }

    function utcTime() {
      return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
    }

    function transformer$1() {
      var x0 = 0,
          x1 = 1,
          t0,
          t1,
          k10,
          transform,
          interpolator = identity$3,
          clamp = false,
          unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
      };
    }

    function copy$1(source, target) {
      return target
          .domain(source.domain())
          .interpolator(source.interpolator())
          .clamp(source.clamp())
          .unknown(source.unknown());
    }

    function sequential() {
      var scale = linearish(transformer$1()(identity$3));

      scale.copy = function() {
        return copy$1(scale, sequential());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialLog() {
      var scale = loggish(transformer$1()).domain([1, 10]);

      scale.copy = function() {
        return copy$1(scale, sequentialLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSymlog() {
      var scale = symlogish(transformer$1());

      scale.copy = function() {
        return copy$1(scale, sequentialSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialPow() {
      var scale = powish(transformer$1());

      scale.copy = function() {
        return copy$1(scale, sequentialPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function sequentialSqrt() {
      return sequentialPow.apply(null, arguments).exponent(0.5);
    }

    function transformer$2() {
      var x0 = 0,
          x1 = 0.5,
          x2 = 1,
          t0,
          t1,
          t2,
          k10,
          k21,
          interpolator = identity$3,
          transform,
          clamp = false,
          unknown;

      function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
      }

      scale.domain = function(_) {
        return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
      };

      scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
      };

      scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
      };

      scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
      };

      return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
        return scale;
      };
    }

    function diverging() {
      var scale = linearish(transformer$2()(identity$3));

      scale.copy = function() {
        return copy$1(scale, diverging());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingLog() {
      var scale = loggish(transformer$2()).domain([0.1, 1, 10]);

      scale.copy = function() {
        return copy$1(scale, divergingLog()).base(scale.base());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSymlog() {
      var scale = symlogish(transformer$2());

      scale.copy = function() {
        return copy$1(scale, divergingSymlog()).constant(scale.constant());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingPow() {
      var scale = powish(transformer$2());

      scale.copy = function() {
        return copy$1(scale, divergingPow()).exponent(scale.exponent());
      };

      return initInterpolator.apply(scale, arguments);
    }

    function divergingSqrt() {
      return divergingPow.apply(null, arguments).exponent(0.5);
    }

    function band() {
      var scale = ordinal().unknown(undefined),
          domain = scale.domain,
          ordinalRange = scale.range,
          range$1 = [0, 1],
          step,
          bandwidth,
          round = false,
          paddingInner = 0,
          paddingOuter = 0,
          align = 0.5;

      delete scale.unknown;

      function rescale() {
        var n = domain().length,
            reverse = range$1[1] < range$1[0],
            start = range$1[reverse - 0],
            stop = range$1[1 - reverse],
            space = bandSpace(n, paddingInner, paddingOuter);

        step = (stop - start) / (space || 1);
        if (round) {
          step = Math.floor(step);
        }
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) {
          start = Math.round(start);
          bandwidth = Math.round(bandwidth);
        }
        var values = range(n).map(function(i) { return start + step * i; });
        return ordinalRange(reverse ? values.reverse() : values);
      }

      scale.domain = function(_) {
        if (arguments.length) {
          domain(_);
          return rescale();
        } else {
          return domain();
        }
      };

      scale.range = function(_) {
        if (arguments.length) {
          range$1 = [+_[0], +_[1]];
          return rescale();
        } else {
          return range$1.slice();
        }
      };

      scale.rangeRound = function(_) {
        range$1 = [+_[0], +_[1]];
        round = true;
        return rescale();
      };

      scale.bandwidth = function() {
        return bandwidth;
      };

      scale.step = function() {
        return step;
      };

      scale.round = function(_) {
        if (arguments.length) {
          round = !!_;
          return rescale();
        } else {
          return round;
        }
      };

      scale.padding = function(_) {
        if (arguments.length) {
          paddingOuter = Math.max(0, Math.min(1, _));
          paddingInner = paddingOuter;
          return rescale();
        } else {
          return paddingInner;
        }
      };

      scale.paddingInner = function(_) {
        if (arguments.length) {
          paddingInner = Math.max(0, Math.min(1, _));
          return rescale();
        } else {
          return paddingInner;
        }
      };

      scale.paddingOuter = function(_) {
        if (arguments.length) {
          paddingOuter = Math.max(0, Math.min(1, _));
          return rescale();
        } else {
          return paddingOuter;
        }
      };

      scale.align = function(_) {
        if (arguments.length) {
          align = Math.max(0, Math.min(1, _));
          return rescale();
        } else {
          return align;
        }
      };

      scale.invertRange = function(_) {
        // bail if range has null or undefined values
        if (_[0] == null || _[1] == null) return;

        var lo = +_[0],
            hi = +_[1],
            reverse = range$1[1] < range$1[0],
            values = reverse ? ordinalRange().reverse() : ordinalRange(),
            n = values.length - 1, a, b, t;

        // bail if either range endpoint is invalid
        if (lo !== lo || hi !== hi) return;

        // order range inputs, bail if outside of scale range
        if (hi < lo) {
          t = lo;
          lo = hi;
          hi = t;
        }
        if (hi < values[0] || lo > range$1[1-reverse]) return;

        // binary search to index into scale range
        a = Math.max(0, bisectRight(values, lo) - 1);
        b = lo===hi ? a : bisectRight(values, hi) - 1;

        // increment index a if lo is within padding gap
        if (lo - values[a] > bandwidth + 1e-10) ++a;

        if (reverse) {
          // map + swap
          t = a;
          a = n - b;
          b = n - t;
        }
        return (a > b) ? undefined : domain().slice(a, b+1);
      };

      scale.invert = function(_) {
        var value = scale.invertRange([_, _]);
        return value ? value[0] : value;
      };

      scale.copy = function() {
        return band()
            .domain(domain())
            .range(range$1)
            .round(round)
            .paddingInner(paddingInner)
            .paddingOuter(paddingOuter)
            .align(align);
      };

      return rescale();
    }

    function pointish(scale) {
      var copy = scale.copy;

      scale.padding = scale.paddingOuter;
      delete scale.paddingInner;

      scale.copy = function() {
        return pointish(copy());
      };

      return scale;
    }

    function point$5() {
      return pointish(band().paddingInner(1));
    }

    var map$2 = Array.prototype.map;

    function numbers$2(_) {
      return map$2.call(_, function(x) { return +x; });
    }

    var slice$1 = Array.prototype.slice;

    function scaleBinOrdinal() {
      var domain = [],
          range = [];

      function scale(x) {
        return x == null || x !== x
          ? undefined
          : range[(bisectRight(domain, x) - 1) % range.length];
      }

      scale.domain = function(_) {
        if (arguments.length) {
          domain = numbers$2(_);
          return scale;
        } else {
          return domain.slice();
        }
      };

      scale.range = function(_) {
        if (arguments.length) {
          range = slice$1.call(_);
          return scale;
        } else {
          return range.slice();
        }
      };

      scale.tickFormat = function(count, specifier) {
        return tickFormat(domain[0], peek(domain), count == null ? 10 : count, specifier);
      };

      scale.copy = function() {
        return scaleBinOrdinal().domain(scale.domain()).range(scale.range());
      };

      return scale;
    }

    /**
     * Augment scales with their type and needed inverse methods.
     */
    function create(type, constructor) {
      return function scale() {
        var s = constructor();

        if (!s.invertRange) {
          s.invertRange = s.invert ? invertRange(s)
            : s.invertExtent ? invertRangeExtent(s)
            : undefined;
        }

        s.type = type;
        return s;
      };
    }

    function scale$1(type, scale) {
      if (arguments.length > 1) {
        scales[type] = create(type, scale);
        return this;
      } else {
        return scales.hasOwnProperty(type) ? scales[type] : undefined;
      }
    }

    var scales = {
      // identity scale
      [Identity]:      identity$5,

      // continuous scales
      [Linear$1]:        linear$1,
      [Log]:           log$2,
      [Pow]:           pow$1,
      [Sqrt]:          sqrt$1,
      [Symlog]:        symlog$1,
      [Time]:          time$1,
      [UTC]:           utcTime,

      // sequential scales
      [Sequential]:             sequential, // backwards compat
      [Sequential+'-'+Linear$1]:  sequential,
      [Sequential+'-'+Log]:     sequentialLog,
      [Sequential+'-'+Pow]:     sequentialPow,
      [Sequential+'-'+Sqrt]:    sequentialSqrt,
      [Sequential+'-'+Symlog]:  sequentialSymlog,

      // diverging scales
      [Diverging+'-'+Linear$1]:   diverging,
      [Diverging+'-'+Log]:      divergingLog,
      [Diverging+'-'+Pow]:      divergingPow,
      [Diverging+'-'+Sqrt]:     divergingSqrt,
      [Diverging+'-'+Symlog]:   divergingSymlog,

      // discretizing scales
      [Quantile]:      quantile$2,
      [Quantize]:      quantize$1,
      [Threshold]:     threshold,

      // discrete scales
      [BinOrdinal]:    scaleBinOrdinal,
      [Ordinal]:       ordinal,
      [Band]:          band,
      [Point]:         point$5
    };

    for (var key$1 in scales) {
      scale$1(key$1, scales[key$1]);
    }

    const scaleProps = ['clamp', 'base', 'constant', 'exponent'];

    function interpolateRange(interpolator, range) {
      var start = range[0],
          span = peek(range) - start;
      return function(i) { return interpolator(start + i * span); };
    }

    function interpolateColors(colors, type, gamma) {
      return piecewise(interpolate(type || 'rgb', gamma), colors);
    }

    function quantizeInterpolator(interpolator, count) {
      var samples = new Array(count),
          n = count + 1;
      for (var i = 0; i < count;) samples[i] = interpolator(++i / n);
      return samples;
    }

    function scaleFraction(scale, min, max) {
      var delta = max - min, i, t, s;

      if (!delta || !isFinite(delta)) {
        return constant(0.5);
      } else {
        i = (t = scale.type).indexOf('-');
        t = i < 0 ? t : t.slice(i + 1);
        s = scale$1(t)().domain([min, max]).range([0, 1]);
        scaleProps.forEach(m => scale[m] ? s[m](scale[m]()) : 0);
        return s;
      }
    }

    function interpolate(type, gamma) {
      var interp = $$1[method(type)];
      return (gamma != null && interp && interp.gamma)
        ? interp.gamma(gamma)
        : interp;
    }

    function method(type) {
      return 'interpolate' + type.toLowerCase()
        .split('-')
        .map(function(s) { return s[0].toUpperCase() + s.slice(1); })
        .join('');
    }

    const continuous$1 = {
      blues: 'cfe1f2bed8eca8cee58fc1de74b2d75ba3cf4592c63181bd206fb2125ca40a4a90',
      greens: 'd3eecdc0e6baabdda594d3917bc77d60ba6c46ab5e329a512089430e7735036429',
      greys: 'e2e2e2d4d4d4c4c4c4b1b1b19d9d9d8888887575756262624d4d4d3535351e1e1e',
      oranges: 'fdd8b3fdc998fdb87bfda55efc9244f87f2cf06b18e4580bd14904b93d029f3303',
      purples: 'e2e1efd4d4e8c4c5e0b4b3d6a3a0cc928ec3827cb97566ae684ea25c3696501f8c',
      reds: 'fdc9b4fcb49afc9e80fc8767fa7051f6573fec3f2fdc2a25c81b1db21218970b13',

      blueGreen: 'd5efedc1e8e0a7ddd18bd2be70c6a958ba9144ad77319c5d2089460e7736036429',
      bluePurple: 'ccddecbad0e4a8c2dd9ab0d4919cc98d85be8b6db28a55a6873c99822287730f71',
      greenBlue: 'd3eecec5e8c3b1e1bb9bd8bb82cec269c2ca51b2cd3c9fc7288abd1675b10b60a1',
      orangeRed: 'fddcaffdcf9bfdc18afdad77fb9562f67d53ee6545e24932d32d1ebf130da70403',
      purpleBlue: 'dbdaebc8cee4b1c3de97b7d87bacd15b9fc93a90c01e7fb70b70ab056199045281',
      purpleBlueGreen: 'dbd8eac8cee4b0c3de93b7d872acd1549fc83892bb1c88a3097f8702736b016353',
      purpleRed: 'dcc9e2d3b3d7ce9eccd186c0da6bb2e14da0e23189d91e6fc61159ab07498f023a',
      redPurple: 'fccfccfcbec0faa9b8f98faff571a5ec539ddb3695c41b8aa908808d0179700174',
      yellowGreen: 'e4f4acd1eca0b9e2949ed68880c97c62bb6e47aa5e3297502083440e723b036034',
      yellowOrangeBrown: 'feeaa1fedd84fecc63feb746fca031f68921eb7215db5e0bc54c05ab3d038f3204',
      yellowOrangeRed: 'fee087fed16ffebd59fea849fd903efc7335f9522bee3423de1b20ca0b22af0225',

      blueOrange: '134b852f78b35da2cb9dcae1d2e5eff2f0ebfce0bafbbf74e8932fc5690d994a07',
      brownBlueGreen: '704108a0651ac79548e3c78af3e6c6eef1eac9e9e48ed1c74da79e187a72025147',
      purpleGreen: '5b1667834792a67fb6c9aed3e6d6e8eff0efd9efd5aedda971bb75368e490e5e29',
      purpleOrange: '4114696647968f83b7b9b4d6dadbebf3eeeafce0bafbbf74e8932fc5690d994a07',
      redBlue: '8c0d25bf363adf745ef4ae91fbdbc9f2efeed2e5ef9dcae15da2cb2f78b3134b85',
      redGrey: '8c0d25bf363adf745ef4ae91fcdccbfaf4f1e2e2e2c0c0c0969696646464343434',
      yellowGreenBlue: 'eff9bddbf1b4bde5b594d5b969c5be45b4c22c9ec02182b82163aa23479c1c3185',
      redYellowBlue: 'a50026d4322cf16e43fcac64fedd90faf8c1dcf1ecabd6e875abd04a74b4313695',
      redYellowGreen: 'a50026d4322cf16e43fcac63fedd8df9f7aed7ee8ea4d86e64bc6122964f006837',
      pinkYellowGreen: '8e0152c0267edd72adf0b3d6faddedf5f3efe1f2cab6de8780bb474f9125276419',
      spectral: '9e0142d13c4bf0704afcac63fedd8dfbf8b0e0f3a1a9dda269bda94288b55e4fa2',

      viridis: '440154470e61481a6c482575472f7d443a834144873d4e8a39568c35608d31688e2d708e2a788e27818e23888e21918d1f988b1fa08822a8842ab07f35b77943bf7154c56866cc5d7ad1518fd744a5db36bcdf27d2e21be9e51afde725',
      magma: '0000040404130b0924150e3720114b2c11603b0f704a107957157e651a80721f817f24828c29819a2e80a8327db6377ac43c75d1426fde4968e95462f1605df76f5cfa7f5efc8f65fe9f6dfeaf78febf84fece91fddea0fcedaffcfdbf',
      inferno: '0000040403130c0826170c3b240c4f330a5f420a68500d6c5d126e6b176e781c6d86216b932667a12b62ae305cbb3755c73e4cd24644dd513ae65c30ed6925f3771af8850ffb9506fca50afcb519fac62df6d645f2e661f3f484fcffa4',
      plasma: '0d088723069033059742039d5002a25d01a66a00a87801a88405a7900da49c179ea72198b12a90ba3488c33d80cb4779d35171da5a69e16462e76e5bed7953f2834cf68f44fa9a3dfca636fdb32ffec029fcce25f9dc24f5ea27f0f921',

      rainbow: '6e40aa883eb1a43db3bf3cafd83fa4ee4395fe4b83ff576eff6659ff7847ff8c38f3a130e2b72fcfcc36bee044aff05b8ff4576ff65b52f6673af27828ea8d1ddfa319d0b81cbecb23abd82f96e03d82e14c6edb5a5dd0664dbf6e40aa',
      sinebow: 'ff4040fc582af47218e78d0bd5a703bfbf00a7d5038de70b72f41858fc2a40ff402afc5818f4720be78d03d5a700bfbf03a7d50b8de71872f42a58fc4040ff582afc7218f48d0be7a703d5bf00bfd503a7e70b8df41872fc2a58ff4040',

      browns: 'eedbbdecca96e9b97ae4a865dc9856d18954c7784cc0673fb85536ad44339f3632',
      tealBlues: 'bce4d89dd3d181c3cb65b3c245a2b9368fae347da0306a932c5985',
      teals: 'bbdfdfa2d4d58ac9c975bcbb61b0af4da5a43799982b8b8c1e7f7f127273006667',
      warmGreys: 'dcd4d0cec5c1c0b8b4b3aaa7a59c9998908c8b827f7e7673726866665c5a59504e',

      goldGreen: 'f4d166d5ca60b6c35c98bb597cb25760a6564b9c533f8f4f33834a257740146c36',
      goldOrange: 'f4d166f8be5cf8aa4cf5983bf3852aef701be2621fd65322c54923b142239e3a26',
      goldRed: 'f4d166f6be59f9aa51fc964ef6834bee734ae56249db5247cf4244c43141b71d3e',

      lightGreyRed: 'efe9e6e1dad7d5cbc8c8bdb9bbaea9cd967ddc7b43e15f19df4011dc000b',
      lightGreyTeal: 'e4eaead6dcddc8ced2b7c2c7a6b4bc64b0bf22a6c32295c11f85be1876bc',
      lightMulti: 'e0f1f2c4e9d0b0de9fd0e181f6e072f6c053f3993ef77440ef4a3c',
      lightOrange: 'f2e7daf7d5baf9c499fab184fa9c73f68967ef7860e8645bde515bd43d5b',
      lightTealBlue: 'e3e9e0c0dccf9aceca7abfc859afc0389fb9328dad2f7ca0276b95255988',

      darkBlue: '3232322d46681a5c930074af008cbf05a7ce25c0dd38daed50f3faffffff',
      darkGold: '3c3c3c584b37725e348c7631ae8b2bcfa424ecc31ef9de30fff184ffffff',
      darkGreen: '3a3a3a215748006f4d048942489e4276b340a6c63dd2d836ffeb2cffffaa',
      darkMulti: '3737371f5287197d8c29a86995ce3fffe800ffffff',
      darkRed: '3434347036339e3c38cc4037e75d1eec8620eeab29f0ce32ffeb2c'
    };

    const discrete$1 = {
      category10: '1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf',
      category20: '1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5',
      category20b: '393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6',
      category20c: '3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9',
      tableau10: '4c78a8f58518e4575672b7b254a24beeca3bb279a2ff9da69d755dbab0ac',
      tableau20: '4c78a89ecae9f58518ffbf7954a24b88d27ab79a20f2cf5b43989483bcb6e45756ff9d9879706ebab0acd67195fcbfd2b279a2d6a5c99e765fd8b5a5',
      accent: '7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666',
      dark2: '1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666',
      paired: 'a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928',
      pastel1: 'fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2',
      pastel2: 'b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc',
      set1: 'e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999',
      set2: '66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3',
      set3: '8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f'
    };

    function colors(palette) {
      var n = palette.length / 6 | 0, c = new Array(n), i = 0;
      while (i < n) c[i] = '#' + palette.slice(i * 6, ++i * 6);
      return c;
    }

    function apply(_, f) {
      for (let k in _) scheme(k, f(_[k]));
    }

    const schemes = {};
    apply(discrete$1, colors);
    apply(continuous$1, _ => interpolateColors(colors(_)));

    function scheme(name, scheme) {
      name = name && name.toLowerCase();
      if (arguments.length > 1) {
        schemes[name] = scheme;
        return this;
      } else {
        return schemes[name];
      }
    }

    /**
     * Determine the tick count or interval function.
     * @param {Scale} scale - The scale for which to generate tick values.
     * @param {*} count - The desired tick count or interval specifier.
     * @param {number} minStep - The desired minimum step between tick values.
     * @return {*} - The tick count or interval function.
     */
    function tickCount(scale, count, minStep) {
      var step;

      if (isNumber(count) && minStep != null) {
        count = Math.min(count, ~~(span(scale.domain()) / minStep) || 1);
      }

      if (isObject(count)) {
        step = count.step;
        count = count.interval;
      }

      if (isString(count)) {
        count = timeInterval(count, scale.type)
              || error('Only time and utc scales accept interval strings.');
        if (step) count = count.every(step);
      }

      return count;
    }

    /**
     * Filter a set of candidate tick values, ensuring that only tick values
     * that lie within the scale range are included.
     * @param {Scale} scale - The scale for which to generate tick values.
     * @param {Array<*>} ticks - The candidate tick values.
     * @param {*} count - The tick count or interval function.
     * @return {Array<*>} - The filtered tick values.
     */
    function validTicks(scale, ticks, count) {
      var range = scale.range(),
          lo = Math.floor(range[0]),
          hi = Math.ceil(peek(range));

      if (lo > hi) {
        range = hi;
        hi = lo;
        lo = range;
      }

      ticks = ticks.filter(function(v) {
        v = scale(v);
        return lo <= v && v <= hi;
      });

      if (count > 0 && ticks.length > 1) {
        var endpoints = [ticks[0], peek(ticks)];
        while (ticks.length > count && ticks.length >= 3) {
          ticks = ticks.filter(function(_, i) { return !(i % 2); });
        }
        if (ticks.length < 3) {
          ticks = endpoints;
        }
      }

      return ticks;
    }

    /**
     * Generate tick values for the given scale and approximate tick count or
     * interval value. If the scale has a 'ticks' method, it will be used to
     * generate the ticks, with the count argument passed as a parameter. If the
     * scale lacks a 'ticks' method, the full scale domain will be returned.
     * @param {Scale} scale - The scale for which to generate tick values.
     * @param {*} [count] - The approximate number of desired ticks.
     * @return {Array<*>} - The generated tick values.
     */
    function tickValues(scale, count) {
      return scale.bins ? validTicks(scale, binValues(scale.bins, count))
        : scale.ticks ? scale.ticks(count)
        : scale.domain();
    }

    /**
     * Generate tick values for an array of bin values.
     * @param {Array<*>} bins - An array of bin boundaries.
     * @param {Number} [count] - The approximate number of desired ticks.
     * @return {Array<*>} - The generated tick values.
     */
    function binValues(bins, count) {
      var n = bins.length,
          stride = ~~(n / (count || n));

      return stride < 2
        ? bins.slice()
        : bins.filter(function(x, i) { return !(i % stride); });
    }

    /**
     * Generate a label format function for a scale. If the scale has a
     * 'tickFormat' method, it will be used to generate the formatter, with the
     * count and specifier arguments passed as parameters. If the scale lacks a
     * 'tickFormat' method, the returned formatter performs simple string coercion.
     * If the input scale is a logarithmic scale and the format specifier does not
     * indicate a desired decimal precision, a special variable precision formatter
     * that automatically trims trailing zeroes will be generated.
     * @param {Scale} scale - The scale for which to generate the label formatter.
     * @param {*} [count] - The approximate number of desired ticks.
     * @param {string} [specifier] - The format specifier. Must be a legal d3
     *   specifier string (see https://github.com/d3/d3-format#formatSpecifier).
     * @return {function(*):string} - The generated label formatter.
     */
    function tickFormat$1(scale, count, specifier) {
      var format = scale.tickFormat ? scale.tickFormat(count, specifier)
        : specifier ? format$2(specifier)
        : String;

      if (isLogarithmic(scale.type)) {
        var logfmt = variablePrecision(specifier);
        format = scale.bins ? logfmt : filter$1(format, logfmt);
      }

      return format;
    }

    function filter$1(sourceFormat, targetFormat) {
      return function(_) {
        return sourceFormat(_) ? targetFormat(_) : '';
      };
    }

    function variablePrecision(specifier) {
      var s = formatSpecifier(specifier || ',');

      if (s.precision == null) {
        s.precision = 12;
        switch (s.type) {
          case '%': s.precision -= 2; break;
          case 'e': s.precision -= 1; break;
        }
        return trimZeroes(
          format$2(s),          // number format
          format$2('.1f')(1)[1] // decimal point character
        );
      } else {
        return format$2(s);
      }
    }

    function trimZeroes(format, decimalChar) {
      return function(x) {
        var str = format(x),
            dec = str.indexOf(decimalChar),
            idx, end;

        if (dec < 0) return str;

        idx = rightmostDigit(str, dec);
        end = idx < str.length ? str.slice(idx) : '';
        while (--idx > dec) if (str[idx] !== '0') { ++idx; break; }

        return str.slice(0, idx) + end;
      };
    }

    function rightmostDigit(str, dec) {
      var i = str.lastIndexOf('e'), c;
      if (i > 0) return i;
      for (i=str.length; --i > dec;) {
        c = str.charCodeAt(i);
        if (c >= 48 && c <= 57) return i + 1; // is digit
      }
    }

    /**
     * Generates axis ticks for visualizing a spatial scale.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Scale} params.scale - The scale to generate ticks for.
     * @param {*} [params.count=10] - The approximate number of ticks, or
     *   desired tick interval, to use.
     * @param {Array<*>} [params.values] - The exact tick values to use.
     *   These must be legal domain values for the provided scale.
     *   If provided, the count argument is ignored.
     * @param {function(*):string} [params.formatSpecifier] - A format specifier
     *   to use in conjunction with scale.tickFormat. Legal values are
     *   any valid d3 4.0 format specifier.
     * @param {function(*):string} [params.format] - The format function to use.
     *   If provided, the formatSpecifier argument is ignored.
     */
    function AxisTicks(params) {
      Transform.call(this, null, params);
    }

    var prototype$T = inherits(AxisTicks, Transform);

    prototype$T.transform = function(_, pulse) {
      if (this.value && !_.modified()) {
        return pulse.StopPropagation;
      }

      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
          ticks = this.value,
          scale = _.scale,
          tally = _.count == null ? (_.values ? _.values.length : 10) : _.count,
          count = tickCount(scale, tally, _.minstep),
          format = _.format || tickFormat$1(scale, count, _.formatSpecifier),
          values = _.values ? validTicks(scale, _.values, count) : tickValues(scale, count);

      if (ticks) out.rem = ticks;

      ticks = values.map(function(value, i) {
        return ingest({
          index: i / (values.length - 1),
          value: value,
          label: format(value)
        });
      });

      if (_.extra && ticks.length) {
        // add an extra tick pegged to the initial domain value
        // this is used to generate axes with 'binned' domains
        ticks.push(ingest({
          index: -1,
          extra: {value: ticks[0].value},
          label: ''
        }));
      }

      out.source = ticks;
      out.add = ticks;
      this.value = ticks;

      return out;
    };

    /**
     * Joins a set of data elements against a set of visual items.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): object} [params.item] - An item generator function.
     * @param {function(object): *} [params.key] - The key field associating data and visual items.
     */
    function DataJoin(params) {
      Transform.call(this, null, params);
    }

    var prototype$U = inherits(DataJoin, Transform);

    function defaultItemCreate() {
      return ingest({});
    }

    function isExit(t) {
      return t.exit;
    }

    prototype$U.transform = function(_, pulse) {
      var df = pulse.dataflow,
          out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
          item = _.item || defaultItemCreate,
          key = _.key || tupleid,
          map = this.value;

      // prevent transient (e.g., hover) requests from
      // cascading across marks derived from marks
      if (isArray(out.encode)) {
        out.encode = null;
      }

      if (map && (_.modified('key') || pulse.modified(key))) {
        error('DataJoin does not support modified key function or fields.');
      }

      if (!map) {
        pulse = pulse.addAll();
        this.value = map = fastmap().test(isExit);
        map.lookup = function(t) { return map.get(key(t)); };
      }

      pulse.visit(pulse.ADD, function(t) {
        var k = key(t),
            x = map.get(k);

        if (x) {
          if (x.exit) {
            map.empty--;
            out.add.push(x);
          } else {
            out.mod.push(x);
          }
        } else {
          map.set(k, (x = item(t)));
          out.add.push(x);
        }

        x.datum = t;
        x.exit = false;
      });

      pulse.visit(pulse.MOD, function(t) {
        var k = key(t),
            x = map.get(k);

        if (x) {
          x.datum = t;
          out.mod.push(x);
        }
      });

      pulse.visit(pulse.REM, function(t) {
        var k = key(t),
            x = map.get(k);

        if (t === x.datum && !x.exit) {
          out.rem.push(x);
          x.exit = true;
          ++map.empty;
        }
      });

      if (pulse.changed(pulse.ADD_MOD)) out.modifies('datum');

      if (_.clean && map.empty > df.cleanThreshold) df.runAfter(map.clean);

      return out;
    };

    /**
     * Invokes encoding functions for visual items.
     * @constructor
     * @param {object} params - The parameters to the encoding functions. This
     *   parameter object will be passed through to all invoked encoding functions.
     * @param {object} param.encoders - The encoding functions
     * @param {function(object, object): boolean} [param.encoders.update] - Update encoding set
     * @param {function(object, object): boolean} [param.encoders.enter] - Enter encoding set
     * @param {function(object, object): boolean} [param.encoders.exit] - Exit encoding set
     */
    function Encode(params) {
      Transform.call(this, null, params);
    }

    var prototype$V = inherits(Encode, Transform);

    prototype$V.transform = function(_, pulse) {
      var out = pulse.fork(pulse.ADD_REM),
          encoders = _.encoders,
          encode = pulse.encode;

      // if an array, the encode directive includes additional sets
      // that must be defined in order for the primary set to be invoked
      // e.g., only run the update set if the hover set is defined
      if (isArray(encode)) {
        if (out.changed() || encode.every(function(e) { return encoders[e]; })) {
          encode = encode[0];
          out.encode = null; // consume targeted encode directive
        } else {
          return pulse.StopPropagation;
        }
      }

      // marshall encoder functions
      var reenter = encode === 'enter',
          update = encoders.update || falsy,
          enter = encoders.enter || falsy,
          exit = encoders.exit || falsy,
          set = (encode && !reenter ? encoders[encode] : update) || falsy;

      if (pulse.changed(pulse.ADD)) {
        pulse.visit(pulse.ADD, function(t) {
          enter(t, _);
          update(t, _);
          if (set !== falsy && set !== update) set(t, _);
        });
        out.modifies(enter.output);
        out.modifies(update.output);
        if (set !== falsy && set !== update) out.modifies(set.output);
      }

      if (pulse.changed(pulse.REM) && exit !== falsy) {
        pulse.visit(pulse.REM, function(t) { exit(t, _); });
        out.modifies(exit.output);
      }

      if (reenter || set !== falsy) {
        var flag = pulse.MOD | (_.modified() ? pulse.REFLOW : 0);
        if (reenter) {
          pulse.visit(flag, function(t) {
            var mod = enter(t, _);
            if (set(t, _) || mod) out.mod.push(t);
          });
          if (out.mod.length) out.modifies(enter.output);
        } else {
          pulse.visit(flag, function(t) {
            if (set(t, _)) out.mod.push(t);
          });
        }
        if (out.mod.length) out.modifies(set.output);
      }

      return out.changed() ? out : pulse.StopPropagation;
    };

    var Symbols$1  = 'symbol';
    var Discrete = 'discrete';
    var Gradient = 'gradient';

    const symbols$1 = {
      [Quantile]:  'quantiles',
      [Quantize]:  'thresholds',
      [Threshold]: 'domain'
    };

    const formats$1 = {
      [Quantile]:  'quantiles',
      [Quantize]:  'domain'
    };

    function labelValues(scale, count) {
      return scale.bins ? binValues$1(scale.bins)
        : symbols$1[scale.type] ? thresholdValues(scale[symbols$1[scale.type]]())
        : tickValues(scale, count);
    }

    function thresholdFormat(scale, specifier) {
      var _ = scale[formats$1[scale.type]](),
          n = _.length,
          d = n > 1 ? _[1] - _[0] : _[0], i;

      for (i=1; i<n; ++i) {
        d = Math.min(d, _[i] - _[i-1]);
      }

      // 3 ticks times 10 for increased resolution
      return tickFormat(0, d, 3 * 10, specifier);
    }

    function thresholdValues(thresholds) {
      const values = [-Infinity].concat(thresholds);
      values.max = +Infinity;

      return values;
    }

    function binValues$1(bins) {
      const values = bins.slice(0, -1);
      values.max = peek(bins);

      return values;
    }

    function isDiscreteRange(scale) {
      return symbols$1[scale.type] || scale.bins;
    }

    function labelFormat(scale, count, type, specifier) {
      const format = formats$1[scale.type] ? thresholdFormat(scale, specifier)
        : tickFormat$1(scale, count, specifier);

      return type === Symbols$1 && isDiscreteRange(scale) ? formatRange(format)
        : type === Discrete ? formatDiscrete(format)
        : formatPoint(format);
    }

    function formatRange(format) {
      return function(value, index, array) {
        var limit = array[index + 1] || array.max || +Infinity,
            lo = formatValue(value, format),
            hi = formatValue(limit, format);
        return lo && hi ? lo + '\u2013' + hi : hi ? '< ' + hi : '\u2265 ' + lo;
      };
    }

    function formatDiscrete(format) {
      return function(value, index) {
        return index ? format(value) : null;
      }
    }

    function formatPoint(format) {
      return function(value) {
        return format(value);
      };
    }

    function formatValue(value, format) {
      return isFinite(value) ? format(value) : null;
    }

    function labelFraction(scale) {
      var domain = scale.domain(),
          count = domain.length - 1,
          lo = +domain[0],
          hi = +peek(domain),
          span = hi - lo;

      if (scale.type === Threshold) {
        var adjust = count ? span / count : 0.1;
        lo -= adjust;
        hi += adjust;
        span = hi - lo;
      }

      return function(value) {
        return (value - lo) / span;
      };
    }

    /**
     * Generates legend entries for visualizing a scale.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Scale} params.scale - The scale to generate items for.
     * @param {*} [params.count=5] - The approximate number of items, or
     *   desired tick interval, to use.
     * @param {Array<*>} [params.values] - The exact tick values to use.
     *   These must be legal domain values for the provided scale.
     *   If provided, the count argument is ignored.
     * @param {string} [params.formatSpecifier] - A format specifier
     *   to use in conjunction with scale.tickFormat. Legal values are
     *   any valid D3 format specifier string.
     * @param {function(*):string} [params.format] - The format function to use.
     *   If provided, the formatSpecifier argument is ignored.
     */
    function LegendEntries(params) {
      Transform.call(this, [], params);
    }

    var prototype$W = inherits(LegendEntries, Transform);

    prototype$W.transform = function(_, pulse) {
      if (this.value != null && !_.modified()) {
        return pulse.StopPropagation;
      }

      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
          items = this.value,
          type  = _.type || Symbols$1,
          scale = _.scale,
          count = tickCount(scale, _.count == null ? 5 : _.count, _.minstep),
          format = _.format || labelFormat(scale, count, type, _.formatSpecifier),
          values = _.values || labelValues(scale, count, type),
          domain, fraction, size, offset;

      if (items) out.rem = items;

      if (type === Symbols$1) {
        if (isFunction(size = _.size)) {
          // if first value maps to size zero, remove from list (vega#717)
          if (!_.values && scale(values[0]) === 0) {
            values = values.slice(1);
          }
          // compute size offset for legend entries
          offset = values.reduce(function(max, value) {
            return Math.max(max, size(value, _));
          }, 0);
        } else {
          size = constant(offset = size || 8);
        }

        items = values.map(function(value, index) {
          return ingest({
            index:  index,
            label:  format(value, index, values),
            value:  value,
            offset: offset,
            size:   size(value, _)
          });
        });
      }

      else if (type === Gradient) {
        domain = scale.domain(),
        fraction = scaleFraction(scale, domain[0], peek(domain));

        // if automatic label generation produces 2 or fewer values,
        // use the domain end points instead (fixes vega/vega#1364)
        if (values.length < 3 && !_.values && domain[0] !== peek(domain)) {
          values = [domain[0], peek(domain)];
        }

        items = values.map(function(value, index) {
          return ingest({
            index: index,
            label: format(value, index, values),
            value: value,
            perc:  fraction(value)
          });
        });
      }

      else {
        size = values.length - 1;
        fraction = labelFraction(scale);

        items = values.map(function(value, index) {
          return ingest({
            index: index,
            label: format(value, index, values),
            value: value,
            perc:  index ? fraction(value) : 0,
            perc2: index === size ? 1 : fraction(values[index+1])
          });
        });
      }

      out.source = items;
      out.add = items;
      this.value = items;

      return out;
    };

    var Paths = fastmap({
      'line': line$3,
      'line-radial': lineR,
      'arc': arc$2,
      'arc-radial': arcR,
      'curve': curve,
      'curve-radial': curveR,
      'orthogonal-horizontal': orthoX,
      'orthogonal-vertical': orthoY,
      'orthogonal-radial': orthoR,
      'diagonal-horizontal': diagonalX,
      'diagonal-vertical': diagonalY,
      'diagonal-radial': diagonalR
    });

    function sourceX(t) { return t.source.x; }
    function sourceY(t) { return t.source.y; }
    function targetX(t) { return t.target.x; }
    function targetY(t) { return t.target.y; }

     /**
      * Layout paths linking source and target elements.
      * @constructor
      * @param {object} params - The parameters for this operator.
      */
    function LinkPath(params) {
      Transform.call(this, {}, params);
    }

    LinkPath.Definition = {
      "type": "LinkPath",
      "metadata": {"modifies": true},
      "params": [
        { "name": "sourceX", "type": "field", "default": "source.x" },
        { "name": "sourceY", "type": "field", "default": "source.y" },
        { "name": "targetX", "type": "field", "default": "target.x" },
        { "name": "targetY", "type": "field", "default": "target.y" },
        { "name": "orient", "type": "enum", "default": "vertical",
          "values": ["horizontal", "vertical", "radial"] },
        { "name": "shape", "type": "enum", "default": "line",
          "values": ["line", "arc", "curve", "diagonal", "orthogonal"] },
        { "name": "require", "type": "signal" },
        { "name": "as", "type": "string", "default": "path" }
      ]
    };

    var prototype$X = inherits(LinkPath, Transform);

    prototype$X.transform = function(_, pulse) {
      var sx = _.sourceX || sourceX,
          sy = _.sourceY || sourceY,
          tx = _.targetX || targetX,
          ty = _.targetY || targetY,
          as = _.as || 'path',
          orient = _.orient || 'vertical',
          shape = _.shape || 'line',
          path = Paths.get(shape + '-' + orient) || Paths.get(shape);

      if (!path) {
        error('LinkPath unsupported type: ' + _.shape
          + (_.orient ? '-' + _.orient : ''));
      }

      pulse.visit(pulse.SOURCE, function(t) {
        t[as] = path(sx(t), sy(t), tx(t), ty(t));
      });

      return pulse.reflow(_.modified()).modifies(as);
    };

    // -- Link Path Generation Methods -----

    function line$3(sx, sy, tx, ty) {
      return 'M' + sx + ',' + sy +
             'L' + tx + ',' + ty;
    }

    function lineR(sa, sr, ta, tr) {
      return line$3(
        sr * Math.cos(sa), sr * Math.sin(sa),
        tr * Math.cos(ta), tr * Math.sin(ta)
      );
    }

    function arc$2(sx, sy, tx, ty) {
      var dx = tx - sx,
          dy = ty - sy,
          rr = Math.sqrt(dx * dx + dy * dy) / 2,
          ra = 180 * Math.atan2(dy, dx) / Math.PI;
      return 'M' + sx + ',' + sy +
             'A' + rr + ',' + rr +
             ' ' + ra + ' 0 1' +
             ' ' + tx + ',' + ty;
    }

    function arcR(sa, sr, ta, tr) {
      return arc$2(
        sr * Math.cos(sa), sr * Math.sin(sa),
        tr * Math.cos(ta), tr * Math.sin(ta)
      );
    }

    function curve(sx, sy, tx, ty) {
      var dx = tx - sx,
          dy = ty - sy,
          ix = 0.2 * (dx + dy),
          iy = 0.2 * (dy - dx);
      return 'M' + sx + ',' + sy +
             'C' + (sx+ix) + ',' + (sy+iy) +
             ' ' + (tx+iy) + ',' + (ty-ix) +
             ' ' + tx + ',' + ty;
    }

    function curveR(sa, sr, ta, tr) {
      return curve(
        sr * Math.cos(sa), sr * Math.sin(sa),
        tr * Math.cos(ta), tr * Math.sin(ta)
      );
    }

    function orthoX(sx, sy, tx, ty) {
      return 'M' + sx + ',' + sy +
             'V' + ty + 'H' + tx;
    }

    function orthoY(sx, sy, tx, ty) {
      return 'M' + sx + ',' + sy +
             'H' + tx + 'V' + ty;
    }

    function orthoR(sa, sr, ta, tr) {
      var sc = Math.cos(sa),
          ss = Math.sin(sa),
          tc = Math.cos(ta),
          ts = Math.sin(ta),
          sf = Math.abs(ta - sa) > Math.PI ? ta <= sa : ta > sa;
      return 'M' + (sr*sc) + ',' + (sr*ss) +
             'A' + sr + ',' + sr + ' 0 0,' + (sf?1:0) +
             ' ' + (sr*tc) + ',' + (sr*ts) +
             'L' + (tr*tc) + ',' + (tr*ts);
    }

    function diagonalX(sx, sy, tx, ty) {
      var m = (sx + tx) / 2;
      return 'M' + sx + ',' + sy +
             'C' + m  + ',' + sy +
             ' ' + m  + ',' + ty +
             ' ' + tx + ',' + ty;
    }

    function diagonalY(sx, sy, tx, ty) {
      var m = (sy + ty) / 2;
      return 'M' + sx + ',' + sy +
             'C' + sx + ',' + m +
             ' ' + tx + ',' + m +
             ' ' + tx + ',' + ty;
    }

    function diagonalR(sa, sr, ta, tr) {
      var sc = Math.cos(sa),
          ss = Math.sin(sa),
          tc = Math.cos(ta),
          ts = Math.sin(ta),
          mr = (sr + tr) / 2;
      return 'M' + (sr*sc) + ',' + (sr*ss) +
             'C' + (mr*sc) + ',' + (mr*ss) +
             ' ' + (mr*tc) + ',' + (mr*ts) +
             ' ' + (tr*tc) + ',' + (tr*ts);
    }

    /**
     * Pie and donut chart layout.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The value field to size pie segments.
     * @param {number} [params.startAngle=0] - The start angle (in radians) of the layout.
     * @param {number} [params.endAngle=2π] - The end angle (in radians) of the layout.
     * @param {boolean} [params.sort] - Boolean flag for sorting sectors by value.
     */
    function Pie(params) {
      Transform.call(this, null, params);
    }

    Pie.Definition = {
      "type": "Pie",
      "metadata": {"modifies": true},
      "params": [
        { "name": "field", "type": "field" },
        { "name": "startAngle", "type": "number", "default": 0 },
        { "name": "endAngle", "type": "number", "default": 6.283185307179586 },
        { "name": "sort", "type": "boolean", "default": false },
        { "name": "as", "type": "string", "array": true, "length": 2, "default": ["startAngle", "endAngle"] }
      ]
    };

    var prototype$Y = inherits(Pie, Transform);

    prototype$Y.transform = function(_, pulse) {
      var as = _.as || ['startAngle', 'endAngle'],
          startAngle = as[0],
          endAngle = as[1],
          field = _.field || one,
          start = _.startAngle || 0,
          stop = _.endAngle != null ? _.endAngle : 2 * Math.PI,
          data = pulse.source,
          values = data.map(field),
          n = values.length,
          a = start,
          k = (stop - start) / sum(values),
          index = range(n),
          i, t, v;

      if (_.sort) {
        index.sort(function(a, b) {
          return values[a] - values[b];
        });
      }

      for (i=0; i<n; ++i) {
        v = values[index[i]];
        t = data[index[i]];
        t[startAngle] = a;
        t[endAngle] = (a += v * k);
      }

      this.value = values;
      return pulse.reflow(_.modified()).modifies(as);
    };

    var DEFAULT_COUNT = 5;

    function includeZero(scale) {
      const type = scale.type;
      return !scale.bins && (
        type === Linear$1 || type === Pow || type === Sqrt
      );
    }

    function includePad(type) {
      return isContinuous$1(type) && type !== Sequential;
    }

    var SKIP$2 = toSet([
      'set', 'modified', 'clear', 'type', 'scheme', 'schemeExtent', 'schemeCount',
      'domain', 'domainMin', 'domainMid', 'domainMax',
      'domainRaw', 'domainImplicit', 'nice', 'zero', 'bins',
      'range', 'rangeStep', 'round', 'reverse', 'interpolate', 'interpolateGamma'
    ]);

    /**
     * Maintains a scale function mapping data values to visual channels.
     * @constructor
     * @param {object} params - The parameters for this operator.
     */
    function Scale(params) {
      Transform.call(this, null, params);
      this.modified(true); // always treat as modified
    }

    var prototype$Z = inherits(Scale, Transform);

    prototype$Z.transform = function(_, pulse) {
      var df = pulse.dataflow,
          scale = this.value,
          key = scaleKey(_);

      if (!scale || key !== scale.type) {
        this.value = scale = scale$1(key)();
      }

      for (key in _) if (!SKIP$2[key]) {
        // padding is a scale property for band/point but not others
        if (key === 'padding' && includePad(scale.type)) continue;
        // invoke scale property setter, raise warning if not found
        isFunction(scale[key])
          ? scale[key](_[key])
          : df.warn('Unsupported scale property: ' + key);
      }

      configureRange(scale, _,
        configureBins(scale, _, configureDomain(scale, _, df))
      );

      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    };

    function scaleKey(_) {
      var t = _.type, d = '', n;

      // backwards compatibility pre Vega 5.
      if (t === Sequential) return Sequential + '-' + Linear$1;

      if (isContinuousColor(_)) {
        n = _.rawDomain ? _.rawDomain.length
          : _.domain ? _.domain.length + +(_.domainMid != null)
          : 0;
        d = n === 2 ? Sequential + '-'
          : n === 3 ? Diverging + '-'
          : '';
      }

      return ((d + t) || Linear$1).toLowerCase();
    }

    function isContinuousColor(_) {
      const t = _.type;
      return isContinuous$1(t) && t !== Time && t !== UTC && (
        _.scheme || _.range && _.range.length && _.range.every(isString)
      );
    }

    function configureDomain(scale, _, df) {
      // check raw domain, if provided use that and exit early
      var raw = rawDomain(scale, _.domainRaw, df);
      if (raw > -1) return raw;

      var domain = _.domain,
          type = scale.type,
          zero = _.zero || (_.zero === undefined && includeZero(scale)),
          n, mid;

      if (!domain) return 0;

      // adjust continuous domain for minimum pixel padding
      if (includePad(type) && _.padding && domain[0] !== peek(domain)) {
        domain = padDomain(type, domain, _.range, _.padding, _.exponent, _.constant);
      }

      // adjust domain based on zero, min, max settings
      if (zero || _.domainMin != null || _.domainMax != null || _.domainMid != null) {
        n = ((domain = domain.slice()).length - 1) || 1;
        if (zero) {
          if (domain[0] > 0) domain[0] = 0;
          if (domain[n] < 0) domain[n] = 0;
        }
        if (_.domainMin != null) domain[0] = _.domainMin;
        if (_.domainMax != null) domain[n] = _.domainMax;

        if (_.domainMid != null) {
          mid = _.domainMid;
          if (mid < domain[0] || mid > domain[n]) {
            df.warn('Scale domainMid exceeds domain min or max.', mid);
          }
          domain.splice(n, 0, mid);
        }
      }

      // set the scale domain
      scale.domain(domainCheck(type, domain, df));

      // if ordinal scale domain is defined, prevent implicit
      // domain construction as side-effect of scale lookup
      if (type === Ordinal) {
        scale.unknown(_.domainImplicit ? implicit : undefined);
      }

      // perform 'nice' adjustment as requested
      if (_.nice && scale.nice) {
        scale.nice((_.nice !== true && tickCount(scale, _.nice)) || null);
      }

      // return the cardinality of the domain
      return domain.length;
    }

    function rawDomain(scale, raw, df) {
      if (raw) {
        scale.domain(domainCheck(scale.type, raw, df));
        return raw.length;
      } else {
        return -1;
      }
    }

    function padDomain(type, domain, range, pad, exponent, constant) {
      var span = Math.abs(peek(range) - range[0]),
          frac = span / (span - 2 * pad),
          d = type === Log    ? zoomLog(domain, null, frac)
            : type === Sqrt   ? zoomPow(domain, null, frac, 0.5)
            : type === Pow    ? zoomPow(domain, null, frac, exponent || 1)
            : type === Symlog ? zoomSymlog(domain, null, frac, constant || 1)
            : zoomLinear(domain, null, frac);

      domain = domain.slice();
      domain[0] = d[0];
      domain[domain.length-1] = d[1];
      return domain;
    }

    function domainCheck(type, domain, df) {
      if (isLogarithmic(type)) {
        // sum signs of domain values
        // if all pos or all neg, abs(sum) === domain.length
        var s = Math.abs(domain.reduce(function(s, v) {
          return s + (v < 0 ? -1 : v > 0 ? 1 : 0);
        }, 0));

        if (s !== domain.length) {
          df.warn('Log scale domain includes zero: ' + $(domain));
        }
      }
      return domain;
    }

    function configureBins(scale, _, count) {
      let bins = _.bins;

      if (bins && !isArray(bins)) {
        // generate bin boundary array
        const domain = (bins.start == null || bins.stop == null) && scale.domain(),
              start = bins.start == null ? domain[0] : bins.start,
              stop = bins.stop == null ? peek(domain) : bins.stop,
              step = bins.step;

        if (!step) error('Scale bins parameter missing step property.');
        bins = range(start, stop + step, step);
      }

      if (bins) {
        // assign bin boundaries to scale instance
        scale.bins = bins;
      } else if (scale.bins) {
        // no current bins, remove bins if previously set
        delete scale.bins;
      }

      // special handling for bin-ordinal scales
      if (scale.type === BinOrdinal) {
        if (!bins) {
          // the domain specifies the bins
          scale.bins = scale.domain();
        } else if (!_.domain && !_.domainRaw) {
          // the bins specify the domain
          scale.domain(bins);
          count = bins.length;
        }
      }

      // return domain cardinality
      return count;
    }

    function configureRange(scale, _, count) {
      var round = _.round || false,
          range = _.range;

      // if range step specified, calculate full range extent
      if (_.rangeStep != null) {
        range = configureRangeStep(scale.type, _, count);
      }

      // else if a range scheme is defined, use that
      else if (_.scheme) {
        range = configureScheme(scale.type, _, count);
        if (isFunction(range)) return scale.interpolator(range);
      }

      // given a range array for an interpolating scale, convert to interpolator
      else if (range && isInterpolating(scale.type)) {
        return scale.interpolator(
          interpolateColors(flip(range, _.reverse), _.interpolate, _.interpolateGamma)
        );
      }

      // configure rounding / interpolation
      if (range && _.interpolate && scale.interpolate) {
        scale.interpolate(interpolate(_.interpolate, _.interpolateGamma));
      } else if (isFunction(scale.round)) {
        scale.round(round);
      } else if (isFunction(scale.rangeRound)) {
        scale.interpolate(round ? interpolateRound : value);
      }

      if (range) scale.range(flip(range, _.reverse));
    }

    function configureRangeStep(type, _, count) {
      if (type !== Band && type !== Point) {
        error('Only band and point scales support rangeStep.');
      }

      // calculate full range based on requested step size and padding
      var outer = (_.paddingOuter != null ? _.paddingOuter : _.padding) || 0,
          inner = type === Point ? 1
                : ((_.paddingInner != null ? _.paddingInner : _.padding) || 0);
      return [0, _.rangeStep * bandSpace(count, inner, outer)];
    }

    function configureScheme(type, _, count) {
      var extent = _.schemeExtent,
          name, scheme$1;

      if (isArray(_.scheme)) {
        scheme$1 = interpolateColors(_.scheme, _.interpolate, _.interpolateGamma);
      } else {
        name = _.scheme.toLowerCase();
        scheme$1 = scheme(name);
        if (!scheme$1) error('Unrecognized scheme name: ' + _.scheme);
      }

      // determine size for potential discrete range
      count = (type === Threshold) ? count + 1
        : (type === BinOrdinal) ? count - 1
        : (type === Quantile || type === Quantize) ? (+_.schemeCount || DEFAULT_COUNT)
        : count;

      // adjust and/or quantize scheme as appropriate
      return isInterpolating(type) ? adjustScheme(scheme$1, extent, _.reverse)
        : isFunction(scheme$1) ? quantizeInterpolator(adjustScheme(scheme$1, extent), count)
        : type === Ordinal ? scheme$1 : scheme$1.slice(0, count);
    }

    function adjustScheme(scheme, extent, reverse) {
      return (isFunction(scheme) && (extent || reverse))
        ? interpolateRange(scheme, flip(extent || [0, 1], reverse))
        : scheme;
    }

    function flip(array, reverse) {
      return reverse ? array.slice().reverse() : array;
    }

    /**
     * Sorts scenegraph items in the pulse source array.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(*,*): number} [params.sort] - A comparator
     *   function for sorting tuples.
     */
    function SortItems(params) {
      Transform.call(this, null, params);
    }

    var prototype$_ = inherits(SortItems, Transform);

    prototype$_.transform = function(_, pulse) {
      var mod = _.modified('sort')
             || pulse.changed(pulse.ADD)
             || pulse.modified(_.sort.fields)
             || pulse.modified('datum');

      if (mod) pulse.source.sort(_.sort);

      this.modified(mod);
      return pulse;
    };

    var Zero = 'zero',
        Center = 'center',
        Normalize = 'normalize',
        DefOutput = ['y0', 'y1'];

    /**
     * Stack layout for visualization elements.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The value field to stack.
     * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.
     * @param {function(object,object): number} [params.sort] - A comparator for stack sorting.
     * @param {string} [offset='zero'] - One of 'zero', 'center', 'normalize'.
     */
    function Stack(params) {
      Transform.call(this, null, params);
    }

    Stack.Definition = {
      "type": "Stack",
      "metadata": {"modifies": true},
      "params": [
        { "name": "field", "type": "field" },
        { "name": "groupby", "type": "field", "array": true },
        { "name": "sort", "type": "compare" },
        { "name": "offset", "type": "enum", "default": Zero, "values": [Zero, Center, Normalize] },
        { "name": "as", "type": "string", "array": true, "length": 2, "default": DefOutput }
      ]
    };

    var prototype$$ = inherits(Stack, Transform);

    prototype$$.transform = function(_, pulse) {
      var as = _.as || DefOutput,
          y0 = as[0],
          y1 = as[1],
          field = _.field || one,
          stack = _.offset === Center ? stackCenter
                : _.offset === Normalize ? stackNormalize
                : stackZero,
          groups, i, n, max;

      // partition, sum, and sort the stack groups
      groups = partition$1(pulse.source, _.groupby, _.sort, field);

      // compute stack layouts per group
      for (i=0, n=groups.length, max=groups.max; i<n; ++i) {
        stack(groups[i], max, field, y0, y1);
      }

      return pulse.reflow(_.modified()).modifies(as);
    };

    function stackCenter(group, max, field, y0, y1) {
      var last = (max - group.sum) / 2,
          m = group.length,
          j = 0, t;

      for (; j<m; ++j) {
        t = group[j];
        t[y0] = last;
        t[y1] = (last += Math.abs(field(t)));
      }
    }

    function stackNormalize(group, max, field, y0, y1) {
      var scale = 1 / group.sum,
          last = 0,
          m = group.length,
          j = 0, v = 0, t;

      for (; j<m; ++j) {
        t = group[j];
        t[y0] = last;
        t[y1] = last = scale * (v += Math.abs(field(t)));
      }
    }

    function stackZero(group, max, field, y0, y1) {
      var lastPos = 0,
          lastNeg = 0,
          m = group.length,
          j = 0, v, t;

      for (; j<m; ++j) {
        t = group[j];
        v = field(t);
        if (v < 0) {
          t[y0] = lastNeg;
          t[y1] = (lastNeg += v);
        } else {
          t[y0] = lastPos;
          t[y1] = (lastPos += v);
        }
      }
    }

    function partition$1(data, groupby, sort, field) {
      var groups = [],
          get = function(f) { return f(t); },
          map, i, n, m, t, k, g, s, max;

      // partition data points into stack groups
      if (groupby == null) {
        groups.push(data.slice());
      } else {
        for (map={}, i=0, n=data.length; i<n; ++i) {
          t = data[i];
          k = groupby.map(get);
          g = map[k];
          if (!g) {
            map[k] = (g = []);
            groups.push(g);
          }
          g.push(t);
        }
      }

      // compute sums of groups, sort groups as needed
      for (k=0, max=0, m=groups.length; k<m; ++k) {
        g = groups[k];
        for (i=0, s=0, n=g.length; i<n; ++i) {
          s += Math.abs(field(g[i]));
        }
        g.sum = s;
        if (s > max) max = s;
        if (sort) g.sort(sort);
      }
      groups.max = max;

      return groups;
    }



    var encode = /*#__PURE__*/Object.freeze({
        axisticks: AxisTicks,
        datajoin: DataJoin,
        encode: Encode,
        legendentries: LegendEntries,
        linkpath: LinkPath,
        pie: Pie,
        scale: Scale,
        sortitems: SortItems,
        stack: Stack,
        validTicks: validTicks
    });

    function ascending$2(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector$2(compare) {
      if (compare.length === 1) compare = ascendingComparator$2(compare);
      return {
        left: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        },
        right: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;
            else lo = mid + 1;
          }
          return lo;
        }
      };
    }

    function ascendingComparator$2(f) {
      return function(d, x) {
        return ascending$2(f(d), x);
      };
    }

    var ascendingBisect$2 = bisector$2(ascending$2);

    function extent$2(values, valueof) {
      var n = values.length,
          i = -1,
          value,
          min,
          max;

      if (valueof == null) {
        while (++i < n) { // Find the first comparable value.
          if ((value = values[i]) != null && value >= value) {
            min = max = value;
            while (++i < n) { // Compare the remaining values.
              if ((value = values[i]) != null) {
                if (min > value) min = value;
                if (max < value) max = value;
              }
            }
          }
        }
      }

      else {
        while (++i < n) { // Find the first comparable value.
          if ((value = valueof(values[i], i, values)) != null && value >= value) {
            min = max = value;
            while (++i < n) { // Compare the remaining values.
              if ((value = valueof(values[i], i, values)) != null) {
                if (min > value) min = value;
                if (max < value) max = value;
              }
            }
          }
        }
      }

      return [min, max];
    }

    function range$1(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    var e10$2 = Math.sqrt(50),
        e5$2 = Math.sqrt(10),
        e2$2 = Math.sqrt(2);

    function tickStep$2(start, stop, count) {
      var step0 = Math.abs(stop - start) / Math.max(0, count),
          step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
          error = step0 / step1;
      if (error >= e10$2) step1 *= 10;
      else if (error >= e5$2) step1 *= 5;
      else if (error >= e2$2) step1 *= 2;
      return stop < start ? -step1 : step1;
    }

    function sturges(values) {
      return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
    }

    function max$3(values, valueof) {
      var n = values.length,
          i = -1,
          value,
          max;

      if (valueof == null) {
        while (++i < n) { // Find the first comparable value.
          if ((value = values[i]) != null && value >= value) {
            max = value;
            while (++i < n) { // Compare the remaining values.
              if ((value = values[i]) != null && value > max) {
                max = value;
              }
            }
          }
        }
      }

      else {
        while (++i < n) { // Find the first comparable value.
          if ((value = valueof(values[i], i, values)) != null && value >= value) {
            max = value;
            while (++i < n) { // Compare the remaining values.
              if ((value = valueof(values[i], i, values)) != null && value > max) {
                max = value;
              }
            }
          }
        }
      }

      return max;
    }

    var array$3 = Array.prototype;

    var slice$2 = array$3.slice;

    function ascending$3(a, b) {
      return a - b;
    }

    function area$3(ring) {
      var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
      while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
      return area;
    }

    function constant$5(x) {
      return function() {
        return x;
      };
    }

    function contains$1(ring, hole) {
      var i = -1, n = hole.length, c;
      while (++i < n) if (c = ringContains(ring, hole[i])) return c;
      return 0;
    }

    function ringContains(ring, point) {
      var x = point[0], y = point[1], contains = -1;
      for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if (segmentContains(pi, pj, point)) return 0;
        if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
      }
      return contains;
    }

    function segmentContains(a, b, c) {
      var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
    }

    function collinear(a, b, c) {
      return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
    }

    function within(p, q, r) {
      return p <= q && q <= r || r <= q && q <= p;
    }

    function noop$2() {}

    var cases = [
      [],
      [[[1.0, 1.5], [0.5, 1.0]]],
      [[[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [0.5, 1.0]]],
      [[[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
      [[[1.0, 0.5], [1.0, 1.5]]],
      [[[1.0, 0.5], [0.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 0.5]]],
      [[[1.0, 1.5], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
      [[[1.5, 1.0], [1.0, 0.5]]],
      [[[0.5, 1.0], [1.5, 1.0]]],
      [[[1.0, 1.5], [1.5, 1.0]]],
      [[[0.5, 1.0], [1.0, 1.5]]],
      []
    ];

    function contours() {
      var dx = 1,
          dy = 1,
          threshold = sturges,
          smooth = smoothLinear;

      function contours(values) {
        var tz = threshold(values);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          var domain = extent$2(values), start = domain[0], stop = domain[1];
          tz = tickStep$2(start, stop, tz);
          tz = range$1(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
        } else {
          tz = tz.slice().sort(ascending$3);
        }

        return tz.map(function(value) {
          return contour(values, value);
        });
      }

      // Accumulate, smooth contour rings, assign holes to exterior rings.
      // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
      function contour(values, value) {
        var polygons = [],
            holes = [];

        isorings(values, value, function(ring) {
          smooth(ring, values, value);
          if (area$3(ring) > 0) polygons.push([ring]);
          else holes.push(ring);
        });

        holes.forEach(function(hole) {
          for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
            if (contains$1((polygon = polygons[i])[0], hole) !== -1) {
              polygon.push(hole);
              return;
            }
          }
        });

        return {
          type: "MultiPolygon",
          value: value,
          coordinates: polygons
        };
      }

      // Marching squares with isolines stitched into rings.
      // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
      function isorings(values, value, callback) {
        var fragmentByStart = new Array,
            fragmentByEnd = new Array,
            x, y, t0, t1, t2, t3;

        // Special case for the first row (y = -1, t2 = t3 = 0).
        x = y = -1;
        t1 = values[0] >= value;
        cases[t1 << 1].forEach(stitch);
        while (++x < dx - 1) {
          t0 = t1, t1 = values[x + 1] >= value;
          cases[t0 | t1 << 1].forEach(stitch);
        }
        cases[t1 << 0].forEach(stitch);

        // General case for the intermediate rows.
        while (++y < dy - 1) {
          x = -1;
          t1 = values[y * dx + dx] >= value;
          t2 = values[y * dx] >= value;
          cases[t1 << 1 | t2 << 2].forEach(stitch);
          while (++x < dx - 1) {
            t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
            t3 = t2, t2 = values[y * dx + x + 1] >= value;
            cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
          }
          cases[t1 | t2 << 3].forEach(stitch);
        }

        // Special case for the last row (y = dy - 1, t0 = t1 = 0).
        x = -1;
        t2 = values[y * dx] >= value;
        cases[t2 << 2].forEach(stitch);
        while (++x < dx - 1) {
          t3 = t2, t2 = values[y * dx + x + 1] >= value;
          cases[t2 << 2 | t3 << 3].forEach(stitch);
        }
        cases[t2 << 3].forEach(stitch);

        function stitch(line) {
          var start = [line[0][0] + x, line[0][1] + y],
              end = [line[1][0] + x, line[1][1] + y],
              startIndex = index(start),
              endIndex = index(end),
              f, g;
          if (f = fragmentByEnd[startIndex]) {
            if (g = fragmentByStart[endIndex]) {
              delete fragmentByEnd[f.end];
              delete fragmentByStart[g.start];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
              }
            } else {
              delete fragmentByEnd[f.end];
              f.ring.push(end);
              fragmentByEnd[f.end = endIndex] = f;
            }
          } else if (f = fragmentByStart[endIndex]) {
            if (g = fragmentByEnd[startIndex]) {
              delete fragmentByStart[f.start];
              delete fragmentByEnd[g.end];
              if (f === g) {
                f.ring.push(end);
                callback(f.ring);
              } else {
                fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
              }
            } else {
              delete fragmentByStart[f.start];
              f.ring.unshift(start);
              fragmentByStart[f.start = startIndex] = f;
            }
          } else {
            fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
          }
        }
      }

      function index(point) {
        return point[0] * 2 + point[1] * (dx + 1) * 4;
      }

      function smoothLinear(ring, values, value) {
        ring.forEach(function(point) {
          var x = point[0],
              y = point[1],
              xt = x | 0,
              yt = y | 0,
              v0,
              v1 = values[yt * dx + xt];
          if (x > 0 && x < dx && xt === x) {
            v0 = values[yt * dx + xt - 1];
            point[0] = x + (value - v0) / (v1 - v0) - 0.5;
          }
          if (y > 0 && y < dy && yt === y) {
            v0 = values[(yt - 1) * dx + xt];
            point[1] = y + (value - v0) / (v1 - v0) - 0.5;
          }
        });
      }

      contours.contour = contour;

      contours.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
        if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, contours;
      };

      contours.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$2.call(_)) : constant$5(_), contours) : threshold;
      };

      contours.smooth = function(_) {
        return arguments.length ? (smooth = _ ? smoothLinear : noop$2, contours) : smooth === smoothLinear;
      };

      return contours;
    }

    // TODO Optimize edge cases.
    // TODO Optimize index calculation.
    // TODO Optimize arguments.
    function blurX(source, target, r) {
      var n = source.width,
          m = source.height,
          w = (r << 1) + 1;
      for (var j = 0; j < m; ++j) {
        for (var i = 0, sr = 0; i < n + r; ++i) {
          if (i < n) {
            sr += source.data[i + j * n];
          }
          if (i >= r) {
            if (i >= w) {
              sr -= source.data[i - w + j * n];
            }
            target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
          }
        }
      }
    }

    // TODO Optimize edge cases.
    // TODO Optimize index calculation.
    // TODO Optimize arguments.
    function blurY(source, target, r) {
      var n = source.width,
          m = source.height,
          w = (r << 1) + 1;
      for (var i = 0; i < n; ++i) {
        for (var j = 0, sr = 0; j < m + r; ++j) {
          if (j < m) {
            sr += source.data[i + j * n];
          }
          if (j >= r) {
            if (j >= w) {
              sr -= source.data[i + (j - w) * n];
            }
            target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
          }
        }
      }
    }

    function defaultX(d) {
      return d[0];
    }

    function defaultY(d) {
      return d[1];
    }

    function defaultWeight() {
      return 1;
    }

    function contourDensity() {
      var x = defaultX,
          y = defaultY,
          weight = defaultWeight,
          dx = 960,
          dy = 500,
          r = 20, // blur radius
          k = 2, // log2(grid cell size)
          o = r * 3, // grid offset, to pad for blur
          n = (dx + o * 2) >> k, // grid width
          m = (dy + o * 2) >> k, // grid height
          threshold = constant$5(20);

      function density(data) {
        var values0 = new Float32Array(n * m),
            values1 = new Float32Array(n * m);

        data.forEach(function(d, i, data) {
          var xi = (+x(d, i, data) + o) >> k,
              yi = (+y(d, i, data) + o) >> k,
              wi = +weight(d, i, data);
          if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
            values0[xi + yi * n] += wi;
          }
        });

        // TODO Optimize.
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
        blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
        blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);

        var tz = threshold(values0);

        // Convert number of thresholds into uniform thresholds.
        if (!Array.isArray(tz)) {
          var stop = max$3(values0);
          tz = tickStep$2(0, stop, tz);
          tz = range$1(0, Math.floor(stop / tz) * tz, tz);
          tz.shift();
        }

        return contours()
            .thresholds(tz)
            .size([n, m])
          (values0)
            .map(transform);
      }

      function transform(geometry) {
        geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
        geometry.coordinates.forEach(transformPolygon);
        return geometry;
      }

      function transformPolygon(coordinates) {
        coordinates.forEach(transformRing);
      }

      function transformRing(coordinates) {
        coordinates.forEach(transformPoint);
      }

      // TODO Optimize.
      function transformPoint(coordinates) {
        coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
        coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
      }

      function resize() {
        o = r * 3;
        n = (dx + o * 2) >> k;
        m = (dy + o * 2) >> k;
        return density;
      }

      density.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$5(+_), density) : x;
      };

      density.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$5(+_), density) : y;
      };

      density.weight = function(_) {
        return arguments.length ? (weight = typeof _ === "function" ? _ : constant$5(+_), density) : weight;
      };

      density.size = function(_) {
        if (!arguments.length) return [dx, dy];
        var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
        if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
        return dx = _0, dy = _1, resize();
      };

      density.cellSize = function(_) {
        if (!arguments.length) return 1 << k;
        if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
        return k = Math.floor(Math.log(_) / Math.LN2), resize();
      };

      density.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$5(slice$2.call(_)) : constant$5(_), density) : threshold;
      };

      density.bandwidth = function(_) {
        if (!arguments.length) return Math.sqrt(r * (r + 1));
        if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
        return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
      };

      return density;
    }

    var CONTOUR_PARAMS = ['size', 'smooth'];
    var DENSITY_PARAMS = ['x', 'y', 'weight', 'size', 'cellSize', 'bandwidth'];

    /**
     * Generate contours based on kernel-density estimation of point data.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<number>} params.size - The dimensions [width, height] over which to compute contours.
     *  If the values parameter is provided, this must be the dimensions of the input data.
     *  If density estimation is performed, this is the output view dimensions in pixels.
     * @param {Array<number>} [params.values] - An array of numeric values representing an
     *  width x height grid of values over which to compute contours. If unspecified, this
     *  transform will instead attempt to compute contours for the kernel density estimate
     *  using values drawn from data tuples in the input pulse.
     * @param {function(object): number} [params.x] - The pixel x-coordinate accessor for density estimation.
     * @param {function(object): number} [params.y] - The pixel y-coordinate accessor for density estimation.
     * @param {function(object): number} [params.weight] - The data point weight accessor for density estimation.
     * @param {number} [params.cellSize] - Contour density calculation cell size.
     * @param {number} [params.bandwidth] - Kernel density estimation bandwidth.
     * @param {Array<number>} [params.thresholds] - Contour threshold array. If
     *   this parameter is set, the count and nice parameters will be ignored.
     * @param {number} [params.count] - The desired number of contours.
     * @param {boolean} [params.nice] - Boolean flag indicating if the contour
     *   threshold values should be automatically aligned to "nice"
     *   human-friendly values. Setting this flag may cause the number of
     *   thresholds to deviate from the specified count.
     * @param {boolean} [params.smooth] - Boolean flag indicating if the contour
     *   polygons should be smoothed using linear interpolation. The default is
     *   true. The parameter is ignored when using density estimation.
     */
    function Contour(params) {
      Transform.call(this, null, params);
    }

    Contour.Definition = {
      "type": "Contour",
      "metadata": {"generates": true},
      "params": [
        { "name": "size", "type": "number", "array": true, "length": 2, "required": true },
        { "name": "values", "type": "number", "array": true },
        { "name": "x", "type": "field" },
        { "name": "y", "type": "field" },
        { "name": "weight", "type": "field" },
        { "name": "cellSize", "type": "number" },
        { "name": "bandwidth", "type": "number" },
        { "name": "count", "type": "number" },
        { "name": "smooth", "type": "boolean" },
        { "name": "nice", "type": "boolean", "default": false },
        { "name": "thresholds", "type": "number", "array": true }
      ]
    };

    var prototype$10 = inherits(Contour, Transform);

    prototype$10.transform = function(_, pulse) {
      if (this.value && !pulse.changed() && !_.modified())
        return pulse.StopPropagation;

      var out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),
          count = _.count || 10,
          contour, params, values;

      if (_.values) {
        contour = contours();
        params = CONTOUR_PARAMS;
        values = _.values;
      } else {
        contour = contourDensity();
        params = DENSITY_PARAMS;
        values = pulse.materialize(pulse.SOURCE).source;
      }

      // set threshold parameter
      contour.thresholds(_.thresholds || (_.nice ? count : quantize$2(count)));

      // set all other parameters
      params.forEach(function(param) {
        if (_[param] != null) contour[param](_[param]);
      });

      if (this.value) out.rem = this.value;
      values = values && values.length ? contour(values).map(ingest) : [];
      this.value = out.source = out.add = values;

      return out;
    };

    function quantize$2(k) {
      return function(values) {
        var ex = extent$1(values), x0 = ex[0], dx = ex[1] - x0,
            t = [], i = 1;
        for (; i<=k; ++i) t.push(x0 + dx * i / (k + 1));
        return t;
      };
    }

    var Feature = 'Feature';
    var FeatureCollection = 'FeatureCollection';
    var MultiPoint = 'MultiPoint';

    /**
     * Consolidate an array of [longitude, latitude] points or GeoJSON features
     * into a combined GeoJSON object. This transform is particularly useful for
     * combining geo data for a Projection's fit argument. The resulting GeoJSON
     * data is available as this transform's value. Input pulses are unchanged.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<function(object): *>} [params.fields] - A two-element array
     *   of field accessors for the longitude and latitude values.
     * @param {function(object): *} params.geojson - A field accessor for
     *   retrieving GeoJSON feature data.
     */
    function GeoJSON(params) {
      Transform.call(this, null, params);
    }

    GeoJSON.Definition = {
      "type": "GeoJSON",
      "metadata": {},
      "params": [
        { "name": "fields", "type": "field", "array": true, "length": 2 },
        { "name": "geojson", "type": "field" },
      ]
    };

    var prototype$11 = inherits(GeoJSON, Transform);

    prototype$11.transform = function(_, pulse) {
      var features = this._features,
          points = this._points,
          fields = _.fields,
          lon = fields && fields[0],
          lat = fields && fields[1],
          geojson = _.geojson,
          flag = pulse.ADD,
          mod;

      mod = _.modified()
        || pulse.changed(pulse.REM)
        || pulse.modified(accessorFields(geojson))
        || (lon && (pulse.modified(accessorFields(lon))))
        || (lat && (pulse.modified(accessorFields(lat))));

      if (!this.value || mod) {
        flag = pulse.SOURCE;
        this._features = (features = []);
        this._points = (points = []);
      }

      if (geojson) {
        pulse.visit(flag, function(t) {
          features.push(geojson(t));
        });
      }

      if (lon && lat) {
        pulse.visit(flag, function(t) {
          var x = lon(t),
              y = lat(t);
          if (x != null && y != null && (x = +x) === x && (y = +y) === y) {
            points.push([x, y]);
          }
        });
        features = features.concat({
          type: Feature,
          geometry: {
            type: MultiPoint,
            coordinates: points
          }
        });
      }

      this.value = {
        type: FeatureCollection,
        features: features
      };
    };

    // Adds floating point numbers with twice the normal precision.
    // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
    // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
    // 305–363 (1997).
    // Code adapted from GeographicLib by Charles F. F. Karney,
    // http://geographiclib.sourceforge.net/

    function adder() {
      return new Adder;
    }

    function Adder() {
      this.reset();
    }

    Adder.prototype = {
      constructor: Adder,
      reset: function() {
        this.s = // rounded value
        this.t = 0; // exact error
      },
      add: function(y) {
        add$3(temp$1, y, this.t);
        add$3(this, temp$1.s, this.s);
        if (this.s) this.t += temp$1.t;
        else this.s = temp$1.t;
      },
      valueOf: function() {
        return this.s;
      }
    };

    var temp$1 = new Adder;

    function add$3(adder, a, b) {
      var x = adder.s = a + b,
          bv = x - a,
          av = x - bv;
      adder.t = (a - av) + (b - bv);
    }

    var epsilon$2 = 1e-6;
    var epsilon2$1 = 1e-12;
    var pi$2 = Math.PI;
    var halfPi$1 = pi$2 / 2;
    var quarterPi = pi$2 / 4;
    var tau$2 = pi$2 * 2;

    var degrees$1 = 180 / pi$2;
    var radians = pi$2 / 180;

    var abs$1 = Math.abs;
    var atan = Math.atan;
    var atan2$1 = Math.atan2;
    var cos$1 = Math.cos;
    var ceil = Math.ceil;
    var exp$1 = Math.exp;
    var log$3 = Math.log;
    var pow$2 = Math.pow;
    var sin$1 = Math.sin;
    var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
    var sqrt$2 = Math.sqrt;
    var tan = Math.tan;

    function acos$1(x) {
      return x > 1 ? 0 : x < -1 ? pi$2 : Math.acos(x);
    }

    function asin$1(x) {
      return x > 1 ? halfPi$1 : x < -1 ? -halfPi$1 : Math.asin(x);
    }

    function noop$3() {}

    function streamGeometry(geometry, stream) {
      if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
        streamGeometryType[geometry.type](geometry, stream);
      }
    }

    var streamObjectType = {
      Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
      },
      FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n) streamGeometry(features[i].geometry, stream);
      }
    };

    var streamGeometryType = {
      Sphere: function(object, stream) {
        stream.sphere();
      },
      Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
      },
      MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
      },
      LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
      },
      MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamLine(coordinates[i], stream, 0);
      },
      Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
      },
      MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n) streamPolygon(coordinates[i], stream);
      },
      GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n) streamGeometry(geometries[i], stream);
      }
    };

    function streamLine(coordinates, stream, closed) {
      var i = -1, n = coordinates.length - closed, coordinate;
      stream.lineStart();
      while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
      stream.lineEnd();
    }

    function streamPolygon(coordinates, stream) {
      var i = -1, n = coordinates.length;
      stream.polygonStart();
      while (++i < n) streamLine(coordinates[i], stream, 1);
      stream.polygonEnd();
    }

    function geoStream(object, stream) {
      if (object && streamObjectType.hasOwnProperty(object.type)) {
        streamObjectType[object.type](object, stream);
      } else {
        streamGeometry(object, stream);
      }
    }

    var areaRingSum = adder();

    var areaSum = adder(),
        lambda00,
        phi00,
        lambda0,
        cosPhi0,
        sinPhi0;

    var areaStream = {
      point: noop$3,
      lineStart: noop$3,
      lineEnd: noop$3,
      polygonStart: function() {
        areaRingSum.reset();
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
      },
      polygonEnd: function() {
        var areaRing = +areaRingSum;
        areaSum.add(areaRing < 0 ? tau$2 + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = noop$3;
      },
      sphere: function() {
        areaSum.add(tau$2);
      }
    };

    function areaRingStart() {
      areaStream.point = areaPointFirst;
    }

    function areaRingEnd() {
      areaPoint(lambda00, phi00);
    }

    function areaPointFirst(lambda, phi) {
      areaStream.point = areaPoint;
      lambda00 = lambda, phi00 = phi;
      lambda *= radians, phi *= radians;
      lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
    }

    function areaPoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      phi = phi / 2 + quarterPi; // half the angular distance from south pole

      // Spherical excess E for a spherical triangle with vertices: south pole,
      // previous point, current point.  Uses a formula derived from Cagnoli’s
      // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
      var dLambda = lambda - lambda0,
          sdLambda = dLambda >= 0 ? 1 : -1,
          adLambda = sdLambda * dLambda,
          cosPhi = cos$1(phi),
          sinPhi = sin$1(phi),
          k = sinPhi0 * sinPhi,
          u = cosPhi0 * cosPhi + k * cos$1(adLambda),
          v = k * sdLambda * sin$1(adLambda);
      areaRingSum.add(atan2$1(v, u));

      // Advance the previous points.
      lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
    }

    function area$4(object) {
      areaSum.reset();
      geoStream(object, areaStream);
      return areaSum * 2;
    }

    function spherical(cartesian) {
      return [atan2$1(cartesian[1], cartesian[0]), asin$1(cartesian[2])];
    }

    function cartesian(spherical) {
      var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
      return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
    }

    function cartesianDot(a, b) {
      return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }

    function cartesianCross(a, b) {
      return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }

    // TODO return a
    function cartesianAddInPlace(a, b) {
      a[0] += b[0], a[1] += b[1], a[2] += b[2];
    }

    function cartesianScale(vector, k) {
      return [vector[0] * k, vector[1] * k, vector[2] * k];
    }

    // TODO return d
    function cartesianNormalizeInPlace(d) {
      var l = sqrt$2(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
      d[0] /= l, d[1] /= l, d[2] /= l;
    }

    var lambda0$1, phi0, lambda1, phi1, // bounds
        lambda2, // previous lambda-coordinate
        lambda00$1, phi00$1, // first point
        p0, // previous 3D point
        deltaSum = adder(),
        ranges,
        range$2;

    var boundsStream = {
      point: boundsPoint,
      lineStart: boundsLineStart,
      lineEnd: boundsLineEnd,
      polygonStart: function() {
        boundsStream.point = boundsRingPoint;
        boundsStream.lineStart = boundsRingStart;
        boundsStream.lineEnd = boundsRingEnd;
        deltaSum.reset();
        areaStream.polygonStart();
      },
      polygonEnd: function() {
        areaStream.polygonEnd();
        boundsStream.point = boundsPoint;
        boundsStream.lineStart = boundsLineStart;
        boundsStream.lineEnd = boundsLineEnd;
        if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > epsilon$2) phi1 = 90;
        else if (deltaSum < -epsilon$2) phi0 = -90;
        range$2[0] = lambda0$1, range$2[1] = lambda1;
      }
    };

    function boundsPoint(lambda, phi) {
      ranges.push(range$2 = [lambda0$1 = lambda, lambda1 = lambda]);
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }

    function linePoint(lambda, phi) {
      var p = cartesian([lambda * radians, phi * radians]);
      if (p0) {
        var normal = cartesianCross(p0, p),
            equatorial = [normal[1], -normal[0], 0],
            inflection = cartesianCross(equatorial, normal);
        cartesianNormalizeInPlace(inflection);
        inflection = spherical(inflection);
        var delta = lambda - lambda2,
            sign = delta > 0 ? 1 : -1,
            lambdai = inflection[0] * degrees$1 * sign,
            phii,
            antimeridian = abs$1(delta) > 180;
        if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = inflection[1] * degrees$1;
          if (phii > phi1) phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
          phii = -inflection[1] * degrees$1;
          if (phii < phi0) phi0 = phii;
        } else {
          if (phi < phi0) phi0 = phi;
          if (phi > phi1) phi1 = phi;
        }
        if (antimeridian) {
          if (lambda < lambda2) {
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
          }
        } else {
          if (lambda1 >= lambda0$1) {
            if (lambda < lambda0$1) lambda0$1 = lambda;
            if (lambda > lambda1) lambda1 = lambda;
          } else {
            if (lambda > lambda2) {
              if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
            } else {
              if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
            }
          }
        }
      } else {
        ranges.push(range$2 = [lambda0$1 = lambda, lambda1 = lambda]);
      }
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
      p0 = p, lambda2 = lambda;
    }

    function boundsLineStart() {
      boundsStream.point = linePoint;
    }

    function boundsLineEnd() {
      range$2[0] = lambda0$1, range$2[1] = lambda1;
      boundsStream.point = boundsPoint;
      p0 = null;
    }

    function boundsRingPoint(lambda, phi) {
      if (p0) {
        var delta = lambda - lambda2;
        deltaSum.add(abs$1(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
      } else {
        lambda00$1 = lambda, phi00$1 = phi;
      }
      areaStream.point(lambda, phi);
      linePoint(lambda, phi);
    }

    function boundsRingStart() {
      areaStream.lineStart();
    }

    function boundsRingEnd() {
      boundsRingPoint(lambda00$1, phi00$1);
      areaStream.lineEnd();
      if (abs$1(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);
      range$2[0] = lambda0$1, range$2[1] = lambda1;
      p0 = null;
    }

    // Finds the left-right distance between two longitudes.
    // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
    // the distance between ±180° to be 360°.
    function angle(lambda0, lambda1) {
      return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
    }

    function rangeCompare(a, b) {
      return a[0] - b[0];
    }

    function rangeContains(range, x) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }

    function bounds$1(feature) {
      var i, n, a, b, merged, deltaMax, delta;

      phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
      ranges = [];
      geoStream(feature, boundsStream);

      // First, sort ranges by their minimum longitudes.
      if (n = ranges.length) {
        ranges.sort(rangeCompare);

        // Then, merge any ranges that overlap.
        for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
          b = ranges[i];
          if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }

        // Finally, find the largest gap between the merged ranges.
        // The final bounding box will be the inverse of this gap.
        for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
          b = merged[i];
          if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
        }
      }

      ranges = range$2 = null;

      return lambda0$1 === Infinity || phi0 === Infinity
          ? [[NaN, NaN], [NaN, NaN]]
          : [[lambda0$1, phi0], [lambda1, phi1]];
    }

    var W0, W1,
        X0, Y0, Z0,
        X1, Y1, Z1,
        X2$1, Y2$1, Z2,
        lambda00$2, phi00$2, // first point
        x0, y0, z0; // previous point

    var centroidStream = {
      sphere: noop$3,
      point: centroidPoint,
      lineStart: centroidLineStart,
      lineEnd: centroidLineEnd,
      polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
      },
      polygonEnd: function() {
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
      }
    };

    // Arithmetic mean of Cartesian vectors.
    function centroidPoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi);
      centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
    }

    function centroidPointCartesian(x, y, z) {
      ++W0;
      X0 += (x - X0) / W0;
      Y0 += (y - Y0) / W0;
      Z0 += (z - Z0) / W0;
    }

    function centroidLineStart() {
      centroidStream.point = centroidLinePointFirst;
    }

    function centroidLinePointFirst(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi);
      x0 = cosPhi * cos$1(lambda);
      y0 = cosPhi * sin$1(lambda);
      z0 = sin$1(phi);
      centroidStream.point = centroidLinePoint;
      centroidPointCartesian(x0, y0, z0);
    }

    function centroidLinePoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi),
          x = cosPhi * cos$1(lambda),
          y = cosPhi * sin$1(lambda),
          z = sin$1(phi),
          w = atan2$1(sqrt$2((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      W1 += w;
      X1 += w * (x0 + (x0 = x));
      Y1 += w * (y0 + (y0 = y));
      Z1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0, y0, z0);
    }

    function centroidLineEnd() {
      centroidStream.point = centroidPoint;
    }

    // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
    // J. Applied Mechanics 42, 239 (1975).
    function centroidRingStart() {
      centroidStream.point = centroidRingPointFirst;
    }

    function centroidRingEnd() {
      centroidRingPoint(lambda00$2, phi00$2);
      centroidStream.point = centroidPoint;
    }

    function centroidRingPointFirst(lambda, phi) {
      lambda00$2 = lambda, phi00$2 = phi;
      lambda *= radians, phi *= radians;
      centroidStream.point = centroidRingPoint;
      var cosPhi = cos$1(phi);
      x0 = cosPhi * cos$1(lambda);
      y0 = cosPhi * sin$1(lambda);
      z0 = sin$1(phi);
      centroidPointCartesian(x0, y0, z0);
    }

    function centroidRingPoint(lambda, phi) {
      lambda *= radians, phi *= radians;
      var cosPhi = cos$1(phi),
          x = cosPhi * cos$1(lambda),
          y = cosPhi * sin$1(lambda),
          z = sin$1(phi),
          cx = y0 * z - z0 * y,
          cy = z0 * x - x0 * z,
          cz = x0 * y - y0 * x,
          m = sqrt$2(cx * cx + cy * cy + cz * cz),
          w = asin$1(m), // line weight = angle
          v = m && -w / m; // area weight multiplier
      X2$1 += v * cx;
      Y2$1 += v * cy;
      Z2 += v * cz;
      W1 += w;
      X1 += w * (x0 + (x0 = x));
      Y1 += w * (y0 + (y0 = y));
      Z1 += w * (z0 + (z0 = z));
      centroidPointCartesian(x0, y0, z0);
    }

    function centroid(object) {
      W0 = W1 =
      X0 = Y0 = Z0 =
      X1 = Y1 = Z1 =
      X2$1 = Y2$1 = Z2 = 0;
      geoStream(object, centroidStream);

      var x = X2$1,
          y = Y2$1,
          z = Z2,
          m = x * x + y * y + z * z;

      // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
      if (m < epsilon2$1) {
        x = X1, y = Y1, z = Z1;
        // If the feature has zero length, fall back to arithmetic mean of point vectors.
        if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;
        m = x * x + y * y + z * z;
        // If the feature still has an undefined ccentroid, then return.
        if (m < epsilon2$1) return [NaN, NaN];
      }

      return [atan2$1(y, x) * degrees$1, asin$1(z / sqrt$2(m)) * degrees$1];
    }

    function compose(a, b) {

      function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
      }

      if (a.invert && b.invert) compose.invert = function(x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
      };

      return compose;
    }

    function rotationIdentity(lambda, phi) {
      return [abs$1(lambda) > pi$2 ? lambda + Math.round(-lambda / tau$2) * tau$2 : lambda, phi];
    }

    rotationIdentity.invert = rotationIdentity;

    function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
      return (deltaLambda %= tau$2) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
        : rotationLambda(deltaLambda))
        : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
        : rotationIdentity);
    }

    function forwardRotationLambda(deltaLambda) {
      return function(lambda, phi) {
        return lambda += deltaLambda, [lambda > pi$2 ? lambda - tau$2 : lambda < -pi$2 ? lambda + tau$2 : lambda, phi];
      };
    }

    function rotationLambda(deltaLambda) {
      var rotation = forwardRotationLambda(deltaLambda);
      rotation.invert = forwardRotationLambda(-deltaLambda);
      return rotation;
    }

    function rotationPhiGamma(deltaPhi, deltaGamma) {
      var cosDeltaPhi = cos$1(deltaPhi),
          sinDeltaPhi = sin$1(deltaPhi),
          cosDeltaGamma = cos$1(deltaGamma),
          sinDeltaGamma = sin$1(deltaGamma);

      function rotation(lambda, phi) {
        var cosPhi = cos$1(phi),
            x = cos$1(lambda) * cosPhi,
            y = sin$1(lambda) * cosPhi,
            z = sin$1(phi),
            k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
          atan2$1(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
          asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
      }

      rotation.invert = function(lambda, phi) {
        var cosPhi = cos$1(phi),
            x = cos$1(lambda) * cosPhi,
            y = sin$1(lambda) * cosPhi,
            z = sin$1(phi),
            k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
          atan2$1(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
          asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
      };

      return rotation;
    }

    function rotation(rotate) {
      rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

      function forward(coordinates) {
        coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
      }

      forward.invert = function(coordinates) {
        coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
      };

      return forward;
    }

    // Generates a circle centered at [0°, 0°], with a given radius and precision.
    function circleStream(stream, radius, delta, direction, t0, t1) {
      if (!delta) return;
      var cosRadius = cos$1(radius),
          sinRadius = sin$1(radius),
          step = direction * delta;
      if (t0 == null) {
        t0 = radius + direction * tau$2;
        t1 = radius - step / 2;
      } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$2;
      }
      for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
        point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
        stream.point(point[0], point[1]);
      }
    }

    // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
    function circleRadius(cosRadius, point) {
      point = cartesian(point), point[0] -= cosRadius;
      cartesianNormalizeInPlace(point);
      var radius = acos$1(-point[1]);
      return ((-point[2] < 0 ? -radius : radius) + tau$2 - epsilon$2) % tau$2;
    }

    function clipBuffer() {
      var lines = [],
          line;
      return {
        point: function(x, y) {
          line.push([x, y]);
        },
        lineStart: function() {
          lines.push(line = []);
        },
        lineEnd: noop$3,
        rejoin: function() {
          if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
        },
        result: function() {
          var result = lines;
          lines = [];
          line = null;
          return result;
        }
      };
    }

    function pointEqual(a, b) {
      return abs$1(a[0] - b[0]) < epsilon$2 && abs$1(a[1] - b[1]) < epsilon$2;
    }

    function Intersection(point, points, other, entry) {
      this.x = point;
      this.z = points;
      this.o = other; // another intersection
      this.e = entry; // is an entry?
      this.v = false; // visited
      this.n = this.p = null; // next & previous
    }

    // A generalized polygon clipping algorithm: given a polygon that has been cut
    // into its visible line segments, and rejoins the segments by interpolating
    // along the clip edge.
    function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
      var subject = [],
          clip = [],
          i,
          n;

      segments.forEach(function(segment) {
        if ((n = segment.length - 1) <= 0) return;
        var n, p0 = segment[0], p1 = segment[n], x;

        // If the first and last points of a segment are coincident, then treat as a
        // closed ring. TODO if all rings are closed, then the winding order of the
        // exterior ring should be checked.
        if (pointEqual(p0, p1)) {
          stream.lineStart();
          for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
          stream.lineEnd();
          return;
        }

        subject.push(x = new Intersection(p0, segment, null, true));
        clip.push(x.o = new Intersection(p0, null, x, false));
        subject.push(x = new Intersection(p1, segment, null, false));
        clip.push(x.o = new Intersection(p1, null, x, true));
      });

      if (!subject.length) return;

      clip.sort(compareIntersection);
      link(subject);
      link(clip);

      for (i = 0, n = clip.length; i < n; ++i) {
        clip[i].e = startInside = !startInside;
      }

      var start = subject[0],
          points,
          point;

      while (1) {
        // Find first unvisited intersection.
        var current = start,
            isSubject = true;
        while (current.v) if ((current = current.n) === start) return;
        points = current.z;
        stream.lineStart();
        do {
          current.v = current.o.v = true;
          if (current.e) {
            if (isSubject) {
              for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.n.x, 1, stream);
            }
            current = current.n;
          } else {
            if (isSubject) {
              points = current.p.z;
              for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
            } else {
              interpolate(current.x, current.p.x, -1, stream);
            }
            current = current.p;
          }
          current = current.o;
          points = current.z;
          isSubject = !isSubject;
        } while (!current.v);
        stream.lineEnd();
      }
    }

    function link(array) {
      if (!(n = array.length)) return;
      var n,
          i = 0,
          a = array[0],
          b;
      while (++i < n) {
        a.n = b = array[i];
        b.p = a;
        a = b;
      }
      a.n = b = array[0];
      b.p = a;
    }

    var sum$1 = adder();

    function polygonContains(polygon, point) {
      var lambda = point[0],
          phi = point[1],
          sinPhi = sin$1(phi),
          normal = [sin$1(lambda), -cos$1(lambda), 0],
          angle = 0,
          winding = 0;

      sum$1.reset();

      if (sinPhi === 1) phi = halfPi$1 + epsilon$2;
      else if (sinPhi === -1) phi = -halfPi$1 - epsilon$2;

      for (var i = 0, n = polygon.length; i < n; ++i) {
        if (!(m = (ring = polygon[i]).length)) continue;
        var ring,
            m,
            point0 = ring[m - 1],
            lambda0 = point0[0],
            phi0 = point0[1] / 2 + quarterPi,
            sinPhi0 = sin$1(phi0),
            cosPhi0 = cos$1(phi0);

        for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
          var point1 = ring[j],
              lambda1 = point1[0],
              phi1 = point1[1] / 2 + quarterPi,
              sinPhi1 = sin$1(phi1),
              cosPhi1 = cos$1(phi1),
              delta = lambda1 - lambda0,
              sign = delta >= 0 ? 1 : -1,
              absDelta = sign * delta,
              antimeridian = absDelta > pi$2,
              k = sinPhi0 * sinPhi1;

          sum$1.add(atan2$1(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
          angle += antimeridian ? delta + sign * tau$2 : delta;

          // Are the longitudes either side of the point’s meridian (lambda),
          // and are the latitudes smaller than the parallel (phi)?
          if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
            var arc = cartesianCross(cartesian(point0), cartesian(point1));
            cartesianNormalizeInPlace(arc);
            var intersection = cartesianCross(normal, arc);
            cartesianNormalizeInPlace(intersection);
            var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
            if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
              winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
          }
        }
      }

      // First, determine whether the South pole is inside or outside:
      //
      // It is inside if:
      // * the polygon winds around it in a clockwise direction.
      // * the polygon does not (cumulatively) wind around it, but has a negative
      //   (counter-clockwise) area.
      //
      // Second, count the (signed) number of times a segment crosses a lambda
      // from the point to the South pole.  If it is zero, then the point is the
      // same side as the South pole.

      return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);
    }

    function ascending$4(a, b) {
      return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector$3(compare) {
      if (compare.length === 1) compare = ascendingComparator$3(compare);
      return {
        left: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0) lo = mid + 1;
            else hi = mid;
          }
          return lo;
        },
        right: function(a, x, lo, hi) {
          if (lo == null) lo = 0;
          if (hi == null) hi = a.length;
          while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0) hi = mid;
            else lo = mid + 1;
          }
          return lo;
        }
      };
    }

    function ascendingComparator$3(f) {
      return function(d, x) {
        return ascending$4(f(d), x);
      };
    }

    var ascendingBisect$3 = bisector$3(ascending$4);

    function range$3(start, stop, step) {
      start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

      var i = -1,
          n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
          range = new Array(n);

      while (++i < n) {
        range[i] = start + i * step;
      }

      return range;
    }

    function merge$1(arrays) {
      var n = arrays.length,
          m,
          i = -1,
          j = 0,
          merged,
          array;

      while (++i < n) j += arrays[i].length;
      merged = new Array(j);

      while (--n >= 0) {
        array = arrays[n];
        m = array.length;
        while (--m >= 0) {
          merged[--j] = array[m];
        }
      }

      return merged;
    }

    function clip$2(pointVisible, clipLine, interpolate, start) {
      return function(sink) {
        var line = clipLine(sink),
            ringBuffer = clipBuffer(),
            ringSink = clipLine(ringBuffer),
            polygonStarted = false,
            polygon,
            segments,
            ring;

        var clip = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() {
            clip.point = pointRing;
            clip.lineStart = ringStart;
            clip.lineEnd = ringEnd;
            segments = [];
            polygon = [];
          },
          polygonEnd: function() {
            clip.point = point;
            clip.lineStart = lineStart;
            clip.lineEnd = lineEnd;
            segments = merge$1(segments);
            var startInside = polygonContains(polygon, start);
            if (segments.length) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
            } else if (startInside) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              interpolate(null, null, 1, sink);
              sink.lineEnd();
            }
            if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
            segments = polygon = null;
          },
          sphere: function() {
            sink.polygonStart();
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
            sink.polygonEnd();
          }
        };

        function point(lambda, phi) {
          if (pointVisible(lambda, phi)) sink.point(lambda, phi);
        }

        function pointLine(lambda, phi) {
          line.point(lambda, phi);
        }

        function lineStart() {
          clip.point = pointLine;
          line.lineStart();
        }

        function lineEnd() {
          clip.point = point;
          line.lineEnd();
        }

        function pointRing(lambda, phi) {
          ring.push([lambda, phi]);
          ringSink.point(lambda, phi);
        }

        function ringStart() {
          ringSink.lineStart();
          ring = [];
        }

        function ringEnd() {
          pointRing(ring[0][0], ring[0][1]);
          ringSink.lineEnd();

          var clean = ringSink.clean(),
              ringSegments = ringBuffer.result(),
              i, n = ringSegments.length, m,
              segment,
              point;

          ring.pop();
          polygon.push(ring);
          ring = null;

          if (!n) return;

          // No intersections.
          if (clean & 1) {
            segment = ringSegments[0];
            if ((m = segment.length - 1) > 0) {
              if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
              sink.lineStart();
              for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
              sink.lineEnd();
            }
            return;
          }

          // Rejoin connected segments.
          // TODO reuse ringBuffer.rejoin()?
          if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

          segments.push(ringSegments.filter(validSegment));
        }

        return clip;
      };
    }

    function validSegment(segment) {
      return segment.length > 1;
    }

    // Intersections are sorted along the clip edge. For both antimeridian cutting
    // and circle clipping, the same comparison is used.
    function compareIntersection(a, b) {
      return ((a = a.x)[0] < 0 ? a[1] - halfPi$1 - epsilon$2 : halfPi$1 - a[1])
           - ((b = b.x)[0] < 0 ? b[1] - halfPi$1 - epsilon$2 : halfPi$1 - b[1]);
    }

    var clipAntimeridian = clip$2(
      function() { return true; },
      clipAntimeridianLine,
      clipAntimeridianInterpolate,
      [-pi$2, -halfPi$1]
    );

    // Takes a line and cuts into visible segments. Return values: 0 - there were
    // intersections or the line was empty; 1 - no intersections; 2 - there were
    // intersections, and the first and last segments should be rejoined.
    function clipAntimeridianLine(stream) {
      var lambda0 = NaN,
          phi0 = NaN,
          sign0 = NaN,
          clean; // no intersections

      return {
        lineStart: function() {
          stream.lineStart();
          clean = 1;
        },
        point: function(lambda1, phi1) {
          var sign1 = lambda1 > 0 ? pi$2 : -pi$2,
              delta = abs$1(lambda1 - lambda0);
          if (abs$1(delta - pi$2) < epsilon$2) { // line crosses a pole
            stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$1 : -halfPi$1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            stream.point(lambda1, phi0);
            clean = 0;
          } else if (sign0 !== sign1 && delta >= pi$2) { // line crosses antimeridian
            if (abs$1(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
            if (abs$1(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
            phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            clean = 0;
          }
          stream.point(lambda0 = lambda1, phi0 = phi1);
          sign0 = sign1;
        },
        lineEnd: function() {
          stream.lineEnd();
          lambda0 = phi0 = NaN;
        },
        clean: function() {
          return 2 - clean; // if intersections, rejoin first and last segments
        }
      };
    }

    function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
      var cosPhi0,
          cosPhi1,
          sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
      return abs$1(sinLambda0Lambda1) > epsilon$2
          ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
              - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
              / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
          : (phi0 + phi1) / 2;
    }

    function clipAntimeridianInterpolate(from, to, direction, stream) {
      var phi;
      if (from == null) {
        phi = direction * halfPi$1;
        stream.point(-pi$2, phi);
        stream.point(0, phi);
        stream.point(pi$2, phi);
        stream.point(pi$2, 0);
        stream.point(pi$2, -phi);
        stream.point(0, -phi);
        stream.point(-pi$2, -phi);
        stream.point(-pi$2, 0);
        stream.point(-pi$2, phi);
      } else if (abs$1(from[0] - to[0]) > epsilon$2) {
        var lambda = from[0] < to[0] ? pi$2 : -pi$2;
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function clipCircle(radius) {
      var cr = cos$1(radius),
          delta = 6 * radians,
          smallRadius = cr > 0,
          notHemisphere = abs$1(cr) > epsilon$2; // TODO optimise for this common case

      function interpolate(from, to, direction, stream) {
        circleStream(stream, radius, delta, direction, from, to);
      }

      function visible(lambda, phi) {
        return cos$1(lambda) * cos$1(phi) > cr;
      }

      // Takes a line and cuts into visible segments. Return values used for polygon
      // clipping: 0 - there were intersections or the line was empty; 1 - no
      // intersections 2 - there were intersections, and the first and last segments
      // should be rejoined.
      function clipLine(stream) {
        var point0, // previous point
            c0, // code for previous point
            v0, // visibility of previous point
            v00, // visibility of first point
            clean; // no intersections
        return {
          lineStart: function() {
            v00 = v0 = false;
            clean = 1;
          },
          point: function(lambda, phi) {
            var point1 = [lambda, phi],
                point2,
                v = visible(lambda, phi),
                c = smallRadius
                  ? v ? 0 : code(lambda, phi)
                  : v ? code(lambda + (lambda < 0 ? pi$2 : -pi$2), phi) : 0;
            if (!point0 && (v00 = v0 = v)) stream.lineStart();
            // Handle degeneracies.
            // TODO ignore if not clipping polygons.
            if (v !== v0) {
              point2 = intersect(point0, point1);
              if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
                point1[0] += epsilon$2;
                point1[1] += epsilon$2;
                v = visible(point1[0], point1[1]);
              }
            }
            if (v !== v0) {
              clean = 0;
              if (v) {
                // outside going in
                stream.lineStart();
                point2 = intersect(point1, point0);
                stream.point(point2[0], point2[1]);
              } else {
                // inside going out
                point2 = intersect(point0, point1);
                stream.point(point2[0], point2[1]);
                stream.lineEnd();
              }
              point0 = point2;
            } else if (notHemisphere && point0 && smallRadius ^ v) {
              var t;
              // If the codes for two points are different, or are both zero,
              // and there this segment intersects with the small circle.
              if (!(c & c0) && (t = intersect(point1, point0, true))) {
                clean = 0;
                if (smallRadius) {
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1]);
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                } else {
                  stream.point(t[1][0], t[1][1]);
                  stream.lineEnd();
                  stream.lineStart();
                  stream.point(t[0][0], t[0][1]);
                }
              }
            }
            if (v && (!point0 || !pointEqual(point0, point1))) {
              stream.point(point1[0], point1[1]);
            }
            point0 = point1, v0 = v, c0 = c;
          },
          lineEnd: function() {
            if (v0) stream.lineEnd();
            point0 = null;
          },
          // Rejoin first and last segments if there were intersections and the first
          // and last points were visible.
          clean: function() {
            return clean | ((v00 && v0) << 1);
          }
        };
      }

      // Intersects the great circle between a and b with the clip circle.
      function intersect(a, b, two) {
        var pa = cartesian(a),
            pb = cartesian(b);

        // We have two planes, n1.p = d1 and n2.p = d2.
        // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
        var n1 = [1, 0, 0], // normal
            n2 = cartesianCross(pa, pb),
            n2n2 = cartesianDot(n2, n2),
            n1n2 = n2[0], // cartesianDot(n1, n2),
            determinant = n2n2 - n1n2 * n1n2;

        // Two polar points.
        if (!determinant) return !two && a;

        var c1 =  cr * n2n2 / determinant,
            c2 = -cr * n1n2 / determinant,
            n1xn2 = cartesianCross(n1, n2),
            A = cartesianScale(n1, c1),
            B = cartesianScale(n2, c2);
        cartesianAddInPlace(A, B);

        // Solve |p(t)|^2 = 1.
        var u = n1xn2,
            w = cartesianDot(A, u),
            uu = cartesianDot(u, u),
            t2 = w * w - uu * (cartesianDot(A, A) - 1);

        if (t2 < 0) return;

        var t = sqrt$2(t2),
            q = cartesianScale(u, (-w - t) / uu);
        cartesianAddInPlace(q, A);
        q = spherical(q);

        if (!two) return q;

        // Two intersection points.
        var lambda0 = a[0],
            lambda1 = b[0],
            phi0 = a[1],
            phi1 = b[1],
            z;

        if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

        var delta = lambda1 - lambda0,
            polar = abs$1(delta - pi$2) < epsilon$2,
            meridian = polar || delta < epsilon$2;

        if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

        // Check that the first point is between a and b.
        if (meridian
            ? polar
              ? phi0 + phi1 > 0 ^ q[1] < (abs$1(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
              : phi0 <= q[1] && q[1] <= phi1
            : delta > pi$2 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
          var q1 = cartesianScale(u, (-w + t) / uu);
          cartesianAddInPlace(q1, A);
          return [q, spherical(q1)];
        }
      }

      // Generates a 4-bit vector representing the location of a point relative to
      // the small circle's bounding box.
      function code(lambda, phi) {
        var r = smallRadius ? radius : pi$2 - radius,
            code = 0;
        if (lambda < -r) code |= 1; // left
        else if (lambda > r) code |= 2; // right
        if (phi < -r) code |= 4; // below
        else if (phi > r) code |= 8; // above
        return code;
      }

      return clip$2(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$2, radius - pi$2]);
    }

    function clipLine(a, b, x0, y0, x1, y1) {
      var ax = a[0],
          ay = a[1],
          bx = b[0],
          by = b[1],
          t0 = 0,
          t1 = 1,
          dx = bx - ax,
          dy = by - ay,
          r;

      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
      if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
      return true;
    }

    var clipMax = 1e9, clipMin = -clipMax;

    // TODO Use d3-polygon’s polygonContains here for the ring check?
    // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

    function clipRectangle(x0, y0, x1, y1) {

      function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }

      function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null
            || (a = corner(from, direction)) !== (a1 = corner(to, direction))
            || comparePoint(from, to) < 0 ^ direction > 0) {
          do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          stream.point(to[0], to[1]);
        }
      }

      function corner(p, direction) {
        return abs$1(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
            : abs$1(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
            : abs$1(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
            : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
      }

      function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
      }

      function comparePoint(a, b) {
        var ca = corner(a, 1),
            cb = corner(b, 1);
        return ca !== cb ? ca - cb
            : ca === 0 ? b[1] - a[1]
            : ca === 1 ? a[0] - b[0]
            : ca === 2 ? a[1] - b[1]
            : b[0] - a[0];
      }

      return function(stream) {
        var activeStream = stream,
            bufferStream = clipBuffer(),
            segments,
            polygon,
            ring,
            x__, y__, v__, // first point
            x_, y_, v_, // previous point
            first,
            clean;

        var clipStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: polygonStart,
          polygonEnd: polygonEnd
        };

        function point(x, y) {
          if (visible(x, y)) activeStream.point(x, y);
        }

        function polygonInside() {
          var winding = 0;

          for (var i = 0, n = polygon.length; i < n; ++i) {
            for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
              a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
              if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
              else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
            }
          }

          return winding;
        }

        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
          activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }

        function polygonEnd() {
          var startInside = polygonInside(),
              cleanInside = clean && startInside,
              visible = (segments = merge$1(segments)).length;
          if (cleanInside || visible) {
            stream.polygonStart();
            if (cleanInside) {
              stream.lineStart();
              interpolate(null, null, 1, stream);
              stream.lineEnd();
            }
            if (visible) {
              clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
            }
            stream.polygonEnd();
          }
          activeStream = stream, segments = polygon = ring = null;
        }

        function lineStart() {
          clipStream.point = linePoint;
          if (polygon) polygon.push(ring = []);
          first = true;
          v_ = false;
          x_ = y_ = NaN;
        }

        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
          if (segments) {
            linePoint(x__, y__);
            if (v__ && v_) bufferStream.rejoin();
            segments.push(bufferStream.result());
          }
          clipStream.point = point;
          if (v_) activeStream.lineEnd();
        }

        function linePoint(x, y) {
          var v = visible(x, y);
          if (polygon) ring.push([x, y]);
          if (first) {
            x__ = x, y__ = y, v__ = v;
            first = false;
            if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
            }
          } else {
            if (v && v_) activeStream.point(x, y);
            else {
              var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                  b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
              if (clipLine(a, b, x0, y0, x1, y1)) {
                if (!v_) {
                  activeStream.lineStart();
                  activeStream.point(a[0], a[1]);
                }
                activeStream.point(b[0], b[1]);
                if (!v) activeStream.lineEnd();
                clean = false;
              } else if (v) {
                activeStream.lineStart();
                activeStream.point(x, y);
                clean = false;
              }
            }
          }
          x_ = x, y_ = y, v_ = v;
        }

        return clipStream;
      };
    }

    var lengthSum = adder();

    function graticuleX(y0, y1, dy) {
      var y = range$3(y0, y1 - epsilon$2, dy).concat(y1);
      return function(x) { return y.map(function(y) { return [x, y]; }); };
    }

    function graticuleY(x0, x1, dx) {
      var x = range$3(x0, x1 - epsilon$2, dx).concat(x1);
      return function(y) { return x.map(function(x) { return [x, y]; }); };
    }

    function graticule() {
      var x1, x0, X1, X0,
          y1, y0, Y1, Y0,
          dx = 10, dy = dx, DX = 90, DY = 360,
          x, y, X, Y,
          precision = 2.5;

      function graticule() {
        return {type: "MultiLineString", coordinates: lines()};
      }

      function lines() {
        return range$3(ceil(X0 / DX) * DX, X1, DX).map(X)
            .concat(range$3(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
            .concat(range$3(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs$1(x % DX) > epsilon$2; }).map(x))
            .concat(range$3(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs$1(y % DY) > epsilon$2; }).map(y));
      }

      graticule.lines = function() {
        return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
      };

      graticule.outline = function() {
        return {
          type: "Polygon",
          coordinates: [
            X(X0).concat(
            Y(Y1).slice(1),
            X(X1).reverse().slice(1),
            Y(Y0).reverse().slice(1))
          ]
        };
      };

      graticule.extent = function(_) {
        if (!arguments.length) return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
      };

      graticule.extentMajor = function(_) {
        if (!arguments.length) return [[X0, Y0], [X1, Y1]];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
      };

      graticule.extentMinor = function(_) {
        if (!arguments.length) return [[x0, y0], [x1, y1]];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
      };

      graticule.step = function(_) {
        if (!arguments.length) return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
      };

      graticule.stepMajor = function(_) {
        if (!arguments.length) return [DX, DY];
        DX = +_[0], DY = +_[1];
        return graticule;
      };

      graticule.stepMinor = function(_) {
        if (!arguments.length) return [dx, dy];
        dx = +_[0], dy = +_[1];
        return graticule;
      };

      graticule.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = graticuleX(y0, y1, 90);
        y = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule;
      };

      return graticule
          .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
          .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
    }

    function identity$6(x) {
      return x;
    }

    var areaSum$1 = adder(),
        areaRingSum$1 = adder(),
        x00,
        y00,
        x0$1,
        y0$1;

    var areaStream$1 = {
      point: noop$3,
      lineStart: noop$3,
      lineEnd: noop$3,
      polygonStart: function() {
        areaStream$1.lineStart = areaRingStart$1;
        areaStream$1.lineEnd = areaRingEnd$1;
      },
      polygonEnd: function() {
        areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$3;
        areaSum$1.add(abs$1(areaRingSum$1));
        areaRingSum$1.reset();
      },
      result: function() {
        var area = areaSum$1 / 2;
        areaSum$1.reset();
        return area;
      }
    };

    function areaRingStart$1() {
      areaStream$1.point = areaPointFirst$1;
    }

    function areaPointFirst$1(x, y) {
      areaStream$1.point = areaPoint$1;
      x00 = x0$1 = x, y00 = y0$1 = y;
    }

    function areaPoint$1(x, y) {
      areaRingSum$1.add(y0$1 * x - x0$1 * y);
      x0$1 = x, y0$1 = y;
    }

    function areaRingEnd$1() {
      areaPoint$1(x00, y00);
    }

    var x0$2 = Infinity,
        y0$2 = x0$2,
        x1 = -x0$2,
        y1 = x1;

    var boundsStream$1 = {
      point: boundsPoint$1,
      lineStart: noop$3,
      lineEnd: noop$3,
      polygonStart: noop$3,
      polygonEnd: noop$3,
      result: function() {
        var bounds = [[x0$2, y0$2], [x1, y1]];
        x1 = y1 = -(y0$2 = x0$2 = Infinity);
        return bounds;
      }
    };

    function boundsPoint$1(x, y) {
      if (x < x0$2) x0$2 = x;
      if (x > x1) x1 = x;
      if (y < y0$2) y0$2 = y;
      if (y > y1) y1 = y;
    }

    // TODO Enforce positive area for exterior, negative area for interior?

    var X0$1 = 0,
        Y0$1 = 0,
        Z0$1 = 0,
        X1$1 = 0,
        Y1$1 = 0,
        Z1$1 = 0,
        X2$2 = 0,
        Y2$2 = 0,
        Z2$1 = 0,
        x00$1,
        y00$1,
        x0$3,
        y0$3;

    var centroidStream$1 = {
      point: centroidPoint$1,
      lineStart: centroidLineStart$1,
      lineEnd: centroidLineEnd$1,
      polygonStart: function() {
        centroidStream$1.lineStart = centroidRingStart$1;
        centroidStream$1.lineEnd = centroidRingEnd$1;
      },
      polygonEnd: function() {
        centroidStream$1.point = centroidPoint$1;
        centroidStream$1.lineStart = centroidLineStart$1;
        centroidStream$1.lineEnd = centroidLineEnd$1;
      },
      result: function() {
        var centroid = Z2$1 ? [X2$2 / Z2$1, Y2$2 / Z2$1]
            : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
            : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
            : [NaN, NaN];
        X0$1 = Y0$1 = Z0$1 =
        X1$1 = Y1$1 = Z1$1 =
        X2$2 = Y2$2 = Z2$1 = 0;
        return centroid;
      }
    };

    function centroidPoint$1(x, y) {
      X0$1 += x;
      Y0$1 += y;
      ++Z0$1;
    }

    function centroidLineStart$1() {
      centroidStream$1.point = centroidPointFirstLine;
    }

    function centroidPointFirstLine(x, y) {
      centroidStream$1.point = centroidPointLine;
      centroidPoint$1(x0$3 = x, y0$3 = y);
    }

    function centroidPointLine(x, y) {
      var dx = x - x0$3, dy = y - y0$3, z = sqrt$2(dx * dx + dy * dy);
      X1$1 += z * (x0$3 + x) / 2;
      Y1$1 += z * (y0$3 + y) / 2;
      Z1$1 += z;
      centroidPoint$1(x0$3 = x, y0$3 = y);
    }

    function centroidLineEnd$1() {
      centroidStream$1.point = centroidPoint$1;
    }

    function centroidRingStart$1() {
      centroidStream$1.point = centroidPointFirstRing;
    }

    function centroidRingEnd$1() {
      centroidPointRing(x00$1, y00$1);
    }

    function centroidPointFirstRing(x, y) {
      centroidStream$1.point = centroidPointRing;
      centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
    }

    function centroidPointRing(x, y) {
      var dx = x - x0$3,
          dy = y - y0$3,
          z = sqrt$2(dx * dx + dy * dy);

      X1$1 += z * (x0$3 + x) / 2;
      Y1$1 += z * (y0$3 + y) / 2;
      Z1$1 += z;

      z = y0$3 * x - x0$3 * y;
      X2$2 += z * (x0$3 + x);
      Y2$2 += z * (y0$3 + y);
      Z2$1 += z * 3;
      centroidPoint$1(x0$3 = x, y0$3 = y);
    }

    function PathContext(context) {
      this._context = context;
    }

    PathContext.prototype = {
      _radius: 4.5,
      pointRadius: function(_) {
        return this._radius = _, this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._context.moveTo(x, y);
            this._point = 1;
            break;
          }
          case 1: {
            this._context.lineTo(x, y);
            break;
          }
          default: {
            this._context.moveTo(x + this._radius, y);
            this._context.arc(x, y, this._radius, 0, tau$2);
            break;
          }
        }
      },
      result: noop$3
    };

    var lengthSum$1 = adder(),
        lengthRing,
        x00$2,
        y00$2,
        x0$4,
        y0$4;

    var lengthStream = {
      point: noop$3,
      lineStart: function() {
        lengthStream.point = lengthPointFirst;
      },
      lineEnd: function() {
        if (lengthRing) lengthPoint(x00$2, y00$2);
        lengthStream.point = noop$3;
      },
      polygonStart: function() {
        lengthRing = true;
      },
      polygonEnd: function() {
        lengthRing = null;
      },
      result: function() {
        var length = +lengthSum$1;
        lengthSum$1.reset();
        return length;
      }
    };

    function lengthPointFirst(x, y) {
      lengthStream.point = lengthPoint;
      x00$2 = x0$4 = x, y00$2 = y0$4 = y;
    }

    function lengthPoint(x, y) {
      x0$4 -= x, y0$4 -= y;
      lengthSum$1.add(sqrt$2(x0$4 * x0$4 + y0$4 * y0$4));
      x0$4 = x, y0$4 = y;
    }

    function PathString() {
      this._string = [];
    }

    PathString.prototype = {
      _radius: 4.5,
      _circle: circle$1(4.5),
      pointRadius: function(_) {
        if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
        return this;
      },
      polygonStart: function() {
        this._line = 0;
      },
      polygonEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line === 0) this._string.push("Z");
        this._point = NaN;
      },
      point: function(x, y) {
        switch (this._point) {
          case 0: {
            this._string.push("M", x, ",", y);
            this._point = 1;
            break;
          }
          case 1: {
            this._string.push("L", x, ",", y);
            break;
          }
          default: {
            if (this._circle == null) this._circle = circle$1(this._radius);
            this._string.push("M", x, ",", y, this._circle);
            break;
          }
        }
      },
      result: function() {
        if (this._string.length) {
          var result = this._string.join("");
          this._string = [];
          return result;
        } else {
          return null;
        }
      }
    };

    function circle$1(radius) {
      return "m0," + radius
          + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
          + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
          + "z";
    }

    function geoPath(projection, context) {
      var pointRadius = 4.5,
          projectionStream,
          contextStream;

      function path(object) {
        if (object) {
          if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
          geoStream(object, projectionStream(contextStream));
        }
        return contextStream.result();
      }

      path.area = function(object) {
        geoStream(object, projectionStream(areaStream$1));
        return areaStream$1.result();
      };

      path.measure = function(object) {
        geoStream(object, projectionStream(lengthStream));
        return lengthStream.result();
      };

      path.bounds = function(object) {
        geoStream(object, projectionStream(boundsStream$1));
        return boundsStream$1.result();
      };

      path.centroid = function(object) {
        geoStream(object, projectionStream(centroidStream$1));
        return centroidStream$1.result();
      };

      path.projection = function(_) {
        return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$6) : (projection = _).stream, path) : projection;
      };

      path.context = function(_) {
        if (!arguments.length) return context;
        contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
        if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
        return path;
      };

      path.pointRadius = function(_) {
        if (!arguments.length) return pointRadius;
        pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
        return path;
      };

      return path.projection(projection).context(context);
    }

    function transformer$3(methods) {
      return function(stream) {
        var s = new TransformStream;
        for (var key in methods) s[key] = methods[key];
        s.stream = stream;
        return s;
      };
    }

    function TransformStream() {}

    TransformStream.prototype = {
      constructor: TransformStream,
      point: function(x, y) { this.stream.point(x, y); },
      sphere: function() { this.stream.sphere(); },
      lineStart: function() { this.stream.lineStart(); },
      lineEnd: function() { this.stream.lineEnd(); },
      polygonStart: function() { this.stream.polygonStart(); },
      polygonEnd: function() { this.stream.polygonEnd(); }
    };

    function fit(projection, fitBounds, object) {
      var clip = projection.clipExtent && projection.clipExtent();
      projection.scale(150).translate([0, 0]);
      if (clip != null) projection.clipExtent(null);
      geoStream(object, projection.stream(boundsStream$1));
      fitBounds(boundsStream$1.result());
      if (clip != null) projection.clipExtent(clip);
      return projection;
    }

    function fitExtent(projection, extent, object) {
      return fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0],
            h = extent[1][1] - extent[0][1],
            k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
            x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
            y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitSize(projection, size, object) {
      return fitExtent(projection, [[0, 0], size], object);
    }

    function fitWidth(projection, width, object) {
      return fit(projection, function(b) {
        var w = +width,
            k = w / (b[1][0] - b[0][0]),
            x = (w - k * (b[1][0] + b[0][0])) / 2,
            y = -k * b[0][1];
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    function fitHeight(projection, height, object) {
      return fit(projection, function(b) {
        var h = +height,
            k = h / (b[1][1] - b[0][1]),
            x = -k * b[0][0],
            y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([x, y]);
      }, object);
    }

    var maxDepth = 16, // maximum depth of subdivision
        cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

    function resample(project, delta2) {
      return +delta2 ? resample$1(project, delta2) : resampleNone(project);
    }

    function resampleNone(project) {
      return transformer$3({
        point: function(x, y) {
          x = project(x, y);
          this.stream.point(x[0], x[1]);
        }
      });
    }

    function resample$1(project, delta2) {

      function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0,
            dy = y1 - y0,
            d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
          var a = a0 + a1,
              b = b0 + b1,
              c = c0 + c1,
              m = sqrt$2(a * a + b * b + c * c),
              phi2 = asin$1(c /= m),
              lambda2 = abs$1(abs$1(c) - 1) < epsilon$2 || abs$1(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2$1(b, a),
              p = project(lambda2, phi2),
              x2 = p[0],
              y2 = p[1],
              dx2 = x2 - x0,
              dy2 = y2 - y0,
              dz = dy * dx2 - dx * dy2;
          if (dz * dz / d2 > delta2 // perpendicular projected distance
              || abs$1((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
              || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
            stream.point(x2, y2);
            resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
          }
        }
      }
      return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, // first point
            lambda0, x0, y0, a0, b0, c0; // previous point

        var resampleStream = {
          point: point,
          lineStart: lineStart,
          lineEnd: lineEnd,
          polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
          polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
        };

        function point(x, y) {
          x = project(x, y);
          stream.point(x[0], x[1]);
        }

        function lineStart() {
          x0 = NaN;
          resampleStream.point = linePoint;
          stream.lineStart();
        }

        function linePoint(lambda, phi) {
          var c = cartesian([lambda, phi]), p = project(lambda, phi);
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
          stream.point(x0, y0);
        }

        function lineEnd() {
          resampleStream.point = point;
          stream.lineEnd();
        }

        function ringStart() {
          lineStart();
          resampleStream.point = ringPoint;
          resampleStream.lineEnd = ringEnd;
        }

        function ringPoint(lambda, phi) {
          linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
          resampleStream.point = linePoint;
        }

        function ringEnd() {
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
          resampleStream.lineEnd = lineEnd;
          lineEnd();
        }

        return resampleStream;
      };
    }

    var transformRadians = transformer$3({
      point: function(x, y) {
        this.stream.point(x * radians, y * radians);
      }
    });

    function transformRotate(rotate) {
      return transformer$3({
        point: function(x, y) {
          var r = rotate(x, y);
          return this.stream.point(r[0], r[1]);
        }
      });
    }

    function scaleTranslate(k, dx, dy) {
      function transform(x, y) {
        return [dx + k * x, dy - k * y];
      }
      transform.invert = function(x, y) {
        return [(x - dx) / k, (dy - y) / k];
      };
      return transform;
    }

    function scaleTranslateRotate(k, dx, dy, alpha) {
      var cosAlpha = cos$1(alpha),
          sinAlpha = sin$1(alpha),
          a = cosAlpha * k,
          b = sinAlpha * k,
          ai = cosAlpha / k,
          bi = sinAlpha / k,
          ci = (sinAlpha * dy - cosAlpha * dx) / k,
          fi = (sinAlpha * dx + cosAlpha * dy) / k;
      function transform(x, y) {
        return [a * x - b * y + dx, dy - b * x - a * y];
      }
      transform.invert = function(x, y) {
        return [ai * x - bi * y + ci, fi - bi * x - ai * y];
      };
      return transform;
    }

    function projection(project) {
      return projectionMutator(function() { return project; })();
    }

    function projectionMutator(projectAt) {
      var project,
          k = 150, // scale
          x = 480, y = 250, // translate
          lambda = 0, phi = 0, // center
          deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
          alpha = 0, // post-rotate
          theta = null, preclip = clipAntimeridian, // pre-clip angle
          x0 = null, y0, x1, y1, postclip = identity$6, // post-clip extent
          delta2 = 0.5, // precision
          projectResample,
          projectTransform,
          projectRotateTransform,
          cache,
          cacheStream;

      function projection(point) {
        return projectRotateTransform(point[0] * radians, point[1] * radians);
      }

      function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [point[0] * degrees$1, point[1] * degrees$1];
      }

      projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
      };

      projection.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
      };

      projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
      };

      projection.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
      };

      projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      projection.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
      };

      projection.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
      };

      projection.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
      };

      projection.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
      };

      projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees$1;
      };

      projection.precision = function(_) {
        return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$2(delta2);
      };

      projection.fitExtent = function(extent, object) {
        return fitExtent(projection, extent, object);
      };

      projection.fitSize = function(size, object) {
        return fitSize(projection, size, object);
      };

      projection.fitWidth = function(width, object) {
        return fitWidth(projection, width, object);
      };

      projection.fitHeight = function(height, object) {
        return fitHeight(projection, height, object);
      };

      function recenter() {
        var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
            transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
        rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = compose(project, transform);
        projectRotateTransform = compose(rotate, projectTransform);
        projectResample = resample(projectTransform, delta2);
        return reset();
      }

      function reset() {
        cache = cacheStream = null;
        return projection;
      }

      return function() {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
      };
    }

    function conicProjection(projectAt) {
      var phi0 = 0,
          phi1 = pi$2 / 3,
          m = projectionMutator(projectAt),
          p = m(phi0, phi1);

      p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
      };

      return p;
    }

    function cylindricalEqualAreaRaw(phi0) {
      var cosPhi0 = cos$1(phi0);

      function forward(lambda, phi) {
        return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
      }

      forward.invert = function(x, y) {
        return [x / cosPhi0, asin$1(y * cosPhi0)];
      };

      return forward;
    }

    function conicEqualAreaRaw(y0, y1) {
      var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;

      // Are the parallels symmetrical around the Equator?
      if (abs$1(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);

      var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$2(c) / n;

      function project(x, y) {
        var r = sqrt$2(c - 2 * n * sin$1(y)) / n;
        return [r * sin$1(x *= n), r0 - r * cos$1(x)];
      }

      project.invert = function(x, y) {
        var r0y = r0 - y;
        return [atan2$1(x, abs$1(r0y)) / n * sign$1(r0y), asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
      };

      return project;
    }

    function conicEqualArea() {
      return conicProjection(conicEqualAreaRaw)
          .scale(155.424)
          .center([0, 33.6442]);
    }

    function albers() {
      return conicEqualArea()
          .parallels([29.5, 45.5])
          .scale(1070)
          .translate([480, 250])
          .rotate([96, 0])
          .center([-0.6, 38.7]);
    }

    // The projections must have mutually exclusive clip regions on the sphere,
    // as this will avoid emitting interleaving lines and polygons.
    function multiplex(streams) {
      var n = streams.length;
      return {
        point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
        sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
        lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
        lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
        polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
        polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
      };
    }

    // A composite projection for the United States, configured by default for
    // 960×500. The projection also works quite well at 960×600 if you change the
    // scale to 1285 and adjust the translate accordingly. The set of standard
    // parallels for each region comes from USGS, which is published here:
    // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
    function geoAlbersUsa() {
      var cache,
          cacheStream,
          lower48 = albers(), lower48Point,
          alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
          hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
          point, pointStream = {point: function(x, y) { point = [x, y]; }};

      function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null,
            (lower48Point.point(x, y), point)
            || (alaskaPoint.point(x, y), point)
            || (hawaiiPoint.point(x, y), point);
      }

      albersUsa.invert = function(coordinates) {
        var k = lower48.scale(),
            t = lower48.translate(),
            x = (coordinates[0] - t[0]) / k,
            y = (coordinates[1] - t[1]) / k;
        return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
            : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
            : lower48).invert(coordinates);
      };

      albersUsa.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
      };

      albersUsa.precision = function(_) {
        if (!arguments.length) return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return reset();
      };

      albersUsa.scale = function(_) {
        if (!arguments.length) return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
      };

      albersUsa.translate = function(_) {
        if (!arguments.length) return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];

        lower48Point = lower48
            .translate(_)
            .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
            .stream(pointStream);

        alaskaPoint = alaska
            .translate([x - 0.307 * k, y + 0.201 * k])
            .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
            .stream(pointStream);

        hawaiiPoint = hawaii
            .translate([x - 0.205 * k, y + 0.212 * k])
            .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
            .stream(pointStream);

        return reset();
      };

      albersUsa.fitExtent = function(extent, object) {
        return fitExtent(albersUsa, extent, object);
      };

      albersUsa.fitSize = function(size, object) {
        return fitSize(albersUsa, size, object);
      };

      albersUsa.fitWidth = function(width, object) {
        return fitWidth(albersUsa, width, object);
      };

      albersUsa.fitHeight = function(height, object) {
        return fitHeight(albersUsa, height, object);
      };

      function reset() {
        cache = cacheStream = null;
        return albersUsa;
      }

      return albersUsa.scale(1070);
    }

    function azimuthalRaw(scale) {
      return function(x, y) {
        var cx = cos$1(x),
            cy = cos$1(y),
            k = scale(cx * cy);
        return [
          k * cy * sin$1(x),
          k * sin$1(y)
        ];
      }
    }

    function azimuthalInvert(angle) {
      return function(x, y) {
        var z = sqrt$2(x * x + y * y),
            c = angle(z),
            sc = sin$1(c),
            cc = cos$1(c);
        return [
          atan2$1(x * sc, z * cc),
          asin$1(z && y * sc / z)
        ];
      }
    }

    var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
      return sqrt$2(2 / (1 + cxcy));
    });

    azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
      return 2 * asin$1(z / 2);
    });

    function geoAzimuthalEqualArea() {
      return projection(azimuthalEqualAreaRaw)
          .scale(124.75)
          .clipAngle(180 - 1e-3);
    }

    var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
      return (c = acos$1(c)) && c / sin$1(c);
    });

    azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
      return z;
    });

    function geoAzimuthalEquidistant() {
      return projection(azimuthalEquidistantRaw)
          .scale(79.4188)
          .clipAngle(180 - 1e-3);
    }

    function mercatorRaw(lambda, phi) {
      return [lambda, log$3(tan((halfPi$1 + phi) / 2))];
    }

    mercatorRaw.invert = function(x, y) {
      return [x, 2 * atan(exp$1(y)) - halfPi$1];
    };

    function geoMercator() {
      return mercatorProjection(mercatorRaw)
          .scale(961 / tau$2);
    }

    function mercatorProjection(project) {
      var m = projection(project),
          center = m.center,
          scale = m.scale,
          translate = m.translate,
          clipExtent = m.clipExtent,
          x0 = null, y0, x1, y1; // clip extent

      m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
      };

      m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
      };

      m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
      };

      m.clipExtent = function(_) {
        return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
      };

      function reclip() {
        var k = pi$2 * scale(),
            t = m(rotation(m.rotate()).invert([0, 0]));
        return clipExtent(x0 == null
            ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
            ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
            : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
      }

      return reclip();
    }

    function tany(y) {
      return tan((halfPi$1 + y) / 2);
    }

    function conicConformalRaw(y0, y1) {
      var cy0 = cos$1(y0),
          n = y0 === y1 ? sin$1(y0) : log$3(cy0 / cos$1(y1)) / log$3(tany(y1) / tany(y0)),
          f = cy0 * pow$2(tany(y0), n) / n;

      if (!n) return mercatorRaw;

      function project(x, y) {
        if (f > 0) { if (y < -halfPi$1 + epsilon$2) y = -halfPi$1 + epsilon$2; }
        else { if (y > halfPi$1 - epsilon$2) y = halfPi$1 - epsilon$2; }
        var r = f / pow$2(tany(y), n);
        return [r * sin$1(n * x), f - r * cos$1(n * x)];
      }

      project.invert = function(x, y) {
        var fy = f - y, r = sign$1(n) * sqrt$2(x * x + fy * fy);
        return [atan2$1(x, abs$1(fy)) / n * sign$1(fy), 2 * atan(pow$2(f / r, 1 / n)) - halfPi$1];
      };

      return project;
    }

    function geoConicConformal() {
      return conicProjection(conicConformalRaw)
          .scale(109.5)
          .parallels([30, 30]);
    }

    function equirectangularRaw(lambda, phi) {
      return [lambda, phi];
    }

    equirectangularRaw.invert = equirectangularRaw;

    function geoEquirectangular() {
      return projection(equirectangularRaw)
          .scale(152.63);
    }

    function conicEquidistantRaw(y0, y1) {
      var cy0 = cos$1(y0),
          n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
          g = cy0 / n + y0;

      if (abs$1(n) < epsilon$2) return equirectangularRaw;

      function project(x, y) {
        var gy = g - y, nx = n * x;
        return [gy * sin$1(nx), g - gy * cos$1(nx)];
      }

      project.invert = function(x, y) {
        var gy = g - y;
        return [atan2$1(x, abs$1(gy)) / n * sign$1(gy), g - sign$1(n) * sqrt$2(x * x + gy * gy)];
      };

      return project;
    }

    function geoConicEquidistant() {
      return conicProjection(conicEquidistantRaw)
          .scale(131.154)
          .center([0, 13.9389]);
    }

    function gnomonicRaw(x, y) {
      var cy = cos$1(y), k = cos$1(x) * cy;
      return [cy * sin$1(x) / k, sin$1(y) / k];
    }

    gnomonicRaw.invert = azimuthalInvert(atan);

    function geoGnomonic() {
      return projection(gnomonicRaw)
          .scale(144.049)
          .clipAngle(60);
    }

    function scaleTranslate$1(kx, ky, tx, ty) {
      return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$6 : transformer$3({
        point: function(x, y) {
          this.stream.point(x * kx + tx, y * ky + ty);
        }
      });
    }

    function geoIdentity() {
      var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$6, // scale, translate and reflect
          x0 = null, y0, x1, y1, // clip extent
          postclip = identity$6,
          cache,
          cacheStream,
          projection;

      function reset() {
        cache = cacheStream = null;
        return projection;
      }

      return projection = {
        stream: function(stream) {
          return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
        },
        postclip: function(_) {
          return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
        },
        clipExtent: function(_) {
          return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$6) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
        },
        scale: function(_) {
          return arguments.length ? (transform = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;
        },
        translate: function(_) {
          return arguments.length ? (transform = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
        },
        reflectX: function(_) {
          return arguments.length ? (transform = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
        },
        reflectY: function(_) {
          return arguments.length ? (transform = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
        },
        fitExtent: function(extent, object) {
          return fitExtent(projection, extent, object);
        },
        fitSize: function(size, object) {
          return fitSize(projection, size, object);
        },
        fitWidth: function(width, object) {
          return fitWidth(projection, width, object);
        },
        fitHeight: function(height, object) {
          return fitHeight(projection, height, object);
        }
      };
    }

    function naturalEarth1Raw(lambda, phi) {
      var phi2 = phi * phi, phi4 = phi2 * phi2;
      return [
        lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
        phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
      ];
    }

    naturalEarth1Raw.invert = function(x, y) {
      var phi = y, i = 25, delta;
      do {
        var phi2 = phi * phi, phi4 = phi2 * phi2;
        phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
            (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
      } while (abs$1(delta) > epsilon$2 && --i > 0);
      return [
        x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
        phi
      ];
    };

    function geoNaturalEarth1() {
      return projection(naturalEarth1Raw)
          .scale(175.295);
    }

    function orthographicRaw(x, y) {
      return [cos$1(y) * sin$1(x), sin$1(y)];
    }

    orthographicRaw.invert = azimuthalInvert(asin$1);

    function geoOrthographic() {
      return projection(orthographicRaw)
          .scale(249.5)
          .clipAngle(90 + epsilon$2);
    }

    function stereographicRaw(x, y) {
      var cy = cos$1(y), k = 1 + cos$1(x) * cy;
      return [cy * sin$1(x) / k, sin$1(y) / k];
    }

    stereographicRaw.invert = azimuthalInvert(function(z) {
      return 2 * atan(z);
    });

    function geoStereographic() {
      return projection(stereographicRaw)
          .scale(250)
          .clipAngle(142);
    }

    function transverseMercatorRaw(lambda, phi) {
      return [log$3(tan((halfPi$1 + phi) / 2)), -lambda];
    }

    transverseMercatorRaw.invert = function(x, y) {
      return [-y, 2 * atan(exp$1(x)) - halfPi$1];
    };

    function geoTransverseMercator() {
      var m = mercatorProjection(transverseMercatorRaw),
          center = m.center,
          rotate = m.rotate;

      m.center = function(_) {
        return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
      };

      m.rotate = function(_) {
        return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
      };

      return rotate([0, 0, 90])
          .scale(159.155);
    }

    var defaultPath = geoPath();

    var projectionProperties = [
      // standard properties in d3-geo
      'clipAngle',
      'clipExtent',
      'scale',
      'translate',
      'center',
      'rotate',
      'parallels',
      'precision',
      'reflectX',
      'reflectY',

      // extended properties in d3-geo-projections
      'coefficient',
      'distance',
      'fraction',
      'lobes',
      'parallel',
      'radius',
      'ratio',
      'spacing',
      'tilt'
    ];

    /**
     * Augment projections with their type and a copy method.
     */
    function create$1(type, constructor) {
      return function projection() {
        var p = constructor();

        p.type = type;

        p.path = geoPath().projection(p);

        p.copy = p.copy || function() {
          var c = projection();
          projectionProperties.forEach(function(prop) {
            if (p.hasOwnProperty(prop)) c[prop](p[prop]());
          });
          c.path.pointRadius(p.path.pointRadius());
          return c;
        };

        return p;
      };
    }

    function projection$1(type, proj) {
      if (!type || typeof type !== 'string') {
        throw new Error('Projection type must be a name string.');
      }
      type = type.toLowerCase();
      if (arguments.length > 1) {
        projections[type] = create$1(type, proj);
        return this;
      } else {
        return projections.hasOwnProperty(type) ? projections[type] : null;
      }
    }

    function getProjectionPath(proj) {
      return (proj && proj.path) || defaultPath;
    }

    var projections = {
      // base d3-geo projection types
      albers:               albers,
      albersusa:            geoAlbersUsa,
      azimuthalequalarea:   geoAzimuthalEqualArea,
      azimuthalequidistant: geoAzimuthalEquidistant,
      conicconformal:       geoConicConformal,
      conicequalarea:       conicEqualArea,
      conicequidistant:     geoConicEquidistant,
      equirectangular:      geoEquirectangular,
      gnomonic:             geoGnomonic,
      identity:             geoIdentity,
      mercator:             geoMercator,
      naturalEarth1:        geoNaturalEarth1,
      orthographic:         geoOrthographic,
      stereographic:        geoStereographic,
      transversemercator:   geoTransverseMercator
    };

    for (var key$2 in projections) {
      projection$1(key$2, projections[key$2]);
    }

    /**
     * Map GeoJSON data to an SVG path string.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(number, number): *} params.projection - The cartographic
     *   projection to apply.
     * @param {function(object): *} [params.field] - The field with GeoJSON data,
     *   or null if the tuple itself is a GeoJSON feature.
     * @param {string} [params.as='path'] - The output field in which to store
     *   the generated path data (default 'path').
     */
    function GeoPath(params) {
      Transform.call(this, null, params);
    }

    GeoPath.Definition = {
      "type": "GeoPath",
      "metadata": {"modifies": true},
      "params": [
        { "name": "projection", "type": "projection" },
        { "name": "field", "type": "field" },
        { "name": "pointRadius", "type": "number", "expr": true },
        { "name": "as", "type": "string", "default": "path" }
      ]
    };

    var prototype$12 = inherits(GeoPath, Transform);

    prototype$12.transform = function(_, pulse) {
      var out = pulse.fork(pulse.ALL),
          path = this.value,
          field = _.field || identity,
          as = _.as || 'path',
          flag = out.SOURCE;

      function set(t) { t[as] = path(field(t)); }

      if (!path || _.modified()) {
        // parameters updated, reset and reflow
        this.value = path = getProjectionPath(_.projection);
        out.materialize().reflow();
      } else {
        flag = field === identity || pulse.modified(field.fields)
          ? out.ADD_MOD
          : out.ADD;
      }

      var prev = initPath(path, _.pointRadius);
      out.visit(flag, set);
      path.pointRadius(prev);

      return out.modifies(as);
    };

    function initPath(path, pointRadius) {
      var prev = path.pointRadius();
      path.context(null);
      if (pointRadius != null) {
        path.pointRadius(pointRadius);
      }
      return prev;
    }

    /**
     * Geo-code a longitude/latitude point to an x/y coordinate.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(number, number): *} params.projection - The cartographic
     *   projection to apply.
     * @param {Array<function(object): *>} params.fields - A two-element array of
     *   field accessors for the longitude and latitude values.
     * @param {Array<string>} [params.as] - A two-element array of field names
     *   under which to store the result. Defaults to ['x','y'].
     */
    function GeoPoint(params) {
      Transform.call(this, null, params);
    }

    GeoPoint.Definition = {
      "type": "GeoPoint",
      "metadata": {"modifies": true},
      "params": [
        { "name": "projection", "type": "projection", "required": true },
        { "name": "fields", "type": "field", "array": true, "required": true, "length": 2 },
        { "name": "as", "type": "string", "array": true, "length": 2, "default": ["x", "y"] }
      ]
    };

    var prototype$13 = inherits(GeoPoint, Transform);

    prototype$13.transform = function(_, pulse) {
      var proj = _.projection,
          lon = _.fields[0],
          lat = _.fields[1],
          as = _.as || ['x', 'y'],
          x = as[0],
          y = as[1],
          mod;

      function set(t) {
        var xy = proj([lon(t), lat(t)]);
        if (xy) {
          t[x] = xy[0];
          t[y] = xy[1];
        } else {
          t[x] = undefined;
          t[y] = undefined;
        }
      }

      if (_.modified()) {
        // parameters updated, reflow
        pulse = pulse.materialize().reflow(true).visit(pulse.SOURCE, set);
      } else {
        mod = pulse.modified(lon.fields) || pulse.modified(lat.fields);
        pulse.visit(mod ? pulse.ADD_MOD : pulse.ADD, set);
      }

      return pulse.modifies(as);
    };

    /**
     * Annotate items with a geopath shape generator.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(number, number): *} params.projection - The cartographic
     *   projection to apply.
     * @param {function(object): *} [params.field] - The field with GeoJSON data,
     *   or null if the tuple itself is a GeoJSON feature.
     * @param {string} [params.as='shape'] - The output field in which to store
     *   the generated path data (default 'shape').
     */
    function GeoShape(params) {
      Transform.call(this, null, params);
    }

    GeoShape.Definition = {
      "type": "GeoShape",
      "metadata": {"modifies": true},
      "params": [
        { "name": "projection", "type": "projection" },
        { "name": "field", "type": "field", "default": "datum" },
        { "name": "pointRadius", "type": "number", "expr": true },
        { "name": "as", "type": "string", "default": "shape" }
      ]
    };

    var prototype$14 = inherits(GeoShape, Transform);

    prototype$14.transform = function(_, pulse) {
      var out = pulse.fork(pulse.ALL),
          shape = this.value,
          datum = _.field || field('datum'),
          as = _.as || 'shape',
          flag = out.ADD_MOD;

      if (!shape || _.modified()) {
        // parameters updated, reset and reflow
        this.value = shape = shapeGenerator(
          getProjectionPath(_.projection),
          datum,
          _.pointRadius
        );
        out.materialize().reflow();
        flag = out.SOURCE;
      }

      out.visit(flag, function(t) { t[as] = shape; });

      return out.modifies(as);
    };

    function shapeGenerator(path, field, pointRadius) {
      var shape = pointRadius == null
        ? function(_) { return path(field(_)); }
        : function(_) {
          var prev = path.pointRadius(),
              value = path.pointRadius(pointRadius)(field(_));
          path.pointRadius(prev);
          return value;
        };
      shape.context = function(_) {
        path.context(_);
        return shape;
      };

      return shape;
    }

    /**
     * GeoJSON feature generator for creating graticules.
     * @constructor
     */
    function Graticule(params) {
      Transform.call(this, [], params);
      this.generator = graticule();
    }

    Graticule.Definition = {
      "type": "Graticule",
      "metadata": {"changes": true},
      "params": [
        { "name": "extent", "type": "array", "array": true, "length": 2,
          "content": {"type": "number", "array": true, "length": 2} },
        { "name": "extentMajor", "type": "array", "array": true, "length": 2,
          "content": {"type": "number", "array": true, "length": 2} },
        { "name": "extentMinor", "type": "array", "array": true, "length": 2,
          "content": {"type": "number", "array": true, "length": 2} },
        { "name": "step", "type": "number", "array": true, "length": 2 },
        { "name": "stepMajor", "type": "number", "array": true, "length": 2, "default": [90, 360] },
        { "name": "stepMinor", "type": "number", "array": true, "length": 2, "default": [10, 10] },
        { "name": "precision", "type": "number", "default": 2.5 }
      ]
    };

    var prototype$15 = inherits(Graticule, Transform);

    prototype$15.transform = function(_, pulse) {
      var src = this.value,
          gen = this.generator, t;

      if (!src.length || _.modified()) {
        for (var prop in _) {
          if (isFunction(gen[prop])) {
            gen[prop](_[prop]);
          }
        }
      }

      t = gen();
      if (src.length) {
        pulse.mod.push(replace(src[0], t));
      } else {
        pulse.add.push(ingest(t));
      }
      src[0] = t;

      return pulse;
    };

    /**
     * Maintains a cartographic projection.
     * @constructor
     * @param {object} params - The parameters for this operator.
     */
    function Projection(params) {
      Transform.call(this, null, params);
      this.modified(true); // always treat as modified
    }

    var prototype$16 = inherits(Projection, Transform);

    prototype$16.transform = function(_, pulse) {
      var proj = this.value;

      if (!proj || _.modified('type')) {
        this.value = (proj = create$2(_.type));
        projectionProperties.forEach(function(prop) {
          if (_[prop] != null) set$3(proj, prop, _[prop]);
        });
      } else {
        projectionProperties.forEach(function(prop) {
          if (_.modified(prop)) set$3(proj, prop, _[prop]);
        });
      }

      if (_.pointRadius != null) proj.path.pointRadius(_.pointRadius);
      if (_.fit) fit$1(proj, _);

      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);
    };

    function fit$1(proj, _) {
      var data = collectGeoJSON(_.fit);
      _.extent ? proj.fitExtent(_.extent, data)
        : _.size ? proj.fitSize(_.size, data) : 0;
    }

    function create$2(type) {
      var constructor = projection$1((type || 'mercator').toLowerCase());
      if (!constructor) error('Unrecognized projection type: ' + type);
      return constructor();
    }

    function set$3(proj, key, value) {
       if (isFunction(proj[key])) proj[key](value);
    }

    function collectGeoJSON(features) {
      features = array(features);
      return features.length === 1
        ? features[0]
        : {
            type: FeatureCollection,
            features: features.reduce(function(list, f) {
                (f && f.type === FeatureCollection) ? list.push.apply(list, f.features)
                  : isArray(f) ? list.push.apply(list, f)
                  : list.push(f);
                return list;
              }, [])
          };
    }



    var geo = /*#__PURE__*/Object.freeze({
        contour: Contour,
        geojson: GeoJSON,
        geopath: GeoPath,
        geopoint: GeoPoint,
        geoshape: GeoShape,
        graticule: Graticule,
        projection: Projection
    });

    function forceCenter(x, y) {
      var nodes;

      if (x == null) x = 0;
      if (y == null) y = 0;

      function force() {
        var i,
            n = nodes.length,
            node,
            sx = 0,
            sy = 0;

        for (i = 0; i < n; ++i) {
          node = nodes[i], sx += node.x, sy += node.y;
        }

        for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
          node = nodes[i], node.x -= sx, node.y -= sy;
        }
      }

      force.initialize = function(_) {
        nodes = _;
      };

      force.x = function(_) {
        return arguments.length ? (x = +_, force) : x;
      };

      force.y = function(_) {
        return arguments.length ? (y = +_, force) : y;
      };

      return force;
    }

    function tree_add(d) {
      var x = +this._x.call(null, d),
          y = +this._y.call(null, d);
      return add$4(this.cover(x, y), x, y, d);
    }

    function add$4(tree, x, y, d) {
      if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

      var parent,
          node = tree._root,
          leaf = {data: d},
          x0 = tree._x0,
          y0 = tree._y0,
          x1 = tree._x1,
          y1 = tree._y1,
          xm,
          ym,
          xp,
          yp,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return tree._root = leaf, tree;

      // Find the existing leaf for the new point, or add it.
      while (node.length) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
      }

      // Is the new point is exactly coincident with the existing point?
      xp = +tree._x.call(null, node.data);
      yp = +tree._y.call(null, node.data);
      if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

      // Otherwise, split the leaf node until the old and new point are separated.
      do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
      return parent[j] = node, parent[i] = leaf, tree;
    }

    function addAll(data) {
      var d, i, n = data.length,
          x,
          y,
          xz = new Array(n),
          yz = new Array(n),
          x0 = Infinity,
          y0 = Infinity,
          x1 = -Infinity,
          y1 = -Infinity;

      // Compute the points and their extent.
      for (i = 0; i < n; ++i) {
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0) x0 = x;
        if (x > x1) x1 = x;
        if (y < y0) y0 = y;
        if (y > y1) y1 = y;
      }

      // If there were no (valid) points, abort.
      if (x0 > x1 || y0 > y1) return this;

      // Expand the tree to cover the new points.
      this.cover(x0, y0).cover(x1, y1);

      // Add the new points.
      for (i = 0; i < n; ++i) {
        add$4(this, xz[i], yz[i], data[i]);
      }

      return this;
    }

    function tree_cover(x, y) {
      if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

      var x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1;

      // If the quadtree has no extent, initialize them.
      // Integer extent are necessary so that if we later double the extent,
      // the existing quadrant boundaries don’t change due to floating point error!
      if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
      }

      // Otherwise, double repeatedly to cover.
      else {
        var z = x1 - x0,
            node = this._root,
            parent,
            i;

        while (x0 > x || x >= x1 || y0 > y || y >= y1) {
          i = (y < y0) << 1 | (x < x0);
          parent = new Array(4), parent[i] = node, node = parent, z *= 2;
          switch (i) {
            case 0: x1 = x0 + z, y1 = y0 + z; break;
            case 1: x0 = x1 - z, y1 = y0 + z; break;
            case 2: x1 = x0 + z, y0 = y1 - z; break;
            case 3: x0 = x1 - z, y0 = y1 - z; break;
          }
        }

        if (this._root && this._root.length) this._root = node;
      }

      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      return this;
    }

    function tree_data() {
      var data = [];
      this.visit(function(node) {
        if (!node.length) do data.push(node.data); while (node = node.next)
      });
      return data;
    }

    function tree_extent(_) {
      return arguments.length
          ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
          : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
    }

    function Quad(node, x0, y0, x1, y1) {
      this.node = node;
      this.x0 = x0;
      this.y0 = y0;
      this.x1 = x1;
      this.y1 = y1;
    }

    function tree_find(x, y, radius) {
      var data,
          x0 = this._x0,
          y0 = this._y0,
          x1,
          y1,
          x2,
          y2,
          x3 = this._x1,
          y3 = this._y1,
          quads = [],
          node = this._root,
          q,
          i;

      if (node) quads.push(new Quad(node, x0, y0, x3, y3));
      if (radius == null) radius = Infinity;
      else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
      }

      while (q = quads.pop()) {

        // Stop searching if this quadrant can’t contain a closer node.
        if (!(node = q.node)
            || (x1 = q.x0) > x3
            || (y1 = q.y0) > y3
            || (x2 = q.x1) < x0
            || (y2 = q.y1) < y0) continue;

        // Bisect the current quadrant.
        if (node.length) {
          var xm = (x1 + x2) / 2,
              ym = (y1 + y2) / 2;

          quads.push(
            new Quad(node[3], xm, ym, x2, y2),
            new Quad(node[2], x1, ym, xm, y2),
            new Quad(node[1], xm, y1, x2, ym),
            new Quad(node[0], x1, y1, xm, ym)
          );

          // Visit the closest quadrant first.
          if (i = (y >= ym) << 1 | (x >= xm)) {
            q = quads[quads.length - 1];
            quads[quads.length - 1] = quads[quads.length - 1 - i];
            quads[quads.length - 1 - i] = q;
          }
        }

        // Visit this point. (Visiting coincident points isn’t necessary!)
        else {
          var dx = x - +this._x.call(null, node.data),
              dy = y - +this._y.call(null, node.data),
              d2 = dx * dx + dy * dy;
          if (d2 < radius) {
            var d = Math.sqrt(radius = d2);
            x0 = x - d, y0 = y - d;
            x3 = x + d, y3 = y + d;
            data = node.data;
          }
        }
      }

      return data;
    }

    function tree_remove(d) {
      if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

      var parent,
          node = this._root,
          retainer,
          previous,
          next,
          x0 = this._x0,
          y0 = this._y0,
          x1 = this._x1,
          y1 = this._y1,
          x,
          y,
          xm,
          ym,
          right,
          bottom,
          i,
          j;

      // If the tree is empty, initialize the root as a leaf.
      if (!node) return this;

      // Find the leaf node for the point.
      // While descending, also retain the deepest parent with a non-removed sibling.
      if (node.length) while (true) {
        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
        if (!node.length) break;
        if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
      }

      // Find the point to remove.
      while (node.data !== d) if (!(previous = node, node = node.next)) return this;
      if (next = node.next) delete node.next;

      // If there are multiple coincident points, remove just the point.
      if (previous) return (next ? previous.next = next : delete previous.next), this;

      // If this is the root point, remove it.
      if (!parent) return this._root = next, this;

      // Remove this leaf.
      next ? parent[i] = next : delete parent[i];

      // If the parent now contains exactly one leaf, collapse superfluous parents.
      if ((node = parent[0] || parent[1] || parent[2] || parent[3])
          && node === (parent[3] || parent[2] || parent[1] || parent[0])
          && !node.length) {
        if (retainer) retainer[j] = node;
        else this._root = node;
      }

      return this;
    }

    function removeAll(data) {
      for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
      return this;
    }

    function tree_root() {
      return this._root;
    }

    function tree_size() {
      var size = 0;
      this.visit(function(node) {
        if (!node.length) do ++size; while (node = node.next)
      });
      return size;
    }

    function tree_visit(callback) {
      var quads = [], q, node = this._root, child, x0, y0, x1, y1;
      if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
          var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        }
      }
      return this;
    }

    function tree_visitAfter(callback) {
      var quads = [], next = [], q;
      if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
      while (q = quads.pop()) {
        var node = q.node;
        if (node.length) {
          var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
          if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
          if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
          if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
          if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        }
        next.push(q);
      }
      while (q = next.pop()) {
        callback(q.node, q.x0, q.y0, q.x1, q.y1);
      }
      return this;
    }

    function defaultX$1(d) {
      return d[0];
    }

    function tree_x(_) {
      return arguments.length ? (this._x = _, this) : this._x;
    }

    function defaultY$1(d) {
      return d[1];
    }

    function tree_y(_) {
      return arguments.length ? (this._y = _, this) : this._y;
    }

    function quadtree(nodes, x, y) {
      var tree = new Quadtree(x == null ? defaultX$1 : x, y == null ? defaultY$1 : y, NaN, NaN, NaN, NaN);
      return nodes == null ? tree : tree.addAll(nodes);
    }

    function Quadtree(x, y, x0, y0, x1, y1) {
      this._x = x;
      this._y = y;
      this._x0 = x0;
      this._y0 = y0;
      this._x1 = x1;
      this._y1 = y1;
      this._root = undefined;
    }

    function leaf_copy(leaf) {
      var copy = {data: leaf.data}, next = copy;
      while (leaf = leaf.next) next = next.next = {data: leaf.data};
      return copy;
    }

    var treeProto = quadtree.prototype = Quadtree.prototype;

    treeProto.copy = function() {
      var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
          node = this._root,
          nodes,
          child;

      if (!node) return copy;

      if (!node.length) return copy._root = leaf_copy(node), copy;

      nodes = [{source: node, target: copy._root = new Array(4)}];
      while (node = nodes.pop()) {
        for (var i = 0; i < 4; ++i) {
          if (child = node.source[i]) {
            if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
            else node.target[i] = leaf_copy(child);
          }
        }
      }

      return copy;
    };

    treeProto.add = tree_add;
    treeProto.addAll = addAll;
    treeProto.cover = tree_cover;
    treeProto.data = tree_data;
    treeProto.extent = tree_extent;
    treeProto.find = tree_find;
    treeProto.remove = tree_remove;
    treeProto.removeAll = removeAll;
    treeProto.root = tree_root;
    treeProto.size = tree_size;
    treeProto.visit = tree_visit;
    treeProto.visitAfter = tree_visitAfter;
    treeProto.x = tree_x;
    treeProto.y = tree_y;

    function constant$6(x) {
      return function() {
        return x;
      };
    }

    function jiggle() {
      return (Math.random() - 0.5) * 1e-6;
    }

    function x$2(d) {
      return d.x + d.vx;
    }

    function y$2(d) {
      return d.y + d.vy;
    }

    function forceCollide(radius) {
      var nodes,
          radii,
          strength = 1,
          iterations = 1;

      if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);

      function force() {
        var i, n = nodes.length,
            tree,
            node,
            xi,
            yi,
            ri,
            ri2;

        for (var k = 0; k < iterations; ++k) {
          tree = quadtree(nodes, x$2, y$2).visitAfter(prepare);
          for (i = 0; i < n; ++i) {
            node = nodes[i];
            ri = radii[node.index], ri2 = ri * ri;
            xi = node.x + node.vx;
            yi = node.y + node.vy;
            tree.visit(apply);
          }
        }

        function apply(quad, x0, y0, x1, y1) {
          var data = quad.data, rj = quad.r, r = ri + rj;
          if (data) {
            if (data.index > node.index) {
              var x = xi - data.x - data.vx,
                  y = yi - data.y - data.vy,
                  l = x * x + y * y;
              if (l < r * r) {
                if (x === 0) x = jiggle(), l += x * x;
                if (y === 0) y = jiggle(), l += y * y;
                l = (r - (l = Math.sqrt(l))) / l * strength;
                node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                node.vy += (y *= l) * r;
                data.vx -= x * (r = 1 - r);
                data.vy -= y * r;
              }
            }
            return;
          }
          return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
      }

      function prepare(quad) {
        if (quad.data) return quad.r = radii[quad.data.index];
        for (var i = quad.r = 0; i < 4; ++i) {
          if (quad[i] && quad[i].r > quad.r) {
            quad.r = quad[i].r;
          }
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        radii = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = +_, force) : strength;
      };

      force.radius = function(_) {
        return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : radius;
      };

      return force;
    }

    function index(d) {
      return d.index;
    }

    function find(nodeById, nodeId) {
      var node = nodeById.get(nodeId);
      if (!node) throw new Error("missing: " + nodeId);
      return node;
    }

    function forceLink(links) {
      var id = index,
          strength = defaultStrength,
          strengths,
          distance = constant$6(30),
          distances,
          nodes,
          count,
          bias,
          iterations = 1;

      if (links == null) links = [];

      function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
      }

      function force(alpha) {
        for (var k = 0, n = links.length; k < iterations; ++k) {
          for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || jiggle();
            y = target.y + target.vy - source.y - source.vy || jiggle();
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
          }
        }
      }

      function initialize() {
        if (!nodes) return;

        var i,
            n = nodes.length,
            m = links.length,
            nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
            link;

        for (i = 0, count = new Array(n); i < m; ++i) {
          link = links[i], link.index = i;
          if (typeof link.source !== "object") link.source = find(nodeById, link.source);
          if (typeof link.target !== "object") link.target = find(nodeById, link.target);
          count[link.source.index] = (count[link.source.index] || 0) + 1;
          count[link.target.index] = (count[link.target.index] || 0) + 1;
        }

        for (i = 0, bias = new Array(m); i < m; ++i) {
          link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        }

        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
      }

      function initializeStrength() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          strengths[i] = +strength(links[i], i, links);
        }
      }

      function initializeDistance() {
        if (!nodes) return;

        for (var i = 0, n = links.length; i < n; ++i) {
          distances[i] = +distance(links[i], i, links);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.links = function(_) {
        return arguments.length ? (links = _, initialize(), force) : links;
      };

      force.id = function(_) {
        return arguments.length ? (id = _, force) : id;
      };

      force.iterations = function(_) {
        return arguments.length ? (iterations = +_, force) : iterations;
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
      };

      force.distance = function(_) {
        return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
      };

      return force;
    }

    var noop$4 = {value: function() {}};

    function dispatch() {
      for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
        _[t] = [];
      }
      return new Dispatch(_);
    }

    function Dispatch(_) {
      this._ = _;
    }

    function parseTypenames(typenames, types) {
      return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {type: t, name: name};
      });
    }

    Dispatch.prototype = dispatch.prototype = {
      constructor: Dispatch,
      on: function(typename, callback) {
        var _ = this._,
            T = parseTypenames(typename + "", _),
            t,
            i = -1,
            n = T.length;

        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
          while (++i < n) if ((t = (typename = T[i]).type) && (t = get$2(_[t], typename.name))) return t;
          return;
        }

        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while (++i < n) {
          if (t = (typename = T[i]).type) _[t] = set$4(_[t], typename.name, callback);
          else if (callback == null) for (t in _) _[t] = set$4(_[t], typename.name, null);
        }

        return this;
      },
      copy: function() {
        var copy = {}, _ = this._;
        for (var t in _) copy[t] = _[t].slice();
        return new Dispatch(copy);
      },
      call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      },
      apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
      }
    };

    function get$2(type, name) {
      for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
          return c.value;
        }
      }
    }

    function set$4(type, name, callback) {
      for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
          type[i] = noop$4, type = type.slice(0, i).concat(type.slice(i + 1));
          break;
        }
      }
      if (callback != null) type.push({name: name, value: callback});
      return type;
    }

    var frame = 0, // is an animation frame pending?
        timeout = 0, // is a timeout pending?
        interval = 0, // are any timers active?
        pokeDelay = 1000, // how frequently we check for clock skew
        taskHead,
        taskTail,
        clockLast = 0,
        clockNow = 0,
        clockSkew = 0,
        clock = typeof performance === "object" && performance.now ? performance : Date,
        setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

    function now() {
      return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }

    function clearNow() {
      clockNow = 0;
    }

    function Timer() {
      this._call =
      this._time =
      this._next = null;
    }

    Timer.prototype = timer.prototype = {
      constructor: Timer,
      restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
          if (taskTail) taskTail._next = this;
          else taskHead = this;
          taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
      },
      stop: function() {
        if (this._call) {
          this._call = null;
          this._time = Infinity;
          sleep();
        }
      }
    };

    function timer(callback, delay, time) {
      var t = new Timer;
      t.restart(callback, delay, time);
      return t;
    }

    function timerFlush() {
      now(); // Get the current time, if not already set.
      ++frame; // Pretend we’ve set an alarm, if we haven’t already.
      var t = taskHead, e;
      while (t) {
        if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
        t = t._next;
      }
      --frame;
    }

    function wake() {
      clockNow = (clockLast = clock.now()) + clockSkew;
      frame = timeout = 0;
      try {
        timerFlush();
      } finally {
        frame = 0;
        nap();
        clockNow = 0;
      }
    }

    function poke() {
      var now = clock.now(), delay = now - clockLast;
      if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }

    function nap() {
      var t0, t1 = taskHead, t2, time = Infinity;
      while (t1) {
        if (t1._call) {
          if (time > t1._time) time = t1._time;
          t0 = t1, t1 = t1._next;
        } else {
          t2 = t1._next, t1._next = null;
          t1 = t0 ? t0._next = t2 : taskHead = t2;
        }
      }
      taskTail = t0;
      sleep(time);
    }

    function sleep(time) {
      if (frame) return; // Soonest alarm already set, or will be.
      if (timeout) timeout = clearTimeout(timeout);
      var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
      if (delay > 24) {
        if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval) interval = clearInterval(interval);
      } else {
        if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
      }
    }

    function interval$1(callback, delay, time) {
      var t = new Timer, total = delay;
      if (delay == null) return t.restart(callback, delay, time), t;
      delay = +delay, time = time == null ? now() : +time;
      t.restart(function tick(elapsed) {
        elapsed += total;
        t.restart(tick, total += delay, time);
        callback(elapsed);
      }, delay, time);
      return t;
    }

    function x$3(d) {
      return d.x;
    }

    function y$3(d) {
      return d.y;
    }

    var initialRadius = 10,
        initialAngle = Math.PI * (3 - Math.sqrt(5));

    function forceSimulation(nodes) {
      var simulation,
          alpha = 1,
          alphaMin = 0.001,
          alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
          alphaTarget = 0,
          velocityDecay = 0.6,
          forces = new Map(),
          stepper = timer(step),
          event = dispatch("tick", "end");

      if (nodes == null) nodes = [];

      function step() {
        tick();
        event.call("tick", simulation);
        if (alpha < alphaMin) {
          stepper.stop();
          event.call("end", simulation);
        }
      }

      function tick(iterations) {
        var i, n = nodes.length, node;

        if (iterations === undefined) iterations = 1;

        for (var k = 0; k < iterations; ++k) {
          alpha += (alphaTarget - alpha) * alphaDecay;

          forces.forEach(function(force) {
            force(alpha);
          });

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            if (node.fx == null) node.x += node.vx *= velocityDecay;
            else node.x = node.fx, node.vx = 0;
            if (node.fy == null) node.y += node.vy *= velocityDecay;
            else node.y = node.fy, node.vy = 0;
          }
        }

        return simulation;
      }

      function initializeNodes() {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.index = i;
          if (!isNaN(node.fx)) node.x = node.fx;
          if (!isNaN(node.fy)) node.y = node.fy;
          if (isNaN(node.x) || isNaN(node.y)) {
            var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
            node.x = radius * Math.cos(angle);
            node.y = radius * Math.sin(angle);
          }
          if (isNaN(node.vx) || isNaN(node.vy)) {
            node.vx = node.vy = 0;
          }
        }
      }

      function initializeForce(force) {
        if (force.initialize) force.initialize(nodes);
        return force;
      }

      initializeNodes();

      return simulation = {
        tick: tick,

        restart: function() {
          return stepper.restart(step), simulation;
        },

        stop: function() {
          return stepper.stop(), simulation;
        },

        nodes: function(_) {
          return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;
        },

        alpha: function(_) {
          return arguments.length ? (alpha = +_, simulation) : alpha;
        },

        alphaMin: function(_) {
          return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },

        alphaDecay: function(_) {
          return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },

        alphaTarget: function(_) {
          return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },

        velocityDecay: function(_) {
          return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },

        force: function(name, _) {
          return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
        },

        find: function(x, y, radius) {
          var i = 0,
              n = nodes.length,
              dx,
              dy,
              d2,
              node,
              closest;

          if (radius == null) radius = Infinity;
          else radius *= radius;

          for (i = 0; i < n; ++i) {
            node = nodes[i];
            dx = x - node.x;
            dy = y - node.y;
            d2 = dx * dx + dy * dy;
            if (d2 < radius) closest = node, radius = d2;
          }

          return closest;
        },

        on: function(name, _) {
          return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
      };
    }

    function forceManyBody() {
      var nodes,
          node,
          alpha,
          strength = constant$6(-30),
          strengths,
          distanceMin2 = 1,
          distanceMax2 = Infinity,
          theta2 = 0.81;

      function force(_) {
        var i, n = nodes.length, tree = quadtree(nodes, x$3, y$3).visitAfter(accumulate);
        for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length, node;
        strengths = new Array(n);
        for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
      }

      function accumulate(quad) {
        var strength = 0, q, c, weight = 0, x, y, i;

        // For internal nodes, accumulate forces from child quadrants.
        if (quad.length) {
          for (x = y = i = 0; i < 4; ++i) {
            if ((q = quad[i]) && (c = Math.abs(q.value))) {
              strength += q.value, weight += c, x += c * q.x, y += c * q.y;
            }
          }
          quad.x = x / weight;
          quad.y = y / weight;
        }

        // For leaf nodes, accumulate forces from coincident quadrants.
        else {
          q = quad;
          q.x = q.data.x;
          q.y = q.data.y;
          do strength += strengths[q.data.index];
          while (q = q.next);
        }

        quad.value = strength;
      }

      function apply(quad, x1, _, x2) {
        if (!quad.value) return true;

        var x = quad.x - node.x,
            y = quad.y - node.y,
            w = x2 - x1,
            l = x * x + y * y;

        // Apply the Barnes-Hut approximation if possible.
        // Limit forces for very close nodes; randomize direction if coincident.
        if (w * w / theta2 < l) {
          if (l < distanceMax2) {
            if (x === 0) x = jiggle(), l += x * x;
            if (y === 0) y = jiggle(), l += y * y;
            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
            node.vx += x * quad.value * alpha / l;
            node.vy += y * quad.value * alpha / l;
          }
          return true;
        }

        // Otherwise, process points directly.
        else if (quad.length || l >= distanceMax2) return;

        // Limit forces for very close nodes; randomize direction if coincident.
        if (quad.data !== node || quad.next) {
          if (x === 0) x = jiggle(), l += x * x;
          if (y === 0) y = jiggle(), l += y * y;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
        }

        do if (quad.data !== node) {
          w = strengths[quad.data.index] * alpha / l;
          node.vx += x * w;
          node.vy += y * w;
        } while (quad = quad.next);
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
      };

      force.distanceMin = function(_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
      };

      force.distanceMax = function(_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
      };

      force.theta = function(_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
      };

      return force;
    }

    function forceX(x) {
      var strength = constant$6(0.1),
          nodes,
          strengths,
          xz;

      if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
      };

      force.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
      };

      return force;
    }

    function forceY(y) {
      var strength = constant$6(0.1),
          nodes,
          strengths,
          yz;

      if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);

      function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
          node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
        }
      }

      function initialize() {
        if (!nodes) return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for (i = 0; i < n; ++i) {
          strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
      }

      force.initialize = function(_) {
        nodes = _;
        initialize();
      };

      force.strength = function(_) {
        return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
      };

      force.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
      };

      return force;
    }

    var ForceMap = {
      center: forceCenter,
      collide: forceCollide,
      nbody: forceManyBody,
      link: forceLink,
      x: forceX,
      y: forceY
    };

    var Forces = 'forces',
        ForceParams = [
          'alpha', 'alphaMin', 'alphaTarget',
          'velocityDecay', 'forces'
        ],
        ForceConfig = ['static', 'iterations'],
        ForceOutput = ['x', 'y', 'vx', 'vy'];

    /**
     * Force simulation layout.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<object>} params.forces - The forces to apply.
     */
    function Force(params) {
      Transform.call(this, null, params);
    }

    Force.Definition = {
      "type": "Force",
      "metadata": {"modifies": true},
      "params": [
        { "name": "static", "type": "boolean", "default": false },
        { "name": "restart", "type": "boolean", "default": false },
        { "name": "iterations", "type": "number", "default": 300 },
        { "name": "alpha", "type": "number", "default": 1 },
        { "name": "alphaMin", "type": "number", "default": 0.001 },
        { "name": "alphaTarget", "type": "number", "default": 0 },
        { "name": "velocityDecay", "type": "number", "default": 0.4 },
        { "name": "forces", "type": "param", "array": true,
          "params": [
            {
              "key": {"force": "center"},
              "params": [
                { "name": "x", "type": "number", "default": 0 },
                { "name": "y", "type": "number", "default": 0 }
              ]
            },
            {
              "key": {"force": "collide"},
              "params": [
                { "name": "radius", "type": "number", "expr": true },
                { "name": "strength", "type": "number", "default": 0.7 },
                { "name": "iterations", "type": "number", "default": 1 }
              ]
            },
            {
              "key": {"force": "nbody"},
              "params": [
                { "name": "strength", "type": "number", "default": -30 },
                { "name": "theta", "type": "number", "default": 0.9 },
                { "name": "distanceMin", "type": "number", "default": 1 },
                { "name": "distanceMax", "type": "number" }
              ]
            },
            {
              "key": {"force": "link"},
              "params": [
                { "name": "links", "type": "data" },
                { "name": "id", "type": "field" },
                { "name": "distance", "type": "number", "default": 30, "expr": true },
                { "name": "strength", "type": "number", "expr": true },
                { "name": "iterations", "type": "number", "default": 1 }
              ]
            },
            {
              "key": {"force": "x"},
              "params": [
                { "name": "strength", "type": "number", "default": 0.1 },
                { "name": "x", "type": "field" }
              ]
            },
            {
              "key": {"force": "y"},
              "params": [
                { "name": "strength", "type": "number", "default": 0.1 },
                { "name": "y", "type": "field" }
              ]
            }
          ] },
        {
          "name": "as", "type": "string", "array": true, "modify": false,
          "default": ForceOutput
        }
      ]
    };

    var prototype$17 = inherits(Force, Transform);

    prototype$17.transform = function(_, pulse) {
      var sim = this.value,
          change = pulse.changed(pulse.ADD_REM),
          params = _.modified(ForceParams),
          iters = _.iterations || 300;

      // configure simulation
      if (!sim) {
        this.value = sim = simulation(pulse.source, _);
        sim.on('tick', rerun(pulse.dataflow, this));
        if (!_.static) {
          change = true;
          sim.tick(); // ensure we run on init
        }
        pulse.modifies('index');
      } else {
        if (change) {
          pulse.modifies('index');
          sim.nodes(pulse.source);
        }
        if (params || pulse.changed(pulse.MOD)) {
          setup(sim, _, 0, pulse);
        }
      }

      // run simulation
      if (params || change || _.modified(ForceConfig)
          || (pulse.changed() && _.restart))
      {
        sim.alpha(Math.max(sim.alpha(), _.alpha || 1))
           .alphaDecay(1 - Math.pow(sim.alphaMin(), 1 / iters));

        if (_.static) {
          for (sim.stop(); --iters >= 0;) sim.tick();
        } else {
          if (sim.stopped()) sim.restart();
          if (!change) return pulse.StopPropagation; // defer to sim ticks
        }
      }

      return this.finish(_, pulse);
    };

    prototype$17.finish = function(_, pulse) {
      var dataflow = pulse.dataflow;

      // inspect dependencies, touch link source data
      for (var args=this._argops, j=0, m=args.length, arg; j<m; ++j) {
        arg = args[j];
        if (arg.name !== Forces || arg.op._argval.force !== 'link') {
          continue;
        }
        for (var ops=arg.op._argops, i=0, n=ops.length, op; i<n; ++i) {
          if (ops[i].name === 'links' && (op = ops[i].op.source)) {
            dataflow.pulse(op, dataflow.changeset().reflow());
            break;
          }
        }
      }

      // reflow all nodes
      return pulse.reflow(_.modified()).modifies(ForceOutput);
    };

    function rerun(df, op) {
      return function() { df.touch(op).run(); }
    }

    function simulation(nodes, _) {
      var sim = forceSimulation(nodes),
          stopped = false,
          stop = sim.stop,
          restart = sim.restart;

      sim.stopped = function() {
        return stopped;
      };
      sim.restart = function() {
        stopped = false;
        return restart();
      };
      sim.stop = function() {
        stopped = true;
        return stop();
      };

      return setup(sim, _, true).on('end', function() { stopped = true; });
    }

    function setup(sim, _, init, pulse) {
      var f = array(_.forces), i, n, p, name;

      for (i=0, n=ForceParams.length; i<n; ++i) {
        p = ForceParams[i];
        if (p !== Forces && _.modified(p)) sim[p](_[p]);
      }

      for (i=0, n=f.length; i<n; ++i) {
        name = Forces + i;
        p = init || _.modified(Forces, i) ? getForce(f[i])
          : pulse && modified(f[i], pulse) ? sim.force(name)
          : null;
        if (p) sim.force(name, p);
      }

      for (n=(sim.numForces || 0); i<n; ++i) {
        sim.force(Forces + i, null); // remove
      }

      sim.numForces = f.length;
      return sim;
    }

    function modified(f, pulse) {
      var k, v;
      for (k in f) {
        if (isFunction(v = f[k]) && pulse.modified(accessorFields(v)))
          return 1;
      }
      return 0;
    }

    function getForce(_) {
      var f, p;

      if (!ForceMap.hasOwnProperty(_.force)) {
        error('Unrecognized force: ' + _.force);
      }
      f = ForceMap[_.force]();

      for (p in _) {
        if (isFunction(f[p])) setForceParam(f[p], _[p], _);
      }

      return f;
    }

    function setForceParam(f, v, _) {
      f(isFunction(v) ? function(d) { return v(d, _); } : v);
    }



    var force = /*#__PURE__*/Object.freeze({
        force: Force
    });

    // Build lookup table mapping tuple keys to tree node instances
    function lookup$3(tree, key, filter) {
      var map = {};
      tree.each(function(node) {
        var t = node.data;
        if (filter(t)) map[key(t)] = node;
      });
      tree.lookup = map;
      return tree;
    }

    function defaultSeparation(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    function meanX(children) {
      return children.reduce(meanXReduce, 0) / children.length;
    }

    function meanXReduce(x, c) {
      return x + c.x;
    }

    function maxY(children) {
      return 1 + children.reduce(maxYReduce, 0);
    }

    function maxYReduce(y, c) {
      return Math.max(y, c.y);
    }

    function leafLeft(node) {
      var children;
      while (children = node.children) node = children[0];
      return node;
    }

    function leafRight(node) {
      var children;
      while (children = node.children) node = children[children.length - 1];
      return node;
    }

    function cluster() {
      var separation = defaultSeparation,
          dx = 1,
          dy = 1,
          nodeSize = false;

      function cluster(root) {
        var previousNode,
            x = 0;

        // First walk, computing the initial x & y values.
        root.eachAfter(function(node) {
          var children = node.children;
          if (children) {
            node.x = meanX(children);
            node.y = maxY(children);
          } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
          }
        });

        var left = leafLeft(root),
            right = leafRight(root),
            x0 = left.x - separation(left, right) / 2,
            x1 = right.x + separation(right, left) / 2;

        // Second walk, normalizing x & y to the desired size.
        return root.eachAfter(nodeSize ? function(node) {
          node.x = (node.x - root.x) * dx;
          node.y = (root.y - node.y) * dy;
        } : function(node) {
          node.x = (node.x - x0) / (x1 - x0) * dx;
          node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
      }

      cluster.separation = function(x) {
        return arguments.length ? (separation = x, cluster) : separation;
      };

      cluster.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
      };

      cluster.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
      };

      return cluster;
    }

    function count(node) {
      var sum = 0,
          children = node.children,
          i = children && children.length;
      if (!i) sum = 1;
      else while (--i >= 0) sum += children[i].value;
      node.value = sum;
    }

    function node_count() {
      return this.eachAfter(count);
    }

    function node_each(callback) {
      var node = this, current, next = [node], children, i, n;
      do {
        current = next.reverse(), next = [];
        while (node = current.pop()) {
          callback(node), children = node.children;
          if (children) for (i = 0, n = children.length; i < n; ++i) {
            next.push(children[i]);
          }
        }
      } while (next.length);
      return this;
    }

    function node_eachBefore(callback) {
      var node = this, nodes = [node], children, i;
      while (node = nodes.pop()) {
        callback(node), children = node.children;
        if (children) for (i = children.length - 1; i >= 0; --i) {
          nodes.push(children[i]);
        }
      }
      return this;
    }

    function node_eachAfter(callback) {
      var node = this, nodes = [node], next = [], children, i, n;
      while (node = nodes.pop()) {
        next.push(node), children = node.children;
        if (children) for (i = 0, n = children.length; i < n; ++i) {
          nodes.push(children[i]);
        }
      }
      while (node = next.pop()) {
        callback(node);
      }
      return this;
    }

    function node_sum(value) {
      return this.eachAfter(function(node) {
        var sum = +value(node.data) || 0,
            children = node.children,
            i = children && children.length;
        while (--i >= 0) sum += children[i].value;
        node.value = sum;
      });
    }

    function node_sort(compare) {
      return this.eachBefore(function(node) {
        if (node.children) {
          node.children.sort(compare);
        }
      });
    }

    function node_path(end) {
      var start = this,
          ancestor = leastCommonAncestor(start, end),
          nodes = [start];
      while (start !== ancestor) {
        start = start.parent;
        nodes.push(start);
      }
      var k = nodes.length;
      while (end !== ancestor) {
        nodes.splice(k, 0, end);
        end = end.parent;
      }
      return nodes;
    }

    function leastCommonAncestor(a, b) {
      if (a === b) return a;
      var aNodes = a.ancestors(),
          bNodes = b.ancestors(),
          c = null;
      a = aNodes.pop();
      b = bNodes.pop();
      while (a === b) {
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
      }
      return c;
    }

    function node_ancestors() {
      var node = this, nodes = [node];
      while (node = node.parent) {
        nodes.push(node);
      }
      return nodes;
    }

    function node_descendants() {
      var nodes = [];
      this.each(function(node) {
        nodes.push(node);
      });
      return nodes;
    }

    function node_leaves() {
      var leaves = [];
      this.eachBefore(function(node) {
        if (!node.children) {
          leaves.push(node);
        }
      });
      return leaves;
    }

    function node_links() {
      var root = this, links = [];
      root.each(function(node) {
        if (node !== root) { // Don’t include the root’s parent, if any.
          links.push({source: node.parent, target: node});
        }
      });
      return links;
    }

    function hierarchy(data, children) {
      var root = new Node(data),
          valued = +data.value && (root.value = data.value),
          node,
          nodes = [root],
          child,
          childs,
          i,
          n;

      if (children == null) children = defaultChildren;

      while (node = nodes.pop()) {
        if (valued) node.value = +node.data.value;
        if ((childs = children(node.data)) && (n = childs.length)) {
          node.children = new Array(n);
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = node.children[i] = new Node(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
          }
        }
      }

      return root.eachBefore(computeHeight);
    }

    function node_copy() {
      return hierarchy(this).eachBefore(copyData);
    }

    function defaultChildren(d) {
      return d.children;
    }

    function copyData(node) {
      node.data = node.data.data;
    }

    function computeHeight(node) {
      var height = 0;
      do node.height = height;
      while ((node = node.parent) && (node.height < ++height));
    }

    function Node(data) {
      this.data = data;
      this.depth =
      this.height = 0;
      this.parent = null;
    }

    Node.prototype = hierarchy.prototype = {
      constructor: Node,
      count: node_count,
      each: node_each,
      eachAfter: node_eachAfter,
      eachBefore: node_eachBefore,
      sum: node_sum,
      sort: node_sort,
      path: node_path,
      ancestors: node_ancestors,
      descendants: node_descendants,
      leaves: node_leaves,
      links: node_links,
      copy: node_copy
    };

    var slice$3 = Array.prototype.slice;

    function shuffle(array) {
      var m = array.length,
          t,
          i;

      while (m) {
        i = Math.random() * m-- | 0;
        t = array[m];
        array[m] = array[i];
        array[i] = t;
      }

      return array;
    }

    function enclose(circles) {
      var i = 0, n = (circles = shuffle(slice$3.call(circles))).length, B = [], p, e;

      while (i < n) {
        p = circles[i];
        if (e && enclosesWeak(e, p)) ++i;
        else e = encloseBasis(B = extendBasis(B, p)), i = 0;
      }

      return e;
    }

    function extendBasis(B, p) {
      var i, j;

      if (enclosesWeakAll(p, B)) return [p];

      // If we get here then B must have at least one element.
      for (i = 0; i < B.length; ++i) {
        if (enclosesNot(p, B[i])
            && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
          return [B[i], p];
        }
      }

      // If we get here then B must have at least two elements.
      for (i = 0; i < B.length - 1; ++i) {
        for (j = i + 1; j < B.length; ++j) {
          if (enclosesNot(encloseBasis2(B[i], B[j]), p)
              && enclosesNot(encloseBasis2(B[i], p), B[j])
              && enclosesNot(encloseBasis2(B[j], p), B[i])
              && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
            return [B[i], B[j], p];
          }
        }
      }

      // If we get here then something is very wrong.
      throw new Error;
    }

    function enclosesNot(a, b) {
      var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
      return dr < 0 || dr * dr < dx * dx + dy * dy;
    }

    function enclosesWeak(a, b) {
      var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function enclosesWeakAll(a, B) {
      for (var i = 0; i < B.length; ++i) {
        if (!enclosesWeak(a, B[i])) {
          return false;
        }
      }
      return true;
    }

    function encloseBasis(B) {
      switch (B.length) {
        case 1: return encloseBasis1(B[0]);
        case 2: return encloseBasis2(B[0], B[1]);
        case 3: return encloseBasis3(B[0], B[1], B[2]);
      }
    }

    function encloseBasis1(a) {
      return {
        x: a.x,
        y: a.y,
        r: a.r
      };
    }

    function encloseBasis2(a, b) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
          l = Math.sqrt(x21 * x21 + y21 * y21);
      return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
      };
    }

    function encloseBasis3(a, b, c) {
      var x1 = a.x, y1 = a.y, r1 = a.r,
          x2 = b.x, y2 = b.y, r2 = b.r,
          x3 = c.x, y3 = c.y, r3 = c.r,
          a2 = x1 - x2,
          a3 = x1 - x3,
          b2 = y1 - y2,
          b3 = y1 - y3,
          c2 = r2 - r1,
          c3 = r3 - r1,
          d1 = x1 * x1 + y1 * y1 - r1 * r1,
          d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
          d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
          ab = a3 * b2 - a2 * b3,
          xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
          xb = (b3 * c2 - b2 * c3) / ab,
          ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
          yb = (a2 * c3 - a3 * c2) / ab,
          A = xb * xb + yb * yb - 1,
          B = 2 * (r1 + xa * xb + ya * yb),
          C = xa * xa + ya * ya - r1 * r1,
          r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
      return {
        x: x1 + xa + xb * r,
        y: y1 + ya + yb * r,
        r: r
      };
    }

    function place(b, a, c) {
      var dx = b.x - a.x, x, a2,
          dy = b.y - a.y, y, b2,
          d2 = dx * dx + dy * dy;
      if (d2) {
        a2 = a.r + c.r, a2 *= a2;
        b2 = b.r + c.r, b2 *= b2;
        if (a2 > b2) {
          x = (d2 + b2 - a2) / (2 * d2);
          y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
          c.x = b.x - x * dx - y * dy;
          c.y = b.y - x * dy + y * dx;
        } else {
          x = (d2 + a2 - b2) / (2 * d2);
          y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
          c.x = a.x + x * dx - y * dy;
          c.y = a.y + x * dy + y * dx;
        }
      } else {
        c.x = a.x + c.r;
        c.y = a.y;
      }
    }

    function intersects(a, b) {
      var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
      return dr > 0 && dr * dr > dx * dx + dy * dy;
    }

    function score(node) {
      var a = node._,
          b = node.next._,
          ab = a.r + b.r,
          dx = (a.x * b.r + b.x * a.r) / ab,
          dy = (a.y * b.r + b.y * a.r) / ab;
      return dx * dx + dy * dy;
    }

    function Node$1(circle) {
      this._ = circle;
      this.next = null;
      this.previous = null;
    }

    function packEnclose(circles) {
      if (!(n = circles.length)) return 0;

      var a, b, c, n, aa, ca, i, j, k, sj, sk;

      // Place the first circle.
      a = circles[0], a.x = 0, a.y = 0;
      if (!(n > 1)) return a.r;

      // Place the second circle.
      b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
      if (!(n > 2)) return a.r + b.r;

      // Place the third circle.
      place(b, a, c = circles[2]);

      // Initialize the front-chain using the first three circles a, b and c.
      a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
      a.next = c.previous = b;
      b.next = a.previous = c;
      c.next = b.previous = a;

      // Attempt to place each remaining circle…
      pack: for (i = 3; i < n; ++i) {
        place(a._, b._, c = circles[i]), c = new Node$1(c);

        // Find the closest intersecting circle on the front-chain, if any.
        // “Closeness” is determined by linear distance along the front-chain.
        // “Ahead” or “behind” is likewise determined by linear distance.
        j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
        do {
          if (sj <= sk) {
            if (intersects(j._, c._)) {
              b = j, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sj += j._.r, j = j.next;
          } else {
            if (intersects(k._, c._)) {
              a = k, a.next = b, b.previous = a, --i;
              continue pack;
            }
            sk += k._.r, k = k.previous;
          }
        } while (j !== k.next);

        // Success! Insert the new circle c between a and b.
        c.previous = a, c.next = b, a.next = b.previous = b = c;

        // Compute the new closest circle pair to the centroid.
        aa = score(a);
        while ((c = c.next) !== b) {
          if ((ca = score(c)) < aa) {
            a = c, aa = ca;
          }
        }
        b = a.next;
      }

      // Compute the enclosing circle of the front chain.
      a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

      // Translate the circles to put the enclosing circle around the origin.
      for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

      return c.r;
    }

    function optional(f) {
      return f == null ? null : required(f);
    }

    function required(f) {
      if (typeof f !== "function") throw new Error;
      return f;
    }

    function constantZero() {
      return 0;
    }

    function constant$7(x) {
      return function() {
        return x;
      };
    }

    function defaultRadius(d) {
      return Math.sqrt(d.value);
    }

    function pack$1() {
      var radius = null,
          dx = 1,
          dy = 1,
          padding = constantZero;

      function pack(root) {
        root.x = dx / 2, root.y = dy / 2;
        if (radius) {
          root.eachBefore(radiusLeaf(radius))
              .eachAfter(packChildren(padding, 0.5))
              .eachBefore(translateChild(1));
        } else {
          root.eachBefore(radiusLeaf(defaultRadius))
              .eachAfter(packChildren(constantZero, 1))
              .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
              .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
        }
        return root;
      }

      pack.radius = function(x) {
        return arguments.length ? (radius = optional(x), pack) : radius;
      };

      pack.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
      };

      pack.padding = function(x) {
        return arguments.length ? (padding = typeof x === "function" ? x : constant$7(+x), pack) : padding;
      };

      return pack;
    }

    function radiusLeaf(radius) {
      return function(node) {
        if (!node.children) {
          node.r = Math.max(0, +radius(node) || 0);
        }
      };
    }

    function packChildren(padding, k) {
      return function(node) {
        if (children = node.children) {
          var children,
              i,
              n = children.length,
              r = padding(node) * k || 0,
              e;

          if (r) for (i = 0; i < n; ++i) children[i].r += r;
          e = packEnclose(children);
          if (r) for (i = 0; i < n; ++i) children[i].r -= r;
          node.r = e + r;
        }
      };
    }

    function translateChild(k) {
      return function(node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
          node.x = parent.x + k * node.x;
          node.y = parent.y + k * node.y;
        }
      };
    }

    function roundNode(node) {
      node.x0 = Math.round(node.x0);
      node.y0 = Math.round(node.y0);
      node.x1 = Math.round(node.x1);
      node.y1 = Math.round(node.y1);
    }

    function treemapDice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (x1 - x0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
      }
    }

    function partition$2() {
      var dx = 1,
          dy = 1,
          padding = 0,
          round = false;

      function partition(root) {
        var n = root.height + 1;
        root.x0 =
        root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy / n;
        root.eachBefore(positionNode(dy, n));
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(dy, n) {
        return function(node) {
          if (node.children) {
            treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
          }
          var x0 = node.x0,
              y0 = node.y0,
              x1 = node.x1 - padding,
              y1 = node.y1 - padding;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          node.x0 = x0;
          node.y0 = y0;
          node.x1 = x1;
          node.y1 = y1;
        };
      }

      partition.round = function(x) {
        return arguments.length ? (round = !!x, partition) : round;
      };

      partition.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
      };

      partition.padding = function(x) {
        return arguments.length ? (padding = +x, partition) : padding;
      };

      return partition;
    }

    var keyPrefix = "$", // Protect against keys like “__proto__”.
        preroot = {depth: -1},
        ambiguous = {};

    function defaultId(d) {
      return d.id;
    }

    function defaultParentId(d) {
      return d.parentId;
    }

    function stratify() {
      var id = defaultId,
          parentId = defaultParentId;

      function stratify(data) {
        var d,
            i,
            n = data.length,
            root,
            parent,
            node,
            nodes = new Array(n),
            nodeId,
            nodeKey,
            nodeByKey = {};

        for (i = 0; i < n; ++i) {
          d = data[i], node = nodes[i] = new Node(d);
          if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
            nodeKey = keyPrefix + (node.id = nodeId);
            nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
          }
        }

        for (i = 0; i < n; ++i) {
          node = nodes[i], nodeId = parentId(data[i], i, data);
          if (nodeId == null || !(nodeId += "")) {
            if (root) throw new Error("multiple roots");
            root = node;
          } else {
            parent = nodeByKey[keyPrefix + nodeId];
            if (!parent) throw new Error("missing: " + nodeId);
            if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
            if (parent.children) parent.children.push(node);
            else parent.children = [node];
            node.parent = parent;
          }
        }

        if (!root) throw new Error("no root");
        root.parent = preroot;
        root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
        root.parent = null;
        if (n > 0) throw new Error("cycle");

        return root;
      }

      stratify.id = function(x) {
        return arguments.length ? (id = required(x), stratify) : id;
      };

      stratify.parentId = function(x) {
        return arguments.length ? (parentId = required(x), stratify) : parentId;
      };

      return stratify;
    }

    function defaultSeparation$1(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    // function radialSeparation(a, b) {
    //   return (a.parent === b.parent ? 1 : 2) / a.depth;
    // }

    // This function is used to traverse the left contour of a subtree (or
    // subforest). It returns the successor of v on this contour. This successor is
    // either given by the leftmost child of v or by the thread of v. The function
    // returns null if and only if v is on the highest level of its subtree.
    function nextLeft(v) {
      var children = v.children;
      return children ? children[0] : v.t;
    }

    // This function works analogously to nextLeft.
    function nextRight(v) {
      var children = v.children;
      return children ? children[children.length - 1] : v.t;
    }

    // Shifts the current subtree rooted at w+. This is done by increasing
    // prelim(w+) and mod(w+) by shift.
    function moveSubtree(wm, wp, shift) {
      var change = shift / (wp.i - wm.i);
      wp.c -= change;
      wp.s += shift;
      wm.c += change;
      wp.z += shift;
      wp.m += shift;
    }

    // All other shifts, applied to the smaller subtrees between w- and w+, are
    // performed by this function. To prepare the shifts, we have to adjust
    // change(w+), shift(w+), and change(w-).
    function executeShifts(v) {
      var shift = 0,
          change = 0,
          children = v.children,
          i = children.length,
          w;
      while (--i >= 0) {
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
      }
    }

    // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
    // returns the specified (default) ancestor.
    function nextAncestor(vim, v, ancestor) {
      return vim.a.parent === v.parent ? vim.a : ancestor;
    }

    function TreeNode(node, i) {
      this._ = node;
      this.parent = null;
      this.children = null;
      this.A = null; // default ancestor
      this.a = this; // ancestor
      this.z = 0; // prelim
      this.m = 0; // mod
      this.c = 0; // change
      this.s = 0; // shift
      this.t = null; // thread
      this.i = i; // number
    }

    TreeNode.prototype = Object.create(Node.prototype);

    function treeRoot(root) {
      var tree = new TreeNode(root, 0),
          node,
          nodes = [tree],
          child,
          children,
          i,
          n;

      while (node = nodes.pop()) {
        if (children = node._.children) {
          node.children = new Array(n = children.length);
          for (i = n - 1; i >= 0; --i) {
            nodes.push(child = node.children[i] = new TreeNode(children[i], i));
            child.parent = node;
          }
        }
      }

      (tree.parent = new TreeNode(null, 0)).children = [tree];
      return tree;
    }

    // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
    function tree() {
      var separation = defaultSeparation$1,
          dx = 1,
          dy = 1,
          nodeSize = null;

      function tree(root) {
        var t = treeRoot(root);

        // Compute the layout using Buchheim et al.’s algorithm.
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);

        // If a fixed node size is specified, scale x and y.
        if (nodeSize) root.eachBefore(sizeNode);

        // If a fixed tree size is specified, scale x and y based on the extent.
        // Compute the left-most, right-most, and depth-most nodes for extents.
        else {
          var left = root,
              right = root,
              bottom = root;
          root.eachBefore(function(node) {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
            if (node.depth > bottom.depth) bottom = node;
          });
          var s = left === right ? 1 : separation(left, right) / 2,
              tx = s - left.x,
              kx = dx / (right.x + s + tx),
              ky = dy / (bottom.depth || 1);
          root.eachBefore(function(node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
          });
        }

        return root;
      }

      // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
      // applied recursively to the children of v, as well as the function
      // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
      // node v is placed to the midpoint of its outermost children.
      function firstWalk(v) {
        var children = v.children,
            siblings = v.parent.children,
            w = v.i ? siblings[v.i - 1] : null;
        if (children) {
          executeShifts(v);
          var midpoint = (children[0].z + children[children.length - 1].z) / 2;
          if (w) {
            v.z = w.z + separation(v._, w._);
            v.m = v.z - midpoint;
          } else {
            v.z = midpoint;
          }
        } else if (w) {
          v.z = w.z + separation(v._, w._);
        }
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
      }

      // Computes all real x-coordinates by summing up the modifiers recursively.
      function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
      }

      // The core of the algorithm. Here, a new subtree is combined with the
      // previous subtrees. Threads are used to traverse the inside and outside
      // contours of the left and right subtree up to the highest common level. The
      // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
      // superscript o means outside and i means inside, the subscript - means left
      // subtree and + means right subtree. For summing up the modifiers along the
      // contour, we use respective variables si+, si-, so-, and so+. Whenever two
      // nodes of the inside contours conflict, we compute the left one of the
      // greatest uncommon ancestors using the function ANCESTOR and call MOVE
      // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
      // Finally, we add a new thread (if necessary).
      function apportion(v, w, ancestor) {
        if (w) {
          var vip = v,
              vop = v,
              vim = w,
              vom = vip.parent.children[0],
              sip = vip.m,
              sop = vop.m,
              sim = vim.m,
              som = vom.m,
              shift;
          while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
            vom = nextLeft(vom);
            vop = nextRight(vop);
            vop.a = v;
            shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
            if (shift > 0) {
              moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
              sip += shift;
              sop += shift;
            }
            sim += vim.m;
            sip += vip.m;
            som += vom.m;
            sop += vop.m;
          }
          if (vim && !nextRight(vop)) {
            vop.t = vim;
            vop.m += sim - sop;
          }
          if (vip && !nextLeft(vom)) {
            vom.t = vip;
            vom.m += sip - som;
            ancestor = v;
          }
        }
        return ancestor;
      }

      function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
      }

      tree.separation = function(x) {
        return arguments.length ? (separation = x, tree) : separation;
      };

      tree.size = function(x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
      };

      tree.nodeSize = function(x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
      };

      return tree;
    }

    function treemapSlice(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          node,
          i = -1,
          n = nodes.length,
          k = parent.value && (y1 - y0) / parent.value;

      while (++i < n) {
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
      }
    }

    var phi = (1 + Math.sqrt(5)) / 2;

    function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
      var rows = [],
          nodes = parent.children,
          row,
          nodeValue,
          i0 = 0,
          i1 = 0,
          n = nodes.length,
          dx, dy,
          value = parent.value,
          sumValue,
          minValue,
          maxValue,
          newRatio,
          minRatio,
          alpha,
          beta;

      while (i0 < n) {
        dx = x1 - x0, dy = y1 - y0;

        // Find the next non-empty node.
        do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
        minValue = maxValue = sumValue;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);

        // Keep adding nodes while the aspect ratio maintains or improves.
        for (; i1 < n; ++i1) {
          sumValue += nodeValue = nodes[i1].value;
          if (nodeValue < minValue) minValue = nodeValue;
          if (nodeValue > maxValue) maxValue = nodeValue;
          beta = sumValue * sumValue * alpha;
          newRatio = Math.max(maxValue / beta, beta / minValue);
          if (newRatio > minRatio) { sumValue -= nodeValue; break; }
          minRatio = newRatio;
        }

        // Position and record the row orientation.
        rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
      }

      return rows;
    }

    var squarify = (function custom(ratio) {

      function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
      }

      squarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return squarify;
    })(phi);

    function treemap() {
      var tile = squarify,
          round = false,
          dx = 1,
          dy = 1,
          paddingStack = [0],
          paddingInner = constantZero,
          paddingTop = constantZero,
          paddingRight = constantZero,
          paddingBottom = constantZero,
          paddingLeft = constantZero;

      function treemap(root) {
        root.x0 =
        root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [0];
        if (round) root.eachBefore(roundNode);
        return root;
      }

      function positionNode(node) {
        var p = paddingStack[node.depth],
            x0 = node.x0 + p,
            y0 = node.y0 + p,
            x1 = node.x1 - p,
            y1 = node.y1 - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
          p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
          x0 += paddingLeft(node) - p;
          y0 += paddingTop(node) - p;
          x1 -= paddingRight(node) - p;
          y1 -= paddingBottom(node) - p;
          if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
          if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
          tile(node, x0, y0, x1, y1);
        }
      }

      treemap.round = function(x) {
        return arguments.length ? (round = !!x, treemap) : round;
      };

      treemap.size = function(x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
      };

      treemap.tile = function(x) {
        return arguments.length ? (tile = required(x), treemap) : tile;
      };

      treemap.padding = function(x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
      };

      treemap.paddingInner = function(x) {
        return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$7(+x), treemap) : paddingInner;
      };

      treemap.paddingOuter = function(x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
      };

      treemap.paddingTop = function(x) {
        return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$7(+x), treemap) : paddingTop;
      };

      treemap.paddingRight = function(x) {
        return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$7(+x), treemap) : paddingRight;
      };

      treemap.paddingBottom = function(x) {
        return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$7(+x), treemap) : paddingBottom;
      };

      treemap.paddingLeft = function(x) {
        return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$7(+x), treemap) : paddingLeft;
      };

      return treemap;
    }

    function treemapBinary(parent, x0, y0, x1, y1) {
      var nodes = parent.children,
          i, n = nodes.length,
          sum, sums = new Array(n + 1);

      for (sums[0] = sum = i = 0; i < n; ++i) {
        sums[i + 1] = sum += nodes[i].value;
      }

      partition(0, n, parent.value, x0, y0, x1, y1);

      function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
          var node = nodes[i];
          node.x0 = x0, node.y0 = y0;
          node.x1 = x1, node.y1 = y1;
          return;
        }

        var valueOffset = sums[i],
            valueTarget = (value / 2) + valueOffset,
            k = i + 1,
            hi = j - 1;

        while (k < hi) {
          var mid = k + hi >>> 1;
          if (sums[mid] < valueTarget) k = mid + 1;
          else hi = mid;
        }

        if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

        var valueLeft = sums[k] - valueOffset,
            valueRight = value - valueLeft;

        if ((x1 - x0) > (y1 - y0)) {
          var xk = (x0 * valueRight + x1 * valueLeft) / value;
          partition(i, k, valueLeft, x0, y0, xk, y1);
          partition(k, j, valueRight, xk, y0, x1, y1);
        } else {
          var yk = (y0 * valueRight + y1 * valueLeft) / value;
          partition(i, k, valueLeft, x0, y0, x1, yk);
          partition(k, j, valueRight, x0, yk, x1, y1);
        }
      }
    }

    function treemapSliceDice(parent, x0, y0, x1, y1) {
      (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
    }

    var treemapResquarify = (function custom(ratio) {

      function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && (rows.ratio === ratio)) {
          var rows,
              row,
              nodes,
              i,
              j = -1,
              n,
              m = rows.length,
              value = parent.value;

          while (++j < m) {
            row = rows[j], nodes = row.children;
            for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
            if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
            else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
            value -= row.value;
          }
        } else {
          parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
          rows.ratio = ratio;
        }
      }

      resquarify.ratio = function(x) {
        return custom((x = +x) > 1 ? x : 1);
      };

      return resquarify;
    })(phi);

    /**
      * Nest tuples into a tree structure, grouped by key values.
      * @constructor
      * @param {object} params - The parameters for this operator.
      * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.
      * @param {boolean} [params.generate=false] - A boolean flag indicating if
      *   non-leaf nodes generated by this transform should be included in the
      *   output. The default (false) includes only the input data (leaf nodes)
      *   in the data stream.
      */
    function Nest(params) {
      Transform.call(this, null, params);
    }

    Nest.Definition = {
      "type": "Nest",
      "metadata": {"treesource": true, "changes": true},
      "params": [
        { "name": "keys", "type": "field", "array": true },
        { "name": "generate", "type": "boolean" }
      ]
    };

    var prototype$18 = inherits(Nest, Transform);

    function children(n) {
      return n.values;
    }

    prototype$18.transform = function(_, pulse) {
      if (!pulse.source) {
        error('Nest transform requires an upstream data source.');
      }

      var gen = _.generate,
          mod = _.modified(),
          out = pulse.clone(),
          tree = this.value;

      if (!tree || mod || pulse.changed()) {
        // collect nodes to remove
        if (tree) {
          tree.each(function(node) {
            if (node.children && isTuple(node.data)) {
              out.rem.push(node.data);
            }
          });
        }

        // generate new tree structure
        this.value = tree = hierarchy({
          values: array(_.keys)
                    .reduce(function(n, k) { n.key(k); return n; }, nest())
                    .entries(out.source)
        }, children);

        // collect nodes to add
        if (gen) {
          tree.each(function(node) {
            if (node.children) {
              node = ingest(node.data);
              out.add.push(node);
              out.source.push(node);
            }
          });
        }

        // build lookup table
        lookup$3(tree, tupleid, tupleid);
      }

      out.source.root = tree;
      return out;
    };

    function nest() {
      var keys = [],
          nest;

      function apply(array, depth) {
        if (depth >= keys.length) {
          return array;
        }

        var i = -1,
            n = array.length,
            key = keys[depth++],
            keyValue,
            value,
            valuesByKey = {},
            values,
            result = {};

        while (++i < n) {
          keyValue = key(value = array[i]) + '';
          if (values = valuesByKey[keyValue]) {
            values.push(value);
          } else {
            valuesByKey[keyValue] = [value];
          }
        }

        for (keyValue in valuesByKey) {
          result[keyValue] = apply(valuesByKey[keyValue], depth);
        }

        return result;
      }

      function entries(map, depth) {
        if (++depth > keys.length) return map;
        var array = [], k;
        for (k in map) {
          array.push({key: k, values: entries(map[k], depth)});
        }
        return array;
      }

      return nest = {
        entries: function(array) { return entries(apply(array, 0), 0); },
        key: function(d) { keys.push(d); return nest; }
      };
    }

    /**
     * Abstract class for tree layout.
     * @constructor
     * @param {object} params - The parameters for this operator.
     */
    function HierarchyLayout(params) {
      Transform.call(this, null, params);
    }

    var prototype$19 = inherits(HierarchyLayout, Transform);

    prototype$19.transform = function(_, pulse) {
      if (!pulse.source || !pulse.source.root) {
        error(this.constructor.name
          + ' transform requires a backing tree data source.');
      }

      var layout = this.layout(_.method),
          fields = this.fields,
          root = pulse.source.root,
          as = _.as || fields;

      if (_.field) root.sum(_.field);
      if (_.sort) root.sort(_.sort);

      setParams(layout, this.params, _);
      if (layout.separation) {
        layout.separation(_.separation !== false ? defaultSeparation$2 : one);
      }

      try {
        this.value = layout(root);
      } catch (err) {
        error(err);
      }
      root.each(function(node) { setFields(node, fields, as); });

      return pulse.reflow(_.modified()).modifies(as).modifies('leaf');
    };

    function setParams(layout, params, _) {
      for (var p, i=0, n=params.length; i<n; ++i) {
        p = params[i];
        if (p in _) layout[p](_[p]);
      }
    }

    function setFields(node, fields, as) {
      var t = node.data;
      for (var i=0, n=fields.length-1; i<n; ++i) {
        t[as[i]] = node[fields[i]];
      }
      t[as[n]] = node.children ? node.children.length : 0;
    }

    function defaultSeparation$2(a, b) {
      return a.parent === b.parent ? 1 : 2;
    }

    var Output = ['x', 'y', 'r', 'depth', 'children'];

    /**
     * Packed circle tree layout.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The value field to size nodes.
     */
    function Pack(params) {
      HierarchyLayout.call(this, params);
    }

    Pack.Definition = {
      "type": "Pack",
      "metadata": {"tree": true, "modifies": true},
      "params": [
        { "name": "field", "type": "field" },
        { "name": "sort", "type": "compare" },
        { "name": "padding", "type": "number", "default": 0 },
        { "name": "radius", "type": "field", "default": null },
        { "name": "size", "type": "number", "array": true, "length": 2 },
        { "name": "as", "type": "string", "array": true, "length": Output.length, "default": Output }
      ]
    };

    var prototype$1a = inherits(Pack, HierarchyLayout);

    prototype$1a.layout = pack$1;

    prototype$1a.params = ['size', 'padding'];

    prototype$1a.fields = Output;

    var Output$1 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];

    /**
     * Partition tree layout.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The value field to size nodes.
     */
    function Partition(params) {
      HierarchyLayout.call(this, params);
    }

    Partition.Definition = {
      "type": "Partition",
      "metadata": {"tree": true, "modifies": true},
      "params": [
        { "name": "field", "type": "field" },
        { "name": "sort", "type": "compare" },
        { "name": "padding", "type": "number", "default": 0 },
        { "name": "round", "type": "boolean", "default": false },
        { "name": "size", "type": "number", "array": true, "length": 2 },
        { "name": "as", "type": "string", "array": true, "length": Output$1.length, "default": Output$1 }
      ]
    };

    var prototype$1b = inherits(Partition, HierarchyLayout);

    prototype$1b.layout = partition$2;

    prototype$1b.params = ['size', 'round', 'padding'];

    prototype$1b.fields = Output$1;

    /**
      * Stratify a collection of tuples into a tree structure based on
      * id and parent id fields.
      * @constructor
      * @param {object} params - The parameters for this operator.
      * @param {function(object): *} params.key - Unique key field for each tuple.
      * @param {function(object): *} params.parentKey - Field with key for parent tuple.
      */
    function Stratify(params) {
      Transform.call(this, null, params);
    }

    Stratify.Definition = {
      "type": "Stratify",
      "metadata": {"treesource": true},
      "params": [
        { "name": "key", "type": "field", "required": true },
        { "name": "parentKey", "type": "field", "required": true  }
      ]
    };

    var prototype$1c = inherits(Stratify, Transform);

    prototype$1c.transform = function(_, pulse) {
      if (!pulse.source) {
        error('Stratify transform requires an upstream data source.');
      }

      var tree = this.value,
          mod = _.modified(),
          out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),
          run = !this.value
             || mod
             || pulse.changed(pulse.ADD_REM)
             || pulse.modified(_.key.fields)
             || pulse.modified(_.parentKey.fields);

      // prevent upstream source pollution
      out.source = out.source.slice();

      if (run) {
        if (out.source.length) {
          tree = lookup$3(
            stratify().id(_.key).parentId(_.parentKey)(out.source)
            , _.key, truthy);
        } else {
          tree = lookup$3(stratify()([{}]), _.key, _.key);
        }
      }

      out.source.root = this.value = tree;
      return out;
    };

    var Layouts = {
      tidy: tree,
      cluster: cluster
    };

    var Output$2 = ['x', 'y', 'depth', 'children'];

    /**
     * Tree layout. Depending on the method parameter, performs either
     * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.
     * @constructor
     * @param {object} params - The parameters for this operator.
     */
    function Tree(params) {
      HierarchyLayout.call(this, params);
    }

    Tree.Definition = {
      "type": "Tree",
      "metadata": {"tree": true, "modifies": true},
      "params": [
        { "name": "field", "type": "field" },
        { "name": "sort", "type": "compare" },
        { "name": "method", "type": "enum", "default": "tidy", "values": ["tidy", "cluster"] },
        { "name": "size", "type": "number", "array": true, "length": 2 },
        { "name": "nodeSize", "type": "number", "array": true, "length": 2 },
        { "name": "separation", "type": "boolean", "default": true },
        { "name": "as", "type": "string", "array": true, "length": Output$2.length, "default": Output$2 }
      ]
    };

    var prototype$1d = inherits(Tree, HierarchyLayout);

    /**
     * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.
     */
    prototype$1d.layout = function(method) {
      var m = method || 'tidy';
      if (Layouts.hasOwnProperty(m)) return Layouts[m]();
      else error('Unrecognized Tree layout method: ' + m);
    };

    prototype$1d.params = ['size', 'nodeSize'];

    prototype$1d.fields = Output$2;

    /**
      * Generate tuples representing links between tree nodes.
      * The resulting tuples will contain 'source' and 'target' fields,
      * which point to parent and child node tuples, respectively.
      * @constructor
      * @param {object} params - The parameters for this operator.
      */
    function TreeLinks(params) {
      Transform.call(this, [], params);
    }

    TreeLinks.Definition = {
      "type": "TreeLinks",
      "metadata": {"tree": true, "generates": true, "changes": true},
      "params": []
    };

    var prototype$1e = inherits(TreeLinks, Transform);

    prototype$1e.transform = function(_, pulse) {
      var links = this.value,
          tree = pulse.source && pulse.source.root,
          out = pulse.fork(pulse.NO_SOURCE),
          lut = {};

      if (!tree) error('TreeLinks transform requires a tree data source.');

      if (pulse.changed(pulse.ADD_REM)) {
        // remove previous links
        out.rem = links;

        // build lookup table of valid tuples
        pulse.visit(pulse.SOURCE, function(t) { lut[tupleid(t)] = 1; });

        // generate links for all edges incident on valid tuples
        tree.each(function(node) {
          var t = node.data,
              p = node.parent && node.parent.data;
          if (p && lut[tupleid(t)] && lut[tupleid(p)]) {
            out.add.push(ingest({source: p, target: t}));
          }
        });
        this.value = out.add;
      }

      else if (pulse.changed(pulse.MOD)) {
        // build lookup table of modified tuples
        pulse.visit(pulse.MOD, function(t) { lut[tupleid(t)] = 1; });

        // gather links incident on modified tuples
        links.forEach(function(link) {
          if (lut[tupleid(link.source)] || lut[tupleid(link.target)]) {
            out.mod.push(link);
          }
        });
      }

      return out;
    };

    var Tiles = {
      binary: treemapBinary,
      dice: treemapDice,
      slice: treemapSlice,
      slicedice: treemapSliceDice,
      squarify: squarify,
      resquarify: treemapResquarify
    };

    var Output$3 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];

    /**
     * Treemap layout.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {function(object): *} params.field - The value field to size nodes.
     */
    function Treemap(params) {
      HierarchyLayout.call(this, params);
    }

    Treemap.Definition = {
      "type": "Treemap",
      "metadata": {"tree": true, "modifies": true},
      "params": [
        { "name": "field", "type": "field" },
        { "name": "sort", "type": "compare" },
        { "name": "method", "type": "enum", "default": "squarify",
          "values": ["squarify", "resquarify", "binary", "dice", "slice", "slicedice"] },
        { "name": "padding", "type": "number", "default": 0 },
        { "name": "paddingInner", "type": "number", "default": 0 },
        { "name": "paddingOuter", "type": "number", "default": 0 },
        { "name": "paddingTop", "type": "number", "default": 0 },
        { "name": "paddingRight", "type": "number", "default": 0 },
        { "name": "paddingBottom", "type": "number", "default": 0 },
        { "name": "paddingLeft", "type": "number", "default": 0 },
        { "name": "ratio", "type": "number", "default": 1.618033988749895 },
        { "name": "round", "type": "boolean", "default": false },
        { "name": "size", "type": "number", "array": true, "length": 2 },
        { "name": "as", "type": "string", "array": true, "length": Output$3.length, "default": Output$3 }
      ]
    };

    var prototype$1f = inherits(Treemap, HierarchyLayout);

    /**
     * Treemap layout generator. Adds 'method' and 'ratio' parameters
     * to configure the underlying tile method.
     */
    prototype$1f.layout = function() {
      var x = treemap();
      x.ratio = function(_) {
        var t = x.tile();
        if (t.ratio) x.tile(t.ratio(_));
      };
      x.method = function(_) {
        if (Tiles.hasOwnProperty(_)) x.tile(Tiles[_]);
        else error('Unrecognized Treemap layout method: ' + _);
      };
      return x;
    };

    prototype$1f.params = [
      'method', 'ratio', 'size', 'round',
      'padding', 'paddingInner', 'paddingOuter',
      'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'
    ];

    prototype$1f.fields = Output$3;



    var tree$1 = /*#__PURE__*/Object.freeze({
        nest: Nest,
        pack: Pack,
        partition: Partition,
        stratify: Stratify,
        tree: Tree,
        treelinks: TreeLinks,
        treemap: Treemap
    });

    function constant$8(x) {
      return function() {
        return x;
      };
    }

    function x$4(d) {
      return d[0];
    }

    function y$4(d) {
      return d[1];
    }

    function RedBlackTree() {
      this._ = null; // root node
    }

    function RedBlackNode(node) {
      node.U = // parent node
      node.C = // color - true for red, false for black
      node.L = // left node
      node.R = // right node
      node.P = // previous node
      node.N = null; // next node
    }

    RedBlackTree.prototype = {
      constructor: RedBlackTree,

      insert: function(after, node) {
        var parent, grandpa, uncle;

        if (after) {
          node.P = after;
          node.N = after.N;
          if (after.N) after.N.P = node;
          after.N = node;
          if (after.R) {
            after = after.R;
            while (after.L) after = after.L;
            after.L = node;
          } else {
            after.R = node;
          }
          parent = after;
        } else if (this._) {
          after = RedBlackFirst(this._);
          node.P = null;
          node.N = after;
          after.P = after.L = node;
          parent = after;
        } else {
          node.P = node.N = null;
          this._ = node;
          parent = null;
        }
        node.L = node.R = null;
        node.U = parent;
        node.C = true;

        after = node;
        while (parent && parent.C) {
          grandpa = parent.U;
          if (parent === grandpa.L) {
            uncle = grandpa.R;
            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.R) {
                RedBlackRotateLeft(this, parent);
                after = parent;
                parent = after.U;
              }
              parent.C = false;
              grandpa.C = true;
              RedBlackRotateRight(this, grandpa);
            }
          } else {
            uncle = grandpa.L;
            if (uncle && uncle.C) {
              parent.C = uncle.C = false;
              grandpa.C = true;
              after = grandpa;
            } else {
              if (after === parent.L) {
                RedBlackRotateRight(this, parent);
                after = parent;
                parent = after.U;
              }
              parent.C = false;
              grandpa.C = true;
              RedBlackRotateLeft(this, grandpa);
            }
          }
          parent = after.U;
        }
        this._.C = false;
      },

      remove: function(node) {
        if (node.N) node.N.P = node.P;
        if (node.P) node.P.N = node.N;
        node.N = node.P = null;

        var parent = node.U,
            sibling,
            left = node.L,
            right = node.R,
            next,
            red;

        if (!left) next = right;
        else if (!right) next = left;
        else next = RedBlackFirst(right);

        if (parent) {
          if (parent.L === node) parent.L = next;
          else parent.R = next;
        } else {
          this._ = next;
        }

        if (left && right) {
          red = next.C;
          next.C = node.C;
          next.L = left;
          left.U = next;
          if (next !== right) {
            parent = next.U;
            next.U = node.U;
            node = next.R;
            parent.L = node;
            next.R = right;
            right.U = next;
          } else {
            next.U = parent;
            parent = next;
            node = next.R;
          }
        } else {
          red = node.C;
          node = next;
        }

        if (node) node.U = parent;
        if (red) return;
        if (node && node.C) { node.C = false; return; }

        do {
          if (node === this._) break;
          if (node === parent.L) {
            sibling = parent.R;
            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              RedBlackRotateLeft(this, parent);
              sibling = parent.R;
            }
            if ((sibling.L && sibling.L.C)
                || (sibling.R && sibling.R.C)) {
              if (!sibling.R || !sibling.R.C) {
                sibling.L.C = false;
                sibling.C = true;
                RedBlackRotateRight(this, sibling);
                sibling = parent.R;
              }
              sibling.C = parent.C;
              parent.C = sibling.R.C = false;
              RedBlackRotateLeft(this, parent);
              node = this._;
              break;
            }
          } else {
            sibling = parent.L;
            if (sibling.C) {
              sibling.C = false;
              parent.C = true;
              RedBlackRotateRight(this, parent);
              sibling = parent.L;
            }
            if ((sibling.L && sibling.L.C)
              || (sibling.R && sibling.R.C)) {
              if (!sibling.L || !sibling.L.C) {
                sibling.R.C = false;
                sibling.C = true;
                RedBlackRotateLeft(this, sibling);
                sibling = parent.L;
              }
              sibling.C = parent.C;
              parent.C = sibling.L.C = false;
              RedBlackRotateRight(this, parent);
              node = this._;
              break;
            }
          }
          sibling.C = true;
          node = parent;
          parent = parent.U;
        } while (!node.C);

        if (node) node.C = false;
      }
    };

    function RedBlackRotateLeft(tree, node) {
      var p = node,
          q = node.R,
          parent = p.U;

      if (parent) {
        if (parent.L === p) parent.L = q;
        else parent.R = q;
      } else {
        tree._ = q;
      }

      q.U = parent;
      p.U = q;
      p.R = q.L;
      if (p.R) p.R.U = p;
      q.L = p;
    }

    function RedBlackRotateRight(tree, node) {
      var p = node,
          q = node.L,
          parent = p.U;

      if (parent) {
        if (parent.L === p) parent.L = q;
        else parent.R = q;
      } else {
        tree._ = q;
      }

      q.U = parent;
      p.U = q;
      p.L = q.R;
      if (p.L) p.L.U = p;
      q.R = p;
    }

    function RedBlackFirst(node) {
      while (node.L) node = node.L;
      return node;
    }

    function createEdge(left, right, v0, v1) {
      var edge = [null, null],
          index = edges.push(edge) - 1;
      edge.left = left;
      edge.right = right;
      if (v0) setEdgeEnd(edge, left, right, v0);
      if (v1) setEdgeEnd(edge, right, left, v1);
      cells[left.index].halfedges.push(index);
      cells[right.index].halfedges.push(index);
      return edge;
    }

    function createBorderEdge(left, v0, v1) {
      var edge = [v0, v1];
      edge.left = left;
      return edge;
    }

    function setEdgeEnd(edge, left, right, vertex) {
      if (!edge[0] && !edge[1]) {
        edge[0] = vertex;
        edge.left = left;
        edge.right = right;
      } else if (edge.left === right) {
        edge[1] = vertex;
      } else {
        edge[0] = vertex;
      }
    }

    // Liang–Barsky line clipping.
    function clipEdge(edge, x0, y0, x1, y1) {
      var a = edge[0],
          b = edge[1],
          ax = a[0],
          ay = a[1],
          bx = b[0],
          by = b[1],
          t0 = 0,
          t1 = 1,
          dx = bx - ax,
          dy = by - ay,
          r;

      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }

      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }

      if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

      if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
      if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
      return true;
    }

    function connectEdge(edge, x0, y0, x1, y1) {
      var v1 = edge[1];
      if (v1) return true;

      var v0 = edge[0],
          left = edge.left,
          right = edge.right,
          lx = left[0],
          ly = left[1],
          rx = right[0],
          ry = right[1],
          fx = (lx + rx) / 2,
          fy = (ly + ry) / 2,
          fm,
          fb;

      if (ry === ly) {
        if (fx < x0 || fx >= x1) return;
        if (lx > rx) {
          if (!v0) v0 = [fx, y0];
          else if (v0[1] >= y1) return;
          v1 = [fx, y1];
        } else {
          if (!v0) v0 = [fx, y1];
          else if (v0[1] < y0) return;
          v1 = [fx, y0];
        }
      } else {
        fm = (lx - rx) / (ry - ly);
        fb = fy - fm * fx;
        if (fm < -1 || fm > 1) {
          if (lx > rx) {
            if (!v0) v0 = [(y0 - fb) / fm, y0];
            else if (v0[1] >= y1) return;
            v1 = [(y1 - fb) / fm, y1];
          } else {
            if (!v0) v0 = [(y1 - fb) / fm, y1];
            else if (v0[1] < y0) return;
            v1 = [(y0 - fb) / fm, y0];
          }
        } else {
          if (ly < ry) {
            if (!v0) v0 = [x0, fm * x0 + fb];
            else if (v0[0] >= x1) return;
            v1 = [x1, fm * x1 + fb];
          } else {
            if (!v0) v0 = [x1, fm * x1 + fb];
            else if (v0[0] < x0) return;
            v1 = [x0, fm * x0 + fb];
          }
        }
      }

      edge[0] = v0;
      edge[1] = v1;
      return true;
    }

    function clipEdges(x0, y0, x1, y1) {
      var i = edges.length,
          edge;

      while (i--) {
        if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
            || !clipEdge(edge, x0, y0, x1, y1)
            || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3
                || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {
          delete edges[i];
        }
      }
    }

    function createCell(site) {
      return cells[site.index] = {
        site: site,
        halfedges: []
      };
    }

    function cellHalfedgeAngle(cell, edge) {
      var site = cell.site,
          va = edge.left,
          vb = edge.right;
      if (site === vb) vb = va, va = site;
      if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
      if (site === va) va = edge[1], vb = edge[0];
      else va = edge[0], vb = edge[1];
      return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
    }

    function cellHalfedgeStart(cell, edge) {
      return edge[+(edge.left !== cell.site)];
    }

    function cellHalfedgeEnd(cell, edge) {
      return edge[+(edge.left === cell.site)];
    }

    function sortCellHalfedges() {
      for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
        if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
          var index = new Array(m),
              array = new Array(m);
          for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
          index.sort(function(i, j) { return array[j] - array[i]; });
          for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
          for (j = 0; j < m; ++j) halfedges[j] = array[j];
        }
      }
    }

    function clipCells(x0, y0, x1, y1) {
      var nCells = cells.length,
          iCell,
          cell,
          site,
          iHalfedge,
          halfedges,
          nHalfedges,
          start,
          startX,
          startY,
          end,
          endX,
          endY,
          cover = true;

      for (iCell = 0; iCell < nCells; ++iCell) {
        if (cell = cells[iCell]) {
          site = cell.site;
          halfedges = cell.halfedges;
          iHalfedge = halfedges.length;

          // Remove any dangling clipped edges.
          while (iHalfedge--) {
            if (!edges[halfedges[iHalfedge]]) {
              halfedges.splice(iHalfedge, 1);
            }
          }

          // Insert any border edges as necessary.
          iHalfedge = 0, nHalfedges = halfedges.length;
          while (iHalfedge < nHalfedges) {
            end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
            start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
            if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {
              halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
                  Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]
                  : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]
                  : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]
                  : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]
                  : null)) - 1);
              ++nHalfedges;
            }
          }

          if (nHalfedges) cover = false;
        }
      }

      // If there weren’t any edges, have the closest site cover the extent.
      // It doesn’t matter which corner of the extent we measure!
      if (cover) {
        var dx, dy, d2, dc = Infinity;

        for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
          if (cell = cells[iCell]) {
            site = cell.site;
            dx = site[0] - x0;
            dy = site[1] - y0;
            d2 = dx * dx + dy * dy;
            if (d2 < dc) dc = d2, cover = cell;
          }
        }

        if (cover) {
          var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
          cover.halfedges.push(
            edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
            edges.push(createBorderEdge(site, v01, v11)) - 1,
            edges.push(createBorderEdge(site, v11, v10)) - 1,
            edges.push(createBorderEdge(site, v10, v00)) - 1
          );
        }
      }

      // Lastly delete any cells with no edges; these were entirely clipped.
      for (iCell = 0; iCell < nCells; ++iCell) {
        if (cell = cells[iCell]) {
          if (!cell.halfedges.length) {
            delete cells[iCell];
          }
        }
      }
    }

    var circlePool = [];

    var firstCircle;

    function Circle() {
      RedBlackNode(this);
      this.x =
      this.y =
      this.arc =
      this.site =
      this.cy = null;
    }

    function attachCircle(arc) {
      var lArc = arc.P,
          rArc = arc.N;

      if (!lArc || !rArc) return;

      var lSite = lArc.site,
          cSite = arc.site,
          rSite = rArc.site;

      if (lSite === rSite) return;

      var bx = cSite[0],
          by = cSite[1],
          ax = lSite[0] - bx,
          ay = lSite[1] - by,
          cx = rSite[0] - bx,
          cy = rSite[1] - by;

      var d = 2 * (ax * cy - ay * cx);
      if (d >= -epsilon2$2) return;

      var ha = ax * ax + ay * ay,
          hc = cx * cx + cy * cy,
          x = (cy * ha - ay * hc) / d,
          y = (ax * hc - cx * ha) / d;

      var circle = circlePool.pop() || new Circle;
      circle.arc = arc;
      circle.site = cSite;
      circle.x = x + bx;
      circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

      arc.circle = circle;

      var before = null,
          node = circles._;

      while (node) {
        if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
          if (node.L) node = node.L;
          else { before = node.P; break; }
        } else {
          if (node.R) node = node.R;
          else { before = node; break; }
        }
      }

      circles.insert(before, circle);
      if (!before) firstCircle = circle;
    }

    function detachCircle(arc) {
      var circle = arc.circle;
      if (circle) {
        if (!circle.P) firstCircle = circle.N;
        circles.remove(circle);
        circlePool.push(circle);
        RedBlackNode(circle);
        arc.circle = null;
      }
    }

    var beachPool = [];

    function Beach() {
      RedBlackNode(this);
      this.edge =
      this.site =
      this.circle = null;
    }

    function createBeach(site) {
      var beach = beachPool.pop() || new Beach;
      beach.site = site;
      return beach;
    }

    function detachBeach(beach) {
      detachCircle(beach);
      beaches.remove(beach);
      beachPool.push(beach);
      RedBlackNode(beach);
    }

    function removeBeach(beach) {
      var circle = beach.circle,
          x = circle.x,
          y = circle.cy,
          vertex = [x, y],
          previous = beach.P,
          next = beach.N,
          disappearing = [beach];

      detachBeach(beach);

      var lArc = previous;
      while (lArc.circle
          && Math.abs(x - lArc.circle.x) < epsilon$3
          && Math.abs(y - lArc.circle.cy) < epsilon$3) {
        previous = lArc.P;
        disappearing.unshift(lArc);
        detachBeach(lArc);
        lArc = previous;
      }

      disappearing.unshift(lArc);
      detachCircle(lArc);

      var rArc = next;
      while (rArc.circle
          && Math.abs(x - rArc.circle.x) < epsilon$3
          && Math.abs(y - rArc.circle.cy) < epsilon$3) {
        next = rArc.N;
        disappearing.push(rArc);
        detachBeach(rArc);
        rArc = next;
      }

      disappearing.push(rArc);
      detachCircle(rArc);

      var nArcs = disappearing.length,
          iArc;
      for (iArc = 1; iArc < nArcs; ++iArc) {
        rArc = disappearing[iArc];
        lArc = disappearing[iArc - 1];
        setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
      }

      lArc = disappearing[0];
      rArc = disappearing[nArcs - 1];
      rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

      attachCircle(lArc);
      attachCircle(rArc);
    }

    function addBeach(site) {
      var x = site[0],
          directrix = site[1],
          lArc,
          rArc,
          dxl,
          dxr,
          node = beaches._;

      while (node) {
        dxl = leftBreakPoint(node, directrix) - x;
        if (dxl > epsilon$3) node = node.L; else {
          dxr = x - rightBreakPoint(node, directrix);
          if (dxr > epsilon$3) {
            if (!node.R) {
              lArc = node;
              break;
            }
            node = node.R;
          } else {
            if (dxl > -epsilon$3) {
              lArc = node.P;
              rArc = node;
            } else if (dxr > -epsilon$3) {
              lArc = node;
              rArc = node.N;
            } else {
              lArc = rArc = node;
            }
            break;
          }
        }
      }

      createCell(site);
      var newArc = createBeach(site);
      beaches.insert(lArc, newArc);

      if (!lArc && !rArc) return;

      if (lArc === rArc) {
        detachCircle(lArc);
        rArc = createBeach(lArc.site);
        beaches.insert(newArc, rArc);
        newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
        attachCircle(lArc);
        attachCircle(rArc);
        return;
      }

      if (!rArc) { // && lArc
        newArc.edge = createEdge(lArc.site, newArc.site);
        return;
      }

      // else lArc !== rArc
      detachCircle(lArc);
      detachCircle(rArc);

      var lSite = lArc.site,
          ax = lSite[0],
          ay = lSite[1],
          bx = site[0] - ax,
          by = site[1] - ay,
          rSite = rArc.site,
          cx = rSite[0] - ax,
          cy = rSite[1] - ay,
          d = 2 * (bx * cy - by * cx),
          hb = bx * bx + by * by,
          hc = cx * cx + cy * cy,
          vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

      setEdgeEnd(rArc.edge, lSite, rSite, vertex);
      newArc.edge = createEdge(lSite, site, null, vertex);
      rArc.edge = createEdge(site, rSite, null, vertex);
      attachCircle(lArc);
      attachCircle(rArc);
    }

    function leftBreakPoint(arc, directrix) {
      var site = arc.site,
          rfocx = site[0],
          rfocy = site[1],
          pby2 = rfocy - directrix;

      if (!pby2) return rfocx;

      var lArc = arc.P;
      if (!lArc) return -Infinity;

      site = lArc.site;
      var lfocx = site[0],
          lfocy = site[1],
          plby2 = lfocy - directrix;

      if (!plby2) return lfocx;

      var hl = lfocx - rfocx,
          aby2 = 1 / pby2 - 1 / plby2,
          b = hl / plby2;

      if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

      return (rfocx + lfocx) / 2;
    }

    function rightBreakPoint(arc, directrix) {
      var rArc = arc.N;
      if (rArc) return leftBreakPoint(rArc, directrix);
      var site = arc.site;
      return site[1] === directrix ? site[0] : Infinity;
    }

    var epsilon$3 = 1e-6;
    var epsilon2$2 = 1e-12;
    var beaches;
    var cells;
    var circles;
    var edges;

    function triangleArea(a, b, c) {
      return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
    }

    function lexicographic(a, b) {
      return b[1] - a[1]
          || b[0] - a[0];
    }

    function Diagram(sites, extent) {
      var site = sites.sort(lexicographic).pop(),
          x,
          y,
          circle;

      edges = [];
      cells = new Array(sites.length);
      beaches = new RedBlackTree;
      circles = new RedBlackTree;

      while (true) {
        circle = firstCircle;
        if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
          if (site[0] !== x || site[1] !== y) {
            addBeach(site);
            x = site[0], y = site[1];
          }
          site = sites.pop();
        } else if (circle) {
          removeBeach(circle.arc);
        } else {
          break;
        }
      }

      sortCellHalfedges();

      if (extent) {
        var x0 = +extent[0][0],
            y0 = +extent[0][1],
            x1 = +extent[1][0],
            y1 = +extent[1][1];
        clipEdges(x0, y0, x1, y1);
        clipCells(x0, y0, x1, y1);
      }

      this.edges = edges;
      this.cells = cells;

      beaches =
      circles =
      edges =
      cells = null;
    }

    Diagram.prototype = {
      constructor: Diagram,

      polygons: function() {
        var edges = this.edges;

        return this.cells.map(function(cell) {
          var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
          polygon.data = cell.site.data;
          return polygon;
        });
      },

      triangles: function() {
        var triangles = [],
            edges = this.edges;

        this.cells.forEach(function(cell, i) {
          if (!(m = (halfedges = cell.halfedges).length)) return;
          var site = cell.site,
              halfedges,
              j = -1,
              m,
              s0,
              e1 = edges[halfedges[m - 1]],
              s1 = e1.left === site ? e1.right : e1.left;

          while (++j < m) {
            s0 = s1;
            e1 = edges[halfedges[j]];
            s1 = e1.left === site ? e1.right : e1.left;
            if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
              triangles.push([site.data, s0.data, s1.data]);
            }
          }
        });

        return triangles;
      },

      links: function() {
        return this.edges.filter(function(edge) {
          return edge.right;
        }).map(function(edge) {
          return {
            source: edge.left.data,
            target: edge.right.data
          };
        });
      },

      find: function(x, y, radius) {
        var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

        // Use the previously-found cell, or start with an arbitrary one.
        while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
        var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

        // Traverse the half-edges to find a closer cell, if any.
        do {
          cell = that.cells[i0 = i1], i1 = null;
          cell.halfedges.forEach(function(e) {
            var edge = that.edges[e], v = edge.left;
            if ((v === cell.site || !v) && !(v = edge.right)) return;
            var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
            if (v2 < d2) d2 = v2, i1 = v.index;
          });
        } while (i1 !== null);

        that._found = i0;

        return radius == null || d2 <= radius * radius ? cell.site : null;
      }
    };

    function voronoi() {
      var x = x$4,
          y = y$4,
          extent = null;

      function voronoi(data) {
        return new Diagram(data.map(function(d, i) {
          var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];
          s.index = i;
          s.data = d;
          return s;
        }), extent);
      }

      voronoi.polygons = function(data) {
        return voronoi(data).polygons();
      };

      voronoi.links = function(data) {
        return voronoi(data).links();
      };

      voronoi.triangles = function(data) {
        return voronoi(data).triangles();
      };

      voronoi.x = function(_) {
        return arguments.length ? (x = typeof _ === "function" ? _ : constant$8(+_), voronoi) : x;
      };

      voronoi.y = function(_) {
        return arguments.length ? (y = typeof _ === "function" ? _ : constant$8(+_), voronoi) : y;
      };

      voronoi.extent = function(_) {
        return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
      };

      voronoi.size = function(_) {
        return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
      };

      return voronoi;
    }

    function Voronoi(params) {
      Transform.call(this, null, params);
    }

    Voronoi.Definition = {
      "type": "Voronoi",
      "metadata": {"modifies": true},
      "params": [
        { "name": "x", "type": "field", "required": true },
        { "name": "y", "type": "field", "required": true },
        { "name": "size", "type": "number", "array": true, "length": 2 },
        { "name": "extent", "type": "array", "array": true, "length": 2,
          "default": [[-1e5, -1e5], [1e5, 1e5]],
          "content": {"type": "number", "array": true, "length": 2} },
        { "name": "as", "type": "string", "default": "path" }
      ]
    };

    var prototype$1g = inherits(Voronoi, Transform);

    var defaultExtent = [[-1e5, -1e5], [1e5, 1e5]];

    prototype$1g.transform = function(_, pulse) {
      var as = _.as || 'path',
          data = pulse.source,
          diagram, polygons, i, n;

      // configure and construct voronoi diagram
      diagram = voronoi().x(_.x).y(_.y);
      if (_.size) diagram.size(_.size);
      else diagram.extent(_.extent || defaultExtent);

      this.value = (diagram = diagram(data));

      // map polygons to paths
      polygons = diagram.polygons();
      for (i=0, n=data.length; i<n; ++i) {
        data[i][as] = polygons[i]
          ? 'M' + polygons[i].join('L') + 'Z'
          : null;
      }

      return pulse.reflow(_.modified()).modifies(as);
    };



    var voronoi$1 = /*#__PURE__*/Object.freeze({
        voronoi: Voronoi
    });

    /*
    Copyright (c) 2013, Jason Davies.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.

      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.

      * The name Jason Davies may not be used to endorse or promote products
        derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL JASON DAVIES BE LIABLE FOR ANY DIRECT, INDIRECT,
    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
    OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
    ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */

    // Word cloud layout by Jason Davies, https://www.jasondavies.com/wordcloud/
    // Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf

    var cloudRadians = Math.PI / 180,
        cw = 1 << 11 >> 5,
        ch = 1 << 11;

    function cloud() {
      var size = [256, 256],
          text,
          font,
          fontSize,
          fontStyle,
          fontWeight,
          rotate,
          padding,
          spiral = archimedeanSpiral,
          words = [],
          random = Math.random,
          cloud = {};

      cloud.layout = function() {
        var contextAndRatio = getContext(domCanvas()),
            board = zeroArray((size[0] >> 5) * size[1]),
            bounds = null,
            n = words.length,
            i = -1,
            tags = [],
            data = words.map(function(d) {
              return {
                text: text(d),
                font: font(d),
                style: fontStyle(d),
                weight: fontWeight(d),
                rotate: rotate(d),
                size: ~~fontSize(d),
                padding: padding(d),
                xoff: 0,
                yoff: 0,
                x1: 0,
                y1: 0,
                x0: 0,
                y0: 0,
                hasText: false,
                sprite: null,
                datum: d
              };
            }).sort(function(a, b) { return b.size - a.size; });

        while (++i < n) {
          var d = data[i];
          d.x = (size[0] * (random() + .5)) >> 1;
          d.y = (size[1] * (random() + .5)) >> 1;
          cloudSprite(contextAndRatio, d, data, i);
          if (d.hasText && place(board, d, bounds)) {
            tags.push(d);
            if (bounds) cloudBounds(bounds, d);
            else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];
            // Temporary hack
            d.x -= size[0] >> 1;
            d.y -= size[1] >> 1;
          }
        }

        return tags;
      };

      function getContext(canvas) {
        canvas.width = canvas.height = 1;
        var ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
        canvas.width = (cw << 5) / ratio;
        canvas.height = ch / ratio;

        var context = canvas.getContext("2d");
        context.fillStyle = context.strokeStyle = "red";
        context.textAlign = "center";

        return {context: context, ratio: ratio};
      }

      function place(board, tag, bounds) {
        var startX = tag.x,
            startY = tag.y,
            maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
            s = spiral(size),
            dt = random() < .5 ? 1 : -1,
            t = -dt,
            dxdy,
            dx,
            dy;

        while (dxdy = s(t += dt)) {
          dx = ~~dxdy[0];
          dy = ~~dxdy[1];

          if (Math.min(Math.abs(dx), Math.abs(dy)) >= maxDelta) break;

          tag.x = startX + dx;
          tag.y = startY + dy;

          if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||
              tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
          // TODO only check for collisions within current bounds.
          if (!bounds || !cloudCollide(tag, board, size[0])) {
            if (!bounds || collideRects(tag, bounds)) {
              var sprite = tag.sprite,
                  w = tag.width >> 5,
                  sw = size[0] >> 5,
                  lx = tag.x - (w << 4),
                  sx = lx & 0x7f,
                  msx = 32 - sx,
                  h = tag.y1 - tag.y0,
                  x = (tag.y + tag.y0) * sw + (lx >> 5),
                  last;
              for (var j = 0; j < h; j++) {
                last = 0;
                for (var i = 0; i <= w; i++) {
                  board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
                }
                x += sw;
              }
              tag.sprite = null;
              return true;
            }
          }
        }
        return false;
      }

      cloud.words = function(_) {
        if (arguments.length) {
          words = _;
          return cloud;
        } else {
          return words;
        }
      };

      cloud.size = function(_) {
        if (arguments.length) {
          size = [+_[0], +_[1]];
          return cloud;
        } else {
          return size;
        }
      };

      cloud.font = function(_) {
        if (arguments.length) {
          font = functor(_);
          return cloud;
        } else {
          return font;
        }
      };

      cloud.fontStyle = function(_) {
        if (arguments.length) {
          fontStyle = functor(_);
          return cloud;
        } else {
          return fontStyle;
        }
      };

      cloud.fontWeight = function(_) {
        if (arguments.length) {
          fontWeight = functor(_);
          return cloud;
        } else {
          return fontWeight;
        }
      };

      cloud.rotate = function(_) {
        if (arguments.length) {
          rotate = functor(_);
          return cloud;
        } else {
          return rotate;
        }
      };

      cloud.text = function(_) {
        if (arguments.length) {
          text = functor(_);
          return cloud;
        } else {
          return text;
        }
      };

      cloud.spiral = function(_) {
        if (arguments.length) {
          spiral = spirals[_] || _;
          return cloud;
        } else {
          return spiral;
        }
      };

      cloud.fontSize = function(_) {
        if (arguments.length) {
          fontSize = functor(_);
          return cloud;
        } else {
          return fontSize;
        }
      };

      cloud.padding = function(_) {
        if (arguments.length) {
          padding = functor(_);
          return cloud;
        } else {
          return padding;
        }
      };

      cloud.random = function(_) {
        if (arguments.length) {
          random = _;
          return cloud;
        } else {
          return random;
        }
      };

      return cloud;
    }

    // Fetches a monochrome sprite bitmap for the specified text.
    // Load in batches for speed.
    function cloudSprite(contextAndRatio, d, data, di) {
      if (d.sprite) return;
      var c = contextAndRatio.context,
          ratio = contextAndRatio.ratio;

      c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
      var x = 0,
          y = 0,
          maxh = 0,
          n = data.length,
          w, w32, h, i, j;
      --di;
      while (++di < n) {
        d = data[di];
        c.save();
        c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
        w = c.measureText(d.text + "m").width * ratio;
        h = d.size << 1;
        if (d.rotate) {
          var sr = Math.sin(d.rotate * cloudRadians),
              cr = Math.cos(d.rotate * cloudRadians),
              wcr = w * cr,
              wsr = w * sr,
              hcr = h * cr,
              hsr = h * sr;
          w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;
          h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
        } else {
          w = (w + 0x1f) >> 5 << 5;
        }
        if (h > maxh) maxh = h;
        if (x + w >= (cw << 5)) {
          x = 0;
          y += maxh;
          maxh = 0;
        }
        if (y + h >= ch) break;
        c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
        if (d.rotate) c.rotate(d.rotate * cloudRadians);
        c.fillText(d.text, 0, 0);
        if (d.padding) {
          c.lineWidth = 2 * d.padding;
          c.strokeText(d.text, 0, 0);
        }
        c.restore();
        d.width = w;
        d.height = h;
        d.xoff = x;
        d.yoff = y;
        d.x1 = w >> 1;
        d.y1 = h >> 1;
        d.x0 = -d.x1;
        d.y0 = -d.y1;
        d.hasText = true;
        x += w;
      }
      var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
          sprite = [];
      while (--di >= 0) {
        d = data[di];
        if (!d.hasText) continue;
        w = d.width;
        w32 = w >> 5;
        h = d.y1 - d.y0;
        // Zero the buffer
        for (i = 0; i < h * w32; i++) sprite[i] = 0;
        x = d.xoff;
        if (x == null) return;
        y = d.yoff;
        var seen = 0,
            seenRow = -1;
        for (j = 0; j < h; j++) {
          for (i = 0; i < w; i++) {
            var k = w32 * j + (i >> 5),
                m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;
            sprite[k] |= m;
            seen |= m;
          }
          if (seen) seenRow = j;
          else {
            d.y0++;
            h--;
            j--;
            y++;
          }
        }
        d.y1 = d.y0 + seenRow;
        d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
      }
    }

    // Use mask-based collision detection.
    function cloudCollide(tag, board, sw) {
      sw >>= 5;
      var sprite = tag.sprite,
          w = tag.width >> 5,
          lx = tag.x - (w << 4),
          sx = lx & 0x7f,
          msx = 32 - sx,
          h = tag.y1 - tag.y0,
          x = (tag.y + tag.y0) * sw + (lx >> 5),
          last;
      for (var j = 0; j < h; j++) {
        last = 0;
        for (var i = 0; i <= w; i++) {
          if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))
              & board[x + i]) return true;
        }
        x += sw;
      }
      return false;
    }

    function cloudBounds(bounds, d) {
      var b0 = bounds[0],
          b1 = bounds[1];
      if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
      if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
      if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
      if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
    }

    function collideRects(a, b) {
      return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
    }

    function archimedeanSpiral(size) {
      var e = size[0] / size[1];
      return function(t) {
        return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
      };
    }

    function rectangularSpiral(size) {
      var dy = 4,
          dx = dy * size[0] / size[1],
          x = 0,
          y = 0;
      return function(t) {
        var sign = t < 0 ? -1 : 1;
        // See triangular numbers: T_n = n * (n + 1) / 2.
        switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {
          case 0:  x += dx; break;
          case 1:  y += dy; break;
          case 2:  x -= dx; break;
          default: y -= dy; break;
        }
        return [x, y];
      };
    }

    // TODO reuse arrays?
    function zeroArray(n) {
      var a = [],
          i = -1;
      while (++i < n) a[i] = 0;
      return a;
    }

    function functor(d) {
      return typeof d === "function" ? d : function() { return d; };
    }

    var spirals = {
      archimedean: archimedeanSpiral,
      rectangular: rectangularSpiral
    };

    var Output$4 = ['x', 'y', 'font', 'fontSize', 'fontStyle', 'fontWeight', 'angle'];

    var Params$1 = ['text', 'font', 'rotate', 'fontSize', 'fontStyle', 'fontWeight'];

    function Wordcloud(params) {
      Transform.call(this, cloud(), params);
    }

    Wordcloud.Definition = {
      "type": "Wordcloud",
      "metadata": {"modifies": true},
      "params": [
        { "name": "size", "type": "number", "array": true, "length": 2 },
        { "name": "font", "type": "string", "expr": true, "default": "sans-serif" },
        { "name": "fontStyle", "type": "string", "expr": true, "default": "normal" },
        { "name": "fontWeight", "type": "string", "expr": true, "default": "normal" },
        { "name": "fontSize", "type": "number", "expr": true, "default": 14 },
        { "name": "fontSizeRange", "type": "number", "array": "nullable", "default": [10, 50] },
        { "name": "rotate", "type": "number", "expr": true, "default": 0 },
        { "name": "text", "type": "field" },
        { "name": "spiral", "type": "string", "values": ["archimedean", "rectangular"] },
        { "name": "padding", "type": "number", "expr": true },
        { "name": "as", "type": "string", "array": true, "length": 7, "default": Output$4 }
      ]
    };

    var prototype$1h = inherits(Wordcloud, Transform);

    prototype$1h.transform = function(_, pulse) {
      function modp(param) {
        var p = _[param];
        return isFunction(p) && pulse.modified(p.fields);
      }

      var mod = _.modified();
      if (!(mod || pulse.changed(pulse.ADD_REM) || Params$1.some(modp))) return;

      var data = pulse.materialize(pulse.SOURCE).source,
          layout = this.value,
          as = _.as || Output$4,
          fontSize = _.fontSize || 14,
          range;

      isFunction(fontSize)
        ? (range = _.fontSizeRange)
        : (fontSize = constant(fontSize));

      // create font size scaling function as needed
      if (range) {
        var fsize = fontSize,
            sizeScale = scale$1('sqrt')()
              .domain(extent$3(fsize, data))
              .range(range);
        fontSize = function(x) { return sizeScale(fsize(x)); };
      }

      data.forEach(function(t) {
        t[as[0]] = NaN;
        t[as[1]] = NaN;
        t[as[3]] = 0;
      });

      // configure layout
      var words = layout
        .words(data)
        .text(_.text)
        .size(_.size || [500, 500])
        .padding(_.padding || 1)
        .spiral(_.spiral || 'archimedean')
        .rotate(_.rotate || 0)
        .font(_.font || 'sans-serif')
        .fontStyle(_.fontStyle || 'normal')
        .fontWeight(_.fontWeight || 'normal')
        .fontSize(fontSize)
        .random(random)
        .layout();

      var size = layout.size(),
          dx = size[0] >> 1,
          dy = size[1] >> 1,
          i = 0,
          n = words.length,
          w, t;

      for (; i<n; ++i) {
        w = words[i];
        t = w.datum;
        t[as[0]] = w.x + dx;
        t[as[1]] = w.y + dy;
        t[as[2]] = w.font;
        t[as[3]] = w.size;
        t[as[4]] = w.style;
        t[as[5]] = w.weight;
        t[as[6]] = w.rotate;
      }

      return pulse.reflow(mod).modifies(as);
    };

    function extent$3(field, data) {
      var min = +Infinity,
          max = -Infinity,
          i = 0,
          n = data.length,
          v;

      for (; i<n; ++i) {
        v = field(data[i]);
        if (v < min) min = v;
        if (v > max) max = v;
      }

      return [min, max];
    }



    var wordcloud = /*#__PURE__*/Object.freeze({
        wordcloud: Wordcloud
    });

    function array8(n) { return new Uint8Array(n); }

    function array16(n) { return new Uint16Array(n); }

    function array32(n) { return new Uint32Array(n); }

    /**
     * Maintains CrossFilter state.
     */
    function Bitmaps() {

      var width = 8,
          data = [],
          seen = array32(0),
          curr = array$4(0, width),
          prev = array$4(0, width);

      return {

        data: function() { return data; },

        seen: function() {
          return (seen = lengthen(seen, data.length));
        },

        add: function(array) {
          for (var i=0, j=data.length, n=array.length, t; i<n; ++i) {
            t = array[i];
            t._index = j++;
            data.push(t);
          }
        },

        remove: function(num, map) { // map: index -> boolean (true => remove)
          var n = data.length,
              copy = Array(n - num),
              reindex = data, // reuse old data array for index map
              t, i, j;

          // seek forward to first removal
          for (i=0; !map[i] && i<n; ++i) {
            copy[i] = data[i];
            reindex[i] = i;
          }

          // condense arrays
          for (j=i; i<n; ++i) {
            t = data[i];
            if (!map[i]) {
              reindex[i] = j;
              curr[j] = curr[i];
              prev[j] = prev[i];
              copy[j] = t;
              t._index = j++;
            } else {
              reindex[i] = -1;
            }
            curr[i] = 0; // clear unused bits
          }

          data = copy;
          return reindex;
        },

        size: function() { return data.length; },

        curr: function() { return curr; },

        prev: function() { return prev; },

        reset: function(k) { prev[k] = curr[k]; },

        all: function() {
          return width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff;
        },

        set: function(k, one) { curr[k] |= one; },

        clear: function(k, one) { curr[k] &= ~one; },

        resize: function(n, m) {
          var k = curr.length;
          if (n > k || m > width) {
            width = Math.max(m, width);
            curr = array$4(n, width, curr);
            prev = array$4(n, width);
          }
        }
      };
    }

    function lengthen(array, length, copy) {
      if (array.length >= length) return array;
      copy = copy || new array.constructor(length);
      copy.set(array);
      return copy;
    }

    function array$4(n, m, array) {
      var copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);
      if (array) copy.set(array);
      return copy;
    }

    function Dimension(index, i, query) {
      var bit = (1 << i);

      return {
        one:     bit,
        zero:    ~bit,
        range:   query.slice(),
        bisect:  index.bisect,
        index:   index.index,
        size:    index.size,

        onAdd: function(added, curr) {
          var dim = this,
              range = dim.bisect(dim.range, added.value),
              idx = added.index,
              lo = range[0],
              hi = range[1],
              n1 = idx.length, i;

          for (i=0;  i<lo; ++i) curr[idx[i]] |= bit;
          for (i=hi; i<n1; ++i) curr[idx[i]] |= bit;
          return dim;
        }
      };
    }

    /**
     * Maintains a list of values, sorted by key.
     */
    function SortedIndex() {
      var index = array32(0),
          value = [],
          size = 0;

      function insert(key, data, base) {
        if (!data.length) return [];

        var n0 = size,
            n1 = data.length,
            addv = Array(n1),
            addi = array32(n1),
            oldv, oldi, i;

        for (i=0; i<n1; ++i) {
          addv[i] = key(data[i]);
          addi[i] = i;
        }
        addv = sort(addv, addi);

        if (n0) {
          oldv = value;
          oldi = index;
          value = Array(n0 + n1);
          index = array32(n0 + n1);
          merge$2(base, oldv, oldi, n0, addv, addi, n1, value, index);
        } else {
          if (base > 0) for (i=0; i<n1; ++i) {
            addi[i] += base;
          }
          value = addv;
          index = addi;
        }
        size = n0 + n1;

        return {index: addi, value: addv};
      }

      function remove(num, map) {
        // map: index -> remove
        var n = size,
            idx, i, j;

        // seek forward to first removal
        for (i=0; !map[index[i]] && i<n; ++i);

        // condense index and value arrays
        for (j=i; i<n; ++i) {
          if (!map[idx=index[i]]) {
            index[j] = idx;
            value[j] = value[i];
            ++j;
          }
        }

        size = n - num;
      }

      function reindex(map) {
        for (var i=0, n=size; i<n; ++i) {
          index[i] = map[index[i]];
        }
      }

      function bisect(range, array) {
        var n;
        if (array) {
          n = array.length;
        } else {
          array = value;
          n = size;
        }
        return [
          bisectLeft(array, range[0], 0, n),
          bisectRight(array, range[1], 0, n)
        ];
      }

      return {
        insert:  insert,
        remove:  remove,
        bisect:  bisect,
        reindex: reindex,
        index:   function() { return index; },
        size:    function() { return size; }
      };
    }

    function sort(values, index) {
      values.sort.call(index, function(a, b) {
        var x = values[a],
            y = values[b];
        return x < y ? -1 : x > y ? 1 : 0;
      });
      return permute(values, index);
    }

    function merge$2(base, value0, index0, n0, value1, index1, n1, value, index) {
      var i0 = 0, i1 = 0, i;

      for (i=0; i0 < n0 && i1 < n1; ++i) {
        if (value0[i0] < value1[i1]) {
          value[i] = value0[i0];
          index[i] = index0[i0++];
        } else {
          value[i] = value1[i1];
          index[i] = index1[i1++] + base;
        }
      }

      for (; i0 < n0; ++i0, ++i) {
        value[i] = value0[i0];
        index[i] = index0[i0];
      }

      for (; i1 < n1; ++i1, ++i) {
        value[i] = value1[i1];
        index[i] = index1[i1] + base;
      }
    }

    /**
     * An indexed multi-dimensional filter.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.
     * @param {Array} params.query - An array of per-dimension range queries.
     */
    function CrossFilter(params) {
      Transform.call(this, Bitmaps(), params);
      this._indices = null;
      this._dims = null;
    }

    CrossFilter.Definition = {
      "type": "CrossFilter",
      "metadata": {},
      "params": [
        { "name": "fields", "type": "field", "array": true, "required": true },
        { "name": "query", "type": "array", "array": true, "required": true,
          "content": {"type": "number", "array": true, "length": 2} }
      ]
    };

    var prototype$1i = inherits(CrossFilter, Transform);

    prototype$1i.transform = function(_, pulse) {
      if (!this._dims) {
        return this.init(_, pulse);
      } else {
        var init = _.modified('fields')
              || _.fields.some(function(f) { return pulse.modified(f.fields); });

        return init
          ? this.reinit(_, pulse)
          : this.eval(_, pulse);
      }
    };

    prototype$1i.init = function(_, pulse) {
      var fields = _.fields,
          query = _.query,
          indices = this._indices = {},
          dims = this._dims = [],
          m = query.length,
          i = 0, key, index;

      // instantiate indices and dimensions
      for (; i<m; ++i) {
        key = fields[i].fname;
        index = indices[key] || (indices[key] = SortedIndex());
        dims.push(Dimension(index, i, query[i]));
      }

      return this.eval(_, pulse);
    };

    prototype$1i.reinit = function(_, pulse) {
      var output = pulse.materialize().fork(),
          fields = _.fields,
          query = _.query,
          indices = this._indices,
          dims = this._dims,
          bits = this.value,
          curr = bits.curr(),
          prev = bits.prev(),
          all = bits.all(),
          out = (output.rem = output.add),
          mod = output.mod,
          m = query.length,
          adds = {}, add, index, key,
          mods, remMap, modMap, i, n, f;

      // set prev to current state
      prev.set(curr);

      // if pulse has remove tuples, process them first
      if (pulse.rem.length) {
        remMap = this.remove(_, pulse, output);
      }

      // if pulse has added tuples, add them to state
      if (pulse.add.length) {
        bits.add(pulse.add);
      }

      // if pulse has modified tuples, create an index map
      if (pulse.mod.length) {
        modMap = {};
        for (mods=pulse.mod, i=0, n=mods.length; i<n; ++i) {
          modMap[mods[i]._index] = 1;
        }
      }

      // re-initialize indices as needed, update curr bitmap
      for (i=0; i<m; ++i) {
        f = fields[i];
        if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {
          key = f.fname;
          if (!(add = adds[key])) {
            indices[key] = index = SortedIndex();
            adds[key] = add = index.insert(f, pulse.source, 0);
          }
          dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);
        }
      }

      // visit each tuple
      // if filter state changed, push index to add/rem
      // else if in mod and passes a filter, push index to mod
      for (i=0, n=bits.data().length; i<n; ++i) {
        if (remMap[i]) { // skip if removed tuple
          continue;
        } else if (prev[i] !== curr[i]) { // add if state changed
          out.push(i);
        } else if (modMap[i] && curr[i] !== all) { // otherwise, pass mods through
          mod.push(i);
        }
      }

      bits.mask = (1 << m) - 1;
      return output;
    };

    prototype$1i.eval = function(_, pulse) {
      var output = pulse.materialize().fork(),
          m = this._dims.length,
          mask = 0;

      if (pulse.rem.length) {
        this.remove(_, pulse, output);
        mask |= (1 << m) - 1;
      }

      if (_.modified('query') && !_.modified('fields')) {
        mask |= this.update(_, pulse, output);
      }

      if (pulse.add.length) {
        this.insert(_, pulse, output);
        mask |= (1 << m) - 1;
      }

      if (pulse.mod.length) {
        this.modify(pulse, output);
        mask |= (1 << m) - 1;
      }

      this.value.mask = mask;
      return output;
    };

    prototype$1i.insert = function(_, pulse, output) {
      var tuples = pulse.add,
          bits = this.value,
          dims = this._dims,
          indices = this._indices,
          fields = _.fields,
          adds = {},
          out = output.add,
          k = bits.size(),
          n = k + tuples.length,
          m = dims.length, j, key, add;

      // resize bitmaps and add tuples as needed
      bits.resize(n, m);
      bits.add(tuples);

      var curr = bits.curr(),
          prev = bits.prev(),
          all  = bits.all();

      // add to dimensional indices
      for (j=0; j<m; ++j) {
        key = fields[j].fname;
        add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));
        dims[j].onAdd(add, curr);
      }

      // set previous filters, output if passes at least one filter
      for (; k<n; ++k) {
        prev[k] = all;
        if (curr[k] !== all) out.push(k);
      }
    };

    prototype$1i.modify = function(pulse, output) {
      var out = output.mod,
          bits = this.value,
          curr = bits.curr(),
          all  = bits.all(),
          tuples = pulse.mod,
          i, n, k;

      for (i=0, n=tuples.length; i<n; ++i) {
        k = tuples[i]._index;
        if (curr[k] !== all) out.push(k);
      }
    };

    prototype$1i.remove = function(_, pulse, output) {
      var indices = this._indices,
          bits = this.value,
          curr = bits.curr(),
          prev = bits.prev(),
          all  = bits.all(),
          map = {},
          out = output.rem,
          tuples = pulse.rem,
          i, n, k, f;

      // process tuples, output if passes at least one filter
      for (i=0, n=tuples.length; i<n; ++i) {
        k = tuples[i]._index;
        map[k] = 1; // build index map
        prev[k] = (f = curr[k]);
        curr[k] = all;
        if (f !== all) out.push(k);
      }

      // remove from dimensional indices
      for (k in indices) {
        indices[k].remove(n, map);
      }

      this.reindex(pulse, n, map);
      return map;
    };

    // reindex filters and indices after propagation completes
    prototype$1i.reindex = function(pulse, num, map) {
      var indices = this._indices,
          bits = this.value;

      pulse.runAfter(function() {
        var indexMap = bits.remove(num, map);
        for (var key in indices) indices[key].reindex(indexMap);
      });
    };

    prototype$1i.update = function(_, pulse, output) {
      var dims = this._dims,
          query = _.query,
          stamp = pulse.stamp,
          m = dims.length,
          mask = 0, i, q;

      // survey how many queries have changed
      output.filters = 0;
      for (q=0; q<m; ++q) {
        if (_.modified('query', q)) { i = q; ++mask; }
      }

      if (mask === 1) {
        // only one query changed, use more efficient update
        mask = dims[i].one;
        this.incrementOne(dims[i], query[i], output.add, output.rem);
      } else {
        // multiple queries changed, perform full record keeping
        for (q=0, mask=0; q<m; ++q) {
          if (!_.modified('query', q)) continue;
          mask |= dims[q].one;
          this.incrementAll(dims[q], query[q], stamp, output.add);
          output.rem = output.add; // duplicate add/rem for downstream resolve
        }
      }

      return mask;
    };

    prototype$1i.incrementAll = function(dim, query, stamp, out) {
      var bits = this.value,
          seen = bits.seen(),
          curr = bits.curr(),
          prev = bits.prev(),
          index = dim.index(),
          old = dim.bisect(dim.range),
          range = dim.bisect(query),
          lo1 = range[0],
          hi1 = range[1],
          lo0 = old[0],
          hi0 = old[1],
          one = dim.one,
          i, j, k;

      // Fast incremental update based on previous lo index.
      if (lo1 < lo0) {
        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      } else if (lo1 > lo0) {
        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      }

      // Fast incremental update based on previous hi index.
      if (hi1 > hi0) {
        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      } else if (hi1 < hi0) {
        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
          k = index[i];
          if (seen[k] !== stamp) {
            prev[k] = curr[k];
            seen[k] = stamp;
            out.push(k);
          }
          curr[k] ^= one;
        }
      }

      dim.range = query.slice();
    };

    prototype$1i.incrementOne = function(dim, query, add, rem) {
      var bits = this.value,
          curr = bits.curr(),
          index = dim.index(),
          old = dim.bisect(dim.range),
          range = dim.bisect(query),
          lo1 = range[0],
          hi1 = range[1],
          lo0 = old[0],
          hi0 = old[1],
          one = dim.one,
          i, j, k;

      // Fast incremental update based on previous lo index.
      if (lo1 < lo0) {
        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          add.push(k);
        }
      } else if (lo1 > lo0) {
        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          rem.push(k);
        }
      }

      // Fast incremental update based on previous hi index.
      if (hi1 > hi0) {
        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          add.push(k);
        }
      } else if (hi1 < hi0) {
        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
          k = index[i];
          curr[k] ^= one;
          rem.push(k);
        }
      }

      dim.range = query.slice();
    };

    /**
     * Selectively filters tuples by resolving against a filter bitmap.
     * Useful for processing the output of a cross-filter transform.
     * @constructor
     * @param {object} params - The parameters for this operator.
     * @param {object} params.ignore - A bit mask indicating which filters to ignore.
     * @param {object} params.filter - The per-tuple filter bitmaps. Typically this
     *   parameter value is a reference to a {@link CrossFilter} transform.
     */
    function ResolveFilter(params) {
      Transform.call(this, null, params);
    }

    ResolveFilter.Definition = {
      "type": "ResolveFilter",
      "metadata": {},
      "params": [
        { "name": "ignore", "type": "number", "required": true,
          "description": "A bit mask indicating which filters to ignore." },
        { "name": "filter", "type": "object", "required": true,
          "description": "Per-tuple filter bitmaps from a CrossFilter transform." }
      ]
    };

    var prototype$1j = inherits(ResolveFilter, Transform);

    prototype$1j.transform = function(_, pulse) {
      var ignore = ~(_.ignore || 0), // bit mask where zeros -> dims to ignore
          bitmap = _.filter,
          mask = bitmap.mask;

      // exit early if no relevant filter changes
      if ((mask & ignore) === 0) return pulse.StopPropagation;

      var output = pulse.fork(pulse.ALL),
          data = bitmap.data(),
          curr = bitmap.curr(),
          prev = bitmap.prev(),
          pass = function(k) {
            return !(curr[k] & ignore) ? data[k] : null;
          };

      // propagate all mod tuples that pass the filter
      output.filter(output.MOD, pass);

      // determine add & rem tuples via filter functions
      // for efficiency, we do *not* populate new arrays,
      // instead we add filter functions applied downstream

      if (!(mask & (mask-1))) { // only one filter changed
        output.filter(output.ADD, pass);
        output.filter(output.REM, function(k) {
          return (curr[k] & ignore) === mask ? data[k] : null;
        });

      } else { // multiple filters changed
        output.filter(output.ADD, function(k) {
          var c = curr[k] & ignore,
              f = !c && (c ^ (prev[k] & ignore));
          return f ? data[k] : null;
        });
        output.filter(output.REM, function(k) {
          var c = curr[k] & ignore,
              f = c && !(c ^ (c ^ (prev[k] & ignore)));
          return f ? data[k] : null;
        });
      }

      // add filter to source data in case of reflow...
      return output.filter(output.SOURCE, function(t) { return pass(t._index); });
    };



    var xf = /*#__PURE__*/Object.freeze({
        crossfilter: CrossFilter,
        resolvefilter: ResolveFilter
    });

    var Default = 'default';

    function cursor(view) {
      var cursor = view._signals.cursor;

      // add cursor signal to dataflow, if needed
      if (!cursor) {
        view._signals.cursor = (cursor = view.add({user: Default, item: null}));
      }

      // evaluate cursor on each mousemove event
      view.on(view.events('view', 'mousemove'), cursor,
        function(_, event) {
          var value = cursor.value,
              user = value ? (isString(value) ? value : value.user) : Default,
              item = event.item && event.item.cursor || null;

          return (value && user === value.user && item == value.item) ? value
            : {user: user, item: item};
        }
      );

      // when cursor signal updates, set visible cursor
      view.add(null, function(_) {
        var user = _.cursor,
            item = this.value;

        if (!isString(user)) {
          item = user.item;
          user = user.user;
        }

        setCursor(user && user !== Default ? user : (item || user));

        return item;
      }, {cursor: cursor});
    }

    function setCursor(cursor) {
      // set cursor on document body
      // this ensures cursor applies even if dragging out of view
      if (typeof document !== 'undefined' && document.body) {
        document.body.style.cursor = cursor;
      }
    }

    function dataref(view, name) {
      var data = view._runtime.data;
      if (!data.hasOwnProperty(name)) {
        error('Unrecognized data set: ' + name);
      }
      return data[name];
    }

    function data(name) {
      return dataref(this, name).values.value;
    }

    function change(name, changes) {
      if (!isChangeSet(changes)) {
        error('Second argument to changes must be a changeset.');
      }
      var dataset = dataref(this, name);
      dataset.modified = true;
      return this.pulse(dataset.input, changes);
    }

    function insert(name, _) {
      return change.call(this, name, changeset().insert(_));
    }

    function remove(name, _) {
      return change.call(this, name, changeset().remove(_));
    }

    function width(view) {
      var padding = view.padding();
      return Math.max(0, view._viewWidth + padding.left + padding.right);
    }

    function height(view) {
      var padding = view.padding();
      return Math.max(0, view._viewHeight + padding.top + padding.bottom);
    }

    function offset$1(view) {
      var padding = view.padding(),
          origin = view._origin;
      return [
        padding.left + origin[0],
        padding.top + origin[1]
      ];
    }

    function resizeRenderer(view) {
      var origin = offset$1(view),
          w = width(view),
          h = height(view);

      view._renderer.background(view._background);
      view._renderer.resize(w, h, origin);
      view._handler.origin(origin);

      view._resizeListeners.forEach(function(handler) {
        try {
          handler(w, h);
        } catch (error) {
          view.error(error);
        }
      });
    }

    /**
     * Extend an event with additional view-specific methods.
     * Adds a new property ('vega') to an event that provides a number
     * of methods for querying information about the current interaction.
     * The vega object provides the following methods:
     *   view - Returns the backing View instance.
     *   item - Returns the currently active scenegraph item (if any).
     *   group - Returns the currently active scenegraph group (if any).
     *     This method accepts a single string-typed argument indicating the name
     *     of the desired parent group. The scenegraph will be traversed from
     *     the item up towards the root to search for a matching group. If no
     *     argument is provided the enclosing group for the active item is
     *     returned, unless the item it itself a group, in which case it is
     *     returned directly.
     *   xy - Returns a two-element array containing the x and y coordinates for
     *     mouse or touch events. For touch events, this is based on the first
     *     elements in the changedTouches array. This method accepts a single
     *     argument: either an item instance or mark name that should serve as
     *     the reference coordinate system. If no argument is provided the
     *     top-level view coordinate system is assumed.
     *   x - Returns the current x-coordinate, accepts the same arguments as xy.
     *   y - Returns the current y-coordinate, accepts the same arguments as xy.
     * @param {Event} event - The input event to extend.
     * @param {Item} item - The currently active scenegraph item (if any).
     * @return {Event} - The extended input event.
     */
    function eventExtend(view, event, item) {
      var el = view._renderer.canvas(),
          p, e, translate;

      if (el) {
        translate = offset$1(view);
        e = event.changedTouches ? event.changedTouches[0] : event;
        p = point$4(e, el);
        p[0] -= translate[0];
        p[1] -= translate[1];
      }

      event.dataflow = view;
      event.vega = extension(view, item, p);
      event.item = item;
      return event;
    }

    function extension(view, item, point) {
      var itemGroup = item
        ? item.mark.marktype === 'group' ? item : item.mark.group
        : null;

      function group(name) {
        var g = itemGroup, i;
        if (name) for (i = item; i; i = i.mark.group) {
          if (i.mark.name === name) { g = i; break; }
        }
        return g && g.mark && g.mark.interactive ? g : {};
      }

      function xy(item) {
        if (!item) return point;
        if (isString(item)) item = group(item);

        var p = point.slice();
        while (item) {
          p[0] -= item.x || 0;
          p[1] -= item.y || 0;
          item = item.mark && item.mark.group;
        }
        return p;
      }

      return {
        view:  constant(view),
        item:  constant(item || {}),
        group: group,
        xy:    xy,
        x:     function(item) { return xy(item)[0]; },
        y:     function(item) { return xy(item)[1]; }
      };
    }

    var VIEW = 'view',
        TIMER = 'timer',
        WINDOW = 'window',
        NO_TRAP = {trap: false};

    /**
     * Initialize event handling configuration.
     * @param {object} config - The configuration settings.
     * @return {object}
     */
    function initializeEventConfig(config) {
      config = extend({}, config);

      var def = config.defaults;
      if (def) {
        if (isArray(def.prevent)) {
          def.prevent = toSet(def.prevent);
        }
        if (isArray(def.allow)) {
          def.allow = toSet(def.allow);
        }
      }

      return config;
    }

    function prevent(view, type) {
      var def = view._eventConfig.defaults,
          prevent = def && def.prevent,
          allow = def && def.allow;

      return prevent === false || allow === true ? false
        : prevent === true || allow === false ? true
        : prevent ? prevent[type]
        : allow ? !allow[type]
        : view.preventDefault();
    }

    /**
     * Create a new event stream from an event source.
     * @param {object} source - The event source to monitor.
     * @param {string} type - The event type.
     * @param {function(object): boolean} [filter] - Event filter function.
     * @return {EventStream}
     */
    function events$1(source, type, filter) {
      var view = this,
          s = new EventStream(filter),
          send = function(e, item) {
            view.runAsync(null, () => {
              if (source === VIEW && prevent(view, type)) {
                e.preventDefault();
              }
              s.receive(eventExtend(view, e, item));
            });
          },
          sources;

      if (source === TIMER) {
        view.timer(send, type);
      }

      else if (source === VIEW) {
        // send traps errors, so use {trap: false} option
        view.addEventListener(type, send, NO_TRAP);
      }

      else {
        if (source === WINDOW) {
          if (typeof window !== 'undefined') sources = [window];
        } else if (typeof document !== 'undefined') {
          sources = document.querySelectorAll(source);
        }

        if (!sources) {
          view.warn('Can not resolve event source: ' + source);
        } else {
          for (var i=0, n=sources.length; i<n; ++i) {
            sources[i].addEventListener(type, send);
          }

          view._eventListeners.push({
            type:    type,
            sources: sources,
            handler: send
          });
        }
      }

      return s;
    }

    function itemFilter(event) {
      return event.item;
    }

    function markTarget(event) {
      // grab upstream collector feeding the mark operator
      var source = event.item.mark.source;
      return source.source || source;
    }

    function invoke(name) {
      return function(_, event) {
        return event.vega.view()
          .changeset()
          .encode(event.item, name);
      };
    }

    function hover(hoverSet, leaveSet) {
      hoverSet = [hoverSet || 'hover'];
      leaveSet = [leaveSet || 'update', hoverSet[0]];

      // invoke hover set upon mouseover
      this.on(
        this.events('view', 'mouseover', itemFilter),
        markTarget,
        invoke(hoverSet)
      );

      // invoke leave set upon mouseout
      this.on(
        this.events('view', 'mouseout', itemFilter),
        markTarget,
        invoke(leaveSet)
      );

      return this;
    }

    /**
     * Finalize a View instance that is being removed.
     * Cancel any running timers.
     * Remove all external event listeners.
     * Remove any currently displayed tooltip.
     */
    function finalize() {
      var tooltip = this._tooltip,
          timers = this._timers,
          listeners = this._eventListeners,
          n, m, e;

      n = timers.length;
      while (--n >= 0) {
        timers[n].stop();
      }

      n = listeners.length;
      while (--n >= 0) {
        e = listeners[n];
        m = e.sources.length;
        while (--m >= 0) {
          e.sources[m].removeEventListener(e.type, e.handler);
        }
      }

      if (tooltip) {
        tooltip.call(this, this._handler, null, null, null);
      }

      return this;
    }

    function element$1(tag, attr, text) {
      var el = document.createElement(tag);
      for (var key in attr) el.setAttribute(key, attr[key]);
      if (text != null) el.textContent = text;
      return el;
    }

    var BindClass = 'vega-bind',
        NameClass = 'vega-bind-name',
        RadioClass = 'vega-bind-radio',
        OptionClass = 'vega-option-';

    /**
     * Bind a signal to an external HTML input element. The resulting two-way
     * binding will propagate input changes to signals, and propagate signal
     * changes to the input element state. If this view instance has no parent
     * element, we assume the view is headless and no bindings are created.
     * @param {Element|string} el - The parent DOM element to which the input
     *   element should be appended as a child. If string-valued, this argument
     *   will be treated as a CSS selector. If null or undefined, the parent
     *   element of this view will be used as the element.
     * @param {object} param - The binding parameters which specify the signal
     *   to bind to, the input element type, and type-specific configuration.
     * @return {View} - This view instance.
     */
    function bind$1(view, el, binding) {
      if (!el) return;

      var param = binding.param,
          bind = binding.state;

      if (!bind) {
        bind = binding.state = {
          elements: null,
          active: false,
          set: null,
          update: function(value) {
            if (value !== view.signal(param.signal)) {
              view.runAsync(null, function() {
                bind.source = true;
                view.signal(param.signal, value);
              });
            }
          }
        };
        if (param.debounce) {
          bind.update = debounce(param.debounce, bind.update);
        }
      }

      generate(bind, el, param, view.signal(param.signal));

      if (!bind.active) {
        view.on(view._signals[param.signal], null, function() {
          bind.source
            ? (bind.source = false)
            : bind.set(view.signal(param.signal));
        });
        bind.active = true;
      }

      return bind;
    }

    /**
     * Generate an HTML input form element and bind it to a signal.
     */
    function generate(bind, el, param, value) {
      var div = element$1('div', {'class': BindClass});

      div.appendChild(element$1('span',
        {'class': NameClass},
        (param.name || param.signal)
      ));

      el.appendChild(div);

      var input = form;
      switch (param.input) {
        case 'checkbox': input = checkbox; break;
        case 'select':   input = select; break;
        case 'radio':    input = radio; break;
        case 'range':    input = range$4; break;
      }

      input(bind, div, param, value);
    }

    /**
     * Generates an arbitrary input form element.
     * The input type is controlled via user-provided parameters.
     */
    function form(bind, el, param, value) {
      var node = element$1('input');

      for (var key in param) {
        if (key !== 'signal' && key !== 'element') {
          node.setAttribute(key === 'input' ? 'type' : key, param[key]);
        }
      }
      node.setAttribute('name', param.signal);
      node.value = value;

      el.appendChild(node);

      node.addEventListener('input', function() {
        bind.update(node.value);
      });

      bind.elements = [node];
      bind.set = function(value) { node.value = value; };
    }

    /**
     * Generates a checkbox input element.
     */
    function checkbox(bind, el, param, value) {
      var attr = {type: 'checkbox', name: param.signal};
      if (value) attr.checked = true;
      var node = element$1('input', attr);

      el.appendChild(node);

      node.addEventListener('change', function() {
        bind.update(node.checked);
      });

      bind.elements = [node];
      bind.set = function(value) { node.checked = !!value || null; };
    }

    /**
     * Generates a selection list input element.
     */
    function select(bind, el, param, value) {
      var node = element$1('select', {name: param.signal});

      param.options.forEach(function(option) {
        var attr = {value: option};
        if (valuesEqual(option, value)) attr.selected = true;
        node.appendChild(element$1('option', attr, option+''));
      });

      el.appendChild(node);

      node.addEventListener('change', function() {
        bind.update(param.options[node.selectedIndex]);
      });

      bind.elements = [node];
      bind.set = function(value) {
        for (var i=0, n=param.options.length; i<n; ++i) {
          if (valuesEqual(param.options[i], value)) {
            node.selectedIndex = i; return;
          }
        }
      };
    }

    /**
     * Generates a radio button group.
     */
    function radio(bind, el, param, value) {
      var group = element$1('span', {'class': RadioClass});

      el.appendChild(group);

      bind.elements = param.options.map(function(option) {
        var id = OptionClass + param.signal + '-' + option;

        var attr = {
          id:    id,
          type:  'radio',
          name:  param.signal,
          value: option
        };
        if (valuesEqual(option, value)) attr.checked = true;

        var input = element$1('input', attr);

        input.addEventListener('change', function() {
          bind.update(option);
        });

        group.appendChild(input);
        group.appendChild(element$1('label', {'for': id}, option+''));

        return input;
      });

      bind.set = function(value) {
        var nodes = bind.elements,
            i = 0,
            n = nodes.length;
        for (; i<n; ++i) {
          if (valuesEqual(nodes[i].value, value)) nodes[i].checked = true;
        }
      };
    }

    /**
     * Generates a slider input element.
     */
    function range$4(bind, el, param, value) {
      value = value !== undefined ? value : ((+param.max) + (+param.min)) / 2;

      var min = param.min || Math.min(0, +value) || 0,
          max = param.max || Math.max(100, +value) || 100,
          step = param.step || tickStep(min, max, 100);

      var node = element$1('input', {
        type:  'range',
        name:  param.signal,
        min:   min,
        max:   max,
        step:  step
      });
      node.value = value;

      var label = element$1('label', {}, +value);

      el.appendChild(node);
      el.appendChild(label);

      function update() {
        label.textContent = node.value;
        bind.update(+node.value);
      }

      // subscribe to both input and change
      node.addEventListener('input', update);
      node.addEventListener('change', update);

      bind.elements = [node];
      bind.set = function(value) {
        node.value = value;
        label.textContent = value;
      };
    }

    function valuesEqual(a, b) {
      return a === b || (a+'' === b+'');
    }

    function initializeRenderer(view, r, el, constructor, scaleFactor, opt) {
      r = r || new constructor(view.loader());
      return r
        .initialize(el, width(view), height(view), offset$1(view), scaleFactor, opt)
        .background(view._background);
    }

    function trap(view, fn) {
      return !fn ? null : function() {
        try {
          fn.apply(this, arguments);
        } catch (error) {
          view.error(error);
        }
      };
    }

    function initializeHandler(view, prevHandler, el, constructor) {
      // instantiate scenegraph handler
      var handler = new constructor(view.loader(), trap(view, view.tooltip()))
        .scene(view.scenegraph().root)
        .initialize(el, offset$1(view), view);

      // transfer event handlers
      if (prevHandler) {
        prevHandler.handlers().forEach(function(h) {
          handler.on(h.type, h.handler);
        });
      }

      return handler;
    }

    function initialize$1(el, elBind) {
      var view = this,
          type = view._renderType,
          module = renderModule(type),
          Handler, Renderer;

      // containing dom element
      el = view._el = el ? lookup$4(view, el) : null;

      // select appropriate renderer & handler
      if (!module) view.error('Unrecognized renderer type: ' + type);
      Handler = module.handler || CanvasHandler;
      Renderer = (el ? module.renderer : module.headless);

      // initialize renderer and input handler
      view._renderer = !Renderer ? null
        : initializeRenderer(view, view._renderer, el, Renderer);
      view._handler = initializeHandler(view, view._handler, el, Handler);
      view._redraw = true;

      // initialize signal bindings
      if (el) {
        elBind = elBind ? (view._elBind = lookup$4(view, elBind))
          : el.appendChild(element$1('div', {'class': 'vega-bindings'}));

        view._bind.forEach(function(_) {
          if (_.param.element) {
            _.element = lookup$4(view, _.param.element);
          }
        });

        view._bind.forEach(function(_) {
          bind$1(view, _.element || elBind, _);
        });
      }

      return view;
    }

    function lookup$4(view, el) {
      if (typeof el === 'string') {
        if (typeof document !== 'undefined') {
          el = document.querySelector(el);
          if (!el) {
            view.error('Signal bind element not found: ' + el);
            return null;
          }
        } else {
          view.error('DOM document instance not found.');
          return null;
        }
      }
      if (el) {
        try {
          el.innerHTML = '';
        } catch (e) {
          el = null;
          view.error(e);
        }
      }
      return el;
    }

    /**
     * Render the current scene in a headless fashion.
     * This method is asynchronous, returning a Promise instance.
     * @return {Promise} - A Promise that resolves to a renderer.
     */
    async function renderHeadless(view, type, scaleFactor, opt) {
      const module = renderModule(type),
            ctr = module && module.headless;

      if (!ctr) error('Unrecognized renderer type: ' + type);

      await view.runAsync();
      return initializeRenderer(view, null, null, ctr, scaleFactor, opt)
        .renderAsync(view._scenegraph.root);
    }

    /**
     * Produce an image URL for the visualization. Depending on the type
     * parameter, the generated URL contains data for either a PNG or SVG image.
     * The URL can be used (for example) to download images of the visualization.
     * This method is asynchronous, returning a Promise instance.
     * @param {string} type - The image type. One of 'svg', 'png' or 'canvas'.
     *   The 'canvas' and 'png' types are synonyms for a PNG image.
     * @return {Promise} - A promise that resolves to an image URL.
     */
    async function renderToImageURL(type, scaleFactor) {
      if (type !== RenderType.Canvas && type !== RenderType.SVG && type !== RenderType.PNG) {
        error('Unrecognized image type: ' + type);
      }

      const r = await renderHeadless(this, type, scaleFactor);
      return type === RenderType.SVG
        ? toBlobURL(r.svg(), 'image/svg+xml')
        : r.canvas().toDataURL('image/png');
    }

    function toBlobURL(data, mime) {
      var blob = new Blob([data], {type: mime});
      return window.URL.createObjectURL(blob);
    }

    /**
     * Produce a Canvas instance containing a rendered visualization.
     * This method is asynchronous, returning a Promise instance.
     * @return {Promise} - A promise that resolves to a Canvas instance.
     */
    async function renderToCanvas(scaleFactor, opt) {
      const r = await renderHeadless(this, RenderType.Canvas, scaleFactor, opt);
      return r.canvas();
    }

    /**
     * Produce a rendered SVG string of the visualization.
     * This method is asynchronous, returning a Promise instance.
     * @return {Promise} - A promise that resolves to an SVG string.
     */
    async function renderToSVG(scaleFactor) {
      const r = await renderHeadless(this, RenderType.SVG, scaleFactor);
      return r.svg();
    }

    var RawCode = 'RawCode';
    var Literal = 'Literal';
    var Property = 'Property';
    var Identifier$1 = 'Identifier';

    var ArrayExpression = 'ArrayExpression';
    var BinaryExpression = 'BinaryExpression';
    var CallExpression = 'CallExpression';
    var ConditionalExpression = 'ConditionalExpression';
    var LogicalExpression = 'LogicalExpression';
    var MemberExpression = 'MemberExpression';
    var ObjectExpression = 'ObjectExpression';
    var UnaryExpression = 'UnaryExpression';

    function ASTNode(type) {
      this.type = type;
    }

    ASTNode.prototype.visit = function(visitor) {
      var node = this, c, i, n;

      if (visitor(node)) return 1;

      for (c=children$1(node), i=0, n=c.length; i<n; ++i) {
        if (c[i].visit(visitor)) return 1;
      }
    };

    function children$1(node) {
      switch (node.type) {
        case ArrayExpression:
          return node.elements;
        case BinaryExpression:
        case LogicalExpression:
          return [node.left, node.right];
        case CallExpression:
          var args = node.arguments.slice();
          args.unshift(node.callee);
          return args;
        case ConditionalExpression:
          return [node.test, node.consequent, node.alternate];
        case MemberExpression:
          return [node.object, node.property];
        case ObjectExpression:
          return node.properties;
        case Property:
          return [node.key, node.value];
        case UnaryExpression:
          return [node.argument];
        case Identifier$1:
        case Literal:
        case RawCode:
        default:
          return [];
      }
    }

    /*
      The following expression parser is based on Esprima (http://esprima.org/).
      Original header comment and license for Esprima is included here:

      Copyright (C) 2013 Ariya Hidayat <ariya.hidayat@gmail.com>
      Copyright (C) 2013 Thaddee Tyl <thaddee.tyl@gmail.com>
      Copyright (C) 2013 Mathias Bynens <mathias@qiwi.be>
      Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>
      Copyright (C) 2012 Mathias Bynens <mathias@qiwi.be>
      Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
      Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
      Copyright (C) 2012 Yusuke Suzuki <utatane.tea@gmail.com>
      Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>
      Copyright (C) 2011 Ariya Hidayat <ariya.hidayat@gmail.com>

      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:

        * Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.

      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
      AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
      IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
      ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    */

    var TokenName,
        source$1,
        index$1,
        length,
        lookahead;

    var TokenBooleanLiteral = 1,
        TokenEOF = 2,
        TokenIdentifier = 3,
        TokenKeyword = 4,
        TokenNullLiteral = 5,
        TokenNumericLiteral = 6,
        TokenPunctuator = 7,
        TokenStringLiteral = 8,
        TokenRegularExpression = 9;

    TokenName = {};
    TokenName[TokenBooleanLiteral] = 'Boolean';
    TokenName[TokenEOF] = '<end>';
    TokenName[TokenIdentifier] = 'Identifier';
    TokenName[TokenKeyword] = 'Keyword';
    TokenName[TokenNullLiteral] = 'Null';
    TokenName[TokenNumericLiteral] = 'Numeric';
    TokenName[TokenPunctuator] = 'Punctuator';
    TokenName[TokenStringLiteral] = 'String';
    TokenName[TokenRegularExpression] = 'RegularExpression';

    var SyntaxArrayExpression = 'ArrayExpression',
        SyntaxBinaryExpression = 'BinaryExpression',
        SyntaxCallExpression = 'CallExpression',
        SyntaxConditionalExpression = 'ConditionalExpression',
        SyntaxIdentifier = 'Identifier',
        SyntaxLiteral = 'Literal',
        SyntaxLogicalExpression = 'LogicalExpression',
        SyntaxMemberExpression = 'MemberExpression',
        SyntaxObjectExpression = 'ObjectExpression',
        SyntaxProperty = 'Property',
        SyntaxUnaryExpression = 'UnaryExpression';

    // Error messages should be identical to V8.
    var MessageUnexpectedToken = 'Unexpected token %0',
        MessageUnexpectedNumber = 'Unexpected number',
        MessageUnexpectedString = 'Unexpected string',
        MessageUnexpectedIdentifier = 'Unexpected identifier',
        MessageUnexpectedReserved = 'Unexpected reserved word',
        MessageUnexpectedEOS = 'Unexpected end of input',
        MessageInvalidRegExp = 'Invalid regular expression',
        MessageUnterminatedRegExp = 'Invalid regular expression: missing /',
        MessageStrictOctalLiteral = 'Octal literals are not allowed in strict mode.',
        MessageStrictDuplicateProperty = 'Duplicate data property in object literal not allowed in strict mode';

    var ILLEGAL = 'ILLEGAL',
        DISABLED = 'Disabled.';

    // See also tools/generate-unicode-regex.py.
      var RegexNonAsciiIdentifierStart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]"),
          RegexNonAsciiIdentifierPart = new RegExp("[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
      /* istanbul ignore next */
      if (!condition) {
        throw new Error('ASSERT: ' + message);
      }
    }

    function isDecimalDigit(ch) {
      return (ch >= 0x30 && ch <= 0x39); // 0..9
    }

    function isHexDigit(ch) {
      return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
      return '01234567'.indexOf(ch) >= 0;
    }

    // 7.2 White Space

    function isWhiteSpace(ch) {
      return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
        (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // 7.3 Line Terminators

    function isLineTerminator(ch) {
      return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // 7.6 Identifier Names and Identifiers

    function isIdentifierStart(ch) {
      return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)
        (ch >= 0x41 && ch <= 0x5A) || // A..Z
        (ch >= 0x61 && ch <= 0x7A) || // a..z
        (ch === 0x5C) || // \ (backslash)
        ((ch >= 0x80) && RegexNonAsciiIdentifierStart.test(String.fromCharCode(ch)));
    }

    function isIdentifierPart(ch) {
      return (ch === 0x24) || (ch === 0x5F) || // $ (dollar) and _ (underscore)
        (ch >= 0x41 && ch <= 0x5A) || // A..Z
        (ch >= 0x61 && ch <= 0x7A) || // a..z
        (ch >= 0x30 && ch <= 0x39) || // 0..9
        (ch === 0x5C) || // \ (backslash)
        ((ch >= 0x80) && RegexNonAsciiIdentifierPart.test(String.fromCharCode(ch)));
    }

    // 7.6.1.1 Keywords

    var keywords = {
      'if':1, 'in':1, 'do':1,
      'var':1, 'for':1, 'new':1, 'try':1, 'let':1,
      'this':1, 'else':1, 'case':1, 'void':1, 'with':1, 'enum':1,
      'while':1, 'break':1, 'catch':1, 'throw':1, 'const':1, 'yield':1, 'class':1, 'super':1,
      'return':1, 'typeof':1, 'delete':1, 'switch':1, 'export':1, 'import':1, 'public':1, 'static':1,
      'default':1, 'finally':1, 'extends':1, 'package':1, 'private':1,
      'function':1, 'continue':1, 'debugger':1,
      'interface':1, 'protected':1,
      'instanceof':1, 'implements':1
    };

    function skipComment() {
      var ch;

      while (index$1 < length) {
        ch = source$1.charCodeAt(index$1);

        if (isWhiteSpace(ch) || isLineTerminator(ch)) {
          ++index$1;
        } else {
          break;
        }
      }
    }

    function scanHexEscape(prefix) {
      var i, len, ch, code = 0;

      len = (prefix === 'u') ? 4 : 2;
      for (i = 0; i < len; ++i) {
        if (index$1 < length && isHexDigit(source$1[index$1])) {
          ch = source$1[index$1++];
          code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
        } else {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }
      return String.fromCharCode(code);
    }

    function scanUnicodeCodePointEscape() {
      var ch, code, cu1, cu2;

      ch = source$1[index$1];
      code = 0;

      // At least, one hex digit is required.
      if (ch === '}') {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      while (index$1 < length) {
        ch = source$1[index$1++];
        if (!isHexDigit(ch)) {
          break;
        }
        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
      }

      if (code > 0x10FFFF || ch !== '}') {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      // UTF-16 Encoding
      if (code <= 0xFFFF) {
        return String.fromCharCode(code);
      }
      cu1 = ((code - 0x10000) >> 10) + 0xD800;
      cu2 = ((code - 0x10000) & 1023) + 0xDC00;
      return String.fromCharCode(cu1, cu2);
    }

    function getEscapedIdentifier() {
      var ch, id;

      ch = source$1.charCodeAt(index$1++);
      id = String.fromCharCode(ch);

      // '\u' (U+005C, U+0075) denotes an escaped character.
      if (ch === 0x5C) {
        if (source$1.charCodeAt(index$1) !== 0x75) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        ++index$1;
        ch = scanHexEscape('u');
        if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
        id = ch;
      }

      while (index$1 < length) {
        ch = source$1.charCodeAt(index$1);
        if (!isIdentifierPart(ch)) {
          break;
        }
        ++index$1;
        id += String.fromCharCode(ch);

        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (ch === 0x5C) {
          id = id.substr(0, id.length - 1);
          if (source$1.charCodeAt(index$1) !== 0x75) {
            throwError({}, MessageUnexpectedToken, ILLEGAL);
          }
          ++index$1;
          ch = scanHexEscape('u');
          if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
            throwError({}, MessageUnexpectedToken, ILLEGAL);
          }
          id += ch;
        }
      }

      return id;
    }

    function getIdentifier() {
      var start, ch;

      start = index$1++;
      while (index$1 < length) {
        ch = source$1.charCodeAt(index$1);
        if (ch === 0x5C) {
          // Blackslash (U+005C) marks Unicode escape sequence.
          index$1 = start;
          return getEscapedIdentifier();
        }
        if (isIdentifierPart(ch)) {
          ++index$1;
        } else {
          break;
        }
      }

      return source$1.slice(start, index$1);
    }

    function scanIdentifier() {
      var start, id, type;

      start = index$1;

      // Backslash (U+005C) starts an escaped character.
      id = (source$1.charCodeAt(index$1) === 0x5C) ? getEscapedIdentifier() : getIdentifier();

      // There is no keyword or literal with only one character.
      // Thus, it must be an identifier.
      if (id.length === 1) {
        type = TokenIdentifier;
      } else if (keywords.hasOwnProperty(id)) {
        type = TokenKeyword;
      } else if (id === 'null') {
        type = TokenNullLiteral;
      } else if (id === 'true' || id === 'false') {
        type = TokenBooleanLiteral;
      } else {
        type = TokenIdentifier;
      }

      return {
        type: type,
        value: id,
        start: start,
        end: index$1
      };
    }

    // 7.7 Punctuators

    function scanPunctuator() {
      var start = index$1,
        code = source$1.charCodeAt(index$1),
        code2,
        ch1 = source$1[index$1],
        ch2,
        ch3,
        ch4;

      switch (code) {

        // Check for most common single-character punctuators.
        case 0x2E: // . dot
        case 0x28: // ( open bracket
        case 0x29: // ) close bracket
        case 0x3B: // ; semicolon
        case 0x2C: // , comma
        case 0x7B: // { open curly brace
        case 0x7D: // } close curly brace
        case 0x5B: // [
        case 0x5D: // ]
        case 0x3A: // :
        case 0x3F: // ?
        case 0x7E: // ~
          ++index$1;
          return {
            type: TokenPunctuator,
            value: String.fromCharCode(code),
            start: start,
            end: index$1
          };

        default:
          code2 = source$1.charCodeAt(index$1 + 1);

          // '=' (U+003D) marks an assignment or comparison operator.
          if (code2 === 0x3D) {
            switch (code) {
              case 0x2B: // +
              case 0x2D: // -
              case 0x2F: // /
              case 0x3C: // <
              case 0x3E: // >
              case 0x5E: // ^
              case 0x7C: // |
              case 0x25: // %
              case 0x26: // &
              case 0x2A: // *
                index$1 += 2;
                return {
                  type: TokenPunctuator,
                  value: String.fromCharCode(code) + String.fromCharCode(code2),
                  start: start,
                  end: index$1
                };

              case 0x21: // !
              case 0x3D: // =
                index$1 += 2;

                // !== and ===
                if (source$1.charCodeAt(index$1) === 0x3D) {
                  ++index$1;
                }
                return {
                  type: TokenPunctuator,
                  value: source$1.slice(start, index$1),
                  start: start,
                  end: index$1
                };
            }
          }
      }

      // 4-character punctuator: >>>=

      ch4 = source$1.substr(index$1, 4);

      if (ch4 === '>>>=') {
        index$1 += 4;
        return {
          type: TokenPunctuator,
          value: ch4,
          start: start,
          end: index$1
        };
      }

      // 3-character punctuators: === !== >>> <<= >>=

      ch3 = ch4.substr(0, 3);

      if (ch3 === '>>>' || ch3 === '<<=' || ch3 === '>>=') {
        index$1 += 3;
        return {
          type: TokenPunctuator,
          value: ch3,
          start: start,
          end: index$1
        };
      }

      // Other 2-character punctuators: ++ -- << >> && ||
      ch2 = ch3.substr(0, 2);

      if ((ch1 === ch2[1] && ('+-<>&|'.indexOf(ch1) >= 0)) || ch2 === '=>') {
        index$1 += 2;
        return {
          type: TokenPunctuator,
          value: ch2,
          start: start,
          end: index$1
        };
      }

      // 1-character punctuators: < > = ! + - * % & | ^ /

      if ('<>=!+-*%&|^/'.indexOf(ch1) >= 0) {
        ++index$1;
        return {
          type: TokenPunctuator,
          value: ch1,
          start: start,
          end: index$1
        };
      }

      throwError({}, MessageUnexpectedToken, ILLEGAL);
    }

    // 7.8.3 Numeric Literals

    function scanHexLiteral(start) {
      var number = '';

      while (index$1 < length) {
        if (!isHexDigit(source$1[index$1])) {
          break;
        }
        number += source$1[index$1++];
      }

      if (number.length === 0) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      if (isIdentifierStart(source$1.charCodeAt(index$1))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenNumericLiteral,
        value: parseInt('0x' + number, 16),
        start: start,
        end: index$1
      };
    }

    function scanOctalLiteral(start) {
      var number = '0' + source$1[index$1++];
      while (index$1 < length) {
        if (!isOctalDigit(source$1[index$1])) {
          break;
        }
        number += source$1[index$1++];
      }

      if (isIdentifierStart(source$1.charCodeAt(index$1)) || isDecimalDigit(source$1.charCodeAt(index$1))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenNumericLiteral,
        value: parseInt(number, 8),
        octal: true,
        start: start,
        end: index$1
      };
    }

    function scanNumericLiteral() {
      var number, start, ch;

      ch = source$1[index$1];
      assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
        'Numeric literal must start with a decimal digit or a decimal point');

      start = index$1;
      number = '';
      if (ch !== '.') {
        number = source$1[index$1++];
        ch = source$1[index$1];

        // Hex number starts with '0x'.
        // Octal number starts with '0'.
        if (number === '0') {
          if (ch === 'x' || ch === 'X') {
            ++index$1;
            return scanHexLiteral(start);
          }
          if (isOctalDigit(ch)) {
            return scanOctalLiteral(start);
          }

          // decimal number starts with '0' such as '09' is illegal.
          if (ch && isDecimalDigit(ch.charCodeAt(0))) {
            throwError({}, MessageUnexpectedToken, ILLEGAL);
          }
        }

        while (isDecimalDigit(source$1.charCodeAt(index$1))) {
          number += source$1[index$1++];
        }
        ch = source$1[index$1];
      }

      if (ch === '.') {
        number += source$1[index$1++];
        while (isDecimalDigit(source$1.charCodeAt(index$1))) {
          number += source$1[index$1++];
        }
        ch = source$1[index$1];
      }

      if (ch === 'e' || ch === 'E') {
        number += source$1[index$1++];

        ch = source$1[index$1];
        if (ch === '+' || ch === '-') {
          number += source$1[index$1++];
        }
        if (isDecimalDigit(source$1.charCodeAt(index$1))) {
          while (isDecimalDigit(source$1.charCodeAt(index$1))) {
            number += source$1[index$1++];
          }
        } else {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        }
      }

      if (isIdentifierStart(source$1.charCodeAt(index$1))) {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenNumericLiteral,
        value: parseFloat(number),
        start: start,
        end: index$1
      };
    }

    // 7.8.4 String Literals

    function scanStringLiteral() {
      var str = '',
        quote, start, ch, code, octal = false;

      quote = source$1[index$1];
      assert((quote === '\'' || quote === '"'),
        'String literal must starts with a quote');

      start = index$1;
      ++index$1;

      while (index$1 < length) {
        ch = source$1[index$1++];

        if (ch === quote) {
          quote = '';
          break;
        } else if (ch === '\\') {
          ch = source$1[index$1++];
          if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
            switch (ch) {
              case 'u':
              case 'x':
                if (source$1[index$1] === '{') {
                  ++index$1;
                  str += scanUnicodeCodePointEscape();
                } else {
                  str += scanHexEscape(ch);
                }
                break;
              case 'n':
                str += '\n';
                break;
              case 'r':
                str += '\r';
                break;
              case 't':
                str += '\t';
                break;
              case 'b':
                str += '\b';
                break;
              case 'f':
                str += '\f';
                break;
              case 'v':
                str += '\x0B';
                break;

              default:
                if (isOctalDigit(ch)) {
                  code = '01234567'.indexOf(ch);

                  // \0 is not octal escape sequence
                  if (code !== 0) {
                    octal = true;
                  }

                  if (index$1 < length && isOctalDigit(source$1[index$1])) {
                    octal = true;
                    code = code * 8 + '01234567'.indexOf(source$1[index$1++]);

                    // 3 digits are only allowed when string starts
                    // with 0, 1, 2, 3
                    if ('0123'.indexOf(ch) >= 0 &&
                      index$1 < length &&
                      isOctalDigit(source$1[index$1])) {
                      code = code * 8 + '01234567'.indexOf(source$1[index$1++]);
                    }
                  }
                  str += String.fromCharCode(code);
                } else {
                  str += ch;
                }
                break;
            }
          } else {
            if (ch === '\r' && source$1[index$1] === '\n') {
              ++index$1;
            }
          }
        } else if (isLineTerminator(ch.charCodeAt(0))) {
          break;
        } else {
          str += ch;
        }
      }

      if (quote !== '') {
        throwError({}, MessageUnexpectedToken, ILLEGAL);
      }

      return {
        type: TokenStringLiteral,
        value: str,
        octal: octal,
        start: start,
        end: index$1
      };
    }

    function testRegExp(pattern, flags) {
      var tmp = pattern;

      if (flags.indexOf('u') >= 0) {
        // Replace each astral symbol and every Unicode code point
        // escape sequence with a single ASCII symbol to avoid throwing on
        // regular expressions that are only valid in combination with the
        // `/u` flag.
        // Note: replacing with the ASCII symbol `x` might cause false
        // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
        // perfectly valid pattern that is equivalent to `[a-b]`, but it
        // would be replaced by `[x-b]` which throws an error.
        tmp = tmp
          .replace(/\\u\{([0-9a-fA-F]+)\}/g, function($0, $1) {
            if (parseInt($1, 16) <= 0x10FFFF) {
              return 'x';
            }
            throwError({}, MessageInvalidRegExp);
          })
          .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
      }

      // First, detect invalid regular expressions.
      try {
      } catch (e) {
        throwError({}, MessageInvalidRegExp);
      }

      // Return a regular expression object for this pattern-flag pair, or
      // `null` in case the current environment doesn't support the flags it
      // uses.
      try {
        return new RegExp(pattern, flags);
      } catch (exception) {
        return null;
      }
    }

    function scanRegExpBody() {
      var ch, str, classMarker, terminated, body;

      ch = source$1[index$1];
      assert(ch === '/', 'Regular expression literal must start with a slash');
      str = source$1[index$1++];

      classMarker = false;
      terminated = false;
      while (index$1 < length) {
        ch = source$1[index$1++];
        str += ch;
        if (ch === '\\') {
          ch = source$1[index$1++];
          // ECMA-262 7.8.5
          if (isLineTerminator(ch.charCodeAt(0))) {
            throwError({}, MessageUnterminatedRegExp);
          }
          str += ch;
        } else if (isLineTerminator(ch.charCodeAt(0))) {
          throwError({}, MessageUnterminatedRegExp);
        } else if (classMarker) {
          if (ch === ']') {
            classMarker = false;
          }
        } else {
          if (ch === '/') {
            terminated = true;
            break;
          } else if (ch === '[') {
            classMarker = true;
          }
        }
      }

      if (!terminated) {
        throwError({}, MessageUnterminatedRegExp);
      }

      // Exclude leading and trailing slash.
      body = str.substr(1, str.length - 2);
      return {
        value: body,
        literal: str
      };
    }

    function scanRegExpFlags() {
      var ch, str, flags;

      str = '';
      flags = '';
      while (index$1 < length) {
        ch = source$1[index$1];
        if (!isIdentifierPart(ch.charCodeAt(0))) {
          break;
        }

        ++index$1;
        if (ch === '\\' && index$1 < length) {
          throwError({}, MessageUnexpectedToken, ILLEGAL);
        } else {
          flags += ch;
          str += ch;
        }
      }

      if (flags.search(/[^gimuy]/g) >= 0) {
        throwError({}, MessageInvalidRegExp, flags);
      }

      return {
        value: flags,
        literal: str
      };
    }

    function scanRegExp() {
      var start, body, flags, value;

      lookahead = null;
      skipComment();
      start = index$1;

      body = scanRegExpBody();
      flags = scanRegExpFlags();
      value = testRegExp(body.value, flags.value);

      return {
        literal: body.literal + flags.literal,
        value: value,
        regex: {
          pattern: body.value,
          flags: flags.value
        },
        start: start,
        end: index$1
      };
    }

    function isIdentifierName(token) {
      return token.type === TokenIdentifier ||
        token.type === TokenKeyword ||
        token.type === TokenBooleanLiteral ||
        token.type === TokenNullLiteral;
    }

    function advance() {
      var ch;

      skipComment();

      if (index$1 >= length) {
        return {
          type: TokenEOF,
          start: index$1,
          end: index$1
        };
      }

      ch = source$1.charCodeAt(index$1);

      if (isIdentifierStart(ch)) {
        return scanIdentifier();
      }

      // Very common: ( and ) and ;
      if (ch === 0x28 || ch === 0x29 || ch === 0x3B) {
        return scanPunctuator();
      }

      // String literal starts with single quote (U+0027) or double quote (U+0022).
      if (ch === 0x27 || ch === 0x22) {
        return scanStringLiteral();
      }


      // Dot (.) U+002E can also start a floating-point number, hence the need
      // to check the next character.
      if (ch === 0x2E) {
        if (isDecimalDigit(source$1.charCodeAt(index$1 + 1))) {
          return scanNumericLiteral();
        }
        return scanPunctuator();
      }

      if (isDecimalDigit(ch)) {
        return scanNumericLiteral();
      }

      return scanPunctuator();
    }

    function lex() {
      var token;

      token = lookahead;
      index$1 = token.end;

      lookahead = advance();

      index$1 = token.end;

      return token;
    }

    function peek$1() {
      var pos;

      pos = index$1;

      lookahead = advance();
      index$1 = pos;
    }

    function finishArrayExpression(elements) {
      var node = new ASTNode(SyntaxArrayExpression);
      node.elements = elements;
      return node;
    }

    function finishBinaryExpression(operator, left, right) {
      var node = new ASTNode((operator === '||' || operator === '&&') ? SyntaxLogicalExpression : SyntaxBinaryExpression);
      node.operator = operator;
      node.left = left;
      node.right = right;
      return node;
    }

    function finishCallExpression(callee, args) {
      var node = new ASTNode(SyntaxCallExpression);
      node.callee = callee;
      node.arguments = args;
      return node;
    }

    function finishConditionalExpression(test, consequent, alternate) {
      var node = new ASTNode(SyntaxConditionalExpression);
      node.test = test;
      node.consequent = consequent;
      node.alternate = alternate;
      return node;
    }

    function finishIdentifier(name) {
      var node = new ASTNode(SyntaxIdentifier);
      node.name = name;
      return node;
    }

    function finishLiteral(token) {
      var node = new ASTNode(SyntaxLiteral);
      node.value = token.value;
      node.raw = source$1.slice(token.start, token.end);
      if (token.regex) {
        if (node.raw === '//') {
          node.raw = '/(?:)/';
        }
        node.regex = token.regex;
      }
      return node;
    }

    function finishMemberExpression(accessor, object, property) {
      var node = new ASTNode(SyntaxMemberExpression);
      node.computed = accessor === '[';
      node.object = object;
      node.property = property;
      if (!node.computed) property.member = true;
      return node;
    }

    function finishObjectExpression(properties) {
      var node = new ASTNode(SyntaxObjectExpression);
      node.properties = properties;
      return node;
    }

    function finishProperty(kind, key, value) {
      var node = new ASTNode(SyntaxProperty);
      node.key = key;
      node.value = value;
      node.kind = kind;
      return node;
    }

    function finishUnaryExpression(operator, argument) {
      var node = new ASTNode(SyntaxUnaryExpression);
      node.operator = operator;
      node.argument = argument;
      node.prefix = true;
      return node;
    }

    // Throw an exception

    function throwError(token, messageFormat) {
      var error,
        args = Array.prototype.slice.call(arguments, 2),
        msg = messageFormat.replace(
          /%(\d)/g,
          function(whole, index) {
            assert(index < args.length, 'Message reference must be in range');
            return args[index];
          }
        );


      error = new Error(msg);
      error.index = index$1;
      error.description = msg;
      throw error;
    }

    // Throw an exception because of the token.

    function throwUnexpected(token) {
      if (token.type === TokenEOF) {
        throwError(token, MessageUnexpectedEOS);
      }

      if (token.type === TokenNumericLiteral) {
        throwError(token, MessageUnexpectedNumber);
      }

      if (token.type === TokenStringLiteral) {
        throwError(token, MessageUnexpectedString);
      }

      if (token.type === TokenIdentifier) {
        throwError(token, MessageUnexpectedIdentifier);
      }

      if (token.type === TokenKeyword) {
        throwError(token, MessageUnexpectedReserved);
      }

      // BooleanLiteral, NullLiteral, or Punctuator.
      throwError(token, MessageUnexpectedToken, token.value);
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
      var token = lex();
      if (token.type !== TokenPunctuator || token.value !== value) {
        throwUnexpected(token);
      }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
      return lookahead.type === TokenPunctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
      return lookahead.type === TokenKeyword && lookahead.value === keyword;
    }

    // 11.1.4 Array Initialiser

    function parseArrayInitialiser() {
      var elements = [];

      index$1 = lookahead.start;
      expect('[');

      while (!match(']')) {
        if (match(',')) {
          lex();
          elements.push(null);
        } else {
          elements.push(parseConditionalExpression());

          if (!match(']')) {
            expect(',');
          }
        }
      }

      lex();

      return finishArrayExpression(elements);
    }

    // 11.1.5 Object Initialiser

    function parseObjectPropertyKey() {
      var token;

      index$1 = lookahead.start;
      token = lex();

      // Note: This function is called only from parseObjectProperty(), where
      // EOF and Punctuator tokens are already filtered out.

      if (token.type === TokenStringLiteral || token.type === TokenNumericLiteral) {
        if (token.octal) {
          throwError(token, MessageStrictOctalLiteral);
        }
        return finishLiteral(token);
      }

      return finishIdentifier(token.value);
    }

    function parseObjectProperty() {
      var token, key, id, value;

      index$1 = lookahead.start;
      token = lookahead;

      if (token.type === TokenIdentifier) {
        id = parseObjectPropertyKey();
        expect(':');
        value = parseConditionalExpression();
        return finishProperty('init', id, value);
      }
      if (token.type === TokenEOF || token.type === TokenPunctuator) {
        throwUnexpected(token);
      } else {
        key = parseObjectPropertyKey();
        expect(':');
        value = parseConditionalExpression();
        return finishProperty('init', key, value);
      }
    }

    function parseObjectInitialiser() {
      var properties = [],
        property, name, key, map = {},
        toString = String;

      index$1 = lookahead.start;
      expect('{');

      while (!match('}')) {
        property = parseObjectProperty();

        if (property.key.type === SyntaxIdentifier) {
          name = property.key.name;
        } else {
          name = toString(property.key.value);
        }

        key = '$' + name;
        if (Object.prototype.hasOwnProperty.call(map, key)) {
          throwError({}, MessageStrictDuplicateProperty);
        } else {
          map[key] = true;
        }

        properties.push(property);

        if (!match('}')) {
          expect(',');
        }
      }

      expect('}');

      return finishObjectExpression(properties);
    }

    // 11.1.6 The Grouping Operator

    function parseGroupExpression() {
      var expr;

      expect('(');

      expr = parseExpression();

      expect(')');

      return expr;
    }


    // 11.1 Primary Expressions

    var legalKeywords = {
      "if": 1,
      "this": 1
    };

    function parsePrimaryExpression() {
      var type, token, expr;

      if (match('(')) {
        return parseGroupExpression();
      }

      if (match('[')) {
        return parseArrayInitialiser();
      }

      if (match('{')) {
        return parseObjectInitialiser();
      }

      type = lookahead.type;
      index$1 = lookahead.start;


      if (type === TokenIdentifier || legalKeywords[lookahead.value]) {
        expr = finishIdentifier(lex().value);
      } else if (type === TokenStringLiteral || type === TokenNumericLiteral) {
        if (lookahead.octal) {
          throwError(lookahead, MessageStrictOctalLiteral);
        }
        expr = finishLiteral(lex());
      } else if (type === TokenKeyword) {
        throw new Error(DISABLED);
      } else if (type === TokenBooleanLiteral) {
        token = lex();
        token.value = (token.value === 'true');
        expr = finishLiteral(token);
      } else if (type === TokenNullLiteral) {
        token = lex();
        token.value = null;
        expr = finishLiteral(token);
      } else if (match('/') || match('/=')) {
        expr = finishLiteral(scanRegExp());
        peek$1();
      } else {
        throwUnexpected(lex());
      }

      return expr;
    }

    // 11.2 Left-Hand-Side Expressions

    function parseArguments() {
      var args = [];

      expect('(');

      if (!match(')')) {
        while (index$1 < length) {
          args.push(parseConditionalExpression());
          if (match(')')) {
            break;
          }
          expect(',');
        }
      }

      expect(')');

      return args;
    }

    function parseNonComputedProperty() {
      var token;
      index$1 = lookahead.start;
      token = lex();

      if (!isIdentifierName(token)) {
        throwUnexpected(token);
      }

      return finishIdentifier(token.value);
    }

    function parseNonComputedMember() {
      expect('.');

      return parseNonComputedProperty();
    }

    function parseComputedMember() {
      var expr;

      expect('[');

      expr = parseExpression();

      expect(']');

      return expr;
    }

    function parseLeftHandSideExpressionAllowCall() {
      var expr, args, property;

      expr = parsePrimaryExpression();

      for (;;) {
        if (match('.')) {
          property = parseNonComputedMember();
          expr = finishMemberExpression('.', expr, property);
        } else if (match('(')) {
          args = parseArguments();
          expr = finishCallExpression(expr, args);
        } else if (match('[')) {
          property = parseComputedMember();
          expr = finishMemberExpression('[', expr, property);
        } else {
          break;
        }
      }

      return expr;
    }

    // 11.3 Postfix Expressions

    function parsePostfixExpression() {
      var expr = parseLeftHandSideExpressionAllowCall();

      if (lookahead.type === TokenPunctuator) {
        if ((match('++') || match('--'))) {
          throw new Error(DISABLED);
        }
      }

      return expr;
    }

    // 11.4 Unary Operators

    function parseUnaryExpression() {
      var token, expr;

      if (lookahead.type !== TokenPunctuator && lookahead.type !== TokenKeyword) {
        expr = parsePostfixExpression();
      } else if (match('++') || match('--')) {
        throw new Error(DISABLED);
      } else if (match('+') || match('-') || match('~') || match('!')) {
        token = lex();
        expr = parseUnaryExpression();
        expr = finishUnaryExpression(token.value, expr);
      } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
        throw new Error(DISABLED);
      } else {
        expr = parsePostfixExpression();
      }

      return expr;
    }

    function binaryPrecedence(token) {
      var prec = 0;

      if (token.type !== TokenPunctuator && token.type !== TokenKeyword) {
        return 0;
      }

      switch (token.value) {
        case '||':
          prec = 1;
          break;

        case '&&':
          prec = 2;
          break;

        case '|':
          prec = 3;
          break;

        case '^':
          prec = 4;
          break;

        case '&':
          prec = 5;
          break;

        case '==':
        case '!=':
        case '===':
        case '!==':
          prec = 6;
          break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
        case 'in':
          prec = 7;
          break;

        case '<<':
        case '>>':
        case '>>>':
          prec = 8;
          break;

        case '+':
        case '-':
          prec = 9;
          break;

        case '*':
        case '/':
        case '%':
          prec = 11;
          break;

        default:
          break;
      }

      return prec;
    }

    // 11.5 Multiplicative Operators
    // 11.6 Additive Operators
    // 11.7 Bitwise Shift Operators
    // 11.8 Relational Operators
    // 11.9 Equality Operators
    // 11.10 Binary Bitwise Operators
    // 11.11 Binary Logical Operators

    function parseBinaryExpression() {
      var marker, markers, expr, token, prec, stack, right, operator, left, i;

      marker = lookahead;
      left = parseUnaryExpression();

      token = lookahead;
      prec = binaryPrecedence(token);
      if (prec === 0) {
        return left;
      }
      token.prec = prec;
      lex();

      markers = [marker, lookahead];
      right = parseUnaryExpression();

      stack = [left, token, right];

      while ((prec = binaryPrecedence(lookahead)) > 0) {

        // Reduce: make a binary expression from the three topmost entries.
        while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
          right = stack.pop();
          operator = stack.pop().value;
          left = stack.pop();
          markers.pop();
          expr = finishBinaryExpression(operator, left, right);
          stack.push(expr);
        }

        // Shift.
        token = lex();
        token.prec = prec;
        stack.push(token);
        markers.push(lookahead);
        expr = parseUnaryExpression();
        stack.push(expr);
      }

      // Final reduce to clean-up the stack.
      i = stack.length - 1;
      expr = stack[i];
      markers.pop();
      while (i > 1) {
        markers.pop();
        expr = finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
        i -= 2;
      }

      return expr;
    }

    // 11.12 Conditional Operator

    function parseConditionalExpression() {
      var expr, consequent, alternate;

      expr = parseBinaryExpression();

      if (match('?')) {
        lex();
        consequent = parseConditionalExpression();
        expect(':');
        alternate = parseConditionalExpression();

        expr = finishConditionalExpression(expr, consequent, alternate);
      }

      return expr;
    }

    // 11.14 Comma Operator

    function parseExpression() {
      var expr = parseConditionalExpression();

      if (match(',')) {
        throw new Error(DISABLED); // no sequence expressions
      }

      return expr;
    }

    function parse$3(code) {
      source$1 = code;
      index$1 = 0;
      length = source$1.length;
      lookahead = null;

      peek$1();

      var expr = parseExpression();

      if (lookahead.type !== TokenEOF) {
        throw new Error("Unexpect token after expression.");
      }
      return expr;
    }

    var constants = {
      NaN:       'NaN',
      E:         'Math.E',
      LN2:       'Math.LN2',
      LN10:      'Math.LN10',
      LOG2E:     'Math.LOG2E',
      LOG10E:    'Math.LOG10E',
      PI:        'Math.PI',
      SQRT1_2:   'Math.SQRT1_2',
      SQRT2:     'Math.SQRT2',
      MIN_VALUE: 'Number.MIN_VALUE',
      MAX_VALUE: 'Number.MAX_VALUE'
    };

    function functions(codegen) {

      function fncall(name, args, cast, type) {
        var obj = codegen(args[0]);
        if (cast) {
          obj = cast + '(' + obj + ')';
          if (cast.lastIndexOf('new ', 0) === 0) obj = '(' + obj + ')';
        }
        return obj + '.' + name + (type < 0 ? '' : type === 0 ?
          '()' :
          '(' + args.slice(1).map(codegen).join(',') + ')');
      }

      function fn(name, cast, type) {
        return function(args) {
          return fncall(name, args, cast, type);
        };
      }

      var DATE = 'new Date',
          STRING = 'String',
          REGEXP = 'RegExp';

      return {
        // MATH functions
        isNaN:    'isNaN',
        isFinite: 'isFinite',
        abs:      'Math.abs',
        acos:     'Math.acos',
        asin:     'Math.asin',
        atan:     'Math.atan',
        atan2:    'Math.atan2',
        ceil:     'Math.ceil',
        cos:      'Math.cos',
        exp:      'Math.exp',
        floor:    'Math.floor',
        log:      'Math.log',
        max:      'Math.max',
        min:      'Math.min',
        pow:      'Math.pow',
        random:   'Math.random',
        round:    'Math.round',
        sin:      'Math.sin',
        sqrt:     'Math.sqrt',
        tan:      'Math.tan',

        clamp: function(args) {
          if (args.length < 3) error('Missing arguments to clamp function.');
          if (args.length > 3) error('Too many arguments to clamp function.');
          var a = args.map(codegen);
          return 'Math.max('+a[1]+', Math.min('+a[2]+','+a[0]+'))';
        },

        // DATE functions
        now:             'Date.now',
        utc:             'Date.UTC',
        datetime:        DATE,
        date:            fn('getDate', DATE, 0),
        day:             fn('getDay', DATE, 0),
        year:            fn('getFullYear', DATE, 0),
        month:           fn('getMonth', DATE, 0),
        hours:           fn('getHours', DATE, 0),
        minutes:         fn('getMinutes', DATE, 0),
        seconds:         fn('getSeconds', DATE, 0),
        milliseconds:    fn('getMilliseconds', DATE, 0),
        time:            fn('getTime', DATE, 0),
        timezoneoffset:  fn('getTimezoneOffset', DATE, 0),
        utcdate:         fn('getUTCDate', DATE, 0),
        utcday:          fn('getUTCDay', DATE, 0),
        utcyear:         fn('getUTCFullYear', DATE, 0),
        utcmonth:        fn('getUTCMonth', DATE, 0),
        utchours:        fn('getUTCHours', DATE, 0),
        utcminutes:      fn('getUTCMinutes', DATE, 0),
        utcseconds:      fn('getUTCSeconds', DATE, 0),
        utcmilliseconds: fn('getUTCMilliseconds', DATE, 0),

        // shared sequence functions
        length:      fn('length', null, -1),
        indexof:     fn('indexOf', null),
        lastindexof: fn('lastIndexOf', null),
        slice:       fn('slice', null),

        // STRING functions
        parseFloat:  'parseFloat',
        parseInt:    'parseInt',
        upper:       fn('toUpperCase', STRING, 0),
        lower:       fn('toLowerCase', STRING, 0),
        substring:   fn('substring', STRING),
        split:       fn('split', STRING),
        replace:     fn('replace', STRING),

        // REGEXP functions
        regexp:  REGEXP,
        test:    fn('test', REGEXP),

        // Control Flow functions
        if: function(args) {
            if (args.length < 3) error('Missing arguments to if function.');
            if (args.length > 3) error('Too many arguments to if function.');
            var a = args.map(codegen);
            return '('+a[0]+'?'+a[1]+':'+a[2]+')';
          }
      };
    }

    function codegen(opt) {
      opt = opt || {};

      var whitelist = opt.whitelist ? toSet(opt.whitelist) : {},
          blacklist = opt.blacklist ? toSet(opt.blacklist) : {},
          constants$1 = opt.constants || constants,
          functions$1 = (opt.functions || functions)(visit),
          globalvar = opt.globalvar,
          fieldvar = opt.fieldvar,
          globals = {},
          fields = {},
          memberDepth = 0;

      var outputGlobal = isFunction(globalvar)
        ? globalvar
        : function (id) { return globalvar + '["' + id + '"]'; };

      function visit(ast) {
        if (isString(ast)) return ast;
        var generator = Generators[ast.type];
        if (generator == null) error('Unsupported type: ' + ast.type);
        return generator(ast);
      }

      var Generators = {
        Literal: function(n) {
            return n.raw;
          },

        Identifier: function(n) {
          var id = n.name;
          if (memberDepth > 0) {
            return id;
          } else if (blacklist.hasOwnProperty(id)) {
            return error('Illegal identifier: ' + id);
          } else if (constants$1.hasOwnProperty(id)) {
            return constants$1[id];
          } else if (whitelist.hasOwnProperty(id)) {
            return id;
          } else {
            globals[id] = 1;
            return outputGlobal(id);
          }
        },

        MemberExpression: function(n) {
            var d = !n.computed;
            var o = visit(n.object);
            if (d) memberDepth += 1;
            var p = visit(n.property);
            if (o === fieldvar) { fields[p] = 1; } // HACKish...
            if (d) memberDepth -= 1;
            return o + (d ? '.'+p : '['+p+']');
          },

        CallExpression: function(n) {
            if (n.callee.type !== 'Identifier') {
              error('Illegal callee type: ' + n.callee.type);
            }
            var callee = n.callee.name;
            var args = n.arguments;
            var fn = functions$1.hasOwnProperty(callee) && functions$1[callee];
            if (!fn) error('Unrecognized function: ' + callee);
            return isFunction(fn)
              ? fn(args)
              : fn + '(' + args.map(visit).join(',') + ')';
          },

        ArrayExpression: function(n) {
            return '[' + n.elements.map(visit).join(',') + ']';
          },

        BinaryExpression: function(n) {
            return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
          },

        UnaryExpression: function(n) {
            return '(' + n.operator + visit(n.argument) + ')';
          },

        ConditionalExpression: function(n) {
            return '(' + visit(n.test) +
              '?' + visit(n.consequent) +
              ':' + visit(n.alternate) +
              ')';
          },

        LogicalExpression: function(n) {
            return '(' + visit(n.left) + n.operator + visit(n.right) + ')';
          },

        ObjectExpression: function(n) {
            return '{' + n.properties.map(visit).join(',') + '}';
          },

        Property: function(n) {
            memberDepth += 1;
            var k = visit(n.key);
            memberDepth -= 1;
            return k + ':' + visit(n.value);
          }
      };

      function codegen(ast) {
        var result = {
          code:    visit(ast),
          globals: Object.keys(globals),
          fields:  Object.keys(fields)
        };
        globals = {};
        fields = {};
        return result;
      }

      codegen.functions = functions$1;
      codegen.constants = constants$1;

      return codegen;
    }

    const Intersect = 'intersect';
    const Union = 'union';

    var TYPE_ENUM = 'E',
        TYPE_RANGE_INC = 'R',
        TYPE_RANGE_EXC = 'R-E',
        TYPE_RANGE_LE = 'R-LE',
        TYPE_RANGE_RE = 'R-RE',
        UNIT_INDEX = 'index:unit';

    // TODO: revisit date coercion?
    function testPoint(datum, entry) {
      var fields = entry.fields,
          values = entry.values,
          n = fields.length,
          i = 0, dval, f;

      for (; i<n; ++i) {
        f = fields[i];
        f.getter = field.getter || field(f.field);
        dval = f.getter(datum);

        if (isDate(dval)) dval = toNumber(dval);
        if (isDate(values[i])) values[i] = toNumber(values[i]);
        if (isDate(values[i][0])) values[i] = values[i].map(toNumber);

        if (f.type === TYPE_ENUM) {
          // Enumerated fields can either specify individual values (single/multi selections)
          // or an array of values (interval selections).
          if(isArray(values[i]) ? values[i].indexOf(dval) < 0 : dval !== values[i]) {
            return false;
          }
        } else {
          if (f.type === TYPE_RANGE_INC) {
            if (!inrange(dval, values[i])) return false;
          } else if (f.type === TYPE_RANGE_RE) {
            // Discrete selection of bins test within the range [bin_start, bin_end).
            if (!inrange(dval, values[i], true, false)) return false;
          } else if (f.type === TYPE_RANGE_EXC) { // 'R-E'/'R-LE' included for completeness.
            if (!inrange(dval, values[i], false, false)) return false;
          } else if (f.type === TYPE_RANGE_LE) {
            if (!inrange(dval, values[i], false, true)) return false;
          }
        }
      }

      return true;
    }

    /**
     * Tests if a tuple is contained within an interactive selection.
     * @param {string} name - The name of the data set representing the selection.
     *  Tuples in the dataset are of the form
     *  {unit: string, fields: array<fielddef>, values: array<*>}.
     *  Fielddef is of the form
     *  {field: string, channel: string, type: 'E' | 'R'} where
     *  'type' identifies whether tuples in the dataset enumerate
     *  values for the field, or specify a continuous range.
     * @param {object} datum - The tuple to test for inclusion.
     * @param {string} op - The set operation for combining selections.
     *   One of 'intersect' or 'union' (default).
     * @return {boolean} - True if the datum is in the selection, false otherwise.
     */
    function selectionTest(name, datum, op) {
      var data = this.context.data[name],
          entries = data ? data.values.value : [],
          unitIdx = data ? data[UNIT_INDEX] && data[UNIT_INDEX].value : undefined,
          intersect = op === Intersect,
          n = entries.length,
          i = 0,
          entry, miss, count, unit, b;

      for (; i<n; ++i) {
        entry = entries[i];

        if (unitIdx && intersect) {
          // multi selections union within the same unit and intersect across units.
          miss = miss || {};
          count = miss[unit=entry.unit] || 0;

          // if we've already matched this unit, skip.
          if (count === -1) continue;

          b = testPoint(datum, entry);
          miss[unit] = b ? -1 : ++count;

          // if we match and there are no other units return true
          // if we've missed against all tuples in this unit return false
          if (b && unitIdx.size === 1) return true;
          if (!b && count === unitIdx.get(unit).count) return false;
        } else {
          b = testPoint(datum, entry);

          // if we find a miss and we do require intersection return false
          // if we find a match and we don't require intersection return true
          if (intersect ^ b) return b;
        }
      }

      // if intersecting and we made it here, then we saw no misses
      // if not intersecting, then we saw no matches
      // if no active selections, return false
      return n && intersect;
    }

    /**
     * Resolves selection for use as a scale domain or reads via the API.
     * @param {string} name - The name of the dataset representing the selection
     * @param {string} [op='union'] - The set operation for combining selections.
     *                 One of 'intersect' or 'union' (default).
     * @returns {object} An object of selected fields and values.
     */
    function selectionResolve(name, op) {
      var data = this.context.data[name],
        entries = data ? data.values.value : [],
        resolved = {}, types = {},
        entry, fields, values, unit, field, res, resUnit, type, union,
        n = entries.length, i = 0, j, m;

      // First union all entries within the same unit.
      for (; i < n; ++i) {
        entry = entries[i];
        unit = entry.unit;
        fields = entry.fields;
        values = entry.values;

        for (j = 0, m = fields.length; j < m; ++j) {
          field = fields[j];
          res = resolved[field.field] || (resolved[field.field] = {});
          resUnit = res[unit] || (res[unit] = []);
          types[field.field] = type = field.type.charAt(0);
          union = ops[type + '_union'];
          res[unit] = union(resUnit, array(values[j]));
        }
      }

      // Then resolve fields across units as per the op.
      op = op || Union;
      Object.keys(resolved).forEach(function (field) {
        resolved[field] = Object.keys(resolved[field])
          .map(function (unit) { return resolved[field][unit]; })
          .reduce(function (acc, curr) {
            return acc === undefined ? curr :
              ops[types[field] + '_' + op](acc, curr);
          });
      });

      return resolved;
    }

    var ops = {
      E_union: function(base, value) {
        if (!base.length) return value;

        var i = 0, n = value.length;
        for (; i<n; ++i) if (base.indexOf(value[i]) < 0) base.push(value[i]);
        return base;
      },

      E_intersect: function(base, value) {
        return !base.length ? value :
          base.filter(function (v) { return value.indexOf(v) >= 0; });
      },

      R_union: function(base, value) {
        var lo = toNumber(value[0]), hi = toNumber(value[1]);
        if (lo > hi) {
          lo = value[1];
          hi = value[0];
        }

        if (!base.length) return [lo, hi];
        if (base[0] > lo) base[0] = lo;
        if (base[1] < hi) base[1] = hi;
        return base;
      },

      R_intersect: function(base, value) {
        var lo = toNumber(value[0]), hi = toNumber(value[1]);
        if (lo > hi) {
          lo = value[1];
          hi = value[0];
        }

        if (!base.length) return [lo, hi];
        if (hi < base[0] || base[1] < lo) {
          return [];
        } else {
          if (base[0] < lo) base[0] = lo;
          if (base[1] > hi) base[1] = hi;
        }
        return base;
      }
    };

    const DataPrefix = ':',
          IndexPrefix = '@';

    function selectionVisitor(name, args, scope, params) {
      if (args[0].type !== Literal) error('First argument to selection functions must be a string literal.');

      const data = args[0].value,
            op = args.length >= 2 && peek(args).value,
            field = 'unit',
            indexName = IndexPrefix + field,
            dataName = DataPrefix + data;

      if (op === Intersect && !params.hasOwnProperty(indexName)) {
        params[indexName] = scope.getData(data).indataRef(scope, field);
      }

      if (!params.hasOwnProperty(dataName)) {
        params[dataName] = scope.getData(data).tuplesRef();
      }
    }

    function data$1(name) {
      const data = this.context.data[name];
      return data ? data.values.value : [];
    }

    function indata(name, field, value) {
      const index = this.context.data[name]['index:' + field],
            entry = index ? index.value.get(value) : undefined;
      return entry ? entry.count : entry;
    }

    function setdata(name, tuples) {
      const df = this.context.dataflow,
            data = this.context.data[name],
            input = data.input;

      df.pulse(input, df.changeset().remove(truthy).insert(tuples));
      return 1;
    }

    function encode$1(item, name, retval) {
      if (item) {
        const df = this.context.dataflow,
              target = item.mark.source;
        df.pulse(target, df.changeset().encode(item, name));
      }
      return retval !== undefined ? retval : item;
    }

    const formatCache = {};

    function formatter(type, method, specifier) {
      let k = type + ':' + specifier,
          e = formatCache[k];
      if (!e || e[0] !== method) {
        formatCache[k] = (e = [method, method(specifier)]);
      }
      return e[1];
    }

    function format$3(_, specifier) {
      return formatter('format', format$2, specifier)(_);
    }

    function timeFormat$1(_, specifier) {
      return formatter('timeFormat', timeFormat, specifier)(_);
    }

    function utcFormat$1(_, specifier) {
      return formatter('utcFormat', utcFormat, specifier)(_);
    }

    function timeParse$1(_, specifier) {
      return formatter('timeParse', timeParse, specifier)(_);
    }

    function utcParse$1(_, specifier) {
      return formatter('utcParse', utcParse, specifier)(_);
    }

    var dateObj = new Date(2000, 0, 1);

    function time$2(month, day, specifier) {
      dateObj.setMonth(month);
      dateObj.setDate(day);
      return timeFormat$1(dateObj, specifier);
    }

    function monthFormat(month) {
      return time$2(month, 1, '%B');
    }

    function monthAbbrevFormat(month) {
      return time$2(month, 1, '%b');
    }

    function dayFormat(day) {
      return time$2(0, 2 + day, '%A');
    }

    function dayAbbrevFormat(day) {
      return time$2(0, 2 + day, '%a');
    }

    function getScale(name, ctx) {
      let s;
      return isFunction(name) ? name
        : isString(name) ? (s = ctx.scales[name]) && s.value
        : undefined;
    }

    function range$5(name, group) {
      const s = getScale(name, (group || this).context);
      return s && s.range ? s.range() : [];
    }

    function domain(name, group) {
      const s = getScale(name, (group || this).context);
      return s ? s.domain() : [];
    }

    function bandwidth(name, group) {
      const s = getScale(name, (group || this).context);
      return s && s.bandwidth ? s.bandwidth() : 0;
    }

    function bandspace(count, paddingInner, paddingOuter) {
      return bandSpace(count || 0, paddingInner || 0, paddingOuter || 0);
    }

    function copy$2(name, group) {
      const s = getScale(name, (group || this).context);
      return s ? s.copy() : undefined;
    }

    function scale$2(name, value, group) {
      const s = getScale(name, (group || this).context);
      return s ? s(value) : undefined;
    }

    function invert(name, range, group) {
      const s = getScale(name, (group || this).context);
      return !s ? undefined
        : isArray(range) ? (s.invertRange || s.invert)(range)
        : (s.invert || s.invertExtent)(range);
    }

    function geoMethod(methodName, globalMethod) {
      return function(projection, geojson, group) {
        if (projection) {
          // projection defined, use it
          const p = getScale(projection, (group || this).context);
          return p && p.path[methodName](geojson);
        } else {
          // projection undefined, use global method
          return globalMethod(geojson);
        }
      };
    }

    const geoArea = geoMethod('area', area$4);
    const geoBounds = geoMethod('bounds', bounds$1);
    const geoCentroid = geoMethod('centroid', centroid);

    function inScope(item) {
      let group = this.context.group,
          value = false;

      if (group) while (item) {
        if (item === group) { value = true; break; }
        item = item.mark.group;
      }
      return value;
    }

    function Bounds$1(b) {
      this.clear();
      if (b) this.union(b);
    }

    var prototype$1k = Bounds$1.prototype;

    prototype$1k.clone = function() {
      return new Bounds$1(this);
    };

    prototype$1k.clear = function() {
      this.x1 = +Number.MAX_VALUE;
      this.y1 = +Number.MAX_VALUE;
      this.x2 = -Number.MAX_VALUE;
      this.y2 = -Number.MAX_VALUE;
      return this;
    };

    prototype$1k.empty = function() {
      return (
        this.x1 === +Number.MAX_VALUE &&
        this.y1 === +Number.MAX_VALUE &&
        this.x2 === -Number.MAX_VALUE &&
        this.y2 === -Number.MAX_VALUE
      );
    };

    prototype$1k.equals = function(b) {
      return (
        this.x1 === b.x1 &&
        this.y1 === b.y1 &&
        this.x2 === b.x2 &&
        this.y2 === b.y2
      );
    };

    prototype$1k.set = function(x1, y1, x2, y2) {
      if (x2 < x1) {
        this.x2 = x1;
        this.x1 = x2;
      } else {
        this.x1 = x1;
        this.x2 = x2;
      }
      if (y2 < y1) {
        this.y2 = y1;
        this.y1 = y2;
      } else {
        this.y1 = y1;
        this.y2 = y2;
      }
      return this;
    };

    prototype$1k.add = function(x, y) {
      if (x < this.x1) this.x1 = x;
      if (y < this.y1) this.y1 = y;
      if (x > this.x2) this.x2 = x;
      if (y > this.y2) this.y2 = y;
      return this;
    };

    prototype$1k.expand = function(d) {
      this.x1 -= d;
      this.y1 -= d;
      this.x2 += d;
      this.y2 += d;
      return this;
    };

    prototype$1k.round = function() {
      this.x1 = Math.floor(this.x1);
      this.y1 = Math.floor(this.y1);
      this.x2 = Math.ceil(this.x2);
      this.y2 = Math.ceil(this.y2);
      return this;
    };

    prototype$1k.translate = function(dx, dy) {
      this.x1 += dx;
      this.x2 += dx;
      this.y1 += dy;
      this.y2 += dy;
      return this;
    };

    prototype$1k.rotate = function(angle, x, y) {
      const p = this.rotatedPoints(angle, x, y);
      return this.clear()
        .add(p[0], p[1])
        .add(p[2], p[3])
        .add(p[4], p[5])
        .add(p[6], p[7]);
    };

    prototype$1k.rotatedPoints = function(angle, x, y) {
      var {x1, y1, x2, y2} = this,
          cos = Math.cos(angle),
          sin = Math.sin(angle),
          cx = x - x*cos + y*sin,
          cy = y - x*sin - y*cos;

      return [
        cos*x1 - sin*y1 + cx, sin*x1 + cos*y1 + cy,
        cos*x1 - sin*y2 + cx, sin*x1 + cos*y2 + cy,
        cos*x2 - sin*y1 + cx, sin*x2 + cos*y1 + cy,
        cos*x2 - sin*y2 + cx, sin*x2 + cos*y2 + cy
      ];
    };

    prototype$1k.union = function(b) {
      if (b.x1 < this.x1) this.x1 = b.x1;
      if (b.y1 < this.y1) this.y1 = b.y1;
      if (b.x2 > this.x2) this.x2 = b.x2;
      if (b.y2 > this.y2) this.y2 = b.y2;
      return this;
    };

    prototype$1k.intersect = function(b) {
      if (b.x1 > this.x1) this.x1 = b.x1;
      if (b.y1 > this.y1) this.y1 = b.y1;
      if (b.x2 < this.x2) this.x2 = b.x2;
      if (b.y2 < this.y2) this.y2 = b.y2;
      return this;
    };

    prototype$1k.encloses = function(b) {
      return b && (
        this.x1 <= b.x1 &&
        this.x2 >= b.x2 &&
        this.y1 <= b.y1 &&
        this.y2 >= b.y2
      );
    };

    prototype$1k.alignsWith = function(b) {
      return b && (
        this.x1 == b.x1 ||
        this.x2 == b.x2 ||
        this.y1 == b.y1 ||
        this.y2 == b.y2
      );
    };

    prototype$1k.intersects = function(b) {
      return b && !(
        this.x2 < b.x1 ||
        this.x1 > b.x2 ||
        this.y2 < b.y1 ||
        this.y1 > b.y2
      );
    };

    prototype$1k.contains = function(x, y) {
      return !(
        x < this.x1 ||
        x > this.x2 ||
        y < this.y1 ||
        y > this.y2
      );
    };

    prototype$1k.width = function() {
      return this.x2 - this.x1;
    };

    prototype$1k.height = function() {
      return this.y2 - this.y1;
    };

    var gradient_id = 0;

    function Gradient$1(p0, p1) {
      var stops = [], gradient;
      return gradient = {
        id: 'gradient_' + (gradient_id++),
        x1: p0 ? p0[0] : 0,
        y1: p0 ? p0[1] : 0,
        x2: p1 ? p1[0] : 1,
        y2: p1 ? p1[1] : 0,
        stops: stops,
        stop: function(offset, color) {
          stops.push({offset: offset, color: color});
          return gradient;
        }
      };
    }

    function Item$1(mark) {
      this.mark = mark;
      this.bounds = (this.bounds || new Bounds$1());
    }

    function GroupItem$1(mark) {
      Item$1.call(this, mark);
      this.items = (this.items || []);
    }

    inherits(GroupItem$1, Item$1);

    // Matches absolute URLs with optional protocol
    //   https://...    file://...    //...
    var protocol_re$2 = /^([A-Za-z]+:)?\/\//;

    // Special treatment in node.js for the file: protocol
    var fileProtocol$2 = 'file://';

    /**
     * Factory for a loader constructor that provides methods for requesting
     * files from either the network or disk, and for sanitizing request URIs.
     * @param {function} fetch - The Fetch API for HTTP network requests.
     *   If null or undefined, HTTP loading will be disabled.
     * @param {object} fs - The file system interface for file loading.
     *   If null or undefined, local file loading will be disabled.
     * @return {function} A loader constructor with the following signature:
     *   param {object} [options] - Optional default loading options to use.
     *   return {object} - A new loader instance.
     */
    function loaderFactory$2(fetch, fs) {
      return function(options) {
        return {
          options: options || {},
          sanitize: sanitize$2,
          load: load$2,
          fileAccess: !!fs,
          file: fileLoader$2(fs),
          http: httpLoader$2(fetch)
        };
      };
    }

    /**
     * Load an external resource, typically either from the web or from the local
     * filesystem. This function uses {@link sanitize} to first sanitize the uri,
     * then calls either {@link http} (for web requests) or {@link file} (for
     * filesystem loading).
     * @param {string} uri - The resource indicator (e.g., URL or filename).
     * @param {object} [options] - Optional loading options. These options will
     *   override any existing default options.
     * @return {Promise} - A promise that resolves to the loaded content.
     */
    async function load$2(uri, options) {
      const opt = await this.sanitize(uri, options),
            url = opt.href;

      return opt.localFile
        ? this.file(url)
        : this.http(url, options);
    }

    /**
     * URI sanitizer function.
     * @param {string} uri - The uri (url or filename) to sanity check.
     * @param {object} options - An options hash.
     * @return {Promise} - A promise that resolves to an object containing
     *  sanitized uri data, or rejects it the input uri is deemed invalid.
     *  The properties of the resolved object are assumed to be
     *  valid attributes for an HTML 'a' tag. The sanitized uri *must* be
     *  provided by the 'href' property of the returned object.
     */
    async function sanitize$2(uri, options) {
      options = extend({}, this.options, options);

      const fileAccess = this.fileAccess,
            result = {href: null};

      let isFile, hasProtocol, loadFile, base;

      if (uri == null || typeof uri !== 'string') {
        error('Sanitize failure, invalid URI: ' + $(uri));
      }

      hasProtocol = protocol_re$2.test(uri);

      // if relative url (no protocol/host), prepend baseURL
      if ((base = options.baseURL) && !hasProtocol) {
        // Ensure that there is a slash between the baseURL (e.g. hostname) and url
        if (!uri.startsWith('/') && base[base.length-1] !== '/') {
          uri = '/' + uri;
        }
        uri = base + uri;
      }

      // should we load from file system?
      loadFile = (isFile = uri.startsWith(fileProtocol$2))
        || options.mode === 'file'
        || options.mode !== 'http' && !hasProtocol && fileAccess;

      if (isFile) {
        // strip file protocol
        uri = uri.slice(fileProtocol$2.length);
      } else if (uri.startsWith('//')) {
        if (options.defaultProtocol === 'file') {
          // if is file, strip protocol and set loadFile flag
          uri = uri.slice(2);
          loadFile = true;
        } else {
          // if relative protocol (starts with '//'), prepend default protocol
          uri = (options.defaultProtocol || 'http') + ':' + uri;
        }
      }

      // set non-enumerable mode flag to indicate local file load
      Object.defineProperty(result, 'localFile', {value: !!loadFile});

      // set uri
      result.href = uri;

      // set default result target, if specified
      if (options.target) {
        result.target = options.target + '';
      }

      // set default result rel, if specified (#1542)
      if (options.rel) {
        result.rel = options.rel + '';
      }

      // return
      return result;
    }

    /**
     * File system loader factory.
     * @param {object} fs - The file system interface.
     * @return {function} - A file loader with the following signature:
     *   param {string} filename - The file system path to load.
     *   param {string} filename - The file system path to load.
     *   return {Promise} A promise that resolves to the file contents.
     */
    function fileLoader$2(fs) {
      return fs
        ? function(filename) {
            return new Promise(function(accept, reject) {
              fs.readFile(filename, function(error, data) {
                if (error) reject(error);
                else accept(data);
              });
            });
          }
        : fileReject$2;
    }

    /**
     * Default file system loader that simply rejects.
     */
    async function fileReject$2() {
      error('No file system access.');
    }

    /**
     * HTTP request handler factory.
     * @param {function} fetch - The Fetch API method.
     * @return {function} - An http loader with the following signature:
     *   param {string} url - The url to request.
     *   param {object} options - An options hash.
     *   return {Promise} - A promise that resolves to the file contents.
     */
    function httpLoader$2(fetch) {
      return fetch
        ? async function(url, options) {
            const opt = extend({}, this.options.http, options),
                  type = options && options.response,
                  response = await fetch(url, opt);

            return !response.ok
              ? error(response.status + '' + response.statusText)
              : isFunction(response[type]) ? response[type]()
              : response.text();
          }
        : httpReject$2;
    }

    /**
     * Default http request handler that simply rejects.
     */
    async function httpReject$2() {
      error('No HTTP fetch method available.');
    }

    var loader$2 = loaderFactory$2(
      typeof fetch !== 'undefined' && fetch, // use built-in fetch API
      null // no file system access
    );

    function ResourceLoader$1(customLoader) {
      this._pending = 0;
      this._loader = customLoader || loader$2();
    }

    var prototype$1l = ResourceLoader$1.prototype;

    prototype$1l.pending = function() {
      return this._pending;
    };

    function increment$1(loader) {
      loader._pending += 1;
    }

    function decrement$1(loader) {
      loader._pending -= 1;
    }

    prototype$1l.sanitizeURL = function(uri) {
      var loader = this;
      increment$1(loader);

      return loader._loader.sanitize(uri, {context:'href'})
        .then(function(opt) {
          decrement$1(loader);
          return opt;
        })
        .catch(function() {
          decrement$1(loader);
          return null;
        });
    };

    prototype$1l.loadImage = function(uri) {
      var loader = this,
          Image = domImage();
      increment$1(loader);

      return loader._loader
        .sanitize(uri, {context: 'image'})
        .then(function(opt) {
          var url = opt.href;
          if (!url || !Image) throw {url: url};

          var img = new Image();

          img.onload = function() {
            decrement$1(loader);
            img.loaded = true;
          };

          img.onerror = function() {
            decrement$1(loader);
            img.loaded = false;
          };

          img.src = url;
          return img;
        })
        .catch(function(e) {
          decrement$1(loader);
          return {loaded: false, width: 0, height: 0, src: e && e.url || ''};
        });
    };

    prototype$1l.ready = function() {
      var loader = this;
      return new Promise(function(accept) {
        function poll(value) {
          if (!loader.pending()) accept(value);
          else setTimeout(function() { poll(true); }, 10);
        }
        poll(false);
      });
    };

    var lookup$5 = {
      'basis': {
        curve: curveBasis
      },
      'basis-closed': {
        curve: curveBasisClosed
      },
      'basis-open': {
        curve: curveBasisOpen
      },
      'bundle': {
        curve: curveBundle,
        tension: 'beta',
        value: 0.85
      },
      'cardinal': {
        curve: curveCardinal,
        tension: 'tension',
        value: 0
      },
      'cardinal-open': {
        curve: curveCardinalOpen,
        tension: 'tension',
        value: 0
      },
      'cardinal-closed': {
        curve: curveCardinalClosed,
        tension: 'tension',
        value: 0
      },
      'catmull-rom': {
        curve: curveCatmullRom,
        tension: 'alpha',
        value: 0.5
      },
      'catmull-rom-closed': {
        curve: curveCatmullRomClosed,
        tension: 'alpha',
        value: 0.5
      },
      'catmull-rom-open': {
        curve: curveCatmullRomOpen,
        tension: 'alpha',
        value: 0.5
      },
      'linear': {
        curve: curveLinear
      },
      'linear-closed': {
        curve: curveLinearClosed
      },
      'monotone': {
        horizontal: monotoneY,
        vertical:   monotoneX
      },
      'natural': {
        curve: curveNatural
      },
      'step': {
        curve: curveStep
      },
      'step-after': {
        curve: stepAfter
      },
      'step-before': {
        curve: stepBefore
      }
    };

    function curves$1(type, orientation, tension) {
      var entry = lookup$5.hasOwnProperty(type) && lookup$5[type],
          curve = null;

      if (entry) {
        curve = entry.curve || entry[orientation || 'vertical'];
        if (entry.tension && tension != null) {
          curve = curve[entry.tension](tension);
        }
      }

      return curve;
    }

    // Path parsing and rendering code adapted from fabric.js -- Thanks!
    var cmdlen$1 = { m:2, l:2, h:1, v:1, c:6, s:4, q:4, t:2, a:7 },
        regexp$1 = [/([MLHVCSQTAZmlhvcsqtaz])/g, /###/, /(\d)([-+])/g, /\s|,|###/];

    function pathParse$1(pathstr) {
      var result = [],
          path,
          curr,
          chunks,
          parsed, param,
          cmd, len, i, j, n, m;

      // First, break path into command sequence
      path = pathstr
        .slice()
        .replace(regexp$1[0], '###$1')
        .split(regexp$1[1])
        .slice(1);

      // Next, parse each command in turn
      for (i=0, n=path.length; i<n; ++i) {
        curr = path[i];
        chunks = curr
          .slice(1)
          .trim()
          .replace(regexp$1[2],'$1###$2')
          .split(regexp$1[3]);
        cmd = curr.charAt(0);

        parsed = [cmd];
        for (j=0, m=chunks.length; j<m; ++j) {
          if ((param = +chunks[j]) === param) { // not NaN
            parsed.push(param);
          }
        }

        len = cmdlen$1[cmd.toLowerCase()];
        if (parsed.length-1 > len) {
          for (j=1, m=parsed.length; j<m; j+=len) {
            result.push([cmd].concat(parsed.slice(j, j+len)));
          }
        }
        else {
          result.push(parsed);
        }
      }

      return result;
    }

    var DegToRad$1 = Math.PI / 180;
    var HalfPi$1 = Math.PI / 2;
    var Tau$1 = Math.PI * 2;
    var HalfSqrt3$1 = Math.sqrt(3) / 2;

    var segmentCache$1 = {};
    var bezierCache$1 = {};

    var join$1 = [].join;

    // Copied from Inkscape svgtopdf, thanks!
    function segments$1(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
      var key = join$1.call(arguments);
      if (segmentCache$1[key]) {
        return segmentCache$1[key];
      }

      var th = rotateX * DegToRad$1;
      var sin_th = Math.sin(th);
      var cos_th = Math.cos(th);
      rx = Math.abs(rx);
      ry = Math.abs(ry);
      var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
      var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
      var pl = (px*px) / (rx*rx) + (py*py) / (ry*ry);
      if (pl > 1) {
        pl = Math.sqrt(pl);
        rx *= pl;
        ry *= pl;
      }

      var a00 = cos_th / rx;
      var a01 = sin_th / rx;
      var a10 = (-sin_th) / ry;
      var a11 = (cos_th) / ry;
      var x0 = a00 * ox + a01 * oy;
      var y0 = a10 * ox + a11 * oy;
      var x1 = a00 * x + a01 * y;
      var y1 = a10 * x + a11 * y;

      var d = (x1-x0) * (x1-x0) + (y1-y0) * (y1-y0);
      var sfactor_sq = 1 / d - 0.25;
      if (sfactor_sq < 0) sfactor_sq = 0;
      var sfactor = Math.sqrt(sfactor_sq);
      if (sweep == large) sfactor = -sfactor;
      var xc = 0.5 * (x0 + x1) - sfactor * (y1-y0);
      var yc = 0.5 * (y0 + y1) + sfactor * (x1-x0);

      var th0 = Math.atan2(y0-yc, x0-xc);
      var th1 = Math.atan2(y1-yc, x1-xc);

      var th_arc = th1-th0;
      if (th_arc < 0 && sweep === 1) {
        th_arc += Tau$1;
      } else if (th_arc > 0 && sweep === 0) {
        th_arc -= Tau$1;
      }

      var segs = Math.ceil(Math.abs(th_arc / (HalfPi$1 + 0.001)));
      var result = [];
      for (var i=0; i<segs; ++i) {
        var th2 = th0 + i * th_arc / segs;
        var th3 = th0 + (i+1) * th_arc / segs;
        result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
      }

      return (segmentCache$1[key] = result);
    }

    function bezier$1(params) {
      var key = join$1.call(params);
      if (bezierCache$1[key]) {
        return bezierCache$1[key];
      }

      var cx = params[0],
          cy = params[1],
          th0 = params[2],
          th1 = params[3],
          rx = params[4],
          ry = params[5],
          sin_th = params[6],
          cos_th = params[7];

      var a00 = cos_th * rx;
      var a01 = -sin_th * ry;
      var a10 = sin_th * rx;
      var a11 = cos_th * ry;

      var cos_th0 = Math.cos(th0);
      var sin_th0 = Math.sin(th0);
      var cos_th1 = Math.cos(th1);
      var sin_th1 = Math.sin(th1);

      var th_half = 0.5 * (th1 - th0);
      var sin_th_h2 = Math.sin(th_half * 0.5);
      var t = (8/3) * sin_th_h2 * sin_th_h2 / Math.sin(th_half);
      var x1 = cx + cos_th0 - t * sin_th0;
      var y1 = cy + sin_th0 + t * cos_th0;
      var x3 = cx + cos_th1;
      var y3 = cy + sin_th1;
      var x2 = x3 + t * sin_th1;
      var y2 = y3 - t * cos_th1;

      return (bezierCache$1[key] = [
        a00 * x1 + a01 * y1,  a10 * x1 + a11 * y1,
        a00 * x2 + a01 * y2,  a10 * x2 + a11 * y2,
        a00 * x3 + a01 * y3,  a10 * x3 + a11 * y3
      ]);
    }

    var temp$2 = ['l', 0, 0, 0, 0, 0, 0, 0];

    function scale$3(current, s) {
      var c = (temp$2[0] = current[0]);
      if (c === 'a' || c === 'A') {
        temp$2[1] = s * current[1];
        temp$2[2] = s * current[2];
        temp$2[3] = current[3];
        temp$2[4] = current[4];
        temp$2[5] = current[5];
        temp$2[6] = s * current[6];
        temp$2[7] = s * current[7];
      } else {
        for (var i=1, n=current.length; i<n; ++i) {
          temp$2[i] = s * current[i];
        }
      }
      return temp$2;
    }

    function pathRender$1(context, path, l, t, s) {
      var current, // current instruction
          previous = null,
          x = 0, // current x
          y = 0, // current y
          controlX = 0, // current control point x
          controlY = 0, // current control point y
          tempX,
          tempY,
          tempControlX,
          tempControlY;

      if (l == null) l = 0;
      if (t == null) t = 0;
      if (s == null) s = 1;

      if (context.beginPath) context.beginPath();

      for (var i=0, len=path.length; i<len; ++i) {
        current = path[i];
        if (s !== 1) current = scale$3(current, s);

        switch (current[0]) { // first letter

          case 'l': // lineto, relative
            x += current[1];
            y += current[2];
            context.lineTo(x + l, y + t);
            break;

          case 'L': // lineto, absolute
            x = current[1];
            y = current[2];
            context.lineTo(x + l, y + t);
            break;

          case 'h': // horizontal lineto, relative
            x += current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'H': // horizontal lineto, absolute
            x = current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'v': // vertical lineto, relative
            y += current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'V': // verical lineto, absolute
            y = current[1];
            context.lineTo(x + l, y + t);
            break;

          case 'm': // moveTo, relative
            x += current[1];
            y += current[2];
            context.moveTo(x + l, y + t);
            break;

          case 'M': // moveTo, absolute
            x = current[1];
            y = current[2];
            context.moveTo(x + l, y + t);
            break;

          case 'c': // bezierCurveTo, relative
            tempX = x + current[5];
            tempY = y + current[6];
            controlX = x + current[3];
            controlY = y + current[4];
            context.bezierCurveTo(
              x + current[1] + l, // x1
              y + current[2] + t, // y1
              controlX + l, // x2
              controlY + t, // y2
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            break;

          case 'C': // bezierCurveTo, absolute
            x = current[5];
            y = current[6];
            controlX = current[3];
            controlY = current[4];
            context.bezierCurveTo(
              current[1] + l,
              current[2] + t,
              controlX + l,
              controlY + t,
              x + l,
              y + t
            );
            break;

          case 's': // shorthand cubic bezierCurveTo, relative
            // transform to absolute x,y
            tempX = x + current[3];
            tempY = y + current[4];
            // calculate reflection of previous control points
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
            context.bezierCurveTo(
              controlX + l,
              controlY + t,
              x + current[1] + l,
              y + current[2] + t,
              tempX + l,
              tempY + t
            );

            // set control point to 2nd one of this command
            // the first control point is assumed to be the reflection of
            // the second control point on the previous command relative
            // to the current point.
            controlX = x + current[1];
            controlY = y + current[2];

            x = tempX;
            y = tempY;
            break;

          case 'S': // shorthand cubic bezierCurveTo, absolute
            tempX = current[3];
            tempY = current[4];
            // calculate reflection of previous control points
            controlX = 2*x - controlX;
            controlY = 2*y - controlY;
            context.bezierCurveTo(
              controlX + l,
              controlY + t,
              current[1] + l,
              current[2] + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            // set control point to 2nd one of this command
            // the first control point is assumed to be the reflection of
            // the second control point on the previous command relative
            // to the current point.
            controlX = current[1];
            controlY = current[2];

            break;

          case 'q': // quadraticCurveTo, relative
            // transform to absolute x,y
            tempX = x + current[3];
            tempY = y + current[4];

            controlX = x + current[1];
            controlY = y + current[2];

            context.quadraticCurveTo(
              controlX + l,
              controlY + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            break;

          case 'Q': // quadraticCurveTo, absolute
            tempX = current[3];
            tempY = current[4];

            context.quadraticCurveTo(
              current[1] + l,
              current[2] + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            controlX = current[1];
            controlY = current[2];
            break;

          case 't': // shorthand quadraticCurveTo, relative

            // transform to absolute x,y
            tempX = x + current[1];
            tempY = y + current[2];

            if (previous[0].match(/[QqTt]/) === null) {
              // If there is no previous command or if the previous command was not a Q, q, T or t,
              // assume the control point is coincident with the current point
              controlX = x;
              controlY = y;
            }
            else if (previous[0] === 't') {
              // calculate reflection of previous control points for t
              controlX = 2 * x - tempControlX;
              controlY = 2 * y - tempControlY;
            }
            else if (previous[0] === 'q') {
              // calculate reflection of previous control points for q
              controlX = 2 * x - controlX;
              controlY = 2 * y - controlY;
            }

            tempControlX = controlX;
            tempControlY = controlY;

            context.quadraticCurveTo(
              controlX + l,
              controlY + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            controlX = x + current[1];
            controlY = y + current[2];
            break;

          case 'T':
            tempX = current[1];
            tempY = current[2];

            // calculate reflection of previous control points
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
            context.quadraticCurveTo(
              controlX + l,
              controlY + t,
              tempX + l,
              tempY + t
            );
            x = tempX;
            y = tempY;
            break;

          case 'a':
            drawArc$1(context, x + l, y + t, [
              current[1],
              current[2],
              current[3],
              current[4],
              current[5],
              current[6] + x + l,
              current[7] + y + t
            ]);
            x += current[6];
            y += current[7];
            break;

          case 'A':
            drawArc$1(context, x + l, y + t, [
              current[1],
              current[2],
              current[3],
              current[4],
              current[5],
              current[6] + l,
              current[7] + t
            ]);
            x = current[6];
            y = current[7];
            break;

          case 'z':
          case 'Z':
            context.closePath();
            break;
        }
        previous = current;
      }
    }

    function drawArc$1(context, x, y, coords) {
      var seg = segments$1(
        coords[5], // end x
        coords[6], // end y
        coords[0], // radius x
        coords[1], // radius y
        coords[3], // large flag
        coords[4], // sweep flag
        coords[2], // rotation
        x, y
      );
      for (var i=0; i<seg.length; ++i) {
        var bez = bezier$1(seg[i]);
        context.bezierCurveTo(bez[0], bez[1], bez[2], bez[3], bez[4], bez[5]);
      }
    }

    var Tan30$1 = 0.5773502691896257;

    var builtins$1 = {
      'circle': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2;
          context.moveTo(r, 0);
          context.arc(0, 0, r, 0, Tau$1);
        }
      },
      'cross': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              s = r / 2.5;
          context.moveTo(-r, -s);
          context.lineTo(-r, s);
          context.lineTo(-s, s);
          context.lineTo(-s, r);
          context.lineTo(s, r);
          context.lineTo(s, s);
          context.lineTo(r, s);
          context.lineTo(r, -s);
          context.lineTo(s, -s);
          context.lineTo(s, -r);
          context.lineTo(-s, -r);
          context.lineTo(-s, -s);
          context.closePath();
        }
      },
      'diamond': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2;
          context.moveTo(-r, 0);
          context.lineTo(0, -r);
          context.lineTo(r, 0);
          context.lineTo(0, r);
          context.closePath();
        }
      },
      'square': {
        draw: function(context, size) {
          var w = Math.sqrt(size),
              x = -w / 2;
          context.rect(x, x, w, w);
        }
      },
      'arrow': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              s = r / 7,
              t = r / 2.5,
              v = r / 8;
          context.moveTo(-s, r);
          context.lineTo(s, r);
          context.lineTo(s, -v);
          context.lineTo(t, -v);
          context.lineTo(0, -r);
          context.lineTo(-t, -v);
          context.lineTo(-s, -v);
          context.closePath();
        }
      },
      'wedge': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3$1 * r,
              o = (h - r * Tan30$1),
              b = r / 4;
          context.moveTo(0, -h - o);
          context.lineTo(-b, h - o);
          context.lineTo(b, h - o);
          context.closePath();
        }
      },
      'triangle': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3$1 * r,
              o = (h - r * Tan30$1);
          context.moveTo(0, -h - o);
          context.lineTo(-r, h - o);
          context.lineTo(r, h - o);
          context.closePath();
        }
      },
      'triangle-up': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3$1 * r;
          context.moveTo(0, -h);
          context.lineTo(-r, h);
          context.lineTo(r, h);
          context.closePath();
        }
      },
      'triangle-down': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3$1 * r;
          context.moveTo(0, h);
          context.lineTo(-r, -h);
          context.lineTo(r, -h);
          context.closePath();
        }
      },
      'triangle-right': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3$1 * r;
          context.moveTo(h, 0);
          context.lineTo(-h, -r);
          context.lineTo(-h, r);
          context.closePath();
        }
      },
      'triangle-left': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2,
              h = HalfSqrt3$1 * r;
          context.moveTo(-h, 0);
          context.lineTo(h, -r);
          context.lineTo(h, r);
          context.closePath();
        }
      },
      'stroke': {
        draw: function(context, size) {
          var r = Math.sqrt(size) / 2;
          context.moveTo(-r, 0);
          context.lineTo(r, 0);
        }
      }
    };

    function symbols$2(_) {
      return builtins$1.hasOwnProperty(_) ? builtins$1[_] : customSymbol$1(_);
    }

    var custom$1 = {};

    function customSymbol$1(path) {
      if (!custom$1.hasOwnProperty(path)) {
        var parsed = pathParse$1(path);
        custom$1[path] = {
          draw: function(context, size) {
            pathRender$1(context, parsed, 0, 0, Math.sqrt(size) / 2);
          }
        };
      }
      return custom$1[path];
    }

    function rectangleX$1(d) {
      return d.x;
    }

    function rectangleY$1(d) {
      return d.y;
    }

    function rectangleWidth$1(d) {
      return d.width;
    }

    function rectangleHeight$1(d) {
      return d.height;
    }

    function constant$9(_) {
      return function() { return _; };
    }

    function vg_rect$1() {
      var x = rectangleX$1,
          y = rectangleY$1,
          width = rectangleWidth$1,
          height = rectangleHeight$1,
          cornerRadius = constant$9(0),
          context = null;

      function rectangle(_, x0, y0) {
        var buffer,
            x1 = x0 != null ? x0 : +x.call(this, _),
            y1 = y0 != null ? y0 : +y.call(this, _),
            w  = +width.call(this, _),
            h  = +height.call(this, _),
            cr = +cornerRadius.call(this, _);

        if (!context) context = buffer = path();

        if (cr <= 0) {
          context.rect(x1, y1, w, h);
        } else {
          var x2 = x1 + w,
              y2 = y1 + h;
          context.moveTo(x1 + cr, y1);
          context.lineTo(x2 - cr, y1);
          context.quadraticCurveTo(x2, y1, x2, y1 + cr);
          context.lineTo(x2, y2 - cr);
          context.quadraticCurveTo(x2, y2, x2 - cr, y2);
          context.lineTo(x1 + cr, y2);
          context.quadraticCurveTo(x1, y2, x1, y2 - cr);
          context.lineTo(x1, y1 + cr);
          context.quadraticCurveTo(x1, y1, x1 + cr, y1);
          context.closePath();
        }

        if (buffer) {
          context = null;
          return buffer + '' || null;
        }
      }

      rectangle.x = function(_) {
        if (arguments.length) {
          x = typeof _ === 'function' ? _ : constant$9(+_);
          return rectangle;
        } else {
          return x;
        }
      };

      rectangle.y = function(_) {
        if (arguments.length) {
          y = typeof _ === 'function' ? _ : constant$9(+_);
          return rectangle;
        } else {
          return y;
        }
      };

      rectangle.width = function(_) {
        if (arguments.length) {
          width = typeof _ === 'function' ? _ : constant$9(+_);
          return rectangle;
        } else {
          return width;
        }
      };

      rectangle.height = function(_) {
        if (arguments.length) {
          height = typeof _ === 'function' ? _ : constant$9(+_);
          return rectangle;
        } else {
          return height;
        }
      };

      rectangle.cornerRadius = function(_) {
        if (arguments.length) {
          cornerRadius = typeof _ === 'function' ? _ : constant$9(+_);
          return rectangle;
        } else {
          return cornerRadius;
        }
      };

      rectangle.context = function(_) {
        if (arguments.length) {
          context = _ == null ? null : _;
          return rectangle;
        } else {
          return context;
        }
      };

      return rectangle;
    }

    function vg_trail$1() {
      var x,
          y,
          size,
          defined,
          context = null,
          ready, x1, y1, r1;

      function point(x2, y2, w2) {
        var r2 = w2 / 2;

        if (ready) {
          var ux = y1 - y2,
              uy = x2 - x1;

          if (ux || uy) {
            // get normal vector
            var ud = Math.sqrt(ux * ux + uy * uy),
                rx = (ux /= ud) * r1,
                ry = (uy /= ud) * r1,
                t = Math.atan2(uy, ux);

            // draw segment
            context.moveTo(x1 - rx, y1 - ry);
            context.lineTo(x2 - ux * r2, y2 - uy * r2);
            context.arc(x2, y2, r2, t - Math.PI, t);
            context.lineTo(x1 + rx, y1 + ry);
            context.arc(x1, y1, r1, t, t + Math.PI);
          } else {
            context.arc(x2, y2, r2, 0, Tau$1);
          }
          context.closePath();
        } else {
          ready = 1;
        }
        x1 = x2;
        y1 = y2;
        r1 = r2;
      }

      function trail(data) {
        var i,
            n = data.length,
            d,
            defined0 = false,
            buffer;

        if (context == null) context = buffer = path();

        for (i = 0; i <= n; ++i) {
          if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) ready = 0;
          }
          if (defined0) point(+x(d, i, data), +y(d, i, data), +size(d, i, data));
        }

        if (buffer) {
          context = null;
          return buffer + '' || null;
        }
      }

      trail.x = function(_) {
        if (arguments.length) {
          x = _;
          return trail;
        } else {
          return x;
        }
      };

      trail.y = function(_) {
        if (arguments.length) {
          y = _;
          return trail;
        } else {
          return y;
        }
      };

      trail.size = function(_) {
        if (arguments.length) {
          size = _;
          return trail;
        } else {
          return size;
        }
      };

      trail.defined = function(_) {
        if (arguments.length) {
          defined = _;
          return trail;
        } else {
          return defined;
        }
      };

      trail.context = function(_) {
        if (arguments.length) {
          if (_ == null) {
            context = null;
          } else {
            context = _;
          }
          return trail;
        } else {
          return context;
        }
      };

      return trail;
    }

    function x$5(item)    { return item.x || 0; }
    function y$5(item)    { return item.y || 0; }
    function w$1(item)    { return item.width || 0; }
    function ts$1(item)   { return item.size || 1; }
    function h$1(item)    { return item.height || 0; }
    function xw$1(item)   { return (item.x || 0) + (item.width || 0); }
    function yh$1(item)   { return (item.y || 0) + (item.height || 0); }
    function sa$1(item)   { return item.startAngle || 0; }
    function ea$1(item)   { return item.endAngle || 0; }
    function pa$1(item)   { return item.padAngle || 0; }
    function ir$1(item)   { return item.innerRadius || 0; }
    function or$1(item)   { return item.outerRadius || 0; }
    function cr$1(item)   { return item.cornerRadius || 0; }
    function def$1(item)  { return !(item.defined === false); }
    function size$1(item) { return item.size == null ? 64 : item.size; }
    function type$1(item) { return symbols$2(item.shape || 'circle'); }

    var arcShape$1    = d3_arc().startAngle(sa$1).endAngle(ea$1).padAngle(pa$1)
                              .innerRadius(ir$1).outerRadius(or$1).cornerRadius(cr$1),
        areavShape$1  = area().x(x$5).y1(y$5).y0(yh$1).defined(def$1),
        areahShape$1  = area().y(y$5).x1(x$5).x0(xw$1).defined(def$1),
        lineShape$1   = line().x(x$5).y(y$5).defined(def$1),
        rectShape$1   = vg_rect$1().x(x$5).y(y$5).width(w$1).height(h$1).cornerRadius(cr$1),
        symbolShape$1 = d3_symbol().type(type$1).size(size$1),
        trailShape$1  = vg_trail$1().x(x$5).y(y$5).defined(def$1).size(ts$1);

    function arc$3(context, item) {
      return arcShape$1.context(context)(item);
    }

    function area$5(context, items) {
      var item = items[0],
          interp = item.interpolate || 'linear';
      return (item.orient === 'horizontal' ? areahShape$1 : areavShape$1)
        .curve(curves$1(interp, item.orient, item.tension))
        .context(context)(items);
    }

    function line$4(context, items) {
      var item = items[0],
          interp = item.interpolate || 'linear';
      return lineShape$1.curve(curves$1(interp, item.orient, item.tension))
        .context(context)(items);
    }

    function rectangle$1(context, item, x, y) {
      return rectShape$1.context(context)(item, x, y);
    }

    function shape$2(context, item) {
      return (item.mark.shape || item.shape)
        .context(context)(item);
    }

    function symbol$2(context, item) {
      return symbolShape$1.context(context)(item);
    }

    function trail$2(context, items) {
      return trailShape$1.context(context)(items);
    }

    function boundStroke$1(bounds, item) {
      if (item.stroke && item.opacity !== 0 && item.strokeOpacity !== 0) {
        bounds.expand(item.strokeWidth != null ? +item.strokeWidth : 1);
      }
      return bounds;
    }

    var bounds$2,
        circleThreshold$1 = Tau$1 - 1e-8;

    function context$2(_) {
      bounds$2 = _;
      return context$2;
    }

    function noop$5() {}

    function add$5(x, y) { bounds$2.add(x, y); }

    context$2.beginPath = noop$5;

    context$2.closePath = noop$5;

    context$2.moveTo = add$5;

    context$2.lineTo = add$5;

    context$2.rect = function(x, y, w, h) {
      add$5(x, y);
      add$5(x + w, y + h);
    };

    context$2.quadraticCurveTo = function(x1, y1, x2, y2) {
      add$5(x1, y1);
      add$5(x2, y2);
    };

    context$2.bezierCurveTo = function(x1, y1, x2, y2, x3, y3) {
      add$5(x1, y1);
      add$5(x2, y2);
      add$5(x3, y3);
    };

    context$2.arc = function(cx, cy, r, sa, ea, ccw) {
      if (Math.abs(ea - sa) > circleThreshold$1) {
        add$5(cx - r, cy - r);
        add$5(cx + r, cy + r);
        return;
      }

      var xmin = Infinity, xmax = -Infinity,
          ymin = Infinity, ymax = -Infinity,
          s, i, x, y;

      function update(a) {
        x = r * Math.cos(a);
        y = r * Math.sin(a);
        if (x < xmin) xmin = x;
        if (x > xmax) xmax = x;
        if (y < ymin) ymin = y;
        if (y > ymax) ymax = y;
      }

      // Sample end points and interior points aligned with 90 degrees
      update(sa);
      update(ea);

      if (ea !== sa) {
        sa = sa % Tau$1; if (sa < 0) sa += Tau$1;
        ea = ea % Tau$1; if (ea < 0) ea += Tau$1;

        if (ea < sa) {
          ccw = !ccw; // flip direction
          s = sa; sa = ea; ea = s; // swap end-points
        }

        if (ccw) {
          ea -= Tau$1;
          s = sa - (sa % HalfPi$1);
          for (i=0; i<4 && s>ea; ++i, s-=HalfPi$1) update(s);
        } else {
          s = sa - (sa % HalfPi$1) + HalfPi$1;
          for (i=0; i<4 && s<ea; ++i, s=s+HalfPi$1) update(s);
        }
      }

      add$5(cx + xmin, cy + ymin);
      add$5(cx + xmax, cy + ymax);
    };

    var context$3 = (context$3 = domCanvas(1,1))
      ? context$3.getContext('2d')
      : null;

    const b$1 = new Bounds$1();

    function intersectPath$1(draw) {
      return function(item, brush) {
        // rely on (inaccurate) bounds intersection if no context
        if (!context$3) return true;

        // add path to offscreen graphics context
        draw(context$3, item);

        // get bounds intersection region
        b$1.clear().union(item.bounds).intersect(brush).round();
        const {x1, y1, x2, y2} = b$1;

        // iterate over intersection region
        // perform fine grained inclusion test
        for (let y = y1; y <= y2; ++y) {
          for (let x = x1; x <= x2; ++x) {
            if (context$3.isPointInPath(x, y)) {
              return true;
            }
          }
        }

        // false if no hits in intersection region
        return false;
      }
    }

    function intersectPoint$1(item, box) {
      return box.contains(item.x || 0, item.y || 0);
    }

    function intersectRect$1(item, box) {
      const x = item.x || 0,
            y = item.y || 0,
            w = item.width || 0,
            h = item.height || 0;
      return box.intersects(b$1.set(x, y, x + w, y + h));
    }

    function intersectRule$1(item, box) {
      const x = item.x || 0,
            y = item.y || 0,
            x2 = item.x2 != null ? item.x2 : x,
            y2 = item.y2 != null ? item.y2 : y;
      return intersectBoxLine$1(box, x, y, x2, y2);
    }

    function intersectBoxLine$1(box, x, y, u, v) {
      const {x1, y1, x2, y2} = box,
            dx = u - x,
            dy = v - y;

      let t0 = 0, t1 = 1, p, q, r, e;

      for (e=0; e<4; ++e) {
        if (e === 0) { p = -dx; q = -(x1 - x); }
        if (e === 1) { p =  dx; q =  (x2 - x); }
        if (e === 2) { p = -dy; q = -(y1 - y); }
        if (e === 3) { p =  dy; q =  (y2 - y); }

        if (Math.abs(p) < 1e-10 && q < 0) return false;

        r = q / p;

        if (p < 0) {
          if (r > t1) return false;
          else if (r > t0) t0 = r;
        } else if (p > 0) {
          if (r < t0) return false;
          else if (r < t1) t1 = r;
        }
      }

      return true;
    }

    function gradient$1(context, gradient, bounds) {
      var w = bounds.width(),
          h = bounds.height(),
          x1 = bounds.x1 + gradient.x1 * w,
          y1 = bounds.y1 + gradient.y1 * h,
          x2 = bounds.x1 + gradient.x2 * w,
          y2 = bounds.y1 + gradient.y2 * h,
          stop = gradient.stops,
          i = 0,
          n = stop.length,
          linearGradient = context.createLinearGradient(x1, y1, x2, y2);

      for (; i<n; ++i) {
        linearGradient.addColorStop(stop[i].offset, stop[i].color);
      }

      return linearGradient;
    }

    function color$2(context, item, value) {
      return (value.id) ?
        gradient$1(context, value, item.bounds) :
        value;
    }

    function fill$1(context, item, opacity) {
      opacity *= (item.fillOpacity==null ? 1 : item.fillOpacity);
      if (opacity > 0) {
        context.globalAlpha = opacity;
        context.fillStyle = color$2(context, item, item.fill);
        return true;
      } else {
        return false;
      }
    }

    var Empty$2 = [];

    function stroke$1(context, item, opacity) {
      var lw = (lw = item.strokeWidth) != null ? lw : 1;

      if (lw <= 0) return false;

      opacity *= (item.strokeOpacity==null ? 1 : item.strokeOpacity);
      if (opacity > 0) {
        context.globalAlpha = opacity;
        context.strokeStyle = color$2(context, item, item.stroke);

        context.lineWidth = lw;
        context.lineCap = item.strokeCap || 'butt';
        context.lineJoin = item.strokeJoin || 'miter';
        context.miterLimit = item.strokeMiterLimit || 10;

        if (context.setLineDash) {
          context.setLineDash(item.strokeDash || Empty$2);
          context.lineDashOffset = item.strokeDashOffset || 0;
        }
        return true;
      } else {
        return false;
      }
    }

    function compare$2(a, b) {
      return a.zindex - b.zindex || a.index - b.index;
    }

    function zorder$1(scene) {
      if (!scene.zdirty) return scene.zitems;

      var items = scene.items,
          output = [], item, i, n;

      for (i=0, n=items.length; i<n; ++i) {
        item = items[i];
        item.index = i;
        if (item.zindex) output.push(item);
      }

      scene.zdirty = false;
      return scene.zitems = output.sort(compare$2);
    }

    function visit$1(scene, visitor) {
      var items = scene.items, i, n;
      if (!items || !items.length) return;

      var zitems = zorder$1(scene);

      if (zitems && zitems.length) {
        for (i=0, n=items.length; i<n; ++i) {
          if (!items[i].zindex) visitor(items[i]);
        }
        items = zitems;
      }

      for (i=0, n=items.length; i<n; ++i) {
        visitor(items[i]);
      }
    }

    function pickVisit$1(scene, visitor) {
      var items = scene.items, hit, i;
      if (!items || !items.length) return null;

      var zitems = zorder$1(scene);
      if (zitems && zitems.length) items = zitems;

      for (i=items.length; --i >= 0;) {
        if (hit = visitor(items[i])) return hit;
      }

      if (items === zitems) {
        for (items=scene.items, i=items.length; --i >= 0;) {
          if (!items[i].zindex) {
            if (hit = visitor(items[i])) return hit;
          }
        }
      }

      return null;
    }

    function drawAll$1(path) {
      return function(context, scene, bounds) {
        visit$1(scene, function(item) {
          if (!bounds || bounds.intersects(item.bounds)) {
            drawPath$1(path, context, item, item);
          }
        });
      };
    }

    function drawOne$1(path) {
      return function(context, scene, bounds) {
        if (scene.items.length && (!bounds || bounds.intersects(scene.bounds))) {
          drawPath$1(path, context, scene.items[0], scene.items);
        }
      };
    }

    function drawPath$1(path, context, item, items) {
      var opacity = item.opacity == null ? 1 : item.opacity;
      if (opacity === 0) return;

      if (path(context, items)) return;

      if (item.fill && fill$1(context, item, opacity)) {
        context.fill();
      }

      if (item.stroke && stroke$1(context, item, opacity)) {
        context.stroke();
      }
    }

    function pick$3(test) {
      test = test || truthy;

      return function(context, scene, x, y, gx, gy) {
        x *= context.pixelRatio;
        y *= context.pixelRatio;

        return pickVisit$1(scene, function(item) {
          var b = item.bounds;
          // first hit test against bounding box
          if ((b && !b.contains(gx, gy)) || !b) return;
          // if in bounding box, perform more careful test
          if (test(context, item, x, y, gx, gy)) return item;
        });
      };
    }

    function hitPath$1(path, filled) {
      return function(context, o, x, y) {
        var item = Array.isArray(o) ? o[0] : o,
            fill = (filled == null) ? item.fill : filled,
            stroke = item.stroke && context.isPointInStroke, lw, lc;

        if (stroke) {
          lw = item.strokeWidth;
          lc = item.strokeCap;
          context.lineWidth = lw != null ? lw : 1;
          context.lineCap   = lc != null ? lc : 'butt';
        }

        return path(context, o) ? false :
          (fill && context.isPointInPath(x, y)) ||
          (stroke && context.isPointInStroke(x, y));
      };
    }

    function pickPath$1(path) {
      return pick$3(hitPath$1(path));
    }

    function translate$3(x, y) {
      return 'translate(' + x + ',' + y + ')';
    }

    function rotate$1(a) {
      return 'rotate(' + a + ')';
    }

    function translateItem$1(item) {
      return translate$3(item.x || 0, item.y || 0);
    }

    function transformItem$1(item) {
      return translate$3(item.x || 0, item.y || 0)
        + (item.angle ? ' ' + rotate$1(item.angle) : '');
    }

    function markItemPath$1(type, shape, isect) {

      function attr(emit, item) {
        emit('transform', transformItem$1(item));
        emit('d', shape(null, item));
      }

      function bound(bounds, item) {
        var x = item.x || 0,
            y = item.y || 0;

        shape(context$2(bounds), item);
        boundStroke$1(bounds, item).translate(x, y);
        if (item.angle) {
          bounds.rotate(item.angle * DegToRad$1, x, y);
        }

        return bounds;
      }

      function draw(context, item) {
        var x = item.x || 0,
            y = item.y || 0,
            a = item.angle || 0;

        context.translate(x, y);
        if (a) context.rotate(a *= DegToRad$1);
        context.beginPath();
        shape(context, item);
        if (a) context.rotate(-a);
        context.translate(-x, -y);
      }

      return {
        type:   type,
        tag:    'path',
        nested: false,
        attr:   attr,
        bound:  bound,
        draw:   drawAll$1(draw),
        pick:   pickPath$1(draw),
        isect:  isect || intersectPath$1(draw)
      };

    }

    var arc$4 = markItemPath$1('arc', arc$3);

    function pickArea$1(a, p) {
      var v = a[0].orient === 'horizontal' ? p[1] : p[0],
          z = a[0].orient === 'horizontal' ? 'y' : 'x',
          i = a.length,
          min = +Infinity, hit, d;

      while (--i >= 0) {
        if (a[i].defined === false) continue;
        d = Math.abs(a[i][z] - v);
        if (d < min) {
          min = d;
          hit = a[i];
        }
      }

      return hit;
    }

    function pickLine$1(a, p) {
      var t = Math.pow(a[0].strokeWidth || 1, 2),
          i = a.length, dx, dy, dd;

      while (--i >= 0) {
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        if (dd < t) return a[i];
      }

      return null;
    }

    function pickTrail$1(a, p) {
      var i = a.length, dx, dy, dd;

      while (--i >= 0) {
        if (a[i].defined === false) continue;
        dx = a[i].x - p[0];
        dy = a[i].y - p[1];
        dd = dx * dx + dy * dy;
        dx = a[i].size || 1;
        if (dd < dx*dx) return a[i];
      }

      return null;
    }

    function markMultiItemPath$1(type, shape, tip) {

      function attr(emit, item) {
        var items = item.mark.items;
        if (items.length) emit('d', shape(null, items));
      }

      function bound(bounds, mark) {
        var items = mark.items;
        if (items.length === 0) {
          return bounds;
        } else {
          shape(context$2(bounds), items);
          return boundStroke$1(bounds, items[0]);
        }
      }

      function draw(context, items) {
        context.beginPath();
        shape(context, items);
      }

      var hit = hitPath$1(draw);

      function pick(context, scene, x, y, gx, gy) {
        var items = scene.items,
            b = scene.bounds;

        if (!items || !items.length || b && !b.contains(gx, gy)) {
          return null;
        }

        x *= context.pixelRatio;
        y *= context.pixelRatio;
        return hit(context, items, x, y) ? items[0] : null;
      }

      return {
        type:   type,
        tag:    'path',
        nested: true,
        attr:   attr,
        bound:  bound,
        draw:   drawOne$1(draw),
        pick:   pick,
        isect:  intersectPoint$1,
        tip:    tip
      };

    }

    var area$6 = markMultiItemPath$1('area', area$5, pickArea$1);

    var clip_id$1 = 1;

    function clip$3(renderer, item, size) {
      var clip = item.clip,
          defs = renderer._defs,
          id = item.clip_id || (item.clip_id = 'clip' + clip_id$1++),
          c = defs.clipping[id] || (defs.clipping[id] = {id: id});

      if (isFunction(clip)) {
        c.path = clip(null);
      } else {
        c.width = size.width || 0;
        c.height = size.height || 0;
      }

      return 'url(#' + id + ')';
    }

    var StrokeOffset$1 = 0.5;

    function attr$6(emit, item) {
      emit('transform', translateItem$1(item));
    }

    function background$1(emit, item) {
      var offset = item.stroke ? StrokeOffset$1 : 0;
      emit('class', 'background');
      emit('d', rectangle$1(null, item, offset, offset));
    }

    function foreground$1(emit, item, renderer) {
      var url = item.clip ? clip$3(renderer, item, item) : null;
      emit('clip-path', url);
    }

    function bound$6(bounds, group) {
      if (!group.clip && group.items) {
        var items = group.items;
        for (var j=0, m=items.length; j<m; ++j) {
          bounds.union(items[j].bounds);
        }
      }

      if ((group.clip || group.width || group.height) && !group.noBound) {
        bounds.add(0, 0).add(group.width || 0, group.height || 0);
      }

      boundStroke$1(bounds, group);

      return bounds.translate(group.x || 0, group.y || 0);
    }

    function backgroundPath$1(context, group) {
      var offset = group.stroke ? StrokeOffset$1 : 0;
      context.beginPath();
      rectangle$1(context, group, offset, offset);
    }

    var hitBackground$1 = hitPath$1(backgroundPath$1);

    function draw$5(context, scene, bounds) {
      var renderer = this;

      visit$1(scene, function(group) {
        var gx = group.x || 0,
            gy = group.y || 0,
            w = group.width || 0,
            h = group.height || 0,
            opacity;

        // setup graphics context
        context.save();
        context.translate(gx, gy);

        // draw group background
        if (group.stroke || group.fill) {
          opacity = group.opacity == null ? 1 : group.opacity;
          if (opacity > 0) {
            backgroundPath$1(context, group);
            if (group.fill && fill$1(context, group, opacity)) {
              context.fill();
            }
            if (group.stroke && stroke$1(context, group, opacity)) {
              context.stroke();
            }
          }
        }

        // set clip and bounds
        if (group.clip) {
          context.beginPath();
          context.rect(0, 0, w, h);
          context.clip();
        }
        if (bounds) bounds.translate(-gx, -gy);

        // draw group contents
        visit$1(group, function(item) {
          renderer.draw(context, item, bounds);
        });

        // restore graphics context
        if (bounds) bounds.translate(gx, gy);
        context.restore();
      });
    }

    function pick$4(context, scene, x, y, gx, gy) {
      if (scene.bounds && !scene.bounds.contains(gx, gy) || !scene.items) {
        return null;
      }

      var handler = this,
          cx = x * context.pixelRatio,
          cy = y * context.pixelRatio;

      return pickVisit$1(scene, function(group) {
        var hit, dx, dy, b;

        // first hit test against bounding box
        // if a group is clipped, that should be handled by the bounds check.
        b = group.bounds;
        if (b && !b.contains(gx, gy)) return;

        // passed bounds check, so test sub-groups
        dx = (group.x || 0);
        dy = (group.y || 0);

        context.save();
        context.translate(dx, dy);

        dx = gx - dx;
        dy = gy - dy;

        // hit test against contained marks
        hit = pickVisit$1(group, function(mark) {
          return pickMark$1(mark, dx, dy)
            ? handler.pick(mark, x, y, dx, dy)
            : null;
        });

        // hit test against group background
        if (!hit && scene.interactive !== false
            && (group.fill || group.stroke)
            && hitBackground$1(context, group, cx, cy)) {
          hit = group;
        }

        context.restore();
        return hit || null;
      });
    }

    function pickMark$1(mark, x, y) {
      return (mark.interactive !== false || mark.marktype === 'group')
        && mark.bounds && mark.bounds.contains(x, y);
    }

    var group$1 = {
      type:       'group',
      tag:        'g',
      nested:     false,
      attr:       attr$6,
      bound:      bound$6,
      draw:       draw$5,
      pick:       pick$4,
      isect:      intersectRect$1,
      background: background$1,
      foreground: foreground$1
    };

    function getImage$1(item, renderer) {
      var image = item.image;
      if (!image || image.url !== item.url) {
        image = {loaded: false, width: 0, height: 0};
        renderer.loadImage(item.url).then(function(image) {
          item.image = image;
          item.image.url = item.url;
        });
      }
      return image;
    }

    function imageXOffset$1(align, w) {
      return align === 'center' ? w / 2 : align === 'right' ? w : 0;
    }

    function imageYOffset$1(baseline, h) {
      return baseline === 'middle' ? h / 2 : baseline === 'bottom' ? h : 0;
    }

    function attr$7(emit, item, renderer) {
      var image = getImage$1(item, renderer),
          x = item.x || 0,
          y = item.y || 0,
          w = (item.width != null ? item.width : image.width) || 0,
          h = (item.height != null ? item.height : image.height) || 0,
          a = item.aspect === false ? 'none' : 'xMidYMid';

      x -= imageXOffset$1(item.align, w);
      y -= imageYOffset$1(item.baseline, h);

      emit('href', image.src || '', 'http://www.w3.org/1999/xlink', 'xlink:href');
      emit('transform', translate$3(x, y));
      emit('width', w);
      emit('height', h);
      emit('preserveAspectRatio', a);
    }

    function bound$7(bounds, item) {
      var image = item.image,
          x = item.x || 0,
          y = item.y || 0,
          w = (item.width != null ? item.width : (image && image.width)) || 0,
          h = (item.height != null ? item.height : (image && image.height)) || 0;

      x -= imageXOffset$1(item.align, w);
      y -= imageYOffset$1(item.baseline, h);

      return bounds.set(x, y, x + w, y + h);
    }

    function draw$6(context, scene, bounds) {
      var renderer = this;

      visit$1(scene, function(item) {
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check

        var image = getImage$1(item, renderer),
            x = item.x || 0,
            y = item.y || 0,
            w = (item.width != null ? item.width : image.width) || 0,
            h = (item.height != null ? item.height : image.height) || 0,
            opacity, ar0, ar1, t;

        x -= imageXOffset$1(item.align, w);
        y -= imageYOffset$1(item.baseline, h);

        if (item.aspect !== false) {
          ar0 = image.width / image.height;
          ar1 = item.width / item.height;
          if (ar0 === ar0 && ar1 === ar1 && ar0 !== ar1) {
            if (ar1 < ar0) {
              t = w / ar0;
              y += (h - t) / 2;
              h = t;
            } else {
              t = h * ar0;
              x += (w - t) / 2;
              w = t;
            }
          }
        }

        if (image.loaded) {
          context.globalAlpha = (opacity = item.opacity) != null ? opacity : 1;
          context.drawImage(image, x, y, w, h);
        }
      });
    }

    var image$1 = {
      type:     'image',
      tag:      'image',
      nested:   false,
      attr:     attr$7,
      bound:    bound$7,
      draw:     draw$6,
      pick:     pick$3(),
      isect:    truthy, // bounds check is sufficient
      get:      getImage$1,
      xOffset:  imageXOffset$1,
      yOffset:  imageYOffset$1
    };

    var line$5 = markMultiItemPath$1('line', line$4, pickLine$1);

    function attr$8(emit, item) {
      emit('transform', translateItem$1(item));
      emit('d', item.path);
    }

    function path$4(context, item) {
      var path = item.path;
      if (path == null) return true;

      var cache = item.pathCache;
      if (!cache || cache.path !== path) {
        (item.pathCache = cache = pathParse$1(path)).path = path;
      }
      pathRender$1(context, cache, item.x, item.y);
    }

    function bound$8(bounds, item) {
      return path$4(context$2(bounds), item)
        ? bounds.set(0, 0, 0, 0)
        : boundStroke$1(bounds, item);
    }

    var path$5 = {
      type:   'path',
      tag:    'path',
      nested: false,
      attr:   attr$8,
      bound:  bound$8,
      draw:   drawAll$1(path$4),
      pick:   pickPath$1(path$4),
      isect:  intersectPath$1(path$4)
    };

    function attr$9(emit, item) {
      emit('d', rectangle$1(null, item));
    }

    function bound$9(bounds, item) {
      var x, y;
      return boundStroke$1(bounds.set(
        x = item.x || 0,
        y = item.y || 0,
        (x + item.width) || 0,
        (y + item.height) || 0
      ), item);
    }

    function draw$7(context, item) {
      context.beginPath();
      rectangle$1(context, item);
    }

    var rect$1 = {
      type:   'rect',
      tag:    'path',
      nested: false,
      attr:   attr$9,
      bound:  bound$9,
      draw:   drawAll$1(draw$7),
      pick:   pickPath$1(draw$7),
      isect:  intersectRect$1
    };

    function attr$a(emit, item) {
      emit('transform', translateItem$1(item));
      emit('x2', item.x2 != null ? item.x2 - (item.x || 0) : 0);
      emit('y2', item.y2 != null ? item.y2 - (item.y || 0) : 0);
    }

    function bound$a(bounds, item) {
      var x1, y1;
      return boundStroke$1(bounds.set(
        x1 = item.x || 0,
        y1 = item.y || 0,
        item.x2 != null ? item.x2 : x1,
        item.y2 != null ? item.y2 : y1
      ), item);
    }

    function path$6(context, item, opacity) {
      var x1, y1, x2, y2;

      if (item.stroke && stroke$1(context, item, opacity)) {
        x1 = item.x || 0;
        y1 = item.y || 0;
        x2 = item.x2 != null ? item.x2 : x1;
        y2 = item.y2 != null ? item.y2 : y1;
        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        return true;
      }
      return false;
    }

    function draw$8(context, scene, bounds) {
      visit$1(scene, function(item) {
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        var opacity = item.opacity == null ? 1 : item.opacity;
        if (opacity && path$6(context, item, opacity)) {
          context.stroke();
        }
      });
    }

    function hit$2(context, item, x, y) {
      if (!context.isPointInStroke) return false;
      return path$6(context, item, 1) && context.isPointInStroke(x, y);
    }

    var rule$1 = {
      type:   'rule',
      tag:    'line',
      nested: false,
      attr:   attr$a,
      bound:  bound$a,
      draw:   draw$8,
      pick:   pick$3(hit$2),
      isect:  intersectRule$1
    };

    var shape$3 = markItemPath$1('shape', shape$2);

    var symbol$3 = markItemPath$1('symbol', symbol$2, intersectPoint$1);

    var currFontHeight$1;

    var textMetrics$1 = {
      height: fontSize$1,
      measureWidth: measureWidth$1,
      estimateWidth: estimateWidth$1,
      width: estimateWidth$1,
      canvas: useCanvas$1
    };

    useCanvas$1(true);

    // make dumb, simple estimate if no canvas is available
    function estimateWidth$1(item) {
      currFontHeight$1 = fontSize$1(item);
      return estimate$1(textValue$1(item));
    }

    function estimate$1(text) {
      return ~~(0.8 * text.length * currFontHeight$1);
    }

    // measure text width if canvas is available
    function measureWidth$1(item) {
      return fontSize$1(item) <= 0 ? 0
        : (context$3.font = font$1(item), measure$2(textValue$1(item)));
    }

    function measure$2(text) {
      return context$3.measureText(text).width;
    }

    function fontSize$1(item) {
      return item.fontSize != null ? item.fontSize : 11;
    }

    function useCanvas$1(use) {
      textMetrics$1.width = (use && context$3) ? measureWidth$1 : estimateWidth$1;
    }

    function textValue$1(item) {
      var s = item.text;
      if (s == null) {
        return '';
      } else {
        return item.limit > 0 ? truncate$2(item) : s + '';
      }
    }

    function truncate$2(item) {
      var limit = +item.limit,
          text = item.text + '',
          width;

      if (textMetrics$1.width === measureWidth$1) {
        // we are using canvas
        context$3.font = font$1(item);
        width = measure$2;
      } else {
        // we are relying on estimates
        currFontHeight$1 = fontSize$1(item);
        width = estimate$1;
      }

      if (width(text) < limit) return text;

      var ellipsis = item.ellipsis || '\u2026',
          rtl = item.dir === 'rtl',
          lo = 0,
          hi = text.length, mid;

      limit -= width(ellipsis);

      if (rtl) {
        while (lo < hi) {
          mid = (lo + hi >>> 1);
          if (width(text.slice(mid)) > limit) lo = mid + 1;
          else hi = mid;
        }
        return ellipsis + text.slice(lo);
      } else {
        while (lo < hi) {
          mid = 1 + (lo + hi >>> 1);
          if (width(text.slice(0, mid)) < limit) lo = mid;
          else hi = mid - 1;
        }
        return text.slice(0, lo) + ellipsis;
      }
    }

    function fontFamily$1(item, quote) {
      var font = item.font;
      return (quote && font
        ? String(font).replace(/"/g, '\'')
        : font) || 'sans-serif';
    }

    function font$1(item, quote) {
      return '' +
        (item.fontStyle ? item.fontStyle + ' ' : '') +
        (item.fontVariant ? item.fontVariant + ' ' : '') +
        (item.fontWeight ? item.fontWeight + ' ' : '') +
        fontSize$1(item) + 'px ' +
        fontFamily$1(item, quote);
    }

    function offset$2(item) {
      // perform our own font baseline calculation
      // why? not all browsers support SVG 1.1 'alignment-baseline' :(
      var baseline = item.baseline,
          h = fontSize$1(item);
      return Math.round(
        baseline === 'top'    ?  0.79*h :
        baseline === 'middle' ?  0.30*h :
        baseline === 'bottom' ? -0.21*h : 0
      );
    }

    var textAlign$1 = {
      'left':   'start',
      'center': 'middle',
      'right':  'end'
    };

    var tempBounds$3 = new Bounds$1();

    function anchorPoint$1(item) {
      var x = item.x || 0,
          y = item.y || 0,
          r = item.radius || 0, t;

      if (r) {
        t = (item.theta || 0) - HalfPi$1;
        x += r * Math.cos(t);
        y += r * Math.sin(t);
      }

      tempBounds$3.x1 = x;
      tempBounds$3.y1 = y;
      return tempBounds$3;
    }

    function attr$b(emit, item) {
      var dx = item.dx || 0,
          dy = (item.dy || 0) + offset$2(item),
          p = anchorPoint$1(item),
          x = p.x1,
          y = p.y1,
          a = item.angle || 0, t;

      emit('text-anchor', textAlign$1[item.align] || 'start');

      if (a) {
        t = translate$3(x, y) + ' ' + rotate$1(a);
        if (dx || dy) t += ' ' + translate$3(dx, dy);
      } else {
        t = translate$3(x + dx, y + dy);
      }
      emit('transform', t);
    }

    function bound$b(bounds, item, mode) {
      var h = textMetrics$1.height(item),
          a = item.align,
          p = anchorPoint$1(item),
          x = p.x1,
          y = p.y1,
          dx = item.dx || 0,
          dy = (item.dy || 0) + offset$2(item) - Math.round(0.8*h), // use 4/5 offset
          w;

      // horizontal alignment
      w = textMetrics$1.width(item);
      if (a === 'center') {
        dx -= (w / 2);
      } else if (a === 'right') {
        dx -= w;
      }

      bounds.set(dx+=x, dy+=y, dx+w, dy+h);
      if (item.angle && !mode) {
        bounds.rotate(item.angle * DegToRad$1, x, y);
      } else if (mode === 2) {
        return bounds.rotatedPoints(item.angle * DegToRad$1, x, y);
      }
      return bounds;
    }

    function draw$9(context, scene, bounds) {
      visit$1(scene, function(item) {
        var opacity, p, x, y, str;
        if (bounds && !bounds.intersects(item.bounds)) return; // bounds check
        if (!(str = textValue$1(item))) return; // get text string

        opacity = item.opacity == null ? 1 : item.opacity;
        if (opacity === 0 || item.fontSize <= 0) return;

        context.font = font$1(item);
        context.textAlign = item.align || 'left';

        p = anchorPoint$1(item);
        x = p.x1,
        y = p.y1;

        if (item.angle) {
          context.save();
          context.translate(x, y);
          context.rotate(item.angle * DegToRad$1);
          x = y = 0; // reset x, y
        }
        x += (item.dx || 0);
        y += (item.dy || 0) + offset$2(item);

        if (item.fill && fill$1(context, item, opacity)) {
          context.fillText(str, x, y);
        }
        if (item.stroke && stroke$1(context, item, opacity)) {
          context.strokeText(str, x, y);
        }
        if (item.angle) context.restore();
      });
    }

    function hit$3(context, item, x, y, gx, gy) {
      if (item.fontSize <= 0) return false;
      if (!item.angle) return true; // bounds sufficient if no rotation

      // project point into space of unrotated bounds
      var p = anchorPoint$1(item),
          ax = p.x1,
          ay = p.y1,
          b = bound$b(tempBounds$3, item, 1),
          a = -item.angle * DegToRad$1,
          cos = Math.cos(a),
          sin = Math.sin(a),
          px = cos * gx - sin * gy + (ax - cos * ax + sin * ay),
          py = sin * gx + cos * gy + (ay - sin * ax - cos * ay);

      return b.contains(px, py);
    }

    function intersectText$1(item, box) {
      var p = bound$b(tempBounds$3, item, 2);
      return intersectBoxLine$1(box, p[0], p[1], p[2], p[3])
          || intersectBoxLine$1(box, p[0], p[1], p[4], p[5])
          || intersectBoxLine$1(box, p[4], p[5], p[6], p[7])
          || intersectBoxLine$1(box, p[2], p[3], p[6], p[7]);
    }

    var text$1 = {
      type:   'text',
      tag:    'text',
      nested: false,
      attr:   attr$b,
      bound:  bound$b,
      draw:   draw$9,
      pick:   pick$3(hit$3),
      isect:  intersectText$1
    };

    var trail$3 = markMultiItemPath$1('trail', trail$2, pickTrail$1);

    var marks$1 = {
      arc:     arc$4,
      area:    area$6,
      group:   group$1,
      image:   image$1,
      line:    line$5,
      path:    path$5,
      rect:    rect$1,
      rule:    rule$1,
      shape:   shape$3,
      symbol:  symbol$3,
      text:    text$1,
      trail:   trail$3
    };

    // create a new DOM element
    function domCreate$1(doc, tag, ns) {
      if (!doc && typeof document !== 'undefined' && document.createElement) {
        doc = document;
      }
      return doc
        ? (ns ? doc.createElementNS(ns, tag) : doc.createElement(tag))
        : null;
    }

    // find first child element with matching tag
    function domFind$1(el, tag) {
      tag = tag.toLowerCase();
      var nodes = el.childNodes, i = 0, n = nodes.length;
      for (; i<n; ++i) if (nodes[i].tagName.toLowerCase() === tag) {
        return nodes[i];
      }
    }

    // retrieve child element at given index
    // create & insert if doesn't exist or if tags do not match
    function domChild$1(el, index, tag, ns) {
      var a = el.childNodes[index], b;
      if (!a || a.tagName.toLowerCase() !== tag.toLowerCase()) {
        b = a || null;
        a = domCreate$1(el.ownerDocument, tag, ns);
        el.insertBefore(a, b);
      }
      return a;
    }

    // remove all child elements at or above the given index
    function domClear$1(el, index) {
      var nodes = el.childNodes,
          curr = nodes.length;
      while (curr > index) el.removeChild(nodes[--curr]);
      return el;
    }

    // generate css class name for mark
    function cssClass$1(mark) {
      return 'mark-' + mark.marktype
        + (mark.role ? ' role-' + mark.role : '')
        + (mark.name ? ' ' + mark.name : '');
    }

    function point$6(event, el) {
      var rect = el.getBoundingClientRect();
      return [
        event.clientX - rect.left - (el.clientLeft || 0),
        event.clientY - rect.top - (el.clientTop || 0)
      ];
    }

    function resolveItem$1(item, event, el, origin) {
      var mark = item && item.mark,
          mdef, p;

      if (mark && (mdef = marks$1[mark.marktype]).tip) {
        p = point$6(event, el);
        p[0] -= origin[0];
        p[1] -= origin[1];
        while (item = item.mark.group) {
          p[0] -= item.x || 0;
          p[1] -= item.y || 0;
        }
        item = mdef.tip(mark.items, p);
      }

      return item;
    }

    /**
     * Create a new Handler instance.
     * @param {object} [customLoader] - Optional loader instance for
     *   href URL sanitization. If not specified, a standard loader
     *   instance will be generated.
     * @param {function} [customTooltip] - Optional tooltip handler
     *   function for custom tooltip display.
     * @constructor
     */
    function Handler$1(customLoader, customTooltip) {
      this._active = null;
      this._handlers = {};
      this._loader = customLoader || loader$2();
      this._tooltip = customTooltip || defaultTooltip$1;
    }

    // The default tooltip display handler.
    // Sets the HTML title attribute on the visualization container.
    function defaultTooltip$1(handler, event, item, value) {
      handler.element().setAttribute('title', value || '');
    }

    var prototype$1m = Handler$1.prototype;

    /**
     * Initialize a new Handler instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {object} [obj] - Optional context object that should serve as
     *   the "this" context for event callbacks.
     * @return {Handler} - This handler instance.
     */
    prototype$1m.initialize = function(el, origin, obj) {
      this._el = el;
      this._obj = obj || null;
      return this.origin(origin);
    };

    /**
     * Returns the parent container element for a visualization.
     * @return {DOMElement} - The containing DOM element.
     */
    prototype$1m.element = function() {
      return this._el;
    };

    /**
     * Returns the scene element (e.g., canvas or SVG) of the visualization
     * Subclasses must override if the first child is not the scene element.
     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
     */
    prototype$1m.canvas = function() {
      return this._el && this._el.firstChild;
    };

    /**
     * Get / set the origin coordinates of the visualization.
     */
    prototype$1m.origin = function(origin) {
      if (arguments.length) {
        this._origin = origin || [0, 0];
        return this;
      } else {
        return this._origin.slice();
      }
    };

    /**
     * Get / set the scenegraph root.
     */
    prototype$1m.scene = function(scene) {
      if (!arguments.length) return this._scene;
      this._scene = scene;
      return this;
    };

    /**
     * Add an event handler. Subclasses should override this method.
     */
    prototype$1m.on = function(/*type, handler*/) {};

    /**
     * Remove an event handler. Subclasses should override this method.
     */
    prototype$1m.off = function(/*type, handler*/) {};

    /**
     * Utility method for finding the array index of an event handler.
     * @param {Array} h - An array of registered event handlers.
     * @param {string} type - The event type.
     * @param {function} handler - The event handler instance to find.
     * @return {number} - The handler's array index or -1 if not registered.
     */
    prototype$1m._handlerIndex = function(h, type, handler) {
      for (var i = h ? h.length : 0; --i>=0;) {
        if (h[i].type === type && (!handler || h[i].handler === handler)) {
          return i;
        }
      }
      return -1;
    };

    /**
     * Returns an array with registered event handlers.
     * @param {string} [type] - The event type to query. Any annotations
     *   are ignored; for example, for the argument "click.foo", ".foo" will
     *   be ignored and the method returns all "click" handlers. If type is
     *   null or unspecified, this method returns handlers for all types.
     * @return {Array} - A new array containing all registered event handlers.
     */
    prototype$1m.handlers = function(type) {
      var h = this._handlers, a = [], k;
      if (type) {
        a.push.apply(a, h[this.eventName(type)]);
      } else {
        for (k in h) { a.push.apply(a, h[k]); }
      }
      return a;
    };

    /**
     * Parses an event name string to return the specific event type.
     * For example, given "click.foo" returns "click"
     * @param {string} name - The input event type string.
     * @return {string} - A string with the event type only.
     */
    prototype$1m.eventName = function(name) {
      var i = name.indexOf('.');
      return i < 0 ? name : name.slice(0,i);
    };

    /**
     * Handle hyperlink navigation in response to an item.href value.
     * @param {Event} event - The event triggering hyperlink navigation.
     * @param {Item} item - The scenegraph item.
     * @param {string} href - The URL to navigate to.
     */
    prototype$1m.handleHref = function(event, item, href) {
      this._loader
        .sanitize(href, {context:'href'})
        .then(function(opt) {
          var e = new MouseEvent(event.type, event),
              a = domCreate$1(null, 'a');
          for (var name in opt) a.setAttribute(name, opt[name]);
          a.dispatchEvent(e);
        })
        .catch(function() { /* do nothing */ });
    };

    /**
     * Handle tooltip display in response to an item.tooltip value.
     * @param {Event} event - The event triggering tooltip display.
     * @param {Item} item - The scenegraph item.
     * @param {boolean} show - A boolean flag indicating whether
     *   to show or hide a tooltip for the given item.
     */
    prototype$1m.handleTooltip = function(event, item, show) {
      if (item && item.tooltip != null) {
        item = resolveItem$1(item, event, this.canvas(), this._origin);
        var value = (show && item && item.tooltip) || null;
        this._tooltip.call(this._obj, this, event, item, value);
      }
    };

    /**
     * Returns the size of a scenegraph item and its position relative
     * to the viewport.
     * @param {Item} item - The scenegraph item.
     * @return {object} - A bounding box object (compatible with the
     *   DOMRect type) consisting of x, y, width, heigh, top, left,
     *   right, and bottom properties.
     */
    prototype$1m.getItemBoundingClientRect = function(item) {
      if (!(el = this.canvas())) return;

      var el, rect = el.getBoundingClientRect(),
          origin = this._origin,
          itemBounds = item.bounds,
          x = itemBounds.x1 + origin[0] + rect.left,
          y = itemBounds.y1 + origin[1] + rect.top,
          w = itemBounds.width(),
          h = itemBounds.height();

      // translate coordinate for each parent group
      while (item.mark && (item = item.mark.group)) {
        x += item.x || 0;
        y += item.y || 0;
      }

      // return DOMRect-compatible bounding box
      return {
        x:      x,
        y:      y,
        width:  w,
        height: h,
        left:   x,
        top:    y,
        right:  x + w,
        bottom: y + h
      };
    };

    /**
     * Create a new Renderer instance.
     * @param {object} [loader] - Optional loader instance for
     *   image and href URL sanitization. If not specified, a
     *   standard loader instance will be generated.
     * @constructor
     */
    function Renderer$1(loader) {
      this._el = null;
      this._bgcolor = null;
      this._loader = new ResourceLoader$1(loader);
    }

    var prototype$1n = Renderer$1.prototype;

    /**
     * Initialize a new Renderer instance.
     * @param {DOMElement} el - The containing DOM element for the display.
     * @param {number} width - The coordinate width of the display, in pixels.
     * @param {number} height - The coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {Renderer} - This renderer instance.
     */
    prototype$1n.initialize = function(el, width, height, origin, scaleFactor) {
      this._el = el;
      return this.resize(width, height, origin, scaleFactor);
    };

    /**
     * Returns the parent container element for a visualization.
     * @return {DOMElement} - The containing DOM element.
     */
    prototype$1n.element = function() {
      return this._el;
    };

    /**
     * Returns the scene element (e.g., canvas or SVG) of the visualization
     * Subclasses must override if the first child is not the scene element.
     * @return {DOMElement} - The scene (e.g., canvas or SVG) element.
     */
    prototype$1n.canvas = function() {
      return this._el && this._el.firstChild;
    };

    /**
     * Get / set the background color.
     */
    prototype$1n.background = function(bgcolor) {
      if (arguments.length === 0) return this._bgcolor;
      this._bgcolor = bgcolor;
      return this;
    };

    /**
     * Resize the display.
     * @param {number} width - The new coordinate width of the display, in pixels.
     * @param {number} height - The new coordinate height of the display, in pixels.
     * @param {Array<number>} origin - The new origin of the display, in pixels.
     *   The coordinate system will be translated to this point.
     * @param {number} [scaleFactor=1] - Optional scaleFactor by which to multiply
     *   the width and height to determine the final pixel size.
     * @return {Renderer} - This renderer instance;
     */
    prototype$1n.resize = function(width, height, origin, scaleFactor) {
      this._width = width;
      this._height = height;
      this._origin = origin || [0, 0];
      this._scale = scaleFactor || 1;
      return this;
    };

    /**
     * Report a dirty item whose bounds should be redrawn.
     * This base class method does nothing. Subclasses that perform
     * incremental should implement this method.
     * @param {Item} item - The dirty item whose bounds should be redrawn.
     */
    prototype$1n.dirty = function(/*item*/) {
    };

    /**
     * Render an input scenegraph, potentially with a set of dirty items.
     * This method will perform an immediate rendering with available resources.
     * The renderer may also need to perform image loading to perform a complete
     * render. This process can lead to asynchronous re-rendering of the scene
     * after this method returns. To receive notification when rendering is
     * complete, use the renderAsync method instead.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @return {Renderer} - This renderer instance.
     */
    prototype$1n.render = function(scene) {
      var r = this;

      // bind arguments into a render call, and cache it
      // this function may be subsequently called for async redraw
      r._call = function() { r._render(scene); };

      // invoke the renderer
      r._call();

      // clear the cached call for garbage collection
      // async redraws will stash their own copy
      r._call = null;

      return r;
    };

    /**
     * Internal rendering method. Renderer subclasses should override this
     * method to actually perform rendering.
     * @param {object} scene - The root mark of a scenegraph to render.
     */
    prototype$1n._render = function(/*scene*/) {
      // subclasses to override
    };

    /**
     * Asynchronous rendering method. Similar to render, but returns a Promise
     * that resolves when all rendering is completed. Sometimes a renderer must
     * perform image loading to get a complete rendering. The returned
     * Promise will not resolve until this process completes.
     * @param {object} scene - The root mark of a scenegraph to render.
     * @return {Promise} - A Promise that resolves when rendering is complete.
     */
    prototype$1n.renderAsync = function(scene) {
      var r = this.render(scene);
      return this._ready
        ? this._ready.then(function() { return r; })
        : Promise.resolve(r);
    };

    /**
     * Internal method for asynchronous resource loading.
     * Proxies method calls to the ImageLoader, and tracks loading
     * progress to invoke a re-render once complete.
     * @param {string} method - The method name to invoke on the ImageLoader.
     * @param {string} uri - The URI for the requested resource.
     * @return {Promise} - A Promise that resolves to the requested resource.
     */
    prototype$1n._load = function(method, uri) {
      var r = this,
          p = r._loader[method](uri);

      if (!r._ready) {
        // re-render the scene when loading completes
        var call = r._call;
        r._ready = r._loader.ready()
          .then(function(redraw) {
            if (redraw) call();
            r._ready = null;
          });
      }

      return p;
    };

    /**
     * Sanitize a URL to include as a hyperlink in the rendered scene.
     * This method proxies a call to ImageLoader.sanitizeURL, but also tracks
     * image loading progress and invokes a re-render once complete.
     * @param {string} uri - The URI string to sanitize.
     * @return {Promise} - A Promise that resolves to the sanitized URL.
     */
    prototype$1n.sanitizeURL = function(uri) {
      return this._load('sanitizeURL', uri);
    };

    /**
     * Requests an image to include in the rendered scene.
     * This method proxies a call to ImageLoader.loadImage, but also tracks
     * image loading progress and invokes a re-render once complete.
     * @param {string} uri - The URI string of the image.
     * @return {Promise} - A Promise that resolves to the loaded Image.
     */
    prototype$1n.loadImage = function(uri) {
      return this._load('loadImage', uri);
    };

    var Events$1 = [
      'keydown',
      'keypress',
      'keyup',
      'dragenter',
      'dragleave',
      'dragover',
      'mousedown',
      'mouseup',
      'mousemove',
      'mouseout',
      'mouseover',
      'click',
      'dblclick',
      'wheel',
      'mousewheel',
      'touchstart',
      'touchmove',
      'touchend'
    ];

    var TooltipShowEvent$1 = 'mousemove';

    var TooltipHideEvent$1 = 'mouseout';

    var HrefEvent$1 = 'click';

    function CanvasHandler$1(loader, tooltip) {
      Handler$1.call(this, loader, tooltip);
      this._down = null;
      this._touch = null;
      this._first = true;
    }

    var prototype$1o = inherits(CanvasHandler$1, Handler$1);

    prototype$1o.initialize = function(el, origin, obj) {
      // add event listeners
      var canvas = this._canvas = el && domFind$1(el, 'canvas');
      if (canvas) {
        var that = this;
        this.events.forEach(function(type) {
          canvas.addEventListener(type, function(evt) {
            if (prototype$1o[type]) {
              prototype$1o[type].call(that, evt);
            } else {
              that.fire(type, evt);
            }
          });
        });
      }

      return Handler$1.prototype.initialize.call(this, el, origin, obj);
    };

    // return the backing canvas instance
    prototype$1o.canvas = function() {
      return this._canvas;
    };

    // retrieve the current canvas context
    prototype$1o.context = function() {
      return this._canvas.getContext('2d');
    };

    // supported events
    prototype$1o.events = Events$1;

    // to keep old versions of firefox happy
    prototype$1o.DOMMouseScroll = function(evt) {
      this.fire('mousewheel', evt);
    };

    function move$1(moveEvent, overEvent, outEvent) {
      return function(evt) {
        var a = this._active,
            p = this.pickEvent(evt);

        if (p === a) {
          // active item and picked item are the same
          this.fire(moveEvent, evt); // fire move
        } else {
          // active item and picked item are different
          if (!a || !a.exit) {
            // fire out for prior active item
            // suppress if active item was removed from scene
            this.fire(outEvent, evt);
          }
          this._active = p;          // set new active item
          this.fire(overEvent, evt); // fire over for new active item
          this.fire(moveEvent, evt); // fire move for new active item
        }
      };
    }

    function inactive$1(type) {
      return function(evt) {
        this.fire(type, evt);
        this._active = null;
      };
    }

    prototype$1o.mousemove = move$1('mousemove', 'mouseover', 'mouseout');
    prototype$1o.dragover  = move$1('dragover', 'dragenter', 'dragleave');

    prototype$1o.mouseout  = inactive$1('mouseout');
    prototype$1o.dragleave = inactive$1('dragleave');

    prototype$1o.mousedown = function(evt) {
      this._down = this._active;
      this.fire('mousedown', evt);
    };

    prototype$1o.click = function(evt) {
      if (this._down === this._active) {
        this.fire('click', evt);
        this._down = null;
      }
    };

    prototype$1o.touchstart = function(evt) {
      this._touch = this.pickEvent(evt.changedTouches[0]);

      if (this._first) {
        this._active = this._touch;
        this._first = false;
      }

      this.fire('touchstart', evt, true);
    };

    prototype$1o.touchmove = function(evt) {
      this.fire('touchmove', evt, true);
    };

    prototype$1o.touchend = function(evt) {
      this.fire('touchend', evt, true);
      this._touch = null;
    };

    // fire an event
    prototype$1o.fire = function(type, evt, touch) {
      var a = touch ? this._touch : this._active,
          h = this._handlers[type], i, len;

      // set event type relative to scenegraph items
      evt.vegaType = type;

      // handle hyperlinks and tooltips first
      if (type === HrefEvent$1 && a && a.href) {
        this.handleHref(evt, a, a.href);
      } else if (type === TooltipShowEvent$1 || type === TooltipHideEvent$1) {
        this.handleTooltip(evt, a, type !== TooltipHideEvent$1);
      }

      // invoke all registered handlers
      if (h) {
        for (i=0, len=h.length; i<len; ++i) {
          h[i].handler.call(this._obj, evt, a);
        }
      }
    };

    // add an event handler
    prototype$1o.on = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers,
          i = this._handlerIndex(h[name], type, handler);

      if (i < 0) {
        (h[name] || (h[name] = [])).push({
          type:    type,
          handler: handler
        });
      }

      return this;
    };

    // remove an event handler
    prototype$1o.off = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers[name],
          i = this._handlerIndex(h, type, handler);

      if (i >= 0) {
        h.splice(i, 1);
      }

      return this;
    };

    prototype$1o.pickEvent = function(evt) {
      var p = point$6(evt, this._canvas),
          o = this._origin;
      return this.pick(this._scene, p[0], p[1], p[0] - o[0], p[1] - o[1]);
    };

    // find the scenegraph item at the current mouse position
    // x, y -- the absolute x, y mouse coordinates on the canvas element
    // gx, gy -- the relative coordinates within the current group
    prototype$1o.pick = function(scene, x, y, gx, gy) {
      var g = this.context(),
          mark = marks$1[scene.marktype];
      return mark.pick.call(this, g, scene, x, y, gx, gy);
    };

    function clip$4(context, scene) {
      var clip = scene.clip;

      context.save();
      context.beginPath();

      if (isFunction(clip)) {
        clip(context);
      } else {
        var group = scene.group;
        context.rect(0, 0, group.width || 0, group.height || 0);
      }

      context.clip();
    }

    function devicePixelRatio$1() {
      return typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1;
    }

    var pixelRatio$1 = devicePixelRatio$1();

    function resize$1(canvas, width, height, origin, scaleFactor, opt) {
      var inDOM = typeof HTMLElement !== 'undefined'
        && canvas instanceof HTMLElement
        && canvas.parentNode != null;

      var context = canvas.getContext('2d'),
          ratio = inDOM ? pixelRatio$1 : scaleFactor,
          key;

      canvas.width = width * ratio;
      canvas.height = height * ratio;

      for (key in opt) {
        context[key] = opt[key];
      }

      if (inDOM && ratio !== 1) {
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
      }

      context.pixelRatio = ratio;
      context.setTransform(
        ratio, 0, 0, ratio,
        ratio * origin[0],
        ratio * origin[1]
      );

      return canvas;
    }

    function CanvasRenderer$1(loader) {
      Renderer$1.call(this, loader);
      this._redraw = false;
      this._dirty = new Bounds$1();
    }

    var prototype$1p = inherits(CanvasRenderer$1, Renderer$1),
        base$3 = Renderer$1.prototype,
        tempBounds$4 = new Bounds$1();

    prototype$1p.initialize = function(el, width, height, origin, scaleFactor, options) {
      this._options = options;
      this._canvas = domCanvas(1, 1, options && options.type); // instantiate a small canvas

      if (el) {
        domClear$1(el, 0).appendChild(this._canvas);
        this._canvas.setAttribute('class', 'marks');
      }
      // this method will invoke resize to size the canvas appropriately
      return base$3.initialize.call(this, el, width, height, origin, scaleFactor);
    };

    prototype$1p.resize = function(width, height, origin, scaleFactor) {
      base$3.resize.call(this, width, height, origin, scaleFactor);
      resize$1(this._canvas, this._width, this._height,
        this._origin, this._scale, this._options && this._options.context);
      this._redraw = true;
      return this;
    };

    prototype$1p.canvas = function() {
      return this._canvas;
    };

    prototype$1p.context = function() {
      return this._canvas ? this._canvas.getContext('2d') : null;
    };

    prototype$1p.dirty = function(item) {
      var b = translate$4(item.bounds, item.mark.group);
      this._dirty.union(b);
    };

    function clipToBounds$1(g, b, origin) {
      // expand bounds by 1 pixel, then round to pixel boundaries
      b.expand(1).round();

      // to avoid artifacts translate if origin has fractional pixels
      b.translate(-(origin[0] % 1), -(origin[1] % 1));

      // set clipping path
      g.beginPath();
      g.rect(b.x1, b.y1, b.width(), b.height());
      g.clip();

      return b;
    }

    function translate$4(bounds, group) {
      if (group == null) return bounds;
      var b = tempBounds$4.clear().union(bounds);
      for (; group != null; group = group.mark.group) {
        b.translate(group.x || 0, group.y || 0);
      }
      return b;
    }

    prototype$1p._render = function(scene) {
      var g = this.context(),
          o = this._origin,
          w = this._width,
          h = this._height,
          b = this._dirty;

      // setup
      g.save();
      if (this._redraw || b.empty()) {
        this._redraw = false;
        b = null;
      } else {
        b = clipToBounds$1(g, b, o);
      }

      this.clear(-o[0], -o[1], w, h);

      // render
      this.draw(g, scene, b);

      // takedown
      g.restore();

      this._dirty.clear();
      return this;
    };

    prototype$1p.draw = function(ctx, scene, bounds) {
      var mark = marks$1[scene.marktype];
      if (scene.clip) clip$4(ctx, scene);
      mark.draw.call(this, ctx, scene, bounds);
      if (scene.clip) ctx.restore();
    };

    prototype$1p.clear = function(x, y, w, h) {
      var g = this.context();
      g.clearRect(x, y, w, h);
      if (this._bgcolor != null) {
        g.fillStyle = this._bgcolor;
        g.fillRect(x, y, w, h);
      }
    };

    function SVGHandler$1(loader, tooltip) {
      Handler$1.call(this, loader, tooltip);
      var h = this;
      h._hrefHandler = listener$1(h, function(evt, item) {
        if (item && item.href) h.handleHref(evt, item, item.href);
      });
      h._tooltipHandler = listener$1(h, function(evt, item) {
        h.handleTooltip(evt, item, evt.type !== TooltipHideEvent$1);
      });
    }

    var prototype$1q = inherits(SVGHandler$1, Handler$1);

    prototype$1q.initialize = function(el, origin, obj) {
      var svg = this._svg;
      if (svg) {
        svg.removeEventListener(HrefEvent$1, this._hrefHandler);
        svg.removeEventListener(TooltipShowEvent$1, this._tooltipHandler);
        svg.removeEventListener(TooltipHideEvent$1, this._tooltipHandler);
      }
      this._svg = svg = el && domFind$1(el, 'svg');
      if (svg) {
        svg.addEventListener(HrefEvent$1, this._hrefHandler);
        svg.addEventListener(TooltipShowEvent$1, this._tooltipHandler);
        svg.addEventListener(TooltipHideEvent$1, this._tooltipHandler);
      }
      return Handler$1.prototype.initialize.call(this, el, origin, obj);
    };

    prototype$1q.canvas = function() {
      return this._svg;
    };

    // wrap an event listener for the SVG DOM
    function listener$1(context, handler) {
      return function(evt) {
        var target = evt.target,
            item = target.__data__;
        evt.vegaType = evt.type;
        item = Array.isArray(item) ? item[0] : item;
        handler.call(context._obj, evt, item);
      };
    }

    // add an event handler
    prototype$1q.on = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers,
          i = this._handlerIndex(h[name], type, handler);

      if (i < 0) {
        var x = {
          type:     type,
          handler:  handler,
          listener: listener$1(this, handler)
        };

        (h[name] || (h[name] = [])).push(x);
        if (this._svg) {
          this._svg.addEventListener(name, x.listener);
        }
      }

      return this;
    };

    // remove an event handler
    prototype$1q.off = function(type, handler) {
      var name = this.eventName(type),
          h = this._handlers[name],
          i = this._handlerIndex(h, type, handler);

      if (i >= 0) {
        if (this._svg) {
          this._svg.removeEventListener(name, h[i].listener);
        }
        h.splice(i, 1);
      }

      return this;
    };

    // generate string for an opening xml tag
    // tag: the name of the xml tag
    // attr: hash of attribute name-value pairs to include
    // raw: additional raw string to include in tag markup
    function openTag$1(tag, attr, raw) {
      var s = '<' + tag, key, val;
      if (attr) {
        for (key in attr) {
          val = attr[key];
          if (val != null) {
            s += ' ' + key + '="' + val + '"';
          }
        }
      }
      if (raw) s += ' ' + raw;
      return s + '>';
    }

    // generate string for closing xml tag
    // tag: the name of the xml tag
    function closeTag$1(tag) {
      return '</' + tag + '>';
    }

    var metadata$1 = {
      'version': '1.1',
      'xmlns': 'http://www.w3.org/2000/svg',
      'xmlns:xlink': 'http://www.w3.org/1999/xlink'
    };

    var styles$1 = {
      'fill':             'fill',
      'fillOpacity':      'fill-opacity',
      'stroke':           'stroke',
      'strokeOpacity':    'stroke-opacity',
      'strokeWidth':      'stroke-width',
      'strokeCap':        'stroke-linecap',
      'strokeJoin':       'stroke-linejoin',
      'strokeDash':       'stroke-dasharray',
      'strokeDashOffset': 'stroke-dashoffset',
      'strokeMiterLimit': 'stroke-miterlimit',
      'opacity':          'opacity'
    };

    var styleProperties$1 = Object.keys(styles$1);

    var ns$1 = metadata$1.xmlns;

    function SVGRenderer$1(loader) {
      Renderer$1.call(this, loader);
      this._dirtyID = 1;
      this._dirty = [];
      this._svg = null;
      this._root = null;
      this._defs = null;
    }

    var prototype$1r = inherits(SVGRenderer$1, Renderer$1);
    var base$4 = Renderer$1.prototype;

    prototype$1r.initialize = function(el, width, height, padding) {
      if (el) {
        this._svg = domChild$1(el, 0, 'svg', ns$1);
        this._svg.setAttribute('class', 'marks');
        domClear$1(el, 1);
        // set the svg root group
        this._root = domChild$1(this._svg, 0, 'g', ns$1);
        domClear$1(this._svg, 1);
      }

      // create the svg definitions cache
      this._defs = {
        gradient: {},
        clipping: {}
      };

      // set background color if defined
      this.background(this._bgcolor);

      return base$4.initialize.call(this, el, width, height, padding);
    };

    prototype$1r.background = function(bgcolor) {
      if (arguments.length && this._svg) {
        this._svg.style.setProperty('background-color', bgcolor);
      }
      return base$4.background.apply(this, arguments);
    };

    prototype$1r.resize = function(width, height, origin, scaleFactor) {
      base$4.resize.call(this, width, height, origin, scaleFactor);

      if (this._svg) {
        this._svg.setAttribute('width', this._width * this._scale);
        this._svg.setAttribute('height', this._height * this._scale);
        this._svg.setAttribute('viewBox', '0 0 ' + this._width + ' ' + this._height);
        this._root.setAttribute('transform', 'translate(' + this._origin + ')');
      }

      this._dirty = [];

      return this;
    };

    prototype$1r.canvas = function() {
      return this._svg;
    };

    prototype$1r.svg = function() {
      if (!this._svg) return null;

      var attr = {
        class:   'marks',
        width:   this._width * this._scale,
        height:  this._height * this._scale,
        viewBox: '0 0 ' + this._width + ' ' + this._height
      };
      for (var key in metadata$1) {
        attr[key] = metadata$1[key];
      }

      var bg = !this._bgcolor ? ''
        : (openTag$1('rect', {
            width:  this._width,
            height: this._height,
            style:  'fill: ' + this._bgcolor + ';'
          }) + closeTag$1('rect'));

      return openTag$1('svg', attr) + bg + this._svg.innerHTML + closeTag$1('svg');
    };


    // -- Render entry point --

    prototype$1r._render = function(scene) {
      // perform spot updates and re-render markup
      if (this._dirtyCheck()) {
        if (this._dirtyAll) this._resetDefs();
        this.draw(this._root, scene);
        domClear$1(this._root, 1);
      }

      this.updateDefs();

      this._dirty = [];
      ++this._dirtyID;

      return this;
    };

    // -- Manage SVG definitions ('defs') block --

    prototype$1r.updateDefs = function() {
      var svg = this._svg,
          defs = this._defs,
          el = defs.el,
          index = 0, id;

      for (id in defs.gradient) {
        if (!el) defs.el = (el = domChild$1(svg, 0, 'defs', ns$1));
        updateGradient$1(el, defs.gradient[id], index++);
      }

      for (id in defs.clipping) {
        if (!el) defs.el = (el = domChild$1(svg, 0, 'defs', ns$1));
        updateClipping$1(el, defs.clipping[id], index++);
      }

      // clean-up
      if (el) {
        if (index === 0) {
          svg.removeChild(el);
          defs.el = null;
        } else {
          domClear$1(el, index);
        }
      }
    };

    function updateGradient$1(el, grad, index) {
      var i, n, stop;

      el = domChild$1(el, index, 'linearGradient', ns$1);
      el.setAttribute('id', grad.id);
      el.setAttribute('x1', grad.x1);
      el.setAttribute('x2', grad.x2);
      el.setAttribute('y1', grad.y1);
      el.setAttribute('y2', grad.y2);

      for (i=0, n=grad.stops.length; i<n; ++i) {
        stop = domChild$1(el, i, 'stop', ns$1);
        stop.setAttribute('offset', grad.stops[i].offset);
        stop.setAttribute('stop-color', grad.stops[i].color);
      }
      domClear$1(el, i);
    }

    function updateClipping$1(el, clip, index) {
      var mask;

      el = domChild$1(el, index, 'clipPath', ns$1);
      el.setAttribute('id', clip.id);

      if (clip.path) {
        mask = domChild$1(el, 0, 'path', ns$1);
        mask.setAttribute('d', clip.path);
      } else {
        mask = domChild$1(el, 0, 'rect', ns$1);
        mask.setAttribute('x', 0);
        mask.setAttribute('y', 0);
        mask.setAttribute('width', clip.width);
        mask.setAttribute('height', clip.height);
      }
    }

    prototype$1r._resetDefs = function() {
      var def = this._defs;
      def.gradient = {};
      def.clipping = {};
    };


    // -- Manage rendering of items marked as dirty --

    prototype$1r.dirty = function(item) {
      if (item.dirty !== this._dirtyID) {
        item.dirty = this._dirtyID;
        this._dirty.push(item);
      }
    };

    prototype$1r.isDirty = function(item) {
      return this._dirtyAll
        || !item._svg
        || item.dirty === this._dirtyID;
    };

    prototype$1r._dirtyCheck = function() {
      this._dirtyAll = true;
      var items = this._dirty;
      if (!items.length) return true;

      var id = ++this._dirtyID,
          item, mark, type, mdef, i, n, o;

      for (i=0, n=items.length; i<n; ++i) {
        item = items[i];
        mark = item.mark;

        if (mark.marktype !== type) {
          // memoize mark instance lookup
          type = mark.marktype;
          mdef = marks$1[type];
        }

        if (mark.zdirty && mark.dirty !== id) {
          this._dirtyAll = false;
          dirtyParents$1(item, id);
          mark.items.forEach(function(i) { i.dirty = id; });
        }
        if (mark.zdirty) continue; // handle in standard drawing pass

        if (item.exit) { // EXIT
          if (mdef.nested && mark.items.length) {
            // if nested mark with remaining points, update instead
            o = mark.items[0];
            if (o._svg) this._update(mdef, o._svg, o);
          } else if (item._svg) {
            // otherwise remove from DOM
            o = item._svg.parentNode;
            if (o) o.removeChild(item._svg);
          }
          item._svg = null;
          continue;
        }

        item = (mdef.nested ? mark.items[0] : item);
        if (item._update === id) continue; // already visited

        if (!item._svg || !item._svg.ownerSVGElement) {
          // ENTER
          this._dirtyAll = false;
          dirtyParents$1(item, id);
        } else {
          // IN-PLACE UPDATE
          this._update(mdef, item._svg, item);
        }
        item._update = id;
      }
      return !this._dirtyAll;
    };

    function dirtyParents$1(item, id) {
      for (; item && item.dirty !== id; item=item.mark.group) {
        item.dirty = id;
        if (item.mark && item.mark.dirty !== id) {
          item.mark.dirty = id;
        } else return;
      }
    }


    // -- Construct & maintain scenegraph to SVG mapping ---

    // Draw a mark container.
    prototype$1r.draw = function(el, scene, prev) {
      if (!this.isDirty(scene)) return scene._svg;

      var renderer = this,
          svg = this._svg,
          mdef = marks$1[scene.marktype],
          events = scene.interactive === false ? 'none' : null,
          isGroup = mdef.tag === 'g',
          sibling = null,
          i = 0,
          parent;

      parent = bind$2(scene, el, prev, 'g', svg);
      parent.setAttribute('class', cssClass$1(scene));
      if (!isGroup) {
        parent.style.setProperty('pointer-events', events);
      }
      if (scene.clip) {
        parent.setAttribute('clip-path', clip$3(renderer, scene, scene.group));
      } else {
        parent.removeAttribute('clip-path');
      }

      function process(item) {
        var dirty = renderer.isDirty(item),
            node = bind$2(item, parent, sibling, mdef.tag, svg);

        if (dirty) {
          renderer._update(mdef, node, item);
          if (isGroup) recurse$1(renderer, node, item);
        }

        sibling = node;
        ++i;
      }

      if (mdef.nested) {
        if (scene.items.length) process(scene.items[0]);
      } else {
        visit$1(scene, process);
      }

      domClear$1(parent, i);
      return parent;
    };

    // Recursively process group contents.
    function recurse$1(renderer, el, group) {
      el = el.lastChild;
      var prev, idx = 0;

      visit$1(group, function(item) {
        prev = renderer.draw(el, item, prev);
        ++idx;
      });

      // remove any extraneous DOM elements
      domClear$1(el, 1 + idx);
    }

    // Bind a scenegraph item to an SVG DOM element.
    // Create new SVG elements as needed.
    function bind$2(item, el, sibling, tag, svg) {
      var node = item._svg, doc;

      // create a new dom node if needed
      if (!node) {
        doc = el.ownerDocument;
        node = domCreate$1(doc, tag, ns$1);
        item._svg = node;

        if (item.mark) {
          node.__data__ = item;
          node.__values__ = {fill: 'default'};

          // if group, create background and foreground elements
          if (tag === 'g') {
            var bg = domCreate$1(doc, 'path', ns$1);
            bg.setAttribute('class', 'background');
            node.appendChild(bg);
            bg.__data__ = item;

            var fg = domCreate$1(doc, 'g', ns$1);
            node.appendChild(fg);
            fg.__data__ = item;
          }
        }
      }

      // (re-)insert if (a) not contained in SVG or (b) sibling order has changed
      if (node.ownerSVGElement !== svg || hasSiblings$1(item) && node.previousSibling !== sibling) {
        el.insertBefore(node, sibling ? sibling.nextSibling : el.firstChild);
      }

      return node;
    }

    function hasSiblings$1(item) {
      var parent = item.mark || item.group;
      return parent && parent.items.length > 1;
    }


    // -- Set attributes & styles on SVG elements ---

    var element$2 = null, // temp var for current SVG element
        values$1 = null;  // temp var for current values hash

    // Extra configuration for certain mark types
    var mark_extras$1 = {
      group: function(mdef, el, item) {
        values$1 = el.__values__; // use parent's values hash

        element$2 = el.childNodes[1];
        mdef.foreground(emit$2, item, this);

        element$2 = el.childNodes[0];
        mdef.background(emit$2, item, this);

        var value = item.mark.interactive === false ? 'none' : null;
        if (value !== values$1.events) {
          element$2.style.setProperty('pointer-events', value);
          values$1.events = value;
        }
      },
      text: function(mdef, el, item) {
        var value;

        value = textValue$1(item);
        if (value !== values$1.text) {
          el.textContent = value;
          values$1.text = value;
        }

        setStyle$1(el, 'font-family', fontFamily$1(item));
        setStyle$1(el, 'font-size', fontSize$1(item) + 'px');
        setStyle$1(el, 'font-style', item.fontStyle);
        setStyle$1(el, 'font-variant', item.fontVariant);
        setStyle$1(el, 'font-weight', item.fontWeight);
      }
    };

    function setStyle$1(el, name, value) {
      if (value !== values$1[name]) {
        if (value == null) {
          el.style.removeProperty(name);
        } else {
          el.style.setProperty(name, value + '');
        }
        values$1[name] = value;
      }
    }

    prototype$1r._update = function(mdef, el, item) {
      // set dom element and values cache
      // provides access to emit method
      element$2 = el;
      values$1 = el.__values__;

      // apply svg attributes
      mdef.attr(emit$2, item, this);

      // some marks need special treatment
      var extra = mark_extras$1[mdef.type];
      if (extra) extra.call(this, mdef, el, item);

      // apply svg css styles
      // note: element may be modified by 'extra' method
      this.style(element$2, item);
    };

    function emit$2(name, value, ns) {
      // early exit if value is unchanged
      if (value === values$1[name]) return;

      if (value != null) {
        // if value is provided, update DOM attribute
        if (ns) {
          element$2.setAttributeNS(ns, name, value);
        } else {
          element$2.setAttribute(name, value);
        }
      } else {
        // else remove DOM attribute
        if (ns) {
          element$2.removeAttributeNS(ns, name);
        } else {
          element$2.removeAttribute(name);
        }
      }

      // note current value for future comparison
      values$1[name] = value;
    }

    prototype$1r.style = function(el, o) {
      if (o == null) return;
      var i, n, prop, name, value;

      for (i=0, n=styleProperties$1.length; i<n; ++i) {
        prop = styleProperties$1[i];
        value = o[prop];

        if (prop === 'font') {
          value = fontFamily$1(o);
        }

        if (value === values$1[prop]) continue;

        name = styles$1[prop];
        if (value == null) {
          if (name === 'fill') {
            el.style.setProperty(name, 'none');
          } else {
            el.style.removeProperty(name);
          }
        } else {
          if (value.id) {
            // ensure definition is included
            this._defs.gradient[value.id] = value;
            value = 'url(' + href$1() + '#' + value.id + ')';
          }
          el.style.setProperty(name, value + '');
        }

        values$1[prop] = value;
      }
    };

    function href$1() {
      var loc;
      return typeof window === 'undefined' ? ''
        : (loc = window.location).hash ? loc.href.slice(0, -loc.hash.length)
        : loc.href;
    }

    function SVGStringRenderer$1(loader) {
      Renderer$1.call(this, loader);

      this._text = {
        head: '',
        bg:   '',
        root: '',
        foot: '',
        defs: '',
        body: ''
      };

      this._defs = {
        gradient: {},
        clipping: {}
      };
    }

    var prototype$1s = inherits(SVGStringRenderer$1, Renderer$1);
    var base$5 = Renderer$1.prototype;

    prototype$1s.resize = function(width, height, origin, scaleFactor) {
      base$5.resize.call(this, width, height, origin, scaleFactor);
      var o = this._origin,
          t = this._text;

      var attr = {
        class:   'marks',
        width:   this._width * this._scale,
        height:  this._height * this._scale,
        viewBox: '0 0 ' + this._width + ' ' + this._height
      };
      for (var key in metadata$1) {
        attr[key] = metadata$1[key];
      }

      t.head = openTag$1('svg', attr);

      var bg = this._bgcolor;
      if (bg === 'transparent' || bg === 'none') bg = null;

      if (bg) {
        t.bg = openTag$1('rect', {
          width:  this._width,
          height: this._height,
          style:  'fill: ' + bg + ';'
        }) + closeTag$1('rect');
      } else {
        t.bg = '';
      }

      t.root = openTag$1('g', {
        transform: 'translate(' + o + ')'
      });

      t.foot = closeTag$1('g') + closeTag$1('svg');

      return this;
    };

    prototype$1s.background = function() {
      var rv = base$5.background.apply(this, arguments);
      if (arguments.length && this._text.head) {
        this.resize(this._width, this._height, this._origin, this._scale);
      }
      return rv;
    };

    prototype$1s.svg = function() {
      var t = this._text;
      return t.head + t.bg + t.defs + t.root + t.body + t.foot;
    };

    prototype$1s._render = function(scene) {
      this._text.body = this.mark(scene);
      this._text.defs = this.buildDefs();
      return this;
    };

    prototype$1s.buildDefs = function() {
      var all = this._defs,
          defs = '',
          i, id, def, stops;

      for (id in all.gradient) {
        def = all.gradient[id];
        stops = def.stops;

        defs += openTag$1('linearGradient', {
          id: id,
          x1: def.x1,
          x2: def.x2,
          y1: def.y1,
          y2: def.y2
        });

        for (i=0; i<stops.length; ++i) {
          defs += openTag$1('stop', {
            offset: stops[i].offset,
            'stop-color': stops[i].color
          }) + closeTag$1('stop');
        }

        defs += closeTag$1('linearGradient');
      }

      for (id in all.clipping) {
        def = all.clipping[id];

        defs += openTag$1('clipPath', {id: id});

        if (def.path) {
          defs += openTag$1('path', {
            d: def.path
          }) + closeTag$1('path');
        } else {
          defs += openTag$1('rect', {
            x: 0,
            y: 0,
            width: def.width,
            height: def.height
          }) + closeTag$1('rect');
        }

        defs += closeTag$1('clipPath');
      }

      return (defs.length > 0) ? openTag$1('defs') + defs + closeTag$1('defs') : '';
    };

    var object$3;

    function emit$3(name, value, ns, prefixed) {
      object$3[prefixed || name] = value;
    }

    prototype$1s.attributes = function(attr, item) {
      object$3 = {};
      attr(emit$3, item, this);
      return object$3;
    };

    prototype$1s.href = function(item) {
      var that = this,
          href = item.href,
          attr;

      if (href) {
        if (attr = that._hrefs && that._hrefs[href]) {
          return attr;
        } else {
          that.sanitizeURL(href).then(function(attr) {
            // rewrite to use xlink namespace
            // note that this will be deprecated in SVG 2.0
            attr['xlink:href'] = attr.href;
            attr.href = null;
            (that._hrefs || (that._hrefs = {}))[href] = attr;
          });
        }
      }
      return null;
    };

    prototype$1s.mark = function(scene) {
      var renderer = this,
          mdef = marks$1[scene.marktype],
          tag  = mdef.tag,
          defs = this._defs,
          str = '',
          style;

      if (tag !== 'g' && scene.interactive === false) {
        style = 'style="pointer-events: none;"';
      }

      // render opening group tag
      str += openTag$1('g', {
        'class': cssClass$1(scene),
        'clip-path': scene.clip ? clip$3(renderer, scene, scene.group) : null
      }, style);

      // render contained elements
      function process(item) {
        var href = renderer.href(item);
        if (href) str += openTag$1('a', href);

        style = (tag !== 'g') ? applyStyles$1(item, scene, tag, defs) : null;
        str += openTag$1(tag, renderer.attributes(mdef.attr, item), style);

        if (tag === 'text') {
          str += escape_text$1(textValue$1(item));
        } else if (tag === 'g') {
          str += openTag$1('path', renderer.attributes(mdef.background, item),
            applyStyles$1(item, scene, 'bgrect', defs)) + closeTag$1('path');

          str += openTag$1('g', renderer.attributes(mdef.foreground, item))
            + renderer.markGroup(item)
            + closeTag$1('g');
        }

        str += closeTag$1(tag);
        if (href) str += closeTag$1('a');
      }

      if (mdef.nested) {
        if (scene.items && scene.items.length) process(scene.items[0]);
      } else {
        visit$1(scene, process);
      }

      // render closing group tag
      return str + closeTag$1('g');
    };

    prototype$1s.markGroup = function(scene) {
      var renderer = this,
          str = '';

      visit$1(scene, function(item) {
        str += renderer.mark(item);
      });

      return str;
    };

    function applyStyles$1(o, mark, tag, defs) {
      if (o == null) return '';
      var i, n, prop, name, value, s = '';

      if (tag === 'bgrect' && mark.interactive === false) {
        s += 'pointer-events: none; ';
      }

      if (tag === 'text') {
        s += 'font-family: ' + fontFamily$1(o) + '; ';
        s += 'font-size: ' + fontSize$1(o) + 'px; ';
        if (o.fontStyle) s += 'font-style: ' + o.fontStyle + '; ';
        if (o.fontVariant) s += 'font-variant: ' + o.fontVariant + '; ';
        if (o.fontWeight) s += 'font-weight: ' + o.fontWeight + '; ';
      }

      for (i=0, n=styleProperties$1.length; i<n; ++i) {
        prop = styleProperties$1[i];
        name = styles$1[prop];
        value = o[prop];

        if (value == null) {
          if (name === 'fill') {
            s += 'fill: none; ';
          }
        } else if (value === 'transparent' && (name === 'fill' || name === 'stroke')) {
          // transparent is not a legal SVG value, so map to none instead
          s += name + ': none; ';
        } else {
          if (value.id) {
            // ensure definition is included
            defs.gradient[value.id] = value;
            value = 'url(#' + value.id + ')';
          }
          s += name + ': ' + value + '; ';
        }
      }

      return s ? 'style="' + s.trim() + '"' : null;
    }

    function escape_text$1(s) {
      return s.replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;');
    }

    function intersect$2(scene, bounds, filter) {
      const hits = [], // intersection results
            box = new Bounds$1().union(bounds), // defensive copy
            type = scene.marktype;

      return type ? intersectMark(scene, box, filter, hits)
        : type === 'group' ? intersectGroup(scene, box, filter, hits)
        : error('Intersect scene must be mark node or group item.');
    }

    function intersectMark(mark, box, filter, hits) {
      if (visitMark(mark, box, filter)) {
        const items = mark.items,
              type = mark.marktype,
              n = items.length;

        let i = 0;

        if (type === 'group') {
          for (; i<n; ++i) {
            intersectGroup(items[i], box, filter, hits);
          }
        } else {
          for (const test = marks$1[type].isect; i<n; ++i) {
            let item = items[i];
            if (intersectItem(item, box, test)) hits.push(item);
          }
        }
      }
      return hits;
    }

    function visitMark(mark, box, filter) {
      // process if bounds intersect and if
      // (1) mark is a group mark (so we must recurse), or
      // (2) mark is interactive and passes filter
      return mark.bounds && box.intersects(mark.bounds) && (
        mark.marktype === 'group' ||
        mark.interactive !== false && (!filter || filter(mark))
      );
    }

    function intersectGroup(group, box, filter, hits) {
      // test intersect against group
      // skip groups by default unless filter says otherwise
      if ((filter && filter(group.mark)) &&
          intersectItem(group, box, marks$1.group.isect)) {
        hits.push(group);
      }

      // recursively test children marks
      // translate box to group coordinate space
      const marks = group.items,
            n = marks && marks.length;

      if (n) {
        const x = group.x || 0,
              y = group.y || 0;
        box.translate(-x, -y);
        for (let i=0; i<n; ++i) {
          intersectMark(marks[i], box, filter, hits);
        }
        box.translate(x, y);
      }

      return hits;
    }

    function intersectItem(item, box, test) {
      // test bounds enclosure, bounds intersection, then detailed test
      const bounds = item.bounds;
      return box.encloses(bounds) || (box.intersects(bounds) && test(item, box));
    }

    var clipBounds$1 = new Bounds$1();

    function intersect$3(b, opt, group) {
      if (!b) return [];

      const [u, v] = b,
            box = new Bounds$1().set(u[0], u[1], v[0], v[1]),
            scene = group || this.context.dataflow.scenegraph().root;

      return intersect$2(scene, box, filter$2(opt));
    }

    function filter$2(opt) {
      let p = null;

      if (opt) {
        const types = array(opt.marktype),
              names = array(opt.markname);
        p = _ => (!types.length || types.some(t => _.marktype === t))
              && (!names.length || names.some(s => _.name === s));
      }

      return p;
    }

    function log$4(df, method, args) {
      try {
        df[method].apply(df, ['EXPRESSION'].concat([].slice.call(args)));
      } catch (err) {
        df.warn(err);
      }
      return args[args.length-1];
    }

    function warn$1() {
      return log$4(this.context.dataflow, 'warn', arguments);
    }

    function info() {
      return log$4(this.context.dataflow, 'info', arguments);
    }

    function debug$1() {
      return log$4(this.context.dataflow, 'debug', arguments);
    }

    function merge$3() {
      var args = [].slice.call(arguments);
      args.unshift({});
      return extend.apply(null, args);
    }

    function equal(a, b) {
      return a === b || a !== a && b !== b ? true
        : isArray(a) && isArray(b) && a.length === b.length ? equalArray(a, b)
        : false;
    }

    function equalArray(a, b) {
      for (let i=0, n=a.length; i<n; ++i) {
        if (!equal(a[i], b[i])) return false;
      }
      return true;
    }

    function removePredicate(props) {
      return function(_) {
        for (let key in props) {
          if (!equal(_[key], props[key])) return false;
        }
        return true;
      };
    }

    function modify(name, insert, remove, toggle, modify, values) {
      let df = this.context.dataflow,
          data = this.context.data[name],
          input = data.input,
          changes = data.changes,
          stamp = df.stamp(),
          predicate, key;

      if (df._trigger === false || !(input.value.length || insert || toggle)) {
        // nothing to do!
        return 0;
      }

      if (!changes || changes.stamp < stamp) {
        data.changes = (changes = df.changeset());
        changes.stamp = stamp;
        df.runAfter(function() {
          data.modified = true;
          df.pulse(input, changes).run();
        }, true, 1);
      }

      if (remove) {
        predicate = remove === true ? truthy
          : (isArray(remove) || isTuple(remove)) ? remove
          : removePredicate(remove);
        changes.remove(predicate);
      }

      if (insert) {
        changes.insert(insert);
      }

      if (toggle) {
        predicate = removePredicate(toggle);
        if (input.value.some(predicate)) {
          changes.remove(predicate);
        } else {
          changes.insert(toggle);
        }
      }

      if (modify) {
        for (key in values) {
          changes.modify(modify, key, values[key]);
        }
      }

      return 1;
    }

    function pinchDistance(event) {
      const t = event.touches,
            dx = t[0].clientX - t[1].clientX,
            dy = t[0].clientY - t[1].clientY;
      return Math.sqrt(dx * dx + dy * dy);
    }

    function pinchAngle(event) {
      const t = event.touches;
      return Math.atan2(
        t[0].clientY - t[1].clientY,
        t[0].clientX - t[1].clientX
      );
    }

    function scaleGradient(scale, p0, p1, count, group) {
      scale = getScale(scale, (group || this).context);

      const gradient = Gradient$1(p0, p1);

      let stops = scale.domain(),
          min = stops[0],
          max = peek(stops),
          fraction = identity;

      if (!(max - min)) {
        // expand scale if domain has zero span, fix #1479
        scale = (scale.interpolator
          ? scale$1('sequential')().interpolator(scale.interpolator())
          : scale$1('linear')().interpolate(scale.interpolate()).range(scale.range())
        ).domain([min=0, max=1]);
      } else {
        fraction = scaleFraction(scale, min, max);
      }

      if (scale.ticks) {
        stops = scale.ticks(+count || 15);
        if (min !== stops[0]) stops.unshift(min);
        if (max !== peek(stops)) stops.push(max);
      }

      stops.forEach(_ => gradient.stop(fraction(_), scale(_)));

      return gradient;
    }

    function geoShape(projection, geojson, group) {
      const p = getScale(projection, (group || this).context);
      return function(context) {
        return p ? p.path.context(context)(geojson) : '';
      }
    }

    function pathShape(path) {
      let p = null;
      return function(context) {
        return context
          ? pathRender$1(context, (p = p || pathParse$1(path)))
          : path;
      };
    }

    const EMPTY = {};

    function datum(d) { return d.data; }

    function treeNodes(name, context) {
      const tree = data$1.call(context, name);
      return tree.root && tree.root.lookup || EMPTY;
    }

    function treePath(name, source, target) {
      const nodes = treeNodes(name, this),
            s = nodes[source],
            t = nodes[target];
      return s && t ? s.path(t).map(datum) : undefined;
    }

    function treeAncestors(name, node) {
      const n = treeNodes(name, this)[node];
      return n ? n.ancestors().map(datum) : undefined;
    }

    const _window = (typeof window !== 'undefined' && window) || null;

    function screen() {
      return _window ? _window.screen : {};
    }

    function windowSize() {
      return _window
        ? [_window.innerWidth, _window.innerHeight]
        : [undefined, undefined];
    }

    function containerSize() {
      const view = this.context.dataflow,
            el = view.container && view.container();
      return el
        ? [el.clientWidth, el.clientHeight]
        : [undefined, undefined];
    }

    const DataPrefix$1   = ':';
    const IndexPrefix$1  = '@';
    const ScalePrefix  = '%';
    const SignalPrefix = '$';

    function dataVisitor(name, args, scope, params) {
      if (args[0].type !== Literal) {
        error('First argument to data functions must be a string literal.');
      }

      const data = args[0].value,
            dataName = DataPrefix$1 + data;

      if (!params.hasOwnProperty(dataName)) {
        params[dataName] = scope.getData(data).tuplesRef();
      }
    }

    function indataVisitor(name, args, scope, params) {
      if (args[0].type !== Literal) error('First argument to indata must be a string literal.');
      if (args[1].type !== Literal) error('Second argument to indata must be a string literal.');

      const data = args[0].value,
            field = args[1].value,
            indexName = IndexPrefix$1 + field;

      if (!params.hasOwnProperty(indexName)) {
        params[indexName] = scope.getData(data).indataRef(scope, field);
      }
    }

    function scaleVisitor(name, args, scope, params) {
      if (args[0].type === Literal) {
        // add scale dependency
        addScaleDependency(scope, params, args[0].value);
      }
      else if (args[0].type === Identifier$1) {
        // indirect scale lookup; add all scales as parameters
        for (name in scope.scales) {
          addScaleDependency(scope, params, name);
        }
      }
    }

    function addScaleDependency(scope, params, name) {
      const scaleName = ScalePrefix + name;
      if (!params.hasOwnProperty(scaleName)) {
        try {
          params[scaleName] = scope.scaleRef(name);
        } catch (err) {
          // TODO: error handling? warning?
        }
      }
    }

    // Expression function context object
    const functionContext = {
      random: function() { return random(); }, // override default
      isArray,
      isBoolean,
      isDate,
      isNumber,
      isObject,
      isRegExp,
      isString,
      isTuple,
      toBoolean,
      toDate,
      toNumber,
      toString,
      flush,
      lerp,
      merge: merge$3,
      pad,
      peek,
      span,
      inrange,
      truncate,
      rgb,
      lab,
      hcl,
      hsl,
      sequence: range,
      format: format$3,
      utcFormat: utcFormat$1,
      utcParse: utcParse$1,
      timeFormat: timeFormat$1,
      timeParse: timeParse$1,
      monthFormat,
      monthAbbrevFormat,
      dayFormat,
      dayAbbrevFormat,
      quarter,
      utcquarter,
      warn: warn$1,
      info,
      debug: debug$1,
      extent,
      inScope,
      intersect: intersect$3,
      clampRange,
      pinchDistance,
      pinchAngle,
      screen,
      containerSize,
      windowSize,
      bandspace,
      setdata,
      pathShape,
      panLinear,
      panLog,
      panPow,
      panSymlog,
      zoomLinear,
      zoomLog,
      zoomPow,
      zoomSymlog,
      encode: encode$1,
      modify
    };

    const eventFunctions = ['view', 'item', 'group', 'xy', 'x', 'y'], // event functions
          eventPrefix = 'event.vega.', // event function prefix
          thisPrefix = 'this.', // function context prefix
          astVisitors = {}; // AST visitors for dependency analysis

    // Build expression function registry
    function buildFunctions(codegen) {
      const fn = functions(codegen);
      eventFunctions.forEach(name => fn[name] = eventPrefix + name);
      for (let name in functionContext) { fn[name] = thisPrefix + name; }
      return fn;
    }

    // Register an expression function
    function expressionFunction(name, fn, visitor) {
      if (arguments.length === 1) {
        return functionContext[name];
      }

      // register with the functionContext
      functionContext[name] = fn;

      // if there is an astVisitor register that, too
      if (visitor) astVisitors[name] = visitor;

      // if the code generator has already been initialized,
      // we need to also register the function with it
      if (codeGenerator) codeGenerator.functions[name] = thisPrefix + name;
      return this;
    }

    // register expression functions with ast visitors
    expressionFunction('bandwidth', bandwidth, scaleVisitor);
    expressionFunction('copy', copy$2, scaleVisitor);
    expressionFunction('domain', domain, scaleVisitor);
    expressionFunction('range', range$5, scaleVisitor);
    expressionFunction('invert', invert, scaleVisitor);
    expressionFunction('scale', scale$2, scaleVisitor);
    expressionFunction('gradient', scaleGradient, scaleVisitor);
    expressionFunction('geoArea', geoArea, scaleVisitor);
    expressionFunction('geoBounds', geoBounds, scaleVisitor);
    expressionFunction('geoCentroid', geoCentroid, scaleVisitor);
    expressionFunction('geoShape', geoShape, scaleVisitor);
    expressionFunction('indata', indata, indataVisitor);
    expressionFunction('data', data$1, dataVisitor);
    expressionFunction('treePath', treePath, dataVisitor);
    expressionFunction('treeAncestors', treeAncestors, dataVisitor);

    // register Vega-Lite selection functions
    expressionFunction('vlSelectionTest', selectionTest, selectionVisitor);
    expressionFunction('vlSelectionResolve', selectionResolve, selectionVisitor);

    // Export code generator and parameters
    const codegenParams = {
      blacklist:  ['_'],
      whitelist:  ['datum', 'event', 'item'],
      fieldvar:   'datum',
      globalvar:  function(id) { return '_[' + $(SignalPrefix + id) + ']'; },
      functions:  buildFunctions,
      constants:  constants,
      visitors:   astVisitors
    };

    var codeGenerator = codegen(codegenParams);

    /**
     * Parse an expression given the argument signature and body code.
     */
    function expression(args, code, ctx) {
      // wrap code in return statement if expression does not terminate
      if (code[code.length-1] !== ';') {
        code = 'return(' + code + ');';
      }
      var fn = Function.apply(null, args.concat(code));
      return ctx && ctx.functions ? fn.bind(ctx.functions) : fn;
    }

    /**
     * Parse an expression used to update an operator value.
     */
    function operatorExpression(code, ctx) {
      return expression(['_'], code, ctx);
    }

    /**
     * Parse an expression provided as an operator parameter value.
     */
    function parameterExpression(code, ctx) {
      return expression(['datum', '_'], code, ctx);
    }

    /**
     * Parse an expression applied to an event stream.
     */
    function eventExpression(code, ctx) {
      return expression(['event'], code, ctx);
    }

    /**
     * Parse an expression used to handle an event-driven operator update.
     */
    function handlerExpression(code, ctx) {
      return expression(['_', 'event'], code, ctx);
    }

    /**
     * Parse an expression that performs visual encoding.
     */
    function encodeExpression(code, ctx) {
      return expression(['item', '_'], code, ctx);
    }

    /**
     * Parse a set of operator parameters.
     */
    function parseParameters(spec, ctx, params) {
      params = params || {};
      var key, value;

      for (key in spec) {
        value = spec[key];

        params[key] = isArray(value)
          ? value.map(function(v) { return parseParameter(v, ctx, params); })
          : parseParameter(value, ctx, params);
      }
      return params;
    }

    /**
     * Parse a single parameter.
     */
    function parseParameter(spec, ctx, params) {
      if (!spec || !isObject(spec)) return spec;

      for (var i=0, n=PARSERS.length, p; i<n; ++i) {
        p = PARSERS[i];
        if (spec.hasOwnProperty(p.key)) {
          return p.parse(spec, ctx, params);
        }
      }
      return spec;
    }

    /** Reference parsers. */
    var PARSERS = [
      {key: '$ref',      parse: getOperator},
      {key: '$key',      parse: getKey},
      {key: '$expr',     parse: getExpression},
      {key: '$field',    parse: getField$1},
      {key: '$encode',   parse: getEncode},
      {key: '$compare',  parse: getCompare},
      {key: '$context',  parse: getContext},
      {key: '$subflow',  parse: getSubflow},
      {key: '$tupleid',  parse: getTupleId}
    ];

    /**
     * Resolve an operator reference.
     */
    function getOperator(_, ctx) {
      return ctx.get(_.$ref) || error('Operator not defined: ' + _.$ref);
    }

    /**
     * Resolve an expression reference.
     */
    function getExpression(_, ctx, params) {
      if (_.$params) { // parse expression parameters
        parseParameters(_.$params, ctx, params);
      }
      var k = 'e:' + _.$expr + '_' + _.$name;
      return ctx.fn[k]
        || (ctx.fn[k] = accessor(parameterExpression(_.$expr, ctx), _.$fields, _.$name));
    }

    /**
     * Resolve a key accessor reference.
     */
    function getKey(_, ctx) {
      var k = 'k:' + _.$key + '_' + (!!_.$flat);
      return ctx.fn[k] || (ctx.fn[k] = key(_.$key, _.$flat));
    }

    /**
     * Resolve a field accessor reference.
     */
    function getField$1(_, ctx) {
      if (!_.$field) return null;
      var k = 'f:' + _.$field + '_' + _.$name;
      return ctx.fn[k] || (ctx.fn[k] = field(_.$field, _.$name));
    }

    /**
     * Resolve a comparator function reference.
     */
    function getCompare(_, ctx) {
      var k = 'c:' + _.$compare + '_' + _.$order,
          c = array(_.$compare).map(function(_) {
            return (_ && _.$tupleid) ? tupleid : _;
          });
      return ctx.fn[k] || (ctx.fn[k] = compare(c, _.$order));
    }

    /**
     * Resolve an encode operator reference.
     */
    function getEncode(_, ctx) {
      var spec = _.$encode,
          encode = {}, name, enc;

      for (name in spec) {
        enc = spec[name];
        encode[name] = accessor(encodeExpression(enc.$expr, ctx), enc.$fields);
        encode[name].output = enc.$output;
      }
      return encode;
    }

    /**
     * Resolve a context reference.
     */
    function getContext(_, ctx) {
      return ctx;
    }

    /**
     * Resolve a recursive subflow specification.
     */
    function getSubflow(_, ctx) {
      var spec = _.$subflow;
      return function(dataflow, key, parent) {
        var subctx = parseDataflow(spec, ctx.fork()),
            op = subctx.get(spec.operators[0].id),
            p = subctx.signals.parent;
        if (p) p.set(parent);
        return op;
      };
    }

    /**
     * Resolve a tuple id reference.
     */
    function getTupleId() {
      return tupleid;
    }

    function canonicalType(type) {
      return (type + '').toLowerCase();
    }
    function isOperator(type) {
       return canonicalType(type) === 'operator';
    }

    function isCollect(type) {
      return canonicalType(type) === 'collect';
    }

    /**
     * Parse a dataflow operator.
     */
    function parseOperator(spec, ctx) {
      if (isOperator(spec.type) || !spec.type) {
        ctx.operator(spec,
          spec.update ? operatorExpression(spec.update, ctx) : null);
      } else {
        ctx.transform(spec, spec.type);
      }
    }

    /**
     * Parse and assign operator parameters.
     */
    function parseOperatorParameters(spec, ctx) {
      if (spec.params) {
        var op = ctx.get(spec.id);
        if (!op) error('Invalid operator id: ' + spec.id);
        ctx.dataflow.connect(op, op.parameters(
          parseParameters(spec.params, ctx),
          spec.react,
          spec.initonly
        ));
      }
    }

    /**
     * Parse an event stream specification.
     */
    function parseStream(spec, ctx) {
      var filter = spec.filter != null ? eventExpression(spec.filter, ctx) : undefined,
          stream = spec.stream != null ? ctx.get(spec.stream) : undefined,
          args;

      if (spec.source) {
        stream = ctx.events(spec.source, spec.type, filter);
      }
      else if (spec.merge) {
        args = spec.merge.map(ctx.get.bind(ctx));
        stream = args[0].merge.apply(args[0], args.slice(1));
      }

      if (spec.between) {
        args = spec.between.map(ctx.get.bind(ctx));
        stream = stream.between(args[0], args[1]);
      }

      if (spec.filter) {
        stream = stream.filter(filter);
      }

      if (spec.throttle != null) {
        stream = stream.throttle(+spec.throttle);
      }

      if (spec.debounce != null) {
        stream = stream.debounce(+spec.debounce);
      }

      if (stream == null) {
        error('Invalid stream definition: ' + JSON.stringify(spec));
      }

      if (spec.consume) stream.consume(true);

      ctx.stream(spec, stream);
    }

    /**
     * Parse an event-driven operator update.
     */
    function parseUpdate(spec, ctx) {
      var srcid = isObject(srcid = spec.source) ? srcid.$ref : srcid,
          source = ctx.get(srcid),
          target = null,
          update = spec.update,
          params = undefined;

      if (!source) error('Source not defined: ' + spec.source);

      if (spec.target && spec.target.$expr) {
        target = eventExpression(spec.target.$expr, ctx);
      } else {
        target = ctx.get(spec.target);
      }

      if (update && update.$expr) {
        if (update.$params) {
          params = parseParameters(update.$params, ctx);
        }
        update = handlerExpression(update.$expr, ctx);
      }

      ctx.update(spec, source, target, update, params);
    }

    /**
     * Parse a serialized dataflow specification.
     */
    function parseDataflow(spec, ctx) {
      var operators = spec.operators || [];

      // parse background
      if (spec.background) {
        ctx.background = spec.background;
      }

      // parse event configuration
      if (spec.eventConfig) {
        ctx.eventConfig = spec.eventConfig;
      }

      // parse operators
      operators.forEach(function(entry) {
        parseOperator(entry, ctx);
      });

      // parse operator parameters
      operators.forEach(function(entry) {
        parseOperatorParameters(entry, ctx);
      });

      // parse streams
      (spec.streams || []).forEach(function(entry) {
        parseStream(entry, ctx);
      });

      // parse updates
      (spec.updates || []).forEach(function(entry) {
        parseUpdate(entry, ctx);
      });

      return ctx.resolve();
    }

    var SKIP$3 = {skip: true};

    function getState(options) {
      var ctx = this,
          state = {};

      if (options.signals) {
        var signals = (state.signals = {});
        Object.keys(ctx.signals).forEach(function(key) {
          var op = ctx.signals[key];
          if (options.signals(key, op)) {
            signals[key] = op.value;
          }
        });
      }

      if (options.data) {
        var data = (state.data = {});
        Object.keys(ctx.data).forEach(function(key) {
          var dataset = ctx.data[key];
          if (options.data(key, dataset)) {
            data[key] = dataset.input.value;
          }
        });
      }

      if (ctx.subcontext && options.recurse !== false) {
        state.subcontext = ctx.subcontext.map(function(ctx) {
          return ctx.getState(options);
        });
      }

      return state;
    }

    function setState(state) {
      var ctx = this,
          df = ctx.dataflow,
          data = state.data,
          signals = state.signals;

      Object.keys(signals || {}).forEach(function(key) {
        df.update(ctx.signals[key], signals[key], SKIP$3);
      });

      Object.keys(data || {}).forEach(function(key) {
        df.pulse(
          ctx.data[key].input,
          df.changeset().remove(truthy).insert(data[key])
        );
      });

      (state.subcontext  || []).forEach(function(substate, i) {
        var subctx = ctx.subcontext[i];
        if (subctx) subctx.setState(substate);
      });
    }

    /**
     * Context objects store the current parse state.
     * Enables lookup of parsed operators, event streams, accessors, etc.
     * Provides a 'fork' method for creating child contexts for subflows.
     */
    function context$4(df, transforms, functions) {
      return new Context(df, transforms, functions);
    }

    function Context(df, transforms, functions) {
      this.dataflow = df;
      this.transforms = transforms;
      this.events = df.events.bind(df);
      this.signals = {};
      this.scales = {};
      this.nodes = {};
      this.data = {};
      this.fn = {};
      if (functions) {
        this.functions = Object.create(functions);
        this.functions.context = this;
      }
    }

    function ContextFork(ctx) {
      this.dataflow = ctx.dataflow;
      this.transforms = ctx.transforms;
      this.functions = ctx.functions;
      this.events = ctx.events;
      this.signals = Object.create(ctx.signals);
      this.scales = Object.create(ctx.scales);
      this.nodes = Object.create(ctx.nodes);
      this.data = Object.create(ctx.data);
      this.fn = Object.create(ctx.fn);
      if (ctx.functions) {
        this.functions = Object.create(ctx.functions);
        this.functions.context = this;
      }
    }

    Context.prototype = ContextFork.prototype = {
      fork: function() {
        var ctx = new ContextFork(this);
        (this.subcontext || (this.subcontext = [])).push(ctx);
        return ctx;
      },
      get: function(id) {
        return this.nodes[id];
      },
      set: function(id, node) {
        return this.nodes[id] = node;
      },
      add: function(spec, op) {
        var ctx = this,
            df = ctx.dataflow,
            data;

        ctx.set(spec.id, op);

        if (isCollect(spec.type) && (data = spec.value)) {
          if (data.$ingest) {
            df.ingest(op, data.$ingest, data.$format);
          } else if (data.$request) {
            df.preload(op, data.$request, data.$format);
          } else {
            df.pulse(op, df.changeset().insert(data));
          }
        }

        if (spec.root) {
          ctx.root = op;
        }

        if (spec.parent) {
          var p = ctx.get(spec.parent.$ref);
          if (p) {
            df.connect(p, [op]);
            op.targets().add(p);
          } else {
            (ctx.unresolved = ctx.unresolved || []).push(function() {
              p = ctx.get(spec.parent.$ref);
              df.connect(p, [op]);
              op.targets().add(p);
            });
          }
        }

        if (spec.signal) {
          ctx.signals[spec.signal] = op;
        }

        if (spec.scale) {
          ctx.scales[spec.scale] = op;
        }

        if (spec.data) {
          for (var name in spec.data) {
            data = ctx.data[name] || (ctx.data[name] = {});
            spec.data[name].forEach(function(role) { data[role] = op; });
          }
        }
      },
      resolve: function() {
        (this.unresolved || []).forEach(function(fn) { fn(); });
        delete this.unresolved;
        return this;
      },
      operator: function(spec, update) {
        this.add(spec, this.dataflow.add(spec.value, update));
      },
      transform: function(spec, type) {
        this.add(spec, this.dataflow.add(this.transforms[canonicalType(type)]));
      },
      stream: function(spec, stream) {
        this.set(spec.id, stream);
      },
      update: function(spec, stream, target, update, params) {
        this.dataflow.on(stream, target, update, params, spec.options);
      },
      getState: getState,
      setState: setState
    };

    function runtime(view, spec, functions) {
      var fn = functions || functionContext;
      return parseDataflow(spec, context$4(view, transforms, fn));
    }

    function scale$4(name) {
      var scales = this._runtime.scales;
      if (!scales.hasOwnProperty(name)) {
        error('Unrecognized scale or projection: ' + name);
      }
      return scales[name].value;
    }

    var Width = 'width',
        Height = 'height',
        Padding$1 = 'padding',
        Skip = {skip: true};

    function viewWidth(view, width) {
      var a = view.autosize(),
          p = view.padding();
      return width - (a && a.contains === Padding$1 ? p.left + p.right : 0);
    }

    function viewHeight(view, height) {
      var a = view.autosize(),
          p = view.padding();
      return height - (a && a.contains === Padding$1 ? p.top + p.bottom : 0);
    }

    function initializeResize(view) {
      var s = view._signals,
          w = s[Width],
          h = s[Height],
          p = s[Padding$1];

      function resetSize() {
        view._autosize = view._resize = 1;
      }

      // respond to width signal
      view._resizeWidth = view.add(null,
        function(_) {
          view._width = _.size;
          view._viewWidth = viewWidth(view, _.size);
          resetSize();
        },
        {size: w}
      );

      // respond to height signal
      view._resizeHeight = view.add(null,
        function(_) {
          view._height = _.size;
          view._viewHeight = viewHeight(view, _.size);
          resetSize();
        },
        {size: h}
      );

      // respond to padding signal
      var resizePadding = view.add(null, resetSize, {pad: p});

      // set rank to run immediately after source signal
      view._resizeWidth.rank = w.rank + 1;
      view._resizeHeight.rank = h.rank + 1;
      resizePadding.rank = p.rank + 1;
    }

    function resizeView(viewWidth, viewHeight, width, height, origin, auto) {
      this.runAfter(function(view) {
        var rerun = 0;

        // reset autosize flag
        view._autosize = 0;

        // width value changed: update signal, skip resize op
        if (view.width() !== width) {
          rerun = 1;
          view.signal(Width, width, Skip); // set width, skip update calc
          view._resizeWidth.skip(true); // skip width resize handler
        }

        // height value changed: update signal, skip resize op
        if (view.height() !== height) {
          rerun = 1;
          view.signal(Height, height, Skip); // set height, skip update calc
          view._resizeHeight.skip(true); // skip height resize handler
        }

        // view width changed: update view property, set resize flag
        if (view._viewWidth !== viewWidth) {
          view._resize = 1;
          view._viewWidth = viewWidth;
        }

        // view height changed: update view property, set resize flag
        if (view._viewHeight !== viewHeight) {
          view._resize = 1;
          view._viewHeight = viewHeight;
        }

        // origin changed: update view property, set resize flag
        if (view._origin[0] !== origin[0] || view._origin[1] !== origin[1]) {
          view._resize = 1;
          view._origin = origin;
        }

        // run dataflow on width/height signal change
        if (rerun) view.run('enter');
        if (auto) view.runAfter(v => v.resize());
      }, false, 1);
    }

    /**
     * Get the current view state, consisting of signal values and/or data sets.
     * @param {object} [options] - Options flags indicating which state to export.
     *   If unspecified, all signals and data sets will be exported.
     * @param {function(string, Operator):boolean} [options.signals] - Optional
     *   predicate function for testing if a signal should be included in the
     *   exported state. If unspecified, all signals will be included, except for
     *   those named 'parent' or those which refer to a Transform value.
     * @param {function(string, object):boolean} [options.data] - Optional
     *   predicate function for testing if a data set's input should be included
     *   in the exported state. If unspecified, all data sets that have been
     *   explicitly modified will be included.
     * @param {boolean} [options.recurse=true] - Flag indicating if the exported
     *   state should recursively include state from group mark sub-contexts.
     * @return {object} - An object containing the exported state values.
     */
    function getState$1(options) {
      return this._runtime.getState(options || {
        data:    dataTest,
        signals: signalTest,
        recurse: true
      });
    }

    function dataTest(name, data) {
      return data.modified
          && isArray(data.input.value)
          && name.indexOf('_:vega:_');
    }

    function signalTest(name, op) {
      return !(name === 'parent' || op instanceof transforms.proxy);
    }

    /**
     * Sets the current view state and updates the view by invoking run.
     * @param {object} state - A state object containing signal and/or
     *   data set values, following the format used by the getState method.
     * @return {View} - This view instance.
     */
    function setState$1(state) {
      this.runAsync(null,
        v => { v._trigger = false; v._runtime.setState(state); },
        v => { v._trigger = true; }
      );
      return this;
    }

    function timer$1(callback, delay) {
      function tick(elapsed) {
        callback({timestamp: Date.now(), elapsed: elapsed});
      }
      this._timers.push(interval$1(tick, delay));
    }

    function defaultTooltip$2(handler, event, item, value) {
      var el = handler.element();
      if (el) el.setAttribute('title', formatTooltip(value));
    }

    function formatTooltip(value) {
      return value == null ? ''
        : isArray(value) ? formatArray(value)
        : isObject(value) && !isDate(value) ? formatObject(value)
        : value + '';
    }

    function formatObject(obj) {
      return Object.keys(obj).map(function(key) {
        var v = obj[key];
        return key + ': ' + (isArray(v) ? formatArray(v) : formatValue$1(v));
      }).join('\n');
    }

    function formatArray(value) {
      return '[' + value.map(formatValue$1).join(', ') + ']';
    }

    function formatValue$1(value) {
      return isArray(value) ? '[\u2026]'
        : isObject(value) && !isDate(value) ? '{\u2026}'
        : value;
    }

    /**
     * Create a new View instance from a Vega dataflow runtime specification.
     * The generated View will not immediately be ready for display. Callers
     * should also invoke the initialize method (e.g., to set the parent
     * DOM element in browser-based deployment) and then invoke the run
     * method to evaluate the dataflow graph. Rendering will automatically
     * be peformed upon dataflow runs.
     * @constructor
     * @param {object} spec - The Vega dataflow runtime specification.
     */
    function View(spec, options) {
      var view = this;
      options = options || {};

      Dataflow.call(view);
      view.loader(options.loader || view._loader);
      view.logLevel(options.logLevel || 0);

      view._el = null;
      view._elBind = null;
      view._renderType = options.renderer || RenderType.Canvas;
      view._scenegraph = new Scenegraph();
      var root = view._scenegraph.root;

      // initialize renderer, handler and event management
      view._renderer = null;
      view._tooltip = options.tooltip || defaultTooltip$2,
      view._redraw = true;
      view._handler = new CanvasHandler().scene(root);
      view._preventDefault = false;
      view._timers = [];
      view._eventListeners = [];
      view._resizeListeners = [];

      // initialize dataflow graph
      var ctx = runtime(view, spec, options.functions);
      view._runtime = ctx;
      view._signals = ctx.signals;
      view._bind = (spec.bindings || []).map(function(_) {
        return {
          state: null,
          param: extend({}, _)
        };
      });

      // initialize scenegraph
      if (ctx.root) ctx.root.set(root);
      root.source = ctx.data.root.input;
      view.pulse(
        ctx.data.root.input,
        view.changeset().insert(root.items)
      );

      // initialize background color
      view._background = options.background || ctx.background || null;

      // initialize event configuration
      view._eventConfig = initializeEventConfig(ctx.eventConfig);

      // initialize view size
      view._width = view.width();
      view._height = view.height();
      view._viewWidth = viewWidth(view, view._width);
      view._viewHeight = viewHeight(view, view._height);
      view._origin = [0, 0];
      view._resize = 0;
      view._autosize = 1;
      initializeResize(view);

      // initialize cursor
      cursor(view);

      // initialize hover proessing, if requested
      if (options.hover) view.hover();

      // initialize DOM container(s) and renderer
      if (options.container) view.initialize(options.container, options.bind);
    }

    var prototype$1t = inherits(View, Dataflow);

    // -- DATAFLOW / RENDERING ----

    prototype$1t.evaluate = async function(encode, prerun, postrun) {
      // evaluate dataflow and prerun
      await Dataflow.prototype.evaluate.call(this, encode, prerun);

      // render as needed
      if (this._redraw || this._resize) {
        try {
          if (this._renderer) {
            if (this._resize) {
              this._resize = 0;
              resizeRenderer(this);
            }
            await this._renderer.renderAsync(this._scenegraph.root);
          }
          this._redraw = false;
        } catch (e) {
          this.error(e);
        }
      }

      // evaluate postrun
      if (postrun) asyncCallback(this, postrun);

      return this;
    };

    prototype$1t.dirty = function(item) {
      this._redraw = true;
      this._renderer && this._renderer.dirty(item);
    };

    // -- GET / SET ----

    prototype$1t.container = function() {
      return this._el;
    };

    prototype$1t.scenegraph = function() {
      return this._scenegraph;
    };

    prototype$1t.origin = function() {
      return this._origin.slice();
    };

    function lookupSignal(view, name) {
      return view._signals.hasOwnProperty(name)
        ? view._signals[name]
        : error('Unrecognized signal name: ' + $(name));
    }

    prototype$1t.signal = function(name, value, options) {
      var op = lookupSignal(this, name);
      return arguments.length === 1
        ? op.value
        : this.update(op, value, options);
    };

    prototype$1t.background = function(_) {
      if (arguments.length) {
        this._background = _;
        this._resize = 1;
        return this;
      } else {
        return this._background;
      }
    };

    prototype$1t.width = function(_) {
      return arguments.length ? this.signal('width', _) : this.signal('width');
    };

    prototype$1t.height = function(_) {
      return arguments.length ? this.signal('height', _) : this.signal('height');
    };

    prototype$1t.padding = function(_) {
      return arguments.length ? this.signal('padding', _) : this.signal('padding');
    };

    prototype$1t.autosize = function(_) {
      return arguments.length ? this.signal('autosize', _) : this.signal('autosize');
    };

    prototype$1t.renderer = function(type) {
      if (!arguments.length) return this._renderType;
      if (!renderModule(type)) error('Unrecognized renderer type: ' + type);
      if (type !== this._renderType) {
        this._renderType = type;
        this._resetRenderer();
      }
      return this;
    };

    prototype$1t.tooltip = function(handler) {
      if (!arguments.length) return this._tooltip;
      if (handler !== this._tooltip) {
        this._tooltip = handler;
        this._resetRenderer();
      }
      return this;
    };

    prototype$1t.loader = function(loader) {
      if (!arguments.length) return this._loader;
      if (loader !== this._loader) {
        Dataflow.prototype.loader.call(this, loader);
        this._resetRenderer();
      }
      return this;
    };

    prototype$1t.resize = function() {
      // set flag to perform autosize
      this._autosize = 1;
      // touch autosize signal to ensure top-level ViewLayout runs
      return this.touch(lookupSignal(this, 'autosize'));
    };

    prototype$1t._resetRenderer = function() {
      if (this._renderer) {
        this._renderer = null;
        this.initialize(this._el, this._elBind);
      }
    };

    // -- SIZING ----
    prototype$1t._resizeView = resizeView;

    // -- EVENT HANDLING ----

    prototype$1t.addEventListener = function(type, handler, options) {
      var callback = handler;
      if (!(options && options.trap === false)) {
        // wrap callback in error handler
        callback = trap(this, handler);
        callback.raw = handler;
      }
      this._handler.on(type, callback);
      return this;
    };

    prototype$1t.removeEventListener = function(type, handler) {
      var handlers = this._handler.handlers(type),
          i = handlers.length, h, t;

      // search registered handlers, remove if match found
      while (--i >= 0) {
        t = handlers[i].type;
        h = handlers[i].handler;
        if (type === t && (handler === h || handler === h.raw)) {
          this._handler.off(t, h);
          break;
        }
      }
      return this;
    };

    prototype$1t.addResizeListener = function(handler) {
      var l = this._resizeListeners;
      if (l.indexOf(handler) < 0) {
        // add handler if it isn't already registered
        // note: error trapping handled elsewhere, so
        // no need to wrap handlers here
        l.push(handler);
      }
      return this;
    };

    prototype$1t.removeResizeListener = function(handler) {
      var l = this._resizeListeners,
          i = l.indexOf(handler);
      if (i >= 0) {
        l.splice(i, 1);
      }
      return this;
    };

    function findOperatorHandler(op, handler) {
      var t = op._targets || [],
          h = t.filter(function(op) {
                var u = op._update;
                return u && u.handler === handler;
              });
      return h.length ? h[0] : null;
    }

    function addOperatorListener(view, name, op, handler) {
      var h = findOperatorHandler(op, handler);
      if (!h) {
        h = trap(this, function() { handler(name, op.value); });
        h.handler = handler;
        view.on(op, null, h);
      }
      return view;
    }

    function removeOperatorListener(view, op, handler) {
      var h = findOperatorHandler(op, handler);
      if (h) op._targets.remove(h);
      return view;
    }

    prototype$1t.addSignalListener = function(name, handler) {
      return addOperatorListener(this, name, lookupSignal(this, name), handler);
    };

    prototype$1t.removeSignalListener = function(name, handler) {
      return removeOperatorListener(this, lookupSignal(this, name), handler);
    };

    prototype$1t.addDataListener = function(name, handler) {
      return addOperatorListener(this, name, dataref(this, name).values, handler);
    };

    prototype$1t.removeDataListener = function(name, handler) {
      return removeOperatorListener(this, dataref(this, name).values, handler);
    };

    prototype$1t.preventDefault = function(_) {
      if (arguments.length) {
        this._preventDefault = _;
        return this;
      } else {
        return this._preventDefault;
      }
    };

    prototype$1t.timer = timer$1;
    prototype$1t.events = events$1;
    prototype$1t.finalize = finalize;
    prototype$1t.hover = hover;

    // -- DATA ----
    prototype$1t.data = data;
    prototype$1t.change = change;
    prototype$1t.insert = insert;
    prototype$1t.remove = remove;

    // -- SCALES --
    prototype$1t.scale = scale$4;

    // -- INITIALIZATION ----
    prototype$1t.initialize = initialize$1;

    // -- HEADLESS RENDERING ----
    prototype$1t.toImageURL = renderToImageURL;
    prototype$1t.toCanvas = renderToCanvas;
    prototype$1t.toSVG = renderToSVG;

    // -- SAVE / RESTORE STATE ----
    prototype$1t.getState = getState$1;
    prototype$1t.setState = setState$1;

    function expression$1(expr, scope, preamble) {
      var params = {}, ast, gen;

      // parse the expression to an abstract syntax tree (ast)
      try {
        expr = isString(expr) ? expr : ($(expr) + '');
        ast = parse$3(expr);
      } catch (err) {
        error('Expression parse error: ' + expr);
      }

      // analyze ast function calls for dependencies
      ast.visit(function visitor(node) {
        if (node.type !== CallExpression) return;
        var name = node.callee.name,
            visit = codegenParams.visitors[name];
        if (visit) visit(name, node.arguments, scope, params);
      });

      // perform code generation
      gen = codeGenerator(ast);

      // collect signal dependencies
      gen.globals.forEach(function(name) {
        var signalName = SignalPrefix + name;
        if (!params.hasOwnProperty(signalName) && scope.getSignal(name)) {
          params[signalName] = scope.signalRef(name);
        }
      });

      // return generated expression code and dependencies
      return {
        $expr:   preamble ? preamble + 'return(' + gen.code + ');' : gen.code,
        $fields: gen.fields,
        $params: params
      };
    }

    function Entry(type, value, params, parent) {
      this.id = -1;
      this.type = type;
      this.value = value;
      this.params = params;
      if (parent) this.parent = parent;
    }

    function entry(type, value, params, parent) {
      return new Entry(type, value, params, parent);
    }

    function operator(value, params) {
      return entry('operator', value, params);
    }

    // -----

    function ref(op) {
      var ref = {$ref: op.id};
      // if operator not yet registered, cache ref to resolve later
      if (op.id < 0) (op.refs = op.refs || []).push(ref);
      return ref;
    }

    var tupleidRef = {
      $tupleid: 1,
      toString: function() { return ':_tupleid_:'; }
    };

    function fieldRef(field, name) {
      return name ? {$field: field, $name: name} : {$field: field};
    }

    var keyFieldRef = fieldRef('key');

    function compareRef(fields, orders) {
      return {$compare: fields, $order: orders};
    }

    function keyRef(fields, flat) {
      var ref = {$key: fields};
      if (flat) ref.$flat = true;
      return ref;
    }

    // -----

    var Ascending  = 'ascending';

    var Descending = 'descending';

    function sortKey(sort) {
      return !isObject(sort) ? ''
        : (sort.order === Descending ? '-' : '+')
          + aggrField(sort.op, sort.field);
    }

    function aggrField(op, field) {
      return (op && op.signal ? '$' + op.signal : op || '')
        + (op && field ? '_' : '')
        + (field && field.signal ? '$' + field.signal : field || '');
    }

    function isSignal(_) {
      return _ && _.signal;
    }

    /**
     * Parse an event selector string.
     * Returns an array of event stream definitions.
     */
    function selector(selector, source, marks) {
      DEFAULT_SOURCE = source || VIEW$1;
      MARKS = marks || DEFAULT_MARKS;
      return parseMerge(selector.trim()).map(parseSelector);
    }

    var VIEW$1    = 'view',
        LBRACK  = '[',
        RBRACK  = ']',
        LBRACE  = '{',
        RBRACE  = '}',
        COLON   = ':',
        COMMA   = ',',
        NAME    = '@',
        GT      = '>',
        ILLEGAL$1 = /[[\]{}]/,
        DEFAULT_SOURCE,
        MARKS,
        DEFAULT_MARKS = {
          '*': 1,
          arc: 1,
          area: 1,
          group: 1,
          image: 1,
          line: 1,
          path: 1,
          rect: 1,
          rule: 1,
          shape: 1,
          symbol: 1,
          text: 1,
          trail: 1
        };

    function isMarkType(type) {
      return MARKS.hasOwnProperty(type);
    }

    function find$1(s, i, endChar, pushChar, popChar) {
      var count = 0,
          n = s.length,
          c;
      for (; i<n; ++i) {
        c = s[i];
        if (!count && c === endChar) return i;
        else if (popChar && popChar.indexOf(c) >= 0) --count;
        else if (pushChar && pushChar.indexOf(c) >= 0) ++count;
      }
      return i;
    }

    function parseMerge(s) {
      var output = [],
          start = 0,
          n = s.length,
          i = 0;

      while (i < n) {
        i = find$1(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);
        output.push(s.substring(start, i).trim());
        start = ++i;
      }

      if (output.length === 0) {
        throw 'Empty event selector: ' + s;
      }
      return output;
    }

    function parseSelector(s) {
      return s[0] === '['
        ? parseBetween(s)
        : parseStream$1(s);
    }

    function parseBetween(s) {
      var n = s.length,
          i = 1,
          b, stream;

      i = find$1(s, i, RBRACK, LBRACK, RBRACK);
      if (i === n) {
        throw 'Empty between selector: ' + s;
      }

      b = parseMerge(s.substring(1, i));
      if (b.length !== 2) {
        throw 'Between selector must have two elements: ' + s;
      }

      s = s.slice(i + 1).trim();
      if (s[0] !== GT) {
        throw 'Expected \'>\' after between selector: ' + s;
      }

      b = b.map(parseSelector);

      stream = parseSelector(s.slice(1).trim());
      if (stream.between) {
        return {
          between: b,
          stream: stream
        };
      } else {
        stream.between = b;
      }

      return stream;
    }

    function parseStream$1(s) {
      var stream = {source: DEFAULT_SOURCE},
          source = [],
          throttle = [0, 0],
          markname = 0,
          start = 0,
          n = s.length,
          i = 0, j,
          filter;

      // extract throttle from end
      if (s[n-1] === RBRACE) {
        i = s.lastIndexOf(LBRACE);
        if (i >= 0) {
          try {
            throttle = parseThrottle(s.substring(i+1, n-1));
          } catch (e) {
            throw 'Invalid throttle specification: ' + s;
          }
          s = s.slice(0, i).trim();
          n = s.length;
        } else throw 'Unmatched right brace: ' + s;
        i = 0;
      }

      if (!n) throw s;

      // set name flag based on first char
      if (s[0] === NAME) markname = ++i;

      // extract first part of multi-part stream selector
      j = find$1(s, i, COLON);
      if (j < n) {
        source.push(s.substring(start, j).trim());
        start = i = ++j;
      }

      // extract remaining part of stream selector
      i = find$1(s, i, LBRACK);
      if (i === n) {
        source.push(s.substring(start, n).trim());
      } else {
        source.push(s.substring(start, i).trim());
        filter = [];
        start = ++i;
        if (start === n) throw 'Unmatched left bracket: ' + s;
      }

      // extract filters
      while (i < n) {
        i = find$1(s, i, RBRACK);
        if (i === n) throw 'Unmatched left bracket: ' + s;
        filter.push(s.substring(start, i).trim());
        if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;
        start = ++i;
      }

      // marshall event stream specification
      if (!(n = source.length) || ILLEGAL$1.test(source[n-1])) {
        throw 'Invalid event selector: ' + s;
      }

      if (n > 1) {
        stream.type = source[1];
        if (markname) {
          stream.markname = source[0].slice(1);
        } else if (isMarkType(source[0])) {
          stream.marktype = source[0];
        } else {
          stream.source = source[0];
        }
      } else {
        stream.type = source[0];
      }
      if (stream.type.slice(-1) === '!') {
        stream.consume = true;
        stream.type = stream.type.slice(0, -1);
      }
      if (filter != null) stream.filter = filter;
      if (throttle[0]) stream.throttle = throttle[0];
      if (throttle[1]) stream.debounce = throttle[1];

      return stream;
    }

    function parseThrottle(s) {
      var a = s.split(COMMA);
      if (!s.length || a.length > 2) throw s;
      return a.map(function(_) {
        var x = +_;
        if (x !== x) throw s;
        return x;
      });
    }

    function transform$1(name) {
      return function(params, value, parent) {
        return entry(name, value, params || undefined, parent);
      };
    }

    var Aggregate$1 = transform$1('aggregate');
    var Collect$1 = transform$1('collect');
    var Compare$1 = transform$1('compare');
    var Expression$1 = transform$1('expression');
    var Field$1 = transform$1('field');
    var Key$1 = transform$1('key');
    var Projection$1 = transform$1('projection');
    var Proxy$1 = transform$1('proxy');
    var Scale$1 = transform$1('scale');
    var Sieve$1 = transform$1('sieve');

    const Left$1 = 'left';
    const Right$1 = 'right';
    const Center$1 = 'center';

    const Start$1 = 'start';
    const End$1 = 'end';

    var Skip$1 = toSet(['rule']),
        Swap = toSet(['group', 'image', 'rect']);

    function anchorExpr(s, e, m) {
      return `item.anchor === "${Start$1}" ? ${s} : item.anchor === "${End$1}" ? ${e} : ${m}`;
    }

    const alignExpr = anchorExpr(
      $(Left$1),
      $(Right$1),
      $(Center$1)
    );

    function DataScope(scope, input, output, values, aggr) {
      this.scope = scope;   // parent scope object
      this.input = input;   // first operator in pipeline (tuple input)
      this.output = output; // last operator in pipeline (tuple output)
      this.values = values; // operator for accessing tuples (but not tuple flow)

      // last aggregate in transform pipeline
      this.aggregate = aggr;

      // lookup table of field indices
      this.index = {};
    }

    DataScope.fromEntries = function(scope, entries) {
      var n = entries.length,
          i = 1,
          input  = entries[0],
          values = entries[n-1],
          output = entries[n-2],
          aggr = null;

      if (input && input.type === 'load') {
        input = entries[1];
      }

      // add operator entries to this scope, wire up pulse chain
      scope.add(entries[0]);
      for (; i<n; ++i) {
        entries[i].params.pulse = ref(entries[i-1]);
        scope.add(entries[i]);
        if (entries[i].type === 'aggregate') aggr = entries[i];
      }

      return new DataScope(scope, input, output, values, aggr);
    };

    var prototype$1u = DataScope.prototype;

    prototype$1u.countsRef = function(scope, field, sort) {
      var ds = this,
          cache = ds.counts || (ds.counts = {}),
          k = fieldKey(field), v, a, p;

      if (k != null) {
        scope = ds.scope;
        v = cache[k];
      }

      if (!v) {
        p = {
          groupby: scope.fieldRef(field, 'key'),
          pulse: ref(ds.output)
        };
        if (sort && sort.field) addSortField(scope, p, sort);
        a = scope.add(Aggregate$1(p));
        v = scope.add(Collect$1({pulse: ref(a)}));
        v = {agg: a, ref: ref(v)};
        if (k != null) cache[k] = v;
      } else if (sort && sort.field) {
        addSortField(scope, v.agg.params, sort);
      }

      return v.ref;
    };

    function fieldKey(field) {
      return isString(field) ? field : null;
    }

    function addSortField(scope, p, sort) {
      var as = aggrField(sort.op, sort.field), s;

      if (p.ops) {
        for (var i=0, n=p.as.length; i<n; ++i) {
          if (p.as[i] === as) return;
        }
      } else {
        p.ops = ['count'];
        p.fields = [null];
        p.as = ['count'];
      }
      if (sort.op) {
        p.ops.push((s=sort.op.signal) ? scope.signalRef(s) : sort.op);
        p.fields.push(scope.fieldRef(sort.field));
        p.as.push(as);
      }
    }

    function cache(scope, ds, name, optype, field, counts, index) {
      var cache = ds[name] || (ds[name] = {}),
          sort = sortKey(counts),
          k = fieldKey(field), v, op;

      if (k != null) {
        scope = ds.scope;
        k = k + (sort ? '|' + sort : '');
        v = cache[k];
      }

      if (!v) {
        var params = counts
          ? {field: keyFieldRef, pulse: ds.countsRef(scope, field, counts)}
          : {field: scope.fieldRef(field), pulse: ref(ds.output)};
        if (sort) params.sort = scope.sortRef(counts);
        op = scope.add(entry(optype, undefined, params));
        if (index) ds.index[field] = op;
        v = ref(op);
        if (k != null) cache[k] = v;
      }
      return v;
    }

    prototype$1u.tuplesRef = function() {
      return ref(this.values);
    };

    prototype$1u.extentRef = function(scope, field) {
      return cache(scope, this, 'extent', 'extent', field, false);
    };

    prototype$1u.domainRef = function(scope, field) {
      return cache(scope, this, 'domain', 'values', field, false);
    };

    prototype$1u.valuesRef = function(scope, field, sort) {
      return cache(scope, this, 'vals', 'values', field, sort || true);
    };

    prototype$1u.lookupRef = function(scope, field) {
      return cache(scope, this, 'lookup', 'tupleindex', field, false);
    };

    prototype$1u.indataRef = function(scope, field) {
      return cache(scope, this, 'indata', 'tupleindex', field, true, true);
    };

    var defined = toSet(['width', 'height', 'padding', 'autosize']);

    function Scope(config) {
      this.config = config;

      this.bindings = [];
      this.field = {};
      this.signals = {};
      this.lambdas = {};
      this.scales = {};
      this.events = {};
      this.data = {};

      this.streams = [];
      this.updates = [];
      this.operators = [];
      this.background = null;
      this.eventConfig = null;

      this._id = 0;
      this._subid = 0;
      this._nextsub = [0];

      this._parent = [];
      this._encode = [];
      this._lookup = [];
      this._markpath = [];
    }

    function Subscope(scope) {
      this.config = scope.config;
      this.legends = scope.legends;

      this.field = Object.create(scope.field);
      this.signals = Object.create(scope.signals);
      this.lambdas = Object.create(scope.lambdas);
      this.scales = Object.create(scope.scales);
      this.events = Object.create(scope.events);
      this.data = Object.create(scope.data);

      this.streams = [];
      this.updates = [];
      this.operators = [];

      this._id = 0;
      this._subid = ++scope._nextsub[0];
      this._nextsub = scope._nextsub;

      this._parent = scope._parent.slice();
      this._encode = scope._encode.slice();
      this._lookup = scope._lookup.slice();
      this._markpath = scope._markpath;
    }

    var prototype$1v = Scope.prototype = Subscope.prototype;

    // ----

    prototype$1v.fork = function() {
      return new Subscope(this);
    };

    prototype$1v.isSubscope = function() {
      return this._subid > 0;
    };

    prototype$1v.toRuntime = function() {
      this.finish();
      return {
        background:  this.background,
        operators:   this.operators,
        streams:     this.streams,
        updates:     this.updates,
        bindings:    this.bindings,
        eventConfig: this.eventConfig
      };
    };

    prototype$1v.id = function() {
      return (this._subid ? this._subid + ':' : 0) + this._id++;
    };

    prototype$1v.add = function(op) {
      this.operators.push(op);
      op.id = this.id();
      // if pre-registration references exist, resolve them now
      if (op.refs) {
        op.refs.forEach(function(ref) { ref.$ref = op.id; });
        op.refs = null;
      }
      return op;
    };

    prototype$1v.proxy = function(op) {
      var vref = op instanceof Entry ? ref(op) : op;
      return this.add(Proxy$1({value: vref}));
    };

    prototype$1v.addStream = function(stream) {
      this.streams.push(stream);
      stream.id = this.id();
      return stream;
    };

    prototype$1v.addUpdate = function(update) {
      this.updates.push(update);
      return update;
    };

    // Apply metadata
    prototype$1v.finish = function() {
      var name, ds;

      // annotate root
      if (this.root) this.root.root = true;

      // annotate signals
      for (name in this.signals) {
        this.signals[name].signal = name;
      }

      // annotate scales
      for (name in this.scales) {
        this.scales[name].scale = name;
      }

      // annotate data sets
      function annotate(op, name, type) {
        var data, list;
        if (op) {
          data = op.data || (op.data = {});
          list = data[name] || (data[name] = []);
          list.push(type);
        }
      }
      for (name in this.data) {
        ds = this.data[name];
        annotate(ds.input,  name, 'input');
        annotate(ds.output, name, 'output');
        annotate(ds.values, name, 'values');
        for (var field in ds.index) {
          annotate(ds.index[field], name, 'index:' + field);
        }
      }

      return this;
    };

    // ----

    prototype$1v.pushState = function(encode, parent, lookup) {
      this._encode.push(ref(this.add(Sieve$1({pulse: encode}))));
      this._parent.push(parent);
      this._lookup.push(lookup ? ref(this.proxy(lookup)) : null);
      this._markpath.push(-1);
    };

    prototype$1v.popState = function() {
      this._encode.pop();
      this._parent.pop();
      this._lookup.pop();
      this._markpath.pop();
    };

    prototype$1v.parent = function() {
      return peek(this._parent);
    };

    prototype$1v.encode = function() {
      return peek(this._encode);
    };

    prototype$1v.lookup = function() {
      return peek(this._lookup);
    };

    prototype$1v.markpath = function() {
      var p = this._markpath;
      return ++p[p.length-1];
    };

    // ----

    prototype$1v.fieldRef = function(field, name) {
      if (isString(field)) return fieldRef(field, name);
      if (!field.signal) {
        error('Unsupported field reference: ' + $(field));
      }

      var s = field.signal,
          f = this.field[s],
          params;

      if (!f) {
        params = {name: this.signalRef(s)};
        if (name) params.as = name;
        this.field[s] = f = ref(this.add(Field$1(params)));
      }
      return f;
    };

    prototype$1v.compareRef = function(cmp, stable) {
      function check(_) {
        if (isSignal(_)) {
          signal = true;
          return scope.signalRef(_.signal);
        } else {
          return _;
        }
      }

      var scope = this,
          signal = false,
          fields = array(cmp.field).map(check),
          orders = array(cmp.order).map(check);

      if (stable) {
        fields.push(tupleidRef);
      }

      return signal
        ? ref(this.add(Compare$1({fields: fields, orders: orders})))
        : compareRef(fields, orders);
    };

    prototype$1v.keyRef = function(fields, flat) {
      function check(_) {
        if (isSignal(_)) {
          signal = true;
          return ref(sig[_.signal]);
        } else {
          return _;
        }
      }

      var sig = this.signals,
          signal = false;
      fields = array(fields).map(check);

      return signal
        ? ref(this.add(Key$1({fields: fields, flat: flat})))
        : keyRef(fields, flat);
    };

    prototype$1v.sortRef = function(sort) {
      if (!sort) return sort;

      // including id ensures stable sorting
      var a = [aggrField(sort.op, sort.field), tupleidRef],
          o = sort.order || Ascending;

      return o.signal
        ? ref(this.add(Compare$1({
            fields: a,
            orders: [o = this.signalRef(o.signal), o]
          })))
        : compareRef(a, [o, o]);
    };

    // ----

    prototype$1v.event = function(source, type) {
      var key = source + ':' + type;
      if (!this.events[key]) {
        var id = this.id();
        this.streams.push({
          id: id,
          source: source,
          type: type
        });
        this.events[key] = id;
      }
      return this.events[key];
    };

    // ----

    prototype$1v.addSignal = function(name, value) {
      if (this.signals.hasOwnProperty(name)) {
        error('Duplicate signal name: ' + $(name));
      }
      var op = value instanceof Entry ? value : this.add(operator(value));
      return this.signals[name] = op;
    };

    prototype$1v.getSignal = function(name) {
      if (!this.signals[name]) {
        error('Unrecognized signal name: ' + $(name));
      }
      return this.signals[name];
    };

    prototype$1v.signalRef = function(s) {
      if (this.signals[s]) {
        return ref(this.signals[s]);
      } else if (!this.lambdas.hasOwnProperty(s)) {
        this.lambdas[s] = this.add(operator(null));
      }
      return ref(this.lambdas[s]);
    };

    prototype$1v.parseLambdas = function() {
      var code = Object.keys(this.lambdas);
      for (var i=0, n=code.length; i<n; ++i) {
        var s = code[i],
            e = expression$1(s, this),
            op = this.lambdas[s];
        op.params = e.$params;
        op.update = e.$expr;
      }
    };

    prototype$1v.property = function(spec) {
      return spec && spec.signal ? this.signalRef(spec.signal) : spec;
    };

    prototype$1v.objectProperty = function(spec) {
      return (!spec || !isObject(spec)) ? spec
        : this.signalRef(spec.signal || propertyLambda(spec));
    };

    function propertyLambda(spec) {
      return (isArray(spec) ? arrayLambda : objectLambda)(spec);
    }

    function arrayLambda(array) {
      var code = '[',
          i = 0,
          n = array.length,
          value;

      for (; i<n; ++i) {
        value = array[i];
        code += (i > 0 ? ',' : '')
          + (isObject(value)
            ? (value.signal || propertyLambda(value))
            : $(value));
      }
      return code + ']';
    }

    function objectLambda(obj) {
      var code = '{',
          i = 0,
          key, value;

      for (key in obj) {
        value = obj[key];
        code += (++i > 1 ? ',' : '')
          + $(key) + ':'
          + (isObject(value)
            ? (value.signal || propertyLambda(value))
            : $(value));
      }
      return code + '}';
    }

    prototype$1v.exprRef = function(code, name) {
      var params = {expr: expression$1(code, this)};
      if (name) params.expr.$name = name;
      return ref(this.add(Expression$1(params)));
    };

    prototype$1v.addBinding = function(name, bind) {
      if (!this.bindings) {
        error('Nested signals do not support binding: ' + $(name));
      }
      this.bindings.push(extend({signal: name}, bind));
    };

    // ----

    prototype$1v.addScaleProj = function(name, transform) {
      if (this.scales.hasOwnProperty(name)) {
        error('Duplicate scale or projection name: ' + $(name));
      }
      this.scales[name] = this.add(transform);
    };

    prototype$1v.addScale = function(name, params) {
      this.addScaleProj(name, Scale$1(params));
    };

    prototype$1v.addProjection = function(name, params) {
      this.addScaleProj(name, Projection$1(params));
    };

    prototype$1v.getScale = function(name) {
      if (!this.scales[name]) {
        error('Unrecognized scale name: ' + $(name));
      }
      return this.scales[name];
    };

    prototype$1v.projectionRef =
    prototype$1v.scaleRef = function(name) {
      return ref(this.getScale(name));
    };

    prototype$1v.projectionType =
    prototype$1v.scaleType = function(name) {
      return this.getScale(name).params.type;
    };

    // ----

    prototype$1v.addData = function(name, dataScope) {
      if (this.data.hasOwnProperty(name)) {
        error('Duplicate data set name: ' + $(name));
      }
      return (this.data[name] = dataScope);
    };

    prototype$1v.getData = function(name) {
      if (!this.data[name]) {
        error('Undefined data set name: ' + $(name));
      }
      return this.data[name];
    };

    prototype$1v.addDataPipeline = function(name, entries) {
      if (this.data.hasOwnProperty(name)) {
        error('Duplicate data set name: ' + $(name));
      }
      return this.addData(name, DataScope.fromEntries(this, entries));
    };

    // -- Transforms -----
    extend(transforms, tx, vtx, encode, geo, force, tree$1, voronoi$1, wordcloud, xf);

    function isAnyConcatSpec(spec) {
        return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);
    }
    function isConcatSpec(spec) {
        return spec['concat'] !== undefined;
    }
    function isVConcatSpec(spec) {
        return spec['vconcat'] !== undefined;
    }
    function isHConcatSpec(spec) {
        return spec['hconcat'] !== undefined;
    }

    function isRepeatSpec(spec) {
        return spec['repeat'] !== undefined;
    }

    const DEFAULT_SPACING = 20;
    const COMPOSITION_LAYOUT_INDEX = {
        align: 1,
        bounds: 1,
        center: 1,
        columns: 1,
        spacing: 1
    };
    const COMPOSITION_LAYOUT_PROPERTIES = flagKeys(COMPOSITION_LAYOUT_INDEX);
    function extractCompositionLayout(spec, specType, config) {
        const compositionConfig = config[specType];
        const layout = {};
        // Apply config first
        const { spacing: spacingConfig, columns } = compositionConfig;
        if (spacingConfig !== undefined) {
            layout.spacing = spacingConfig;
        }
        if (columns !== undefined) {
            if ((isFacetSpec(spec) && !isFacetMapping(spec.facet)) ||
                (isRepeatSpec(spec) && isArray(spec.repeat)) ||
                isConcatSpec(spec)) {
                layout.columns = columns;
            }
        }
        // Then copy properties from the spec
        for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {
            if (spec[prop] !== undefined) {
                if (prop === 'spacing') {
                    const spacing = spec[prop];
                    layout[prop] = isNumber(spacing)
                        ? spacing
                        : {
                            row: spacing.row || spacingConfig,
                            column: spacing.column || spacingConfig
                        };
                }
                else {
                    layout[prop] = spec[prop];
                }
            }
        }
        return layout;
    }

    function extractTitleConfig(titleConfig) {
        const { 
        // These are non-mark title config that need to be hardcoded
        anchor, frame, offset, orient, 
        // color needs to be redirect to fill
        color } = titleConfig, 
        // The rest are mark config.
        titleMarkConfig = __rest(titleConfig, ["anchor", "frame", "offset", "orient", "color"]);
        const mark = Object.assign({}, titleMarkConfig, (color ? { fill: color } : {}));
        const nonMark = Object.assign({}, (anchor ? { anchor } : {}), (frame ? { frame } : {}), (offset ? { offset } : {}), (orient ? { orient } : {}));
        return { mark, nonMark };
    }

    const defaultViewConfig = {
        width: 200,
        height: 200
    };
    const defaultConfig$1 = {
        padding: 5,
        timeFormat: '%b %d, %Y',
        countTitle: 'Count of Records',
        invalidValues: 'filter',
        view: defaultViewConfig,
        mark: defaultMarkConfig,
        area: {},
        bar: defaultBarConfig,
        circle: {},
        geoshape: {},
        line: {},
        point: {},
        rect: {},
        rule: { color: 'black' },
        square: {},
        text: { color: 'black' },
        tick: defaultTickConfig,
        trail: {},
        boxplot: {
            size: 14,
            extent: 1.5,
            box: {},
            median: { color: 'white' },
            outliers: {},
            rule: {},
            ticks: null
        },
        errorbar: {
            center: 'mean',
            rule: true,
            ticks: false
        },
        errorband: {
            band: {
                opacity: 0.3
            },
            borders: false
        },
        scale: defaultScaleConfig,
        projection: {},
        axis: {},
        axisX: {},
        axisY: {},
        axisLeft: {},
        axisRight: {},
        axisTop: {},
        axisBottom: {},
        axisBand: {},
        legend: defaultLegendConfig,
        selection: defaultConfig,
        style: {},
        title: {},
        facet: { spacing: DEFAULT_SPACING },
        repeat: { spacing: DEFAULT_SPACING },
        concat: { spacing: DEFAULT_SPACING }
    };
    function initConfig(config) {
        return mergeDeep(duplicate(defaultConfig$1), config);
    }
    const MARK_STYLES = ['view', ...PRIMITIVE_MARKS];
    const VL_ONLY_CONFIG_PROPERTIES = [
        'padding',
        'facet',
        'concat',
        'repeat',
        'numberFormat',
        'timeFormat',
        'countTitle',
        'stack',
        'scale',
        'selection',
        'invalidValues',
        'overlay' // FIXME: Redesign and unhide this
    ];
    const VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({ view: ['width', 'height'] }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);
    function stripAndRedirectConfig(config) {
        config = duplicate(config);
        for (const prop of VL_ONLY_CONFIG_PROPERTIES) {
            delete config[prop];
        }
        // Remove Vega-Lite only axis/legend config
        if (config.axis) {
            for (const prop of VL_ONLY_GUIDE_CONFIG) {
                delete config.axis[prop];
            }
        }
        if (config.legend) {
            for (const prop of VL_ONLY_GUIDE_CONFIG) {
                delete config.legend[prop];
            }
            for (const prop of VL_ONLY_LEGEND_CONFIG) {
                delete config.legend[prop];
            }
        }
        // Remove Vega-Lite only generic mark config
        if (config.mark) {
            for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
                delete config.mark[prop];
            }
        }
        for (const markType of MARK_STYLES) {
            // Remove Vega-Lite-only mark config
            for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {
                delete config[markType][prop];
            }
            // Remove Vega-Lite only mark-specific config
            const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];
            if (vlOnlyMarkSpecificConfigs) {
                for (const prop of vlOnlyMarkSpecificConfigs) {
                    delete config[markType][prop];
                }
            }
            // Redirect mark config to config.style so that mark config only affect its own mark type
            // without affecting other marks that share the same underlying Vega marks.
            // For example, config.rect should not affect bar marks.
            redirectConfig(config, markType);
        }
        for (const m of getAllCompositeMarks()) {
            // Clean up the composite mark config as we don't need them in the output specs anymore
            delete config[m];
        }
        // Redirect config.title -- so that title config do not
        // affect header labels, which also uses `title` directive to implement.
        redirectConfig(config, 'title', 'group-title');
        // Remove empty config objects
        for (const prop in config) {
            if (isObject(config[prop]) && keys(config[prop]).length === 0) {
                delete config[prop];
            }
        }
        return keys(config).length > 0 ? config : undefined;
    }
    function redirectConfig(config, prop, // string = composite mark
    toProp, compositeMarkPart) {
        const propConfig = prop === 'title'
            ? extractTitleConfig(config.title).mark
            : compositeMarkPart
                ? config[prop][compositeMarkPart]
                : config[prop];
        if (prop === 'view') {
            toProp = 'cell'; // View's default style is "cell"
        }
        const style = Object.assign({}, propConfig, config.style[prop]);
        // set config.style if it is not an empty object
        if (keys(style).length > 0) {
            config.style[toProp || prop] = style;
        }
        if (!compositeMarkPart) {
            // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.
            delete config[prop];
        }
    }

    function isLayerSpec(spec) {
        return spec['layer'] !== undefined;
    }

    class SpecMapper {
        map(spec, params) {
            if (isFacetSpec(spec)) {
                return this.mapFacet(spec, params);
            }
            else if (isRepeatSpec(spec)) {
                return this.mapRepeat(spec, params);
            }
            else if (isHConcatSpec(spec)) {
                return this.mapHConcat(spec, params);
            }
            else if (isVConcatSpec(spec)) {
                return this.mapVConcat(spec, params);
            }
            else if (isConcatSpec(spec)) {
                return this.mapConcat(spec, params);
            }
            else {
                return this.mapLayerOrUnit(spec, params);
            }
        }
        mapLayerOrUnit(spec, params) {
            if (isLayerSpec(spec)) {
                return this.mapLayer(spec, params);
            }
            else if (isUnitSpec(spec)) {
                return this.mapUnit(spec, params);
            }
            throw new Error(message.INVALID_SPEC);
        }
        mapLayer(spec, params) {
            return Object.assign({}, spec, { layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params)) });
        }
        mapHConcat(spec, params) {
            return Object.assign({}, spec, { hconcat: spec.hconcat.map(subspec => this.map(subspec, params)) });
        }
        mapVConcat(spec, params) {
            return Object.assign({}, spec, { vconcat: spec.vconcat.map(subspec => this.map(subspec, params)) });
        }
        mapConcat(spec, params) {
            const { concat } = spec, rest = __rest(spec, ["concat"]);
            return Object.assign({}, rest, { concat: concat.map(subspec => this.map(subspec, params)) });
        }
        mapFacet(spec, params) {
            return Object.assign({}, spec, { 
                // TODO: remove "any" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760
                spec: this.map(spec.spec, params) });
        }
        mapRepeat(spec, params) {
            return Object.assign({}, spec, { spec: this.map(spec.spec, params) });
        }
    }

    const STACK_OFFSET_INDEX = {
        zero: 1,
        center: 1,
        normalize: 1
    };
    function isStackOffset(s) {
        return !!STACK_OFFSET_INDEX[s];
    }
    const STACKABLE_MARKS = [BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK];
    const STACK_BY_DEFAULT_MARKS = [BAR, AREA];
    function potentialStackedChannel(encoding) {
        const xDef = encoding.x;
        const yDef = encoding.y;
        if (isFieldDef(xDef) && isFieldDef(yDef)) {
            if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {
                if (xDef.stack) {
                    return 'x';
                }
                else if (yDef.stack) {
                    return 'y';
                }
                // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y
                if (!!xDef.aggregate !== !!yDef.aggregate) {
                    return xDef.aggregate ? 'x' : 'y';
                }
            }
            else if (xDef.type === 'quantitative') {
                return 'x';
            }
            else if (yDef.type === 'quantitative') {
                return 'y';
            }
        }
        else if (isFieldDef(xDef) && xDef.type === 'quantitative') {
            return 'x';
        }
        else if (isFieldDef(yDef) && yDef.type === 'quantitative') {
            return 'y';
        }
        return undefined;
    }
    // Note: CompassQL uses this method and only pass in required properties of each argument object.
    // If required properties change, make sure to update CompassQL.
    function stack(m, encoding, stackConfig) {
        const mark = isMarkDef(m) ? m.type : m;
        // Should have stackable mark
        if (!contains(STACKABLE_MARKS, mark)) {
            return null;
        }
        const fieldChannel = potentialStackedChannel(encoding);
        if (!fieldChannel) {
            return null;
        }
        const stackedFieldDef = encoding[fieldChannel];
        const stackedField = isStringFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;
        const dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';
        const dimensionDef = encoding[dimensionChannel];
        const dimensionField = isStringFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined;
        // Should have grouping level of detail that is different from the dimension field
        const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {
            // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)
            if (channel !== 'tooltip' && channelHasField(encoding, channel)) {
                const channelDef = encoding[channel];
                (isArray(channelDef) ? channelDef : [channelDef]).forEach(cDef => {
                    const fieldDef = getTypedFieldDef(cDef);
                    if (fieldDef.aggregate) {
                        return;
                    }
                    // Check whether the channel's field is identical to x/y's field or if the channel is a repeat
                    const f = isStringFieldDef(fieldDef) ? vgField(fieldDef, {}) : undefined;
                    if (
                    // if fielddef is a repeat, just include it in the stack by
                    !f ||
                        // otherwise, the field must be different from x and y fields.
                        (f !== dimensionField && f !== stackedField)) {
                        sc.push({ channel, fieldDef });
                    }
                });
            }
            return sc;
        }, []);
        if (stackBy.length === 0) {
            return null;
        }
        // Automatically determine offset
        let offset;
        if (stackedFieldDef.stack !== undefined) {
            offset = stackedFieldDef.stack;
        }
        else if (contains(STACK_BY_DEFAULT_MARKS, mark)) {
            // Bar and Area with sum ops are automatically stacked by default
            offset = getFirstDefined(stackConfig, 'zero');
        }
        else {
            offset = stackConfig;
        }
        if (!offset || !isStackOffset(offset)) {
            return null;
        }
        // warn when stacking non-linear
        if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {
            warn(message.cannotStackNonLinearScale(stackedFieldDef.scale.type));
        }
        // Check if it is a ranged mark
        if (channelHasField(encoding, fieldChannel === X ? X2 : Y2)) {
            if (stackedFieldDef.stack !== undefined) {
                warn(message.cannotStackRangedMark(fieldChannel));
            }
            return null;
        }
        // Warn if stacking summative aggregate
        if (stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {
            warn(message.stackNonSummativeAggregate(stackedFieldDef.aggregate));
        }
        return {
            groupbyChannel: dimensionDef ? dimensionChannel : undefined,
            fieldChannel,
            impute: isPathMark(mark),
            stackBy,
            offset
        };
    }

    function dropLineAndPoint(markDef) {
        const mark = __rest(markDef, ["point", "line"]);
        return keys(mark).length > 1 ? mark : mark.type;
    }
    function dropLineAndPointFromConfig(config) {
        for (const mark of ['line', 'area', 'rule', 'trail']) {
            if (config[mark]) {
                config = Object.assign({}, config, { [mark]: omit(config[mark], ['point', 'line']) });
            }
        }
        return config;
    }
    function getPointOverlay(markDef, markConfig = {}, encoding) {
        if (markDef.point === 'transparent') {
            return { opacity: 0 };
        }
        else if (markDef.point) {
            // truthy : true or object
            return isObject(markDef.point) ? markDef.point : {};
        }
        else if (markDef.point !== undefined) {
            // false or null
            return null;
        }
        else {
            // undefined (not disabled)
            if (markConfig.point || encoding.shape) {
                // enable point overlay if config[mark].point is truthy or if encoding.shape is provided
                return isObject(markConfig.point) ? markConfig.point : {};
            }
            // markDef.point is defined as falsy
            return undefined;
        }
    }
    function getLineOverlay(markDef, markConfig = {}) {
        if (markDef.line) {
            // true or object
            return markDef.line === true ? {} : markDef.line;
        }
        else if (markDef.line !== undefined) {
            // false or null
            return null;
        }
        else {
            // undefined (not disabled)
            if (markConfig.line) {
                // enable line overlay if config[mark].line is truthy
                return markConfig.line === true ? {} : markConfig.line;
            }
            // markDef.point is defined as falsy
            return undefined;
        }
    }
    class PathOverlayNormalizer {
        constructor() {
            this.name = 'path-overlay';
        }
        hasMatchingType(spec, config) {
            if (isUnitSpec(spec)) {
                const { mark, encoding } = spec;
                const markDef = isMarkDef(mark) ? mark : { type: mark };
                switch (markDef.type) {
                    case 'line':
                    case 'rule':
                    case 'trail':
                        return !!getPointOverlay(markDef, config[markDef.type], encoding);
                    case 'area':
                        return (
                        // false / null are also included as we want to remove the properties
                        !!getPointOverlay(markDef, config[markDef.type], encoding) ||
                            !!getLineOverlay(markDef, config[markDef.type]));
                }
            }
            return false;
        }
        run(spec, params, normalize) {
            const { config } = params;
            const { selection, projection, encoding, mark } = spec, outerSpec = __rest(spec, ["selection", "projection", "encoding", "mark"]);
            const markDef = isMarkDef(mark) ? mark : { type: mark };
            const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);
            const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);
            const layer = [
                Object.assign({}, (selection ? { selection } : {}), { 
                    // Do not include point / line overlay in the normalize spec
                    mark: dropLineAndPoint(Object.assign({}, markDef, (markDef.type === 'area' ? { opacity: 0.7 } : {}))), 
                    // drop shape from encoding as this might be used to trigger point overlay
                    encoding: omit(encoding, ['shape']) })
            ];
            // FIXME: determine rules for applying selections.
            // Need to copy stack config to overlayed layer
            const stackProps = stack(markDef, encoding, config ? config.stack : undefined);
            let overlayEncoding = encoding;
            if (stackProps) {
                const { fieldChannel: stackFieldChannel, offset } = stackProps;
                overlayEncoding = Object.assign({}, encoding, { [stackFieldChannel]: Object.assign({}, encoding[stackFieldChannel], (offset ? { stack: offset } : {})) });
            }
            if (lineOverlay) {
                layer.push(Object.assign({}, (projection ? { projection } : {}), { mark: Object.assign({ type: 'line' }, pick(markDef, ['clip', 'interpolate', 'tension']), lineOverlay), encoding: overlayEncoding }));
            }
            if (pointOverlay) {
                layer.push(Object.assign({}, (projection ? { projection } : {}), { mark: Object.assign({ type: 'point', opacity: 1, filled: true }, pick(markDef, ['clip']), pointOverlay), encoding: overlayEncoding }));
            }
            return normalize(Object.assign({}, outerSpec, { layer }), Object.assign({}, params, { config: dropLineAndPointFromConfig(config) }));
        }
    }

    class RuleForRangedLineNormalizer {
        constructor() {
            this.name = 'RuleForRangedLine';
        }
        hasMatchingType(spec) {
            if (isUnitSpec(spec)) {
                const { encoding, mark } = spec;
                return mark === 'line' && (!!encoding['x2'] || !!encoding['y2']);
            }
            return false;
        }
        run(spec, params, normalize) {
            const { encoding } = spec;
            warn(message.lineWithRange(!!encoding.x2, !!encoding.y2));
            return normalize(Object.assign({}, spec, { mark: 'rule' }), params);
        }
    }

    class CoreNormalizer extends SpecMapper {
        constructor() {
            super(...arguments);
            this.nonFacetUnitNormalizers = [
                boxPlotNormalizer,
                errorBarNormalizer,
                errorBandNormalizer,
                new PathOverlayNormalizer(),
                new RuleForRangedLineNormalizer()
            ];
        }
        map(spec, params) {
            // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.
            if (isUnitSpec(spec)) {
                const hasRow = channelHasField(spec.encoding, ROW);
                const hasColumn = channelHasField(spec.encoding, COLUMN);
                const hasFacet = channelHasField(spec.encoding, FACET);
                if (hasRow || hasColumn || hasFacet) {
                    return this.mapFacetedUnit(spec, params);
                }
            }
            return super.map(spec, params);
        }
        // This is for normalizing non-facet unit
        mapUnit(spec, params) {
            const { parentEncoding, parentProjection } = params;
            if (parentEncoding || parentProjection) {
                return this.mapUnitWithParentEncodingOrProjection(spec, params);
            }
            const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);
            for (const unitNormalizer of this.nonFacetUnitNormalizers) {
                if (unitNormalizer.hasMatchingType(spec, params.config)) {
                    return unitNormalizer.run(spec, params, normalizeLayerOrUnit);
                }
            }
            return spec;
        }
        mapRepeat(spec, params) {
            const { repeat } = spec;
            if (!isArray(repeat) && spec.columns) {
                // is repeat with row/column
                spec = omit(spec, ['columns']);
                warn(message.columnsNotSupportByRowCol('repeat'));
            }
            return Object.assign({}, spec, { spec: this.map(spec.spec, params) });
        }
        mapFacet(spec, params) {
            const { facet } = spec;
            if (isFacetMapping(facet) && spec.columns) {
                // is facet with row/column
                spec = omit(spec, ['columns']);
                warn(message.columnsNotSupportByRowCol('facet'));
            }
            return super.mapFacet(spec, params);
        }
        mapUnitWithParentEncodingOrProjection(spec, params) {
            const { encoding, projection } = spec;
            const { parentEncoding, parentProjection, config } = params;
            const mergedProjection = mergeProjection({ parentProjection, projection });
            const mergedEncoding = mergeEncoding({ parentEncoding, encoding });
            return this.mapUnit(Object.assign({}, spec, (mergedProjection ? { projection: mergedProjection } : {}), (mergedEncoding ? { encoding: mergedEncoding } : {})), { config });
        }
        mapFacetedUnit(spec, params) {
            // New encoding in the inside spec should not contain row / column
            // as row/column should be moved to facet
            const _a = spec.encoding, { row, column, facet } = _a, encoding = __rest(_a, ["row", "column", "facet"]);
            // Mark and encoding should be moved into the inner spec
            const { mark, width, projection, height, selection, encoding: _ } = spec, outerSpec = __rest(spec, ["mark", "width", "projection", "height", "selection", "encoding"]);
            if (facet && (row || column)) {
                warn(message.facetChannelDropped([...(row ? [ROW] : []), ...(column ? [COLUMN] : [])]));
            }
            return Object.assign({}, outerSpec, { 
                // row / column has higher precedence than facet
                facet: row || column
                    ? Object.assign({}, (row ? { row } : {}), (column ? { column } : {})) : facet, spec: this.mapUnit(Object.assign({}, (projection ? { projection } : {}), { mark }, (width ? { width } : {}), (height ? { height } : {}), { encoding }, (selection ? { selection } : {})), params) });
        }
        mapLayer(spec, _a) {
            // Special handling for extended layer spec
            var { parentEncoding, parentProjection } = _a, otherParams = __rest(_a, ["parentEncoding", "parentProjection"]);
            const { encoding, projection } = spec, rest = __rest(spec, ["encoding", "projection"]);
            const params = Object.assign({}, otherParams, { parentEncoding: mergeEncoding({ parentEncoding, encoding }), parentProjection: mergeProjection({ parentProjection, projection }) });
            return super.mapLayer(rest, params);
        }
    }
    function mergeEncoding(opt) {
        const { parentEncoding, encoding } = opt;
        if (parentEncoding && encoding) {
            const overriden = keys(parentEncoding).reduce((o, key) => {
                if (encoding[key]) {
                    o.push(key);
                }
                return o;
            }, []);
            if (overriden.length > 0) {
                warn(message.encodingOverridden(overriden));
            }
        }
        const merged = Object.assign({}, (parentEncoding || {}), (encoding || {}));
        return keys(merged).length > 0 ? merged : undefined;
    }
    function mergeProjection(opt) {
        const { parentProjection, projection } = opt;
        if (parentProjection && projection) {
            warn(message.projectionOverridden({ parentProjection, projection }));
        }
        return projection || parentProjection;
    }

    function normalize$2(spec, config) {
        if (config === undefined) {
            config = initConfig(spec.config);
        }
        return normalizeGenericSpec(spec, config);
    }
    const normalizer = new CoreNormalizer();
    /**
     * Decompose extended unit specs into composition of pure unit specs.
     */
    function normalizeGenericSpec(spec, config = {}) {
        return normalizer.map(spec, { config });
    }

    /**
     * Definition for specifications in Vega-Lite.  In general, there are 3 variants of specs for each type of specs:
     * - Generic specs are generic versions of specs and they are parameterized differently for internal and external specs.
     * - The external specs (no prefix) would allow composite marks, row/column encodings, and mark macros like point/line overlay.
     * - The internal specs (with `Normalized` prefix) would only support primitive marks and support no macros/shortcuts.
     */

    function _normalizeAutoSize(autosize) {
        return isString(autosize) ? { type: autosize } : autosize || {};
    }
    function normalizeAutoSize(topLevelAutosize, configAutosize, isUnitOrLayer = true) {
        const autosize = Object.assign({ type: 'pad' }, _normalizeAutoSize(configAutosize), _normalizeAutoSize(topLevelAutosize));
        if (autosize.type === 'fit') {
            if (!isUnitOrLayer) {
                warn(message.FIT_NON_SINGLE);
                autosize.type = 'pad';
            }
        }
        return autosize;
    }
    const TOP_LEVEL_PROPERTIES = [
        'background',
        'padding'
        // We do not include "autosize" here as it is supported by only unit and layer specs and thus need to be normalized
    ];
    function extractTopLevelProperties(t) {
        return TOP_LEVEL_PROPERTIES.reduce((o, p) => {
            if (t && t[p] !== undefined) {
                o[p] = t[p];
            }
            return o;
        }, {});
    }

    function isUrlData(data) {
        return !!data['url'];
    }
    function isInlineData(data) {
        return !!data['values'];
    }
    function isNamedData(data) {
        return !!data['name'] && !isUrlData(data) && !isInlineData(data);
    }
    const MAIN = 'main';
    const RAW = 'raw';

    function isSelectionPredicate(predicate) {
        return predicate && predicate['selection'];
    }
    function isFieldEqualPredicate(predicate) {
        return predicate && !!predicate.field && predicate.equal !== undefined;
    }
    function isFieldLTPredicate(predicate) {
        return predicate && !!predicate.field && predicate.lt !== undefined;
    }
    function isFieldLTEPredicate(predicate) {
        return predicate && !!predicate.field && predicate.lte !== undefined;
    }
    function isFieldGTPredicate(predicate) {
        return predicate && !!predicate.field && predicate.gt !== undefined;
    }
    function isFieldGTEPredicate(predicate) {
        return predicate && !!predicate.field && predicate.gte !== undefined;
    }
    function isFieldRangePredicate(predicate) {
        if (predicate && predicate.field) {
            if (isArray(predicate.range) && predicate.range.length === 2) {
                return true;
            }
        }
        return false;
    }
    function isFieldOneOfPredicate(predicate) {
        return (predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility
        );
    }
    function isFieldValidPredicate(predicate) {
        return predicate && !!predicate.field && predicate.valid !== undefined;
    }
    function isFieldPredicate(predicate) {
        return (isFieldOneOfPredicate(predicate) ||
            isFieldEqualPredicate(predicate) ||
            isFieldRangePredicate(predicate) ||
            isFieldLTPredicate(predicate) ||
            isFieldGTPredicate(predicate) ||
            isFieldLTEPredicate(predicate) ||
            isFieldGTEPredicate(predicate));
    }
    function predicateValueExpr(v, timeUnit) {
        return valueExpr(v, { timeUnit, time: true });
    }
    function predicateValuesExpr(vals, timeUnit) {
        return vals.map(v => predicateValueExpr(v, timeUnit));
    }
    // This method is used by Voyager.  Do not change its behavior without changing Voyager.
    function fieldFilterExpression(predicate, useInRange = true) {
        const { field, timeUnit } = predicate;
        const fieldExpr$1 = timeUnit
            ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.
                // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline
                // TODO: support utc
                'time(' + fieldExpr(timeUnit, field) + ')'
            : vgField(predicate, { expr: 'datum' });
        if (isFieldEqualPredicate(predicate)) {
            return fieldExpr$1 + '===' + predicateValueExpr(predicate.equal, timeUnit);
        }
        else if (isFieldLTPredicate(predicate)) {
            const upper = predicate.lt;
            return `${fieldExpr$1}<${predicateValueExpr(upper, timeUnit)}`;
        }
        else if (isFieldGTPredicate(predicate)) {
            const lower = predicate.gt;
            return `${fieldExpr$1}>${predicateValueExpr(lower, timeUnit)}`;
        }
        else if (isFieldLTEPredicate(predicate)) {
            const upper = predicate.lte;
            return `${fieldExpr$1}<=${predicateValueExpr(upper, timeUnit)}`;
        }
        else if (isFieldGTEPredicate(predicate)) {
            const lower = predicate.gte;
            return `${fieldExpr$1}>=${predicateValueExpr(lower, timeUnit)}`;
        }
        else if (isFieldOneOfPredicate(predicate)) {
            return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(',')}], ${fieldExpr$1}) !== -1`;
        }
        else if (isFieldValidPredicate(predicate)) {
            return predicate.valid ? `${fieldExpr$1}!==null&&!isNaN(${fieldExpr$1})` : `${fieldExpr$1}===null||isNaN(${fieldExpr$1})`;
        }
        else if (isFieldRangePredicate(predicate)) {
            const lower = predicate.range[0];
            const upper = predicate.range[1];
            if (lower !== null && upper !== null && useInRange) {
                return ('inrange(' +
                    fieldExpr$1 +
                    ', [' +
                    predicateValueExpr(lower, timeUnit) +
                    ', ' +
                    predicateValueExpr(upper, timeUnit) +
                    '])');
            }
            const exprs = [];
            if (lower !== null) {
                exprs.push(`${fieldExpr$1} >= ${predicateValueExpr(lower, timeUnit)}`);
            }
            if (upper !== null) {
                exprs.push(`${fieldExpr$1} <= ${predicateValueExpr(upper, timeUnit)}`);
            }
            return exprs.length > 0 ? exprs.join(' && ') : 'true';
        }
        /* istanbul ignore next: it should never reach here */
        throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);
    }
    function normalizePredicate(f) {
        if (isFieldPredicate(f) && f.timeUnit) {
            return Object.assign({}, f, { timeUnit: normalizeTimeUnit(f.timeUnit) });
        }
        return f;
    }

    function isFilter(t) {
        return t['filter'] !== undefined;
    }
    function isImputeSequence(t) {
        return t && t['start'] !== undefined && t['stop'] !== undefined;
    }
    function isLookup(t) {
        return t['lookup'] !== undefined;
    }
    function isSample(t) {
        return t['sample'] !== undefined;
    }
    function isWindow(t) {
        return t['window'] !== undefined;
    }
    function isJoinAggregate(t) {
        return t['joinaggregate'] !== undefined;
    }
    function isFlatten(t) {
        return t['flatten'] !== undefined;
    }
    function isCalculate(t) {
        return t['calculate'] !== undefined;
    }
    function isBin(t) {
        return !!t['bin'];
    }
    function isImpute(t) {
        return t['impute'] !== undefined;
    }
    function isTimeUnit(t) {
        return t['timeUnit'] !== undefined;
    }
    function isAggregate$1(t) {
        return t['aggregate'] !== undefined;
    }
    function isStack(t) {
        return t['stack'] !== undefined;
    }
    function isFold(t) {
        return t['fold'] !== undefined;
    }
    function normalizeTransform(transform) {
        return transform.map(t => {
            if (isFilter(t)) {
                return {
                    filter: normalizeLogicalOperand(t.filter, normalizePredicate)
                };
            }
            return t;
        });
    }

    function isSignalRef(o) {
        return !!o['signal'];
    }
    function isVgRangeStep(range) {
        return !!range['step'];
    }
    function isDataRefUnionedDomain(domain) {
        if (!isArray(domain)) {
            return 'fields' in domain && !('data' in domain);
        }
        return false;
    }
    function isFieldRefUnionDomain(domain) {
        if (!isArray(domain)) {
            return 'fields' in domain && 'data' in domain;
        }
        return false;
    }
    function isDataRefDomain(domain) {
        if (!isArray(domain)) {
            return 'field' in domain && 'data' in domain;
        }
        return false;
    }
    const VG_MARK_CONFIG_INDEX = {
        opacity: 1,
        fill: 1,
        fillOpacity: 1,
        stroke: 1,
        strokeCap: 1,
        strokeWidth: 1,
        strokeOpacity: 1,
        strokeDash: 1,
        strokeDashOffset: 1,
        strokeJoin: 1,
        strokeMiterLimit: 1,
        size: 1,
        shape: 1,
        interpolate: 1,
        tension: 1,
        orient: 1,
        align: 1,
        baseline: 1,
        text: 1,
        dir: 1,
        dx: 1,
        dy: 1,
        ellipsis: 1,
        limit: 1,
        radius: 1,
        theta: 1,
        angle: 1,
        font: 1,
        fontSize: 1,
        fontWeight: 1,
        fontStyle: 1,
        cursor: 1,
        href: 1,
        tooltip: 1,
        cornerRadius: 1,
        x: 1,
        y: 1,
        x2: 1,
        y2: 1
        // commented below are vg channel that do not have mark config.
        // xc'|'width'|'yc'|'height'
        // clip: 1,
        // endAngle: 1,
        // innerRadius: 1,
        // outerRadius: 1,
        // path: 1,
        // startAngle: 1,
        // url: 1,
    };
    const VG_MARK_CONFIGS = flagKeys(VG_MARK_CONFIG_INDEX);

    const AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];
    /**
     * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.
     * (Properties not listed are applicable for both)
     */
    const AXIS_PROPERTY_TYPE = {
        grid: 'grid',
        gridColor: 'grid',
        gridDash: 'grid',
        gridOpacity: 'grid',
        gridScale: 'grid',
        gridWidth: 'grid',
        orient: 'main',
        bandPosition: 'both',
        domain: 'main',
        domainColor: 'main',
        domainOpacity: 'main',
        domainWidth: 'main',
        format: 'main',
        labelAlign: 'main',
        labelAngle: 'main',
        labelBaseline: 'main',
        labelBound: 'main',
        labelColor: 'main',
        labelFlush: 'main',
        labelFlushOffset: 'main',
        labelFont: 'main',
        labelFontSize: 'main',
        labelFontWeight: 'main',
        labelLimit: 'main',
        labelOpacity: 'main',
        labelOverlap: 'main',
        labelPadding: 'main',
        labels: 'main',
        maxExtent: 'main',
        minExtent: 'main',
        offset: 'main',
        position: 'main',
        tickColor: 'main',
        tickExtra: 'main',
        tickOffset: 'both',
        tickOpacity: 'main',
        tickRound: 'main',
        ticks: 'main',
        tickSize: 'main',
        title: 'main',
        titleAlign: 'main',
        titleAngle: 'main',
        titleBaseline: 'main',
        titleColor: 'main',
        titleFont: 'main',
        titleFontSize: 'main',
        titleFontWeight: 'main',
        titleLimit: 'main',
        titleOpacity: 'main',
        titlePadding: 'main',
        titleX: 'main',
        titleY: 'main',
        tickWidth: 'both',
        tickCount: 'both',
        values: 'both',
        scale: 'both',
        zindex: 'both' // this is actually set afterward, so it doesn't matter
    };
    const COMMON_AXIS_PROPERTIES_INDEX = {
        orient: 1,
        bandPosition: 1,
        domain: 1,
        domainColor: 1,
        domainDash: 1,
        domainDashOffset: 1,
        domainOpacity: 1,
        domainWidth: 1,
        format: 1,
        grid: 1,
        gridColor: 1,
        gridDash: 1,
        gridDashOffset: 1,
        gridOpacity: 1,
        gridWidth: 1,
        labelAlign: 1,
        labelAngle: 1,
        labelBaseline: 1,
        labelBound: 1,
        labelColor: 1,
        labelFlush: 1,
        labelFlushOffset: 1,
        labelFont: 1,
        labelFontSize: 1,
        labelFontStyle: 1,
        labelFontWeight: 1,
        labelLimit: 1,
        labelOpacity: 1,
        labelOverlap: 1,
        labelPadding: 1,
        labels: 1,
        labelSeparation: 1,
        maxExtent: 1,
        minExtent: 1,
        offset: 1,
        position: 1,
        tickColor: 1,
        tickCount: 1,
        tickDash: 1,
        tickDashOffset: 1,
        tickExtra: 1,
        tickMinStep: 1,
        tickOffset: 1,
        tickOpacity: 1,
        tickRound: 1,
        ticks: 1,
        tickSize: 1,
        tickWidth: 1,
        title: 1,
        titleAlign: 1,
        titleAnchor: 1,
        titleAngle: 1,
        titleBaseline: 1,
        titleColor: 1,
        titleFont: 1,
        titleFontSize: 1,
        titleFontStyle: 1,
        titleFontWeight: 1,
        titleLimit: 1,
        titleOpacity: 1,
        titlePadding: 1,
        titleX: 1,
        titleY: 1,
        values: 1,
        zindex: 1
    };
    const AXIS_PROPERTIES_INDEX = Object.assign({}, COMMON_AXIS_PROPERTIES_INDEX, { encoding: 1 });
    const VG_AXIS_PROPERTIES_INDEX = Object.assign({ gridScale: 1, scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX, { encode: 1 });
    function isAxisProperty(prop) {
        return !!AXIS_PROPERTIES_INDEX[prop];
    }
    const VG_AXIS_PROPERTIES = flagKeys(VG_AXIS_PROPERTIES_INDEX);

    function assembleTitle(title, config) {
        if (isArray(title)) {
            return title.map(fieldDef => defaultTitle(fieldDef, config)).join(', ');
        }
        return title;
    }
    function assembleAxis(axisCmpt, kind, config, opt = { header: false }) {
        const _a = axisCmpt.combine(), { orient, scale, title, zindex } = _a, axis = __rest(_a, ["orient", "scale", "title", "zindex"]);
        // Remove properties that are not valid for this kind of axis
        keys(axis).forEach(key => {
            const propType = AXIS_PROPERTY_TYPE[key];
            if (propType && propType !== kind && propType !== 'both') {
                delete axis[key];
            }
        });
        if (kind === 'grid') {
            if (!axis.grid) {
                return undefined;
            }
            // Remove unnecessary encode block
            if (axis.encode) {
                // Only need to keep encode block for grid
                const { grid } = axis.encode;
                axis.encode = Object.assign({}, (grid ? { grid } : {}));
                if (keys(axis.encode).length === 0) {
                    delete axis.encode;
                }
            }
            return Object.assign({ scale,
                orient }, axis, { domain: false, labels: false, 
                // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`
                // would not affect gridAxis
                maxExtent: 0, minExtent: 0, ticks: false, zindex: getFirstDefined(zindex, 0) // put grid behind marks by default
             });
        }
        else {
            // kind === 'main'
            if (!opt.header && axisCmpt.mainExtracted) {
                // if mainExtracted has been extracted to a separate facet
                return undefined;
            }
            // Remove unnecessary encode block
            if (axis.encode) {
                for (const part of AXIS_PARTS) {
                    if (!axisCmpt.hasAxisPart(part)) {
                        delete axis.encode[part];
                    }
                }
                if (keys(axis.encode).length === 0) {
                    delete axis.encode;
                }
            }
            const titleString = assembleTitle(title, config);
            return Object.assign({ scale,
                orient, grid: false }, (titleString ? { title: titleString } : {}), axis, { zindex: getFirstDefined(zindex, 1) // put axis line above marks by default
             });
        }
    }
    /**
     * Add axis signals so grid line works correctly
     * (Fix https://github.com/vega/vega-lite/issues/4226)
     */
    function assembleAxisSignals(model) {
        const axisComponents = model.component.axes;
        const { x, y } = axisComponents;
        if (x && !y) {
            return [
                {
                    name: 'height',
                    update: model.getSizeSignalRef('height').signal
                }
            ];
        }
        else if (y && !x) {
            return [
                {
                    name: 'width',
                    update: model.getSizeSignalRef('width').signal
                }
            ];
        }
        return [];
    }
    function assembleAxes(axisComponents, config) {
        const { x = [], y = [] } = axisComponents;
        return [
            ...x.map(a => assembleAxis(a, 'main', config)),
            ...x.map(a => assembleAxis(a, 'grid', config)),
            ...y.map(a => assembleAxis(a, 'main', config)),
            ...y.map(a => assembleAxis(a, 'grid', config))
        ].filter(a => a); // filter undefined
    }

    const HEADER_TITLE_PROPERTIES_MAP = {
        titleAnchor: undefined,
        titleAngle: 'angle',
        titleBaseline: 'baseline',
        titleColor: 'color',
        titleFont: 'font',
        titleFontSize: 'fontSize',
        titleFontWeight: 'fontWeight',
        titleLimit: 'limit',
        titlePadding: 'offset'
    };
    const HEADER_LABEL_PROPERTIES_MAP = {
        labelAngle: 'angle',
        labelColor: 'color',
        labelFont: 'font',
        labelFontSize: 'fontSize',
        labelLimit: 'limit',
        labelPadding: 'offset'
    };
    const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);
    const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);

    const DEFAULT_SORT_OP = 'mean';
    function isSortByEncoding(sort) {
        return !!sort && !!sort['encoding'];
    }
    function isSortField(sort) {
        return !!sort && (sort['op'] === 'count' || !!sort['field']);
    }
    function isSortArray(sort) {
        return !!sort && isArray(sort);
    }

    function applyMarkConfig(e, model, propsList) {
        for (const property of propsList) {
            const value = getMarkConfig(property, model.markDef, model.config);
            if (value !== undefined) {
                e[property] = { value: value };
            }
        }
        return e;
    }
    function getStyles(mark) {
        return [].concat(mark.type, mark.style || []);
    }
    /**
     * Return property value from style or mark specific config property if exists.
     * Otherwise, return general mark specific config.
     */
    function getMarkConfig(prop, mark, config, { skipGeneralMarkConfig = false } = {}) {
        return getFirstDefined(
        // style config has highest precedence
        getStyleConfig(prop, mark, config.style), 
        // then mark-specific config
        config[mark.type][prop], 
        // then general mark config (if not skipped)
        skipGeneralMarkConfig ? undefined : config.mark[prop]);
    }
    function getStyleConfig(prop, mark, styleConfigIndex) {
        const styles = getStyles(mark);
        let value;
        for (const style of styles) {
            const styleConfig = styleConfigIndex[style];
            // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style
            // However here we also check if it is defined, so it is okay to cast here
            const p = prop;
            if (styleConfig && styleConfig[p] !== undefined) {
                value = styleConfig[p];
            }
        }
        return value;
    }
    function formatSignalRef(fieldDef, specifiedFormat, expr, config) {
        const format = numberFormat(fieldDef, specifiedFormat, config);
        if (isBinning(fieldDef.bin)) {
            const startField = vgField(fieldDef, { expr });
            const endField = vgField(fieldDef, { expr, binSuffix: 'end' });
            return {
                signal: binFormatExpression(startField, endField, format, config)
            };
        }
        else if (fieldDef.type === 'quantitative') {
            return {
                signal: `${formatExpr(vgField(fieldDef, { expr, binSuffix: 'range' }), format)}`
            };
        }
        else if (isTimeFieldDef(fieldDef)) {
            const isUTCScale = isScaleFieldDef(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === ScaleType.UTC;
            return {
                signal: timeFormatExpression(vgField(fieldDef, { expr }), fieldDef.timeUnit, specifiedFormat, config.text.shortTimeLabels, config.timeFormat, isUTCScale, true)
            };
        }
        else {
            return {
                signal: `''+${vgField(fieldDef, { expr })}`
            };
        }
    }
    /**
     * Returns number format for a fieldDef
     */
    function numberFormat(fieldDef, specifiedFormat, config) {
        if (isTimeFieldDef(fieldDef)) {
            return undefined;
        }
        // Specified format in axis/legend has higher precedence than fieldDef.format
        if (specifiedFormat) {
            return specifiedFormat;
        }
        if (fieldDef.type === QUANTITATIVE) {
            // we only apply the default if the field is quantitative
            return config.numberFormat;
        }
        return undefined;
    }
    function formatExpr(field, format) {
        return `format(${field}, "${format || ''}")`;
    }
    function numberFormatExpr(field, specifiedFormat, config) {
        return formatExpr(field, specifiedFormat || config.numberFormat);
    }
    function binFormatExpression(startField, endField, format, config) {
        return `${startField} === null || isNaN(${startField}) ? "null" : ${numberFormatExpr(startField, format, config)} + " - " + ${numberFormatExpr(endField, format, config)}`;
    }
    /**
     * Returns the time expression used for axis/legend labels or text mark for a temporal field
     */
    function timeFormatExpression(field, timeUnit, format, shortTimeLabels, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels
    isUTCScale, alwaysReturn = false) {
        if (!timeUnit || format) {
            // If there is not time unit, or if user explicitly specify format for axis/legend/text.
            format = format || rawTimeFormat; // only use provided timeFormat if there is no timeUnit.
            if (format || alwaysReturn) {
                return `${isUTCScale ? 'utc' : 'time'}Format(${field}, '${format}')`;
            }
            else {
                return undefined;
            }
        }
        else {
            return formatExpression(timeUnit, field, shortTimeLabels, isUTCScale);
        }
    }
    /**
     * Return Vega sort parameters (tuple of field and order).
     */
    function sortParams(orderDef, fieldRefOption) {
        return (isArray(orderDef) ? orderDef : [orderDef]).reduce((s, orderChannelDef) => {
            s.field.push(vgField(orderChannelDef, fieldRefOption));
            s.order.push(orderChannelDef.sort || 'ascending');
            return s;
        }, { field: [], order: [] });
    }
    function mergeTitleFieldDefs(f1, f2) {
        const merged = [...f1];
        f2.forEach(fdToMerge => {
            for (const fieldDef1 of merged) {
                // If already exists, no need to append to merged array
                if (stringify(fieldDef1) === stringify(fdToMerge)) {
                    return;
                }
            }
            merged.push(fdToMerge);
        });
        return merged;
    }
    function mergeTitle(title1, title2) {
        if (title1 === title2 || !title2) {
            // if titles are the same or title2 is falsy
            return title1;
        }
        else if (!title1) {
            // if title1 is falsy
            return title2;
        }
        else {
            // join title with comma if they are different
            return title1 + ', ' + title2;
        }
    }
    function mergeTitleComponent(v1, v2) {
        if (isArray(v1.value) && isArray(v2.value)) {
            return {
                explicit: v1.explicit,
                value: mergeTitleFieldDefs(v1.value, v2.value)
            };
        }
        else if (!isArray(v1.value) && !isArray(v2.value)) {
            return {
                explicit: v1.explicit,
                value: mergeTitle(v1.value, v2.value)
            };
        }
        /* istanbul ignore next: Condition should not happen -- only for warning in development. */
        throw new Error('It should never reach here');
    }

    /**
     * A node in the dataflow tree.
     */
    class DataFlowNode {
        constructor(parent, debugName) {
            this.debugName = debugName;
            this._children = [];
            this._parent = null;
            if (parent) {
                this.parent = parent;
            }
        }
        /**
         * Clone this node with a deep copy but don't clone links to children or parents.
         */
        clone() {
            throw new Error('Cannot clone node');
        }
        /**
         * Return a hash of the node.
         */
        hash() {
            if (this._hash === undefined) {
                this._hash = uniqueId();
            }
            return this._hash;
        }
        /**
         * Set of fields that are being created by this node.
         */
        producedFields() {
            return new Set();
        }
        dependentFields() {
            return new Set();
        }
        get parent() {
            return this._parent;
        }
        /**
         * Set the parent of the node and also add this not to the parent's children.
         */
        set parent(parent) {
            this._parent = parent;
            parent.addChild(this);
        }
        get children() {
            return this._children;
        }
        numChildren() {
            return this._children.length;
        }
        addChild(child, loc) {
            // do not add the same child twice
            if (this._children.indexOf(child) > -1) {
                console.warn('Attempt to add the same child twice.');
                return;
            }
            if (loc !== undefined) {
                this._children.splice(loc, 0, child);
            }
            else {
                this._children.push(child);
            }
        }
        removeChild(oldChild) {
            const loc = this._children.indexOf(oldChild);
            this._children.splice(loc, 1);
            return loc;
        }
        /**
         * Remove node from the dataflow.
         */
        remove() {
            let loc = this._parent.removeChild(this);
            for (const child of this._children) {
                // do not use the set method because we want to insert at a particular location
                child._parent = this._parent;
                this._parent.addChild(child, loc++);
            }
        }
        /**
         * Insert another node as a parent of this node.
         */
        insertAsParentOf(other) {
            const parent = other.parent;
            parent.removeChild(this);
            this.parent = parent;
            other.parent = this;
        }
        swapWithParent() {
            const parent = this._parent;
            const newParent = parent.parent;
            // reconnect the children
            for (const child of this._children) {
                child.parent = parent;
            }
            // remove old links
            this._children = []; // equivalent to removing every child link one by one
            parent.removeChild(this);
            parent.parent.removeChild(parent);
            // swap two nodes
            this.parent = newParent;
            parent.parent = this;
        }
    }
    class OutputNode extends DataFlowNode {
        /**
         * @param source The name of the source. Will change in assemble.
         * @param type The type of the output node.
         * @param refCounts A global ref counter map.
         */
        constructor(parent, source, type, refCounts) {
            super(parent, source);
            this.type = type;
            this.refCounts = refCounts;
            this._source = this._name = source;
            if (this.refCounts && !(this._name in this.refCounts)) {
                this.refCounts[this._name] = 0;
            }
        }
        clone() {
            const cloneObj = new this.constructor();
            cloneObj.debugName = 'clone_' + this.debugName;
            cloneObj._source = this._source;
            cloneObj._name = 'clone_' + this._name;
            cloneObj.type = this.type;
            cloneObj.refCounts = this.refCounts;
            cloneObj.refCounts[cloneObj._name] = 0;
            return cloneObj;
        }
        /**
         * Request the datasource name and increase the ref counter.
         *
         * During the parsing phase, this will return the simple name such as 'main' or 'raw'.
         * It is crucial to request the name from an output node to mark it as a required node.
         * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.
         *
         * In the assemble phase, this will return the correct name.
         */
        getSource() {
            this.refCounts[this._name]++;
            return this._source;
        }
        isRequired() {
            return !!this.refCounts[this._name];
        }
        setSource(source) {
            this._source = source;
        }
    }

    function getName(node) {
        const name = [];
        if (node.type === 'Identifier') {
            return [node.name];
        }
        if (node.type === 'Literal') {
            return [node.value];
        }
        if (node.type === 'MemberExpression') {
            name.push(...getName(node.object));
            name.push(...getName(node.property));
        }
        return name;
    }
    function startsWithDatum(node) {
        if (node.object.type === 'MemberExpression') {
            return startsWithDatum(node.object);
        }
        return node.object.name === 'datum';
    }
    function getDependentFields(expression) {
        const ast = parse$3(expression);
        const dependents = new Set();
        ast.visit((node) => {
            if (node.type === 'MemberExpression' && startsWithDatum(node)) {
                dependents.add(getName(node)
                    .slice(1)
                    .join('.'));
            }
        });
        return dependents;
    }

    /**
     * We don't know what a calculate node depends on so we should never move it beyond anything that produces fields.
     */
    class CalculateNode extends DataFlowNode {
        constructor(parent, transform) {
            super(parent);
            this.transform = transform;
            this._dependentFields = getDependentFields(this.transform.calculate);
        }
        clone() {
            return new CalculateNode(null, duplicate(this.transform));
        }
        static parseAllForSortIndex(parent, model) {
            // get all the encoding with sort fields from model
            model.forEachFieldDef((fieldDef, channel) => {
                if (!isScaleFieldDef(fieldDef)) {
                    return;
                }
                if (isSortArray(fieldDef.sort)) {
                    const { field, timeUnit } = fieldDef;
                    const sort = fieldDef.sort;
                    // generate `datum["a"] === val0 ? 0 : datum["a"] === val1 ? 1 : ... : n` via FieldEqualPredicate
                    const calculate = sort
                        .map((sortValue, i) => {
                        return `${fieldFilterExpression({ field, timeUnit, equal: sortValue })} ? ${i} : `;
                    })
                        .join('') + sort.length;
                    parent = new CalculateNode(parent, {
                        calculate,
                        as: sortArrayIndexField(fieldDef, channel, { forAs: true })
                    });
                }
            });
            return parent;
        }
        producedFields() {
            return new Set([this.transform.as]);
        }
        dependentFields() {
            return this._dependentFields;
        }
        assemble() {
            return {
                type: 'formula',
                expr: this.transform.calculate,
                as: this.transform.as
            };
        }
        hash() {
            return `Calculate ${hash(this.transform)}`;
        }
    }
    function sortArrayIndexField(fieldDef, channel, opt) {
        return vgField(fieldDef, Object.assign({ prefix: channel, suffix: 'sort_index' }, (opt || {})));
    }

    const HEADER_CHANNELS = ['row', 'column'];
    const HEADER_TYPES = ['header', 'footer'];

    // TODO: rename to assembleHeaderTitleGroup
    function assembleTitleGroup(model, channel) {
        const title = model.component.layoutHeaders[channel].title;
        const config = model.config ? model.config : undefined;
        const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef
            ? model.component.layoutHeaders[channel].facetFieldDef
            : undefined;
        const titleAnchor = (facetFieldDef && facetFieldDef.header && facetFieldDef.header.titleAnchor) || undefined;
        return {
            name: `${channel}-title`,
            type: 'group',
            role: `${channel === 'facet' ? 'column' : channel}-title`,
            title: Object.assign({ text: title, offset: 10 }, (channel === 'row' ? { orient: 'left' } : {}), { style: 'guide-title' }, titleAlign(titleAnchor), getHeaderProperties(config, facetFieldDef, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))
        };
    }
    function titleAlign(titleAnchor) {
        switch (titleAnchor) {
            case 'start':
                return { align: 'left' };
            case 'end':
                return { align: 'right' };
        }
        // TODO: take TitleAngle into account for the "middle" case
        return {};
    }
    function assembleHeaderGroups(model, channel) {
        const layoutHeader = model.component.layoutHeaders[channel];
        const groups = [];
        for (const headerType of HEADER_TYPES) {
            if (layoutHeader[headerType]) {
                for (const headerCmpt of layoutHeader[headerType]) {
                    groups.push(assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));
                }
            }
        }
        return groups;
    }
    // 0, (0,90), 90, (90, 180), 180, (180, 270), 270, (270, 0)
    function labelAlign(angle) {
        // to keep angle in [0, 360)
        angle = ((angle % 360) + 360) % 360;
        if ((angle + 90) % 180 === 0) {
            // for 90 and 270
            return {}; // default center
        }
        else if (angle < 90 || 270 < angle) {
            return { align: { value: 'right' } };
        }
        else if (135 <= angle && angle < 225) {
            return { align: { value: 'left' } };
        }
        return {};
    }
    function labelBaseline(angle) {
        // to keep angle in [0, 360)
        angle = ((angle % 360) + 360) % 360;
        if (45 <= angle && angle <= 135) {
            return { baseline: 'top' };
        }
        return { baseline: 'middle' };
    }
    function getSort(facetFieldDef, channel) {
        const { sort } = facetFieldDef;
        if (isSortField(sort)) {
            return {
                field: vgField(sort, { expr: 'datum' }),
                order: sort.order || 'ascending'
            };
        }
        else if (isArray(sort)) {
            return {
                field: sortArrayIndexField(facetFieldDef, channel, { expr: 'datum' }),
                order: 'ascending'
            };
        }
        else {
            return {
                field: vgField(facetFieldDef, { expr: 'datum' }),
                order: sort || 'ascending'
            };
        }
    }
    function assembleLabelTitle(facetFieldDef, channel, config) {
        const { header = {} } = facetFieldDef;
        const { format, labelAngle } = header;
        const update = Object.assign({}, labelAlign(labelAngle));
        return Object.assign({ text: formatSignalRef(facetFieldDef, format, 'parent', config), offset: 10 }, (channel === 'row' ? { orient: 'left' } : {}), { style: 'guide-label', frame: 'group' }, (labelAngle !== undefined ? { angle: labelAngle } : {}), labelBaseline(labelAngle), getHeaderProperties(config, facetFieldDef, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP), (keys(update).length > 0 ? { encode: { update } } : {}));
    }
    function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {
        if (headerCmpt) {
            let title = null;
            const { facetFieldDef } = layoutHeader;
            const config = model.config ? model.config : undefined;
            if (facetFieldDef && headerCmpt.labels) {
                title = assembleLabelTitle(facetFieldDef, channel, config);
            }
            const isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);
            const axes = headerCmpt.axes;
            const hasAxes = axes && axes.length > 0;
            if (title || hasAxes) {
                const sizeChannel = channel === 'row' ? 'height' : 'width';
                return Object.assign({ name: model.getName(`${channel}_${headerType}`), type: 'group', role: `${channel}-${headerType}` }, (layoutHeader.facetFieldDef
                    ? {
                        from: { data: model.getName(channel + '_domain') },
                        sort: getSort(facetFieldDef, channel)
                    }
                    : {}), (hasAxes && isFacetWithoutRowCol
                    ? {
                        from: { data: model.getName(`facet_domain_${channel}`) }
                    }
                    : {}), (title ? { title } : {}), (headerCmpt.sizeSignal
                    ? {
                        encode: {
                            update: {
                                [sizeChannel]: headerCmpt.sizeSignal
                            }
                        }
                    }
                    : {}), (hasAxes ? { axes } : {}));
            }
        }
        return null;
    }
    function getLayoutTitleBand(titleAnchor) {
        if (titleAnchor === 'start') {
            return 0;
        }
        else if (titleAnchor === 'end') {
            return 1;
        }
        return undefined;
    }
    function assembleLayoutTitleBand(headerComponentIndex) {
        const titleBand = {};
        for (const channel of FACET_CHANNELS) {
            const headerComponent = headerComponentIndex[channel];
            if (headerComponent && headerComponent.facetFieldDef && headerComponent.facetFieldDef.header) {
                const { titleAnchor } = headerComponent.facetFieldDef.header;
                const band = getLayoutTitleBand(titleAnchor);
                if (band !== undefined) {
                    titleBand[channel === 'facet' ? 'column' : channel] = band;
                }
            }
        }
        return keys(titleBand).length > 0 ? titleBand : undefined;
    }
    function getHeaderProperties(config, facetFieldDef, properties, propertiesMap) {
        const props = {};
        for (const prop of properties) {
            if (!propertiesMap[prop]) {
                continue;
            }
            if (config && config.header) {
                if (config.header[prop]) {
                    props[propertiesMap[prop]] = config.header[prop];
                }
            }
            if (facetFieldDef && facetFieldDef.header) {
                if (facetFieldDef.header[prop]) {
                    props[propertiesMap[prop]] = facetFieldDef.header[prop];
                }
            }
        }
        return props;
    }

    function assembleLayoutSignals(model) {
        return [...sizeSignals(model, 'width'), ...sizeSignals(model, 'height')];
    }
    function sizeSignals(model, sizeType) {
        const channel = sizeType === 'width' ? 'x' : 'y';
        const size = model.component.layoutSize.get(sizeType);
        if (!size || size === 'merged') {
            return [];
        }
        // Read size signal name from name map, just in case it is the top-level size signal that got renamed.
        const name = model.getSizeSignalRef(sizeType).signal;
        if (size === 'range-step') {
            const scaleComponent = model.getScaleComponent(channel);
            if (scaleComponent) {
                const type = scaleComponent.get('type');
                const range = scaleComponent.get('range');
                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                    const scaleName = model.scaleName(channel);
                    if (isFacetModel(model.parent)) {
                        // If parent is facet and this is an independent scale, return only signal signal
                        // as the width/height will be calculated using the cardinality from
                        // facet's aggregate rather than reading from scale domain
                        const parentResolve = model.parent.component.resolve;
                        if (parentResolve.scale[channel] === 'independent') {
                            return [stepSignal(scaleName, range)];
                        }
                    }
                    return [
                        stepSignal(scaleName, range),
                        {
                            name,
                            update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)
                        }
                    ];
                }
            }
            /* istanbul ignore next: Condition should not happen -- only for warning in development. */
            throw new Error('layout size is range step although there is no rangeStep.');
        }
        else {
            return [
                {
                    name,
                    value: size
                }
            ];
        }
    }
    function stepSignal(scaleName, range) {
        return {
            name: scaleName + '_step',
            value: range.step
        };
    }
    function sizeExpr(scaleName, scaleComponent, cardinality) {
        const type = scaleComponent.get('type');
        const padding = scaleComponent.get('padding');
        const paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);
        let paddingInner = scaleComponent.get('paddingInner');
        paddingInner =
            type === 'band'
                ? // only band has real paddingInner
                    paddingInner !== undefined
                        ? paddingInner
                        : padding
                : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,
                    // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.
                    1;
        return `bandspace(${cardinality}, ${paddingInner}, ${paddingOuter}) * ${scaleName}_step`;
    }

    class TimeUnitNode extends DataFlowNode {
        constructor(parent, formula) {
            super(parent);
            this.formula = formula;
        }
        clone() {
            return new TimeUnitNode(null, duplicate(this.formula));
        }
        static makeFromEncoding(parent, model) {
            const formula = model.reduceFieldDef((timeUnitComponent, fieldDef) => {
                if (fieldDef.timeUnit) {
                    const f = vgField(fieldDef, { forAs: true });
                    timeUnitComponent[f] = {
                        as: f,
                        timeUnit: fieldDef.timeUnit,
                        field: fieldDef.field
                    };
                }
                return timeUnitComponent;
            }, {});
            if (keys(formula).length === 0) {
                return null;
            }
            return new TimeUnitNode(parent, formula);
        }
        static makeFromTransform(parent, t) {
            return new TimeUnitNode(parent, {
                [t.field]: {
                    as: t.as,
                    timeUnit: t.timeUnit,
                    field: t.field
                }
            });
        }
        merge(other) {
            this.formula = Object.assign({}, this.formula, other.formula);
            other.remove();
        }
        producedFields() {
            return new Set(vals(this.formula).map(f => f.as));
        }
        dependentFields() {
            return new Set(vals(this.formula).map(f => f.field));
        }
        hash() {
            return `TimeUnit ${hash(this.formula)}`;
        }
        assemble() {
            return vals(this.formula).map(c => {
                return {
                    type: 'formula',
                    as: c.as,
                    expr: fieldExpr(c.timeUnit, c.field)
                };
            });
        }
    }

    const scaleBindings = {
        has: selCmpt => {
            return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';
        },
        parse: (model, selDef, selCmpt) => {
            const name = varName(selCmpt.name);
            const bound = (selCmpt.scales = []);
            for (const p of selCmpt.project) {
                const channel = p.channel;
                if (!isScaleChannel(channel)) {
                    continue;
                }
                const scale = model.getScaleComponent(channel);
                const scaleType = scale ? scale.get('type') : undefined;
                if (!scale || !hasContinuousDomain(scaleType)) {
                    warn(message.SCALE_BINDINGS_CONTINUOUS);
                    continue;
                }
                scale.set('domainRaw', { signal: accessPathWithDatum(p.field, name) }, true);
                bound.push(channel);
                // Bind both x/y for diag plot of repeated views.
                if (model.repeater && model.repeater.row === model.repeater.column) {
                    const scale2 = model.getScaleComponent(channel === X ? Y : X);
                    scale2.set('domainRaw', { signal: accessPathWithDatum(p.field, name) }, true);
                }
            }
        },
        topLevelSignals: (model, selCmpt, signals) => {
            const channelSignals = selCmpt.scales
                .filter(channel => {
                return !signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data')).length;
            })
                .map(channel => {
                return { channel, signal: channelSignalName(selCmpt, channel, 'data') };
            });
            // Top-level signals are only needed for multiview displays and if this
            // view's top-level signals haven't already been generated.
            if (!model.parent || !channelSignals.length) {
                return signals;
            }
            // vlSelectionResolve does not account for the behavior of bound scales in
            // multiview displays. Each unit view adds a tuple to the store, but the
            // state of the selection is the unit selection most recently updated. This
            // state is captured by the top-level signals that we insert and "push
            // outer" to from within the units. We need to reassemble this state into
            // the top-level named signal, except no single selCmpt has a global view.
            const namedSg = signals.filter(s => s.name === selCmpt.name)[0];
            const update = namedSg.update;
            if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {
                namedSg.update =
                    '{' + channelSignals.map(cs => `${$(selCmpt.fields[cs.channel])}: ${cs.signal}`).join(', ') + '}';
            }
            else {
                for (const cs of channelSignals) {
                    const mapping = `, ${$(selCmpt.fields[cs.channel])}: ${cs.signal}`;
                    if (update.indexOf(mapping) < 0) {
                        namedSg.update = update.substring(0, update.length - 1) + mapping + '}';
                    }
                }
            }
            return signals.concat(channelSignals.map(cs => ({ name: cs.signal })));
        },
        signals: (model, selCmpt, signals) => {
            // Nested signals need only push to top-level signals with multiview displays.
            if (model.parent) {
                for (const channel of selCmpt.scales) {
                    const signal = signals.filter(s => s.name === channelSignalName(selCmpt, channel, 'data'))[0];
                    // convert to PushSignal
                    signal.push = 'outer';
                    delete signal.value;
                    delete signal.update;
                }
            }
            return signals;
        }
    };
    function domain$1(model, channel) {
        const scale = $(model.scaleName(channel));
        return `domain(${scale})`;
    }

    const TUPLE_FIELDS = '_fields';
    const project$1 = {
        has: (selDef) => {
            const def = selDef;
            return def.fields !== undefined || def.encodings !== undefined;
        },
        parse: (model, selDef, selCmpt) => {
            const timeUnits = {};
            const f = {};
            // Selection component may already have a projection from the config. (Interval selection will have `encodings: ['x', 'y'].)
            const proj = selCmpt.project || (selCmpt.project = []);
            selCmpt.fields = {};
            // TODO: find a possible channel mapping for these fields.
            if (selDef.fields) {
                proj.push(...selDef.fields.map(field => ({ field, type: 'E' })));
            }
            for (const channel of selDef.encodings || []) {
                const fieldDef = model.fieldDef(channel);
                if (fieldDef) {
                    let field = fieldDef.field;
                    if (fieldDef.timeUnit) {
                        field = model.vgField(channel);
                        // Construct TimeUnitComponents which will be combined into a
                        // TimeUnitNode. This node may need to be inserted into the
                        // dataflow if the selection is used across views that do not
                        // have these time units defined.
                        timeUnits[field] = {
                            as: field,
                            field: fieldDef.field,
                            timeUnit: fieldDef.timeUnit
                        };
                    }
                    // Prevent duplicate projections on the same field.
                    // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).
                    if (!f[field]) {
                        // Determine whether the tuple will store enumerated or ranged values.
                        // Interval selections store ranges for continuous scales, and enumerations otherwise.
                        // Single/multi selections store ranges for binned fields, and enumerations otherwise.
                        let type = 'E';
                        if (selCmpt.type === 'interval') {
                            const scaleType = model.getScaleComponent(channel).get('type');
                            if (hasContinuousDomain(scaleType)) {
                                type = 'R';
                            }
                        }
                        else if (fieldDef.bin) {
                            type = 'R-RE';
                        }
                        proj.push((f[field] = { field, channel, type }));
                    }
                    selCmpt.fields[channel] = field;
                }
                else {
                    warn(message.cannotProjectOnChannelWithoutField(channel));
                }
            }
            if (selDef.init) {
                if (scaleBindings.has(selCmpt)) {
                    warn(message.NO_INIT_SCALE_BINDINGS);
                }
                else {
                    function parseInit(i) {
                        return proj.map(p => (i[p.channel] !== undefined ? i[p.channel] : i[p.field]));
                    }
                    if (isIntervalSelection(selDef)) {
                        selCmpt.init = parseInit(selDef.init);
                    }
                    else {
                        const init = isArray(selDef.init) ? selDef.init : [selDef.init];
                        selCmpt.init = init.map(parseInit);
                    }
                }
            }
            if (keys(timeUnits).length) {
                selCmpt.timeUnit = new TimeUnitNode(null, timeUnits);
            }
        },
        signals: (model, selCmpt, signals) => {
            const name = selCmpt.name + TUPLE + TUPLE_FIELDS;
            const hasSignal = signals.filter(s => s.name === name);
            return hasSignal.length
                ? signals
                : signals.concat({
                    name,
                    value: selCmpt.project
                });
        }
    };

    const BRUSH = '_brush';
    const SCALE_TRIGGER = '_scale_trigger';
    const interval$2 = {
        signals: (model, selCmpt) => {
            const name = selCmpt.name;
            const fieldsSg = name + TUPLE + TUPLE_FIELDS;
            const hasScales = scaleBindings.has(selCmpt);
            const signals = [];
            const dataSignals = [];
            const scaleTriggers = [];
            if (selCmpt.translate && !hasScales) {
                const filterExpr = `!event.item || event.item.mark.name !== ${$(name + BRUSH)}`;
                events$2(selCmpt, (_, evt) => {
                    const filters = evt.between[0].filter || (evt.between[0].filter = []);
                    if (filters.indexOf(filterExpr) < 0) {
                        filters.push(filterExpr);
                    }
                });
            }
            selCmpt.project.forEach((p, i) => {
                const channel = p.channel;
                if (channel !== X && channel !== Y) {
                    warn('Interval selections only support x and y encoding channels.');
                    return;
                }
                const cs = channelSignals(model, selCmpt, channel, i);
                const dname = channelSignalName(selCmpt, channel, 'data');
                const vname = channelSignalName(selCmpt, channel, 'visual');
                const scaleStr = $(model.scaleName(channel));
                const scaleType = model.getScaleComponent(channel).get('type');
                const toNum = hasContinuousDomain(scaleType) ? '+' : '';
                signals.push(...cs);
                dataSignals.push(dname);
                scaleTriggers.push({
                    scaleName: model.scaleName(channel),
                    expr: `(!isArray(${dname}) || ` +
                        `(${toNum}invert(${scaleStr}, ${vname})[0] === ${toNum}${dname}[0] && ` +
                        `${toNum}invert(${scaleStr}, ${vname})[1] === ${toNum}${dname}[1]))`
                });
            });
            // Proxy scale reactions to ensure that an infinite loop doesn't occur
            // when an interval selection filter touches the scale.
            if (!hasScales) {
                signals.push({
                    name: name + SCALE_TRIGGER,
                    update: scaleTriggers.map(t => t.expr).join(' && ') + ` ? ${name + SCALE_TRIGGER} : {}`
                });
            }
            // Only add an interval to the store if it has valid data extents. Data extents
            // are set to null if pixel extents are equal to account for intervals over
            // ordinal/nominal domains which, when inverted, will still produce a valid datum.
            const init = selCmpt.init;
            const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;
            return signals.concat(Object.assign({ name: name + TUPLE }, (init ? { init: `{${update}: ${assembleInit(init)}}` } : {}), { on: [
                    {
                        events: dataSignals.map(t => ({ signal: t })),
                        update: dataSignals.join(' && ') + ` ? {${update}: [${dataSignals}]} : null`
                    }
                ] }));
        },
        modifyExpr: (model, selCmpt) => {
            const tpl = selCmpt.name + TUPLE;
            return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);
        },
        marks: (model, selCmpt, marks) => {
            const name = selCmpt.name;
            const { xi, yi } = positionalProjections(selCmpt);
            const store = `data(${$(selCmpt.name + STORE)})`;
            // Do not add a brush if we're binding to scales.
            if (scaleBindings.has(selCmpt)) {
                return marks;
            }
            const update = {
                x: xi !== null ? { signal: `${name}_x[0]` } : { value: 0 },
                y: yi !== null ? { signal: `${name}_y[0]` } : { value: 0 },
                x2: xi !== null ? { signal: `${name}_x[1]` } : { field: { group: 'width' } },
                y2: yi !== null ? { signal: `${name}_y[1]` } : { field: { group: 'height' } }
            };
            // If the selection is resolved to global, only a single interval is in
            // the store. Wrap brush mark's encodings with a production rule to test
            // this based on the `unit` property. Hide the brush mark if it corresponds
            // to a unit different from the one in the store.
            if (selCmpt.resolve === 'global') {
                for (const key of keys(update)) {
                    update[key] = [
                        Object.assign({ test: `${store}.length && ${store}[0].unit === ${unitName(model)}` }, update[key]),
                        { value: 0 }
                    ];
                }
            }
            // Two brush marks ensure that fill colors and other aesthetic choices do
            // not interefere with the core marks, but that the brushed region can still
            // be interacted with (e.g., dragging it around).
            const _a = selCmpt.mark, { fill, fillOpacity } = _a, stroke = __rest(_a, ["fill", "fillOpacity"]);
            const vgStroke = keys(stroke).reduce((def, k) => {
                def[k] = [
                    {
                        test: [xi !== null && `${name}_x[0] !== ${name}_x[1]`, yi != null && `${name}_y[0] !== ${name}_y[1]`]
                            .filter(x => x)
                            .join(' && '),
                        value: stroke[k]
                    },
                    { value: null }
                ];
                return def;
            }, {});
            return [
                {
                    name: name + BRUSH + '_bg',
                    type: 'rect',
                    clip: true,
                    encode: {
                        enter: {
                            fill: { value: fill },
                            fillOpacity: { value: fillOpacity }
                        },
                        update: update
                    }
                },
                ...marks,
                {
                    name: name + BRUSH,
                    type: 'rect',
                    clip: true,
                    encode: {
                        enter: {
                            fill: { value: 'transparent' }
                        },
                        update: Object.assign({}, update, vgStroke)
                    }
                }
            ];
        }
    };
    /**
     * Returns the visual and data signals for an interval selection.
     */
    function channelSignals(model, selCmpt, channel, idx) {
        const vname = channelSignalName(selCmpt, channel, 'visual');
        const dname = channelSignalName(selCmpt, channel, 'data');
        const init = selCmpt.init && selCmpt.init[idx];
        const hasScales = scaleBindings.has(selCmpt);
        const scaleName = $(model.scaleName(channel));
        const scale = model.getScaleComponent(channel);
        const scaleType = scale ? scale.get('type') : undefined;
        const scaled = (str) => `scale(${scaleName}, ${str})`;
        const size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;
        const coord = `${channel}(unit)`;
        const on = events$2(selCmpt, (def, evt) => {
            return [
                ...def,
                { events: evt.between[0], update: `[${coord}, ${coord}]` },
                { events: evt, update: `[${vname}[0], clamp(${coord}, 0, ${size})]` } // Brush End
            ];
        });
        // React to pan/zooms of continuous scales. Non-continuous scales
        // (band, point) cannot be pan/zoomed and any other changes
        // to their domains (e.g., filtering) should clear the brushes.
        on.push({
            events: { signal: selCmpt.name + SCALE_TRIGGER },
            update: hasContinuousDomain(scaleType) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`
        });
        return hasScales
            ? [{ name: dname, on: [] }]
            : [
                Object.assign({ name: vname }, (init ? { init: assembleInit(init, scaled) } : { value: [] }), { on: on }),
                Object.assign({ name: dname }, (init ? { init: assembleInit(init) } : {}), { on: [
                        {
                            events: { signal: vname },
                            update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`
                        }
                    ] })
            ];
    }
    function events$2(selCmpt, cb) {
        return selCmpt.events.reduce((on, evt) => {
            if (!evt.between) {
                warn(`${evt} is not an ordered event stream for interval selections`);
                return on;
            }
            return cb(on, evt);
        }, []);
    }

    function singleOrMultiSignals(model, selCmpt) {
        const name = selCmpt.name;
        const fieldsSg = name + TUPLE + TUPLE_FIELDS;
        const proj = selCmpt.project;
        const datum = '(item().isVoronoi ? datum.datum : datum)';
        const values = proj
            .map(p => {
            const fieldDef = model.fieldDef(p.channel);
            // Binned fields should capture extents, for a range test against the raw field.
            return fieldDef && fieldDef.bin
                ? `[${accessPathWithDatum(model.vgField(p.channel, {}), datum)}, ` +
                    `${accessPathWithDatum(model.vgField(p.channel, { binSuffix: 'end' }), datum)}]`
                : `${accessPathWithDatum(p.field, datum)}`;
        })
            .join(', ');
        // Only add a discrete selection to the store if a datum is present _and_
        // the interaction isn't occurring on a group mark. This guards against
        // polluting interactive state with invalid values in faceted displays
        // as the group marks are also data-driven. We force the update to account
        // for constant null states but varying toggles (e.g., shift-click in
        // whitespace followed by a click in whitespace; the store should only
        // be cleared on the second click).
        const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;
        const signals = [
            {
                name: name + TUPLE,
                on: [
                    {
                        events: selCmpt.events,
                        update: `datum && item().mark.marktype !== 'group' ? {${update}: [${values}]} : null`,
                        force: true
                    }
                ]
            }
        ];
        if (selCmpt.init) {
            const insert = selCmpt.init.map((i) => {
                const str = assembleInit(i);
                return `{${update}: ${str}}`;
            });
            signals.push({
                name: `${name}_init`,
                init: `modify(${$(selCmpt.name + STORE)}, [${insert}])`
            });
        }
        return signals;
    }
    const multi = {
        signals: singleOrMultiSignals,
        modifyExpr: (model, selCmpt) => {
            const tpl = selCmpt.name + TUPLE;
            return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : `{unit: ${unitName(model)}}`);
        }
    };

    const single = {
        signals: singleOrMultiSignals,
        modifyExpr: (model, selCmpt) => {
            const tpl = selCmpt.name + TUPLE;
            return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);
        }
    };

    const VORONOI = 'voronoi';
    const nearest = {
        has: selCmpt => {
            return selCmpt.type !== 'interval' && selCmpt.nearest;
        },
        marks: (model, selCmpt, marks) => {
            const { x, y } = positionalProjections(selCmpt);
            const markType = model.mark;
            if (isPathMark(markType)) {
                warn(message.nearestNotSupportForContinuous(markType));
                return marks;
            }
            const cellDef = {
                name: model.getName(VORONOI),
                type: 'path',
                from: { data: model.getName('marks') },
                encode: {
                    update: {
                        fill: { value: 'transparent' },
                        strokeWidth: { value: 0.35 },
                        stroke: { value: 'transparent' },
                        isVoronoi: { value: true }
                    }
                },
                transform: [
                    {
                        type: 'voronoi',
                        x: { expr: x || (!x && !y) ? 'datum.datum.x || 0' : '0' },
                        y: { expr: y || (!x && !y) ? 'datum.datum.y || 0' : '0' },
                        size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]
                    }
                ]
            };
            let index = 0;
            let exists = false;
            marks.forEach((mark, i) => {
                const name = mark.name || '';
                if (name === model.component.mark[0].name) {
                    index = i;
                }
                else if (name.indexOf(VORONOI) >= 0) {
                    exists = true;
                }
            });
            if (!exists) {
                marks.splice(index + 1, 0, cellDef);
            }
            return marks;
        }
    };

    const inputBindings = {
        has: selCmpt => {
            return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales';
        },
        topLevelSignals: (model, selCmpt, signals) => {
            const name = selCmpt.name;
            const proj = selCmpt.project;
            const bind = selCmpt.bind;
            const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).
            const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';
            proj.forEach((p, i) => {
                const sgname = varName(`${name}_${p.field}`);
                const hasSignal = signals.filter(s => s.name === sgname);
                if (!hasSignal.length) {
                    signals.unshift(Object.assign({ name: sgname }, (init ? { init: assembleInit(init[i]) } : { value: null }), { on: [
                            {
                                events: selCmpt.events,
                                update: `datum && item().mark.marktype !== 'group' ? ${accessPathWithDatum(p.field, datum)} : null`
                            }
                        ], bind: bind[p.field] || bind[p.channel] || bind }));
                }
            });
            return signals;
        },
        signals: (model, selCmpt, signals) => {
            const name = selCmpt.name;
            const proj = selCmpt.project;
            const signal = signals.filter(s => s.name === name + TUPLE)[0];
            const fields = name + TUPLE + TUPLE_FIELDS;
            const values = proj.map(p => varName(`${name}_${p.field}`));
            const valid = values.map(v => `${v} !== null`).join(' && ');
            if (values.length) {
                signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;
            }
            delete signal.value;
            delete signal.on;
            return signals;
        }
    };

    const TOGGLE = '_toggle';
    const toggle = {
        has: selCmpt => {
            return selCmpt.type === 'multi' && selCmpt.toggle;
        },
        signals: (model, selCmpt, signals) => {
            return signals.concat({
                name: selCmpt.name + TOGGLE,
                value: false,
                on: [{ events: selCmpt.events, update: selCmpt.toggle }]
            });
        },
        modifyExpr: (model, selCmpt, expr) => {
            const tpl = selCmpt.name + TUPLE;
            const signal = selCmpt.name + TOGGLE;
            return (`${signal} ? null : ${tpl}, ` +
                (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +
                `${signal} ? ${tpl} : null`);
        }
    };

    const ANCHOR = '_translate_anchor';
    const DELTA = '_translate_delta';
    const translate$5 = {
        has: selCmpt => {
            return selCmpt.type === 'interval' && selCmpt.translate;
        },
        signals: (model, selCmpt, signals) => {
            const name = selCmpt.name;
            const hasScales = scaleBindings.has(selCmpt);
            const anchor = name + ANCHOR;
            const { x, y } = positionalProjections(selCmpt);
            let events = selector(selCmpt.translate, 'scope');
            if (!hasScales) {
                events = events.map(e => ((e.between[0].markname = name + BRUSH), e));
            }
            signals.push({
                name: anchor,
                value: {},
                on: [
                    {
                        events: events.map(e => e.between[0]),
                        update: '{x: x(unit), y: y(unit)' +
                            (x !== null
                                ? ', extent_x: ' +
                                    (hasScales ? domain$1(model, X) : `slice(${channelSignalName(selCmpt, 'x', 'visual')})`)
                                : '') +
                            (y !== null
                                ? ', extent_y: ' +
                                    (hasScales ? domain$1(model, Y) : `slice(${channelSignalName(selCmpt, 'y', 'visual')})`)
                                : '') +
                            '}'
                    }
                ]
            }, {
                name: name + DELTA,
                value: {},
                on: [
                    {
                        events: events,
                        update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`
                    }
                ]
            });
            if (x !== null) {
                onDelta(model, selCmpt, X, 'width', signals);
            }
            if (y !== null) {
                onDelta(model, selCmpt, Y, 'height', signals);
            }
            return signals;
        }
    };
    function onDelta(model, selCmpt, channel, size, signals) {
        const name = selCmpt.name;
        const hasScales = scaleBindings.has(selCmpt);
        const signal = signals.filter(s => {
            return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');
        })[0];
        const anchor = name + ANCHOR;
        const delta = name + DELTA;
        const sizeSg = model.getSizeSignalRef(size).signal;
        const scaleCmpt = model.getScaleComponent(channel);
        const scaleType = scaleCmpt.get('type');
        const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.
        const extent = `${anchor}.extent_${channel}`;
        const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);
        const panFn = !hasScales
            ? 'panLinear'
            : scaleType === 'log'
                ? 'panLog'
                : scaleType === 'pow'
                    ? 'panPow'
                    : 'panLinear';
        const update = `${panFn}(${extent}, ${offset}` +
            (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +
            ')';
        signal.on.push({
            events: { signal: delta },
            update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
        });
    }

    const ANCHOR$1 = '_zoom_anchor';
    const DELTA$1 = '_zoom_delta';
    const zoom$2 = {
        has: selCmpt => {
            return selCmpt.type === 'interval' && selCmpt.zoom;
        },
        signals: (model, selCmpt, signals) => {
            const name = selCmpt.name;
            const hasScales = scaleBindings.has(selCmpt);
            const delta = name + DELTA$1;
            const { x, y } = positionalProjections(selCmpt);
            const sx = $(model.scaleName(X));
            const sy = $(model.scaleName(Y));
            let events = selector(selCmpt.zoom, 'scope');
            if (!hasScales) {
                events = events.map(e => ((e.markname = name + BRUSH), e));
            }
            signals.push({
                name: name + ANCHOR$1,
                on: [
                    {
                        events: events,
                        update: !hasScales
                            ? `{x: x(unit), y: y(unit)}`
                            : '{' +
                                [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : '']
                                    .filter(expr => !!expr)
                                    .join(', ') +
                                '}'
                    }
                ]
            }, {
                name: delta,
                on: [
                    {
                        events: events,
                        force: true,
                        update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'
                    }
                ]
            });
            if (x !== null) {
                onDelta$1(model, selCmpt, 'x', 'width', signals);
            }
            if (y !== null) {
                onDelta$1(model, selCmpt, 'y', 'height', signals);
            }
            return signals;
        }
    };
    function onDelta$1(model, selCmpt, channel, size, signals) {
        const name = selCmpt.name;
        const hasScales = scaleBindings.has(selCmpt);
        const signal = signals.filter(s => {
            return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');
        })[0];
        const sizeSg = model.getSizeSignalRef(size).signal;
        const scaleCmpt = model.getScaleComponent(channel);
        const scaleType = scaleCmpt.get('type');
        const base = hasScales ? domain$1(model, channel) : signal.name;
        const delta = name + DELTA$1;
        const anchor = `${name}${ANCHOR$1}.${channel}`;
        const zoomFn = !hasScales
            ? 'zoomLinear'
            : scaleType === 'log'
                ? 'zoomLog'
                : scaleType === 'pow'
                    ? 'zoomPow'
                    : 'zoomLinear';
        const update = `${zoomFn}(${base}, ${anchor}, ${delta}` +
            (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +
            ')';
        signal.on.push({
            events: { signal: delta },
            update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`
        });
    }

    const compilers = {
        project: project$1,
        toggle,
        scales: scaleBindings,
        translate: translate$5,
        zoom: zoom$2,
        inputs: inputBindings,
        nearest
    };
    function forEachTransform(selCmpt, cb) {
        for (const t in compilers) {
            if (compilers[t].has(selCmpt)) {
                cb(compilers[t]);
            }
        }
    }

    const STORE = '_store';
    const TUPLE = '_tuple';
    const MODIFY = '_modify';
    const SELECTION_DOMAIN = '_selection_domain_';
    const VL_SELECTION_RESOLVE = 'vlSelectionResolve';
    function parseUnitSelection(model, selDefs) {
        const selCmpts = {};
        const selectionConfig = model.config.selection;
        if (selDefs) {
            selDefs = duplicate(selDefs); // duplicate to avoid side effects to original spec
        }
        for (let name in selDefs) {
            if (!selDefs.hasOwnProperty(name)) {
                continue;
            }
            const selDef = selDefs[name];
            const cfg = selectionConfig[selDef.type];
            // Set default values from config if a property hasn't been specified,
            // or if it is true. E.g., "translate": true should use the default
            // event handlers for translate. However, true may be a valid value for
            // a property (e.g., "nearest": true).
            for (const key in cfg) {
                // A selection should contain either `encodings` or `fields`, only use
                // default values for these two values if neither of them is specified.
                if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {
                    continue;
                }
                if (key === 'mark') {
                    selDef[key] = Object.assign({}, cfg[key], selDef[key]);
                }
                if (selDef[key] === undefined || selDef[key] === true) {
                    selDef[key] = cfg[key] || selDef[key];
                }
            }
            name = varName(name);
            const selCmpt = (selCmpts[name] = Object.assign({}, selDef, { name: name, events: isString(selDef.on) ? selector(selDef.on, 'scope') : selDef.on }));
            forEachTransform(selCmpt, txCompiler => {
                if (txCompiler.parse) {
                    txCompiler.parse(model, selDef, selCmpt);
                }
            });
        }
        return selCmpts;
    }
    function assembleUnitSelectionSignals(model, signals) {
        forEachSelection(model, (selCmpt, selCompiler) => {
            const name = selCmpt.name;
            let modifyExpr = selCompiler.modifyExpr(model, selCmpt);
            signals.push(...selCompiler.signals(model, selCmpt));
            forEachTransform(selCmpt, txCompiler => {
                if (txCompiler.signals) {
                    signals = txCompiler.signals(model, selCmpt, signals);
                }
                if (txCompiler.modifyExpr) {
                    modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);
                }
            });
            signals.push({
                name: name + MODIFY,
                update: `modify(${$(selCmpt.name + STORE)}, ${modifyExpr})`
            });
        });
        return signals;
    }
    function assembleFacetSignals(model, signals) {
        if (model.component.selection && keys(model.component.selection).length) {
            const name = $(model.getName('cell'));
            signals.unshift({
                name: 'facet',
                value: {},
                on: [
                    {
                        events: selector('mousemove', 'scope'),
                        update: `isTuple(facet) ? facet : group(${name}).datum`
                    }
                ]
            });
        }
        return signals;
    }
    function assembleTopLevelSignals(model, signals) {
        let hasSelections = false;
        forEachSelection(model, (selCmpt, selCompiler) => {
            const name = selCmpt.name;
            const store = $(name + STORE);
            const hasSg = signals.filter(s => s.name === name);
            if (!hasSg.length) {
                signals.push({
                    name: selCmpt.name,
                    update: `${VL_SELECTION_RESOLVE}(${store}` +
                        (selCmpt.resolve === 'global' ? ')' : `, ${$(selCmpt.resolve)})`)
                });
            }
            hasSelections = true;
            if (selCompiler.topLevelSignals) {
                signals = selCompiler.topLevelSignals(model, selCmpt, signals);
            }
            forEachTransform(selCmpt, txCompiler => {
                if (txCompiler.topLevelSignals) {
                    signals = txCompiler.topLevelSignals(model, selCmpt, signals);
                }
            });
        });
        if (hasSelections) {
            const hasUnit = signals.filter(s => s.name === 'unit');
            if (!hasUnit.length) {
                signals.unshift({
                    name: 'unit',
                    value: {},
                    on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]
                });
            }
        }
        return signals;
    }
    function assembleUnitSelectionData(model, data) {
        forEachSelection(model, selCmpt => {
            const contains = data.filter(d => d.name === selCmpt.name + STORE);
            if (!contains.length) {
                data.push({ name: selCmpt.name + STORE });
            }
        });
        return data;
    }
    function assembleUnitSelectionMarks(model, marks) {
        forEachSelection(model, (selCmpt, selCompiler) => {
            marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;
            forEachTransform(selCmpt, txCompiler => {
                if (txCompiler.marks) {
                    marks = txCompiler.marks(model, selCmpt, marks);
                }
            });
        });
        return marks;
    }
    function assembleLayerSelectionMarks(model, marks) {
        for (const child of model.children) {
            if (isUnitModel(child)) {
                marks = assembleUnitSelectionMarks(child, marks);
            }
        }
        return marks;
    }
    function selectionPredicate(model, selections, dfnode) {
        const stores = [];
        function expr(name) {
            const vname = varName(name);
            const selCmpt = model.getSelectionComponent(vname, name);
            const store = $(vname + STORE);
            if (selCmpt.timeUnit) {
                const child = dfnode || model.component.data.raw;
                const tunode = selCmpt.timeUnit.clone();
                if (child.parent) {
                    tunode.insertAsParentOf(child);
                }
                else {
                    child.parent = tunode;
                }
            }
            if (selCmpt.empty !== 'none') {
                stores.push(store);
            }
            return (`vlSelectionTest(${store}, datum` + (selCmpt.resolve === 'global' ? ')' : `, ${$(selCmpt.resolve)})`));
        }
        const predicateStr = logicalExpr(selections, expr);
        return ((stores.length ? '!(' + stores.map(s => `length(data(${s}))`).join(' || ') + ') || ' : '') + `(${predicateStr})`);
    }
    // Selections are parsed _after_ scales. If a scale domain is set to
    // use a selection, the SELECTION_DOMAIN constant is used as the
    // domainRaw.signal during scale.parse and then replaced with the necessary
    // selection expression function during scale.assemble. To not pollute the
    // type signatures to account for this setup, the selection domain definition
    // is coerced to a string and appended to SELECTION_DOMAIN.
    function isRawSelectionDomain(domainRaw) {
        return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;
    }
    function selectionScaleDomain(model, domainRaw) {
        const selDomain = JSON.parse(domainRaw.signal.replace(SELECTION_DOMAIN, ''));
        const name = varName(selDomain.selection);
        const encoding = selDomain.encoding;
        let field = selDomain.field;
        let selCmpt = model.component.selection && model.component.selection[name];
        if (selCmpt) {
            warn('Use "bind": "scales" to setup a binding for scales and selections within the same view.');
        }
        else {
            selCmpt = model.getSelectionComponent(name, selDomain.selection);
            if (!encoding && !field) {
                field = selCmpt.project[0].field;
                if (selCmpt.project.length > 1) {
                    warn('A "field" or "encoding" must be specified when using a selection as a scale domain. ' +
                        `Using "field": ${$(field)}.`);
                }
            }
            else if (encoding && !field) {
                const encodings = selCmpt.project.filter(p => p.channel === encoding);
                if (!encodings.length || encodings.length > 1) {
                    field = selCmpt.project[0].field;
                    warn((!encodings.length ? 'No ' : 'Multiple ') +
                        `matching ${$(encoding)} encoding found for selection ${$(selDomain.selection)}. ` +
                        `Using "field": ${$(field)}.`);
                }
                else {
                    field = encodings[0].field;
                }
            }
            return { signal: accessPathWithDatum(field, name) };
        }
        return { signal: 'null' };
    }
    // Utility functions
    function forEachSelection(model, cb) {
        const selections = model.component.selection;
        for (const name in selections) {
            if (selections.hasOwnProperty(name)) {
                const sel = selections[name];
                cb(sel, compiler(sel.type));
            }
        }
    }
    function compiler(type) {
        switch (type) {
            case 'single':
                return single;
            case 'multi':
                return multi;
            case 'interval':
                return interval$2;
        }
        return null;
    }
    function getFacetModel(model) {
        let parent = model.parent;
        while (parent) {
            if (isFacetModel(parent)) {
                break;
            }
            parent = parent.parent;
        }
        return parent;
    }
    function unitName(model) {
        let name = $(model.name);
        const facetModel = getFacetModel(model);
        if (facetModel) {
            const { facet } = facetModel;
            for (const channel of FACET_CHANNELS) {
                if (facet[channel]) {
                    name += ` + '__facet_${channel}_' + (${accessPathWithDatum(facetModel.vgField(channel), 'facet')})`;
                }
            }
        }
        return name;
    }
    function requiresSelectionId(model) {
        let identifier = false;
        forEachSelection(model, selCmpt => {
            identifier = identifier || selCmpt.project.some(proj => proj.field === SELECTION_ID);
        });
        return identifier;
    }
    function channelSignalName(selCmpt, channel, range) {
        const sgNames = selCmpt._signalNames || (selCmpt._signalNames = {});
        if (sgNames[channel] && sgNames[channel][range]) {
            return sgNames[channel][range];
        }
        sgNames[channel] = sgNames[channel] || {};
        const basename = varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));
        let name = basename;
        let counter = 1;
        while (sgNames[name]) {
            name = `${basename}_${counter++}`;
        }
        return (sgNames[name] = sgNames[channel][range] = name);
    }
    function positionalProjections(selCmpt) {
        let x = null;
        let xi = null;
        let y = null;
        let yi = null;
        selCmpt.project.forEach((p, i) => {
            if (p.channel === X) {
                x = p;
                xi = i;
            }
            else if (p.channel === Y) {
                y = p;
                yi = i;
            }
        });
        return { x, xi, y, yi };
    }
    function assembleInit(init, wrap = identity) {
        if (isArray(init)) {
            const str = init.map(v => assembleInit(v, wrap)).join(', ');
            return `[${str}]`;
        }
        else if (isDateTime(init)) {
            return wrap(dateTimeExpr(init));
        }
        return wrap(JSON.stringify(init));
    }

    /**
     * Converts a predicate into an expression.
     */
    // model is only used for selection filters.
    function expression$2(model, filterOp, node) {
        return logicalExpr(filterOp, (predicate) => {
            if (isString(predicate)) {
                return predicate;
            }
            else if (isSelectionPredicate(predicate)) {
                return selectionPredicate(model, predicate.selection, node);
            }
            else {
                // Filter Object
                return fieldFilterExpression(predicate);
            }
        });
    }

    function midPointWithPositionInvalidTest(params) {
        const { channel, channelDef, mark, scale } = params;
        const ref = midPoint(params);
        // Wrap to check if the positional value is invalid, if so, plot the point on the min value
        if (
        // Only this for field def without counting aggregate (as count wouldn't be null)
        isFieldDef(channelDef) &&
            !isCountingAggregateOp(channelDef.aggregate) &&
            // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)
            scale &&
            isContinuousToContinuous(scale.get('type')) &&
            scale.get('zero') === false) {
            return wrapPositionInvalidTest({
                fieldDef: channelDef,
                channel,
                mark,
                ref
            });
        }
        return ref;
    }
    function wrapPositionInvalidTest({ fieldDef, channel, mark, ref }) {
        if (!isPathMark(mark)) {
            // Only do this for non-path mark (as path marks will already use "defined" to skip points)
            return [fieldInvalidTestValueRef(fieldDef, channel), ref];
        }
        return ref;
    }
    function fieldInvalidTestValueRef(fieldDef, channel) {
        const test = fieldInvalidPredicate(fieldDef, true);
        const mainChannel = getMainRangeChannel(channel);
        const zeroValueRef = mainChannel === 'x' ? { value: 0 } : { field: { group: 'height' } };
        return Object.assign({ test }, zeroValueRef);
    }
    function fieldInvalidPredicate(field, invalid = true) {
        field = isString(field) ? field : vgField(field, { expr: 'datum' });
        const op = invalid ? '||' : '&&';
        const eq = invalid ? '===' : '!==';
        return `${field} ${eq} null ${op} ${invalid ? '' : '!'}isNaN(${field})`;
    }
    // TODO: we need to find a way to refactor these so that scaleName is a part of scale
    // but that's complicated.  For now, this is a huge step moving forward.
    /**
     * @return Vega ValueRef for normal x- or y-position without projection
     */
    function position(params) {
        const { channel, channelDef, scaleName, stack, offset } = params;
        if (isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {
            // x or y use stack_end so that stacked line's point mark use stack_end too.
            return fieldRef$1(channelDef, scaleName, { suffix: 'end' }, { offset });
        }
        return midPointWithPositionInvalidTest(params);
    }
    /**
     * @return Vega ValueRef for normal x2- or y2-position without projection
     */
    function position2({ channel, channelDef, channel2Def, scaleName, scale, stack, mark, offset, defaultRef }) {
        if (isFieldDef(channelDef) &&
            stack &&
            // If fieldChannel is X and channel is X2 (or Y and Y2)
            channel.charAt(0) === stack.fieldChannel.charAt(0)) {
            return fieldRef$1(channelDef, scaleName, { suffix: 'start' }, { offset });
        }
        return midPointWithPositionInvalidTest({
            channel,
            channelDef: channel2Def,
            scaleName,
            scale,
            stack,
            mark,
            offset,
            defaultRef
        });
    }
    function getOffset(channel, markDef) {
        const offsetChannel = (channel + 'Offset'); // Need to cast as the type can't be inferred automatically
        // TODO: in the future read from encoding channel too
        const markDefOffsetValue = markDef[offsetChannel];
        if (markDefOffsetValue) {
            return markDefOffsetValue;
        }
        return undefined;
    }
    /**
     * Value Ref for binned fields
     */
    function bin$2({ channel, fieldDef, scaleName, mark, side, offset }) {
        const binSuffix = side === 'start' ? undefined : 'end';
        const ref = fieldRef$1(fieldDef, scaleName, { binSuffix }, offset ? { offset } : {});
        return wrapPositionInvalidTest({
            fieldDef,
            channel,
            mark,
            ref
        });
    }
    function fieldRef$1(fieldDef, scaleName, opt, mixins) {
        const ref = Object.assign({}, (scaleName ? { scale: scaleName } : {}), { field: vgField(fieldDef, opt) });
        if (mixins) {
            const { offset, band } = mixins;
            return Object.assign({}, ref, (offset ? { offset } : {}), (band ? { band } : {}));
        }
        return ref;
    }
    function bandRef(scaleName, band = true) {
        return {
            scale: scaleName,
            band: band
        };
    }
    /**
     * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.
     */
    function binMidSignal({ scaleName, fieldDef, fieldDef2, offset }) {
        const start = vgField(fieldDef, { expr: 'datum' });
        const end = fieldDef2 !== undefined
            ? vgField(fieldDef2, { expr: 'datum' })
            : vgField(fieldDef, { binSuffix: 'end', expr: 'datum' });
        return Object.assign({ signal: `scale("${scaleName}", (${start} + ${end}) / 2)` }, (offset ? { offset } : {}));
    }
    /**
     * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.
     */
    function midPoint({ channel, channelDef, channel2Def, scaleName, scale, stack, offset, defaultRef }) {
        // TODO: datum support
        if (channelDef) {
            /* istanbul ignore else */
            if (isFieldDef(channelDef)) {
                if (isTypedFieldDef(channelDef)) {
                    if (isBinning(channelDef.bin)) {
                        // Use middle only for x an y to place marks in the center between start and end of the bin range.
                        // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.
                        if (contains([X, Y], channel) && channelDef.type === QUANTITATIVE) {
                            if (stack && stack.impute) {
                                // For stack, we computed bin_mid so we can impute.
                                return fieldRef$1(channelDef, scaleName, { binSuffix: 'mid' }, { offset });
                            }
                            // For non-stack, we can just calculate bin mid on the fly using signal.
                            return binMidSignal({ scaleName, fieldDef: channelDef, offset });
                        }
                        return fieldRef$1(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {}, {
                            offset
                        });
                    }
                    else if (isBinned(channelDef.bin)) {
                        if (isFieldDef(channel2Def)) {
                            return binMidSignal({ scaleName, fieldDef: channelDef, fieldDef2: channel2Def, offset });
                        }
                        else {
                            const channel2 = channel === X ? X2 : Y2;
                            warn(message.channelRequiredForBinned(channel2));
                        }
                    }
                }
                if (scale) {
                    const scaleType = scale.get('type');
                    if (hasDiscreteDomain(scaleType)) {
                        if (scaleType === 'band') {
                            // For band, to get mid point, need to offset by half of the band
                            return fieldRef$1(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5, offset });
                        }
                        return fieldRef$1(channelDef, scaleName, { binSuffix: 'range' }, { offset });
                    }
                }
                return fieldRef$1(channelDef, scaleName, {}, { offset }); // no need for bin suffix
            }
            else if (isValueDef(channelDef)) {
                const value = channelDef.value;
                const offsetMixins = offset ? { offset } : {};
                if (contains(['x', 'x2'], channel) && value === 'width') {
                    return Object.assign({ field: { group: 'width' } }, offsetMixins);
                }
                else if (contains(['y', 'y2'], channel) && value === 'height') {
                    return Object.assign({ field: { group: 'height' } }, offsetMixins);
                }
                return Object.assign({ value }, offsetMixins);
            }
            // If channelDef is neither field def or value def, it's a condition-only def.
            // In such case, we will use default ref.
        }
        return isFunction(defaultRef) ? defaultRef() : defaultRef;
    }
    function tooltipForEncoding(encoding, config) {
        const keyValues = [];
        const usedKey = {};
        function add(fieldDef, channel) {
            const mainChannel = getMainRangeChannel(channel);
            if (channel !== mainChannel) {
                fieldDef = Object.assign({}, fieldDef, { type: encoding[mainChannel].type });
            }
            const key = title(fieldDef, config, { allowDisabling: false });
            const value = text$2(fieldDef, config).signal;
            if (!usedKey[key]) {
                keyValues.push(`${$(key)}: ${value}`);
            }
            usedKey[key] = true;
        }
        forEach(encoding, (channelDef, channel) => {
            if (isFieldDef(channelDef)) {
                add(channelDef, channel);
            }
            else if (hasConditionalFieldDef(channelDef)) {
                add(channelDef.condition, channel);
            }
        });
        return keyValues.length ? { signal: `{${keyValues.join(', ')}}` } : undefined;
    }
    function text$2(channelDef, config) {
        // text
        if (channelDef) {
            if (isValueDef(channelDef)) {
                return { value: channelDef.value };
            }
            if (isTypedFieldDef(channelDef)) {
                return formatSignalRef(channelDef, format(channelDef), 'datum', config);
            }
        }
        return undefined;
    }
    function mid(sizeRef) {
        return Object.assign({}, sizeRef, { mult: 0.5 });
    }
    function positionDefault({ markDef, config, defaultRef, channel, scaleName, scale, mark, checkBarAreaWithoutZero: checkBarAreaWithZero }) {
        return () => {
            const mainChannel = getMainRangeChannel(channel);
            const definedValueOrConfig = getFirstDefined(markDef[channel], getMarkConfig(channel, markDef, config));
            if (definedValueOrConfig !== undefined) {
                return { value: definedValueOrConfig };
            }
            if (isString(defaultRef)) {
                if (scaleName) {
                    const scaleType = scale.get('type');
                    if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {
                        // Log scales cannot have zero.
                        // Zero in time scale is arbitrary, and does not affect ratio.
                        // (Time is an interval level of measurement, not ratio).
                        // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.
                        if (checkBarAreaWithZero && (mark === 'bar' || mark === 'area')) {
                            warn(message.nonZeroScaleUsedWithLengthMark(mark, mainChannel, { scaleType }));
                        }
                    }
                    else {
                        if (scale.domainDefinitelyIncludesZero) {
                            return {
                                scale: scaleName,
                                value: 0
                            };
                        }
                        if (checkBarAreaWithZero && (mark === 'bar' || mark === 'area')) {
                            warn(message.nonZeroScaleUsedWithLengthMark(mark, mainChannel, { zeroFalse: scale.explicit.zero === false }));
                        }
                    }
                }
                if (defaultRef === 'zeroOrMin') {
                    return mainChannel === 'x' ? { value: 0 } : { field: { group: 'height' } };
                }
                else {
                    // zeroOrMax
                    return mainChannel === 'x' ? { field: { group: 'width' } } : { value: 0 };
                }
            }
            return defaultRef;
        };
    }

    function isVisible(c) {
        return c !== 'transparent' && c !== null && c !== undefined;
    }
    function color$3(model) {
        const { markDef, encoding, config } = model;
        const { filled, type: markType } = markDef;
        const configValue = {
            fill: getMarkConfig('fill', markDef, config),
            stroke: getMarkConfig('stroke', markDef, config),
            color: getMarkConfig('color', markDef, config)
        };
        const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType)
            ? 'transparent'
            : undefined;
        const defaultFill = getFirstDefined(markDef.fill, configValue.fill, 
        // If there is no fill, always fill symbols, bar, geoshape
        // with transparent fills https://github.com/vega/vega-lite/issues/1316
        transparentIfNeeded);
        const defaultStroke = getFirstDefined(markDef.stroke, configValue.stroke);
        const colorVgChannel = filled ? 'fill' : 'stroke';
        const fillStrokeMarkDefAndConfig = Object.assign({}, (defaultFill ? { fill: { value: defaultFill } } : {}), (defaultStroke ? { stroke: { value: defaultStroke } } : {}));
        if (encoding.fill || encoding.stroke) {
            // ignore encoding.color, markDef.color, config.color
            if (markDef.color) {
                // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)
                warn(message.droppingColor('property', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));
            }
            return Object.assign({}, nonPosition('fill', model, { defaultValue: getFirstDefined(defaultFill, transparentIfNeeded) }), nonPosition('stroke', model, { defaultValue: defaultStroke }));
        }
        else if (encoding.color) {
            return Object.assign({}, fillStrokeMarkDefAndConfig, nonPosition('color', model, {
                vgChannel: colorVgChannel,
                // apply default fill/stroke first, then color config, then transparent if needed.
                defaultValue: getFirstDefined(markDef[colorVgChannel], markDef.color, configValue[colorVgChannel], configValue.color, filled ? transparentIfNeeded : undefined)
            }));
        }
        else if (isVisible(markDef.fill) || isVisible(markDef.stroke)) {
            // Ignore markDef.color
            if (markDef.color) {
                warn(message.droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));
            }
            return fillStrokeMarkDefAndConfig;
        }
        else if (markDef.color) {
            return Object.assign({}, fillStrokeMarkDefAndConfig, { 
                // override config with markDef.color
                [colorVgChannel]: { value: markDef.color } });
        }
        else if (isVisible(configValue.fill) || isVisible(configValue.stroke)) {
            // ignore config.color
            return fillStrokeMarkDefAndConfig;
        }
        else if (configValue.color) {
            return Object.assign({}, (transparentIfNeeded ? { fill: { value: 'transparent' } } : {}), { [colorVgChannel]: { value: configValue.color } });
        }
        return {};
    }
    function baseEncodeEntry(model, ignore) {
        const { fill, stroke } = color$3(model);
        return Object.assign({}, markDefProperties(model.markDef, ignore), wrapAllFieldsInvalid(model, 'fill', fill), wrapAllFieldsInvalid(model, 'stroke', stroke), nonPosition('opacity', model), nonPosition('fillOpacity', model), nonPosition('strokeOpacity', model), nonPosition('strokeWidth', model), tooltip(model), text$3(model, 'href'));
    }
    function wrapAllFieldsInvalid(model, channel, valueRef) {
        const { config, mark } = model;
        if (config.invalidValues && valueRef && !isPathMark(mark)) {
            // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.
            // For path marks, we will use "defined" property and skip these values instead.
            const test = allFieldsInvalidPredicate(model, { invalid: true, channels: SCALE_CHANNELS });
            if (test) {
                return {
                    [channel]: [
                        // prepend the invalid case
                        // TODO: support custom value
                        { test, value: null },
                        ...array(valueRef)
                    ]
                };
            }
        }
        return valueRef ? { [channel]: valueRef } : {};
    }
    function markDefProperties(mark, ignore) {
        return VG_MARK_CONFIGS.reduce((m, prop) => {
            if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {
                m[prop] = { value: mark[prop] };
            }
            return m;
        }, {});
    }
    function valueIfDefined(prop, value) {
        if (value !== undefined) {
            return { [prop]: { value: value } };
        }
        return undefined;
    }
    function allFieldsInvalidPredicate(model, { invalid = false, channels }) {
        const filterIndex = channels.reduce((aggregator, channel) => {
            const scaleComponent = model.getScaleComponent(channel);
            if (scaleComponent) {
                const scaleType = scaleComponent.get('type');
                const field = model.vgField(channel, { expr: 'datum' });
                // While discrete domain scales can handle invalid values, continuous scales can't.
                if (field && hasContinuousDomain(scaleType)) {
                    aggregator[field] = true;
                }
            }
            return aggregator;
        }, {});
        const fields = keys(filterIndex);
        if (fields.length > 0) {
            const op = invalid ? '||' : '&&';
            return fields.map(field => fieldInvalidPredicate(field, invalid)).join(` ${op} `);
        }
        return undefined;
    }
    function defined$1(model) {
        if (model.config.invalidValues === 'filter') {
            const signal = allFieldsInvalidPredicate(model, { channels: ['x', 'y'] });
            if (signal) {
                return { defined: { signal } };
            }
        }
        return {};
    }
    /**
     * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)
     */
    function nonPosition(channel, model, opt = {}) {
        const { markDef, encoding } = model;
        const { vgChannel = channel } = opt;
        const { defaultValue = markDef[vgChannel] } = opt;
        const defaultRef = opt.defaultRef || (defaultValue !== undefined ? { value: defaultValue } : undefined);
        const channelDef = encoding[channel];
        return wrapCondition(model, channelDef, vgChannel, cDef => {
            return midPoint({
                channel,
                channelDef: cDef,
                scaleName: model.scaleName(channel),
                scale: model.getScaleComponent(channel),
                stack: null,
                defaultRef
            });
        });
    }
    /**
     * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.
     * or a simple mixin if channel def has no condition.
     */
    function wrapCondition(model, channelDef, vgChannel, refFn) {
        const condition = channelDef && channelDef.condition;
        const valueRef = refFn(channelDef);
        if (condition) {
            const conditions = isArray(condition) ? condition : [condition];
            const vgConditions = conditions.map(c => {
                const conditionValueRef = refFn(c);
                const test = isConditionalSelection(c) ? selectionPredicate(model, c.selection) : expression$2(model, c.test);
                return Object.assign({ test }, conditionValueRef);
            });
            return {
                [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]
            };
        }
        else {
            return valueRef !== undefined ? { [vgChannel]: valueRef } : {};
        }
    }
    function tooltip(model) {
        const { encoding, markDef, config } = model;
        const channelDef = encoding.tooltip;
        if (isArray(channelDef)) {
            return { tooltip: tooltipForEncoding({ tooltip: channelDef }, config) };
        }
        else {
            return wrapCondition(model, channelDef, 'tooltip', cDef => {
                // use valueRef based on channelDef first
                const tooltipRefFromChannelDef = text$2(cDef, model.config);
                if (tooltipRefFromChannelDef) {
                    return tooltipRefFromChannelDef;
                }
                if (cDef === null) {
                    // Allow using encoding.tooltip = null to disable tooltip
                    return undefined;
                }
                // If tooltipDef does not exist, then use value from markDef or config
                const markTooltip = getFirstDefined(markDef.tooltip, getMarkConfig('tooltip', markDef, config));
                if (isString(markTooltip)) {
                    return { value: markTooltip };
                }
                else if (isObject(markTooltip)) {
                    // `tooltip` is `{fields: 'encodings' | 'fields'}`
                    if (markTooltip.content === 'encoding') {
                        return tooltipForEncoding(encoding, config);
                    }
                    else {
                        return { signal: 'datum' };
                    }
                }
                return undefined;
            });
        }
    }
    function text$3(model, channel = 'text') {
        const channelDef = model.encoding[channel];
        return wrapCondition(model, channelDef, channel, cDef => text$2(cDef, model.config));
    }
    function bandPosition(fieldDef, channel, model) {
        const scaleName = model.scaleName(channel);
        const sizeChannel = channel === 'x' ? 'width' : 'height';
        if (model.encoding.size || model.markDef.size !== undefined) {
            const orient = model.markDef.orient;
            if (orient) {
                const centeredBandPositionMixins = {
                    // Use xc/yc and place the mark at the middle of the band
                    // This way we never have to deal with size's condition for x/y position.
                    [channel + 'c']: fieldRef$1(fieldDef, scaleName, {}, { band: 0.5 })
                };
                if (getTypedFieldDef(model.encoding.size)) {
                    return Object.assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));
                }
                else if (isValueDef(model.encoding.size)) {
                    return Object.assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));
                }
                else if (model.markDef.size !== undefined) {
                    return Object.assign({}, centeredBandPositionMixins, { [sizeChannel]: { value: model.markDef.size } });
                }
            }
            else {
                warn(message.cannotApplySizeToNonOrientedMark(model.markDef.type));
            }
        }
        return {
            // FIXME: make offset works correctly here when we support group bar (https://github.com/vega/vega-lite/issues/396)
            [channel]: fieldRef$1(fieldDef, scaleName, { binSuffix: 'range' }, {}),
            [sizeChannel]: bandRef(scaleName)
        };
    }
    function centeredBandPosition(channel, model, defaultPosRef, defaultSizeRef) {
        const centerChannel = channel === 'x' ? 'xc' : 'yc';
        const sizeChannel = channel === 'x' ? 'width' : 'height';
        return Object.assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));
    }
    function binPosition({ fieldDef, fieldDef2, channel, scaleName, mark, spacing = 0, reverse }) {
        const binSpacing = {
            x: reverse ? spacing : 0,
            x2: reverse ? 0 : spacing,
            y: reverse ? 0 : spacing,
            y2: reverse ? spacing : 0
        };
        const channel2 = channel === X ? X2 : Y2;
        if (isBinning(fieldDef.bin)) {
            return {
                [channel2]: bin$2({
                    channel,
                    fieldDef,
                    scaleName,
                    mark,
                    side: 'start',
                    offset: binSpacing[`${channel}2`]
                }),
                [channel]: bin$2({ channel, fieldDef, scaleName, mark, side: 'end', offset: binSpacing[channel] })
            };
        }
        else if (isBinned(fieldDef.bin) && isFieldDef(fieldDef2)) {
            return {
                [channel2]: fieldRef$1(fieldDef, scaleName, {}, { offset: binSpacing[`${channel}2`] }),
                [channel]: fieldRef$1(fieldDef2, scaleName, {}, { offset: binSpacing[channel] })
            };
        }
        else {
            warn(message.channelRequiredForBinned(channel2));
            return undefined;
        }
    }
    /**
     * Return mixins for point (non-band) position channels.
     */
    function pointPosition(channel, model, defaultRef, vgChannel) {
        // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613
        const { encoding, mark, markDef, config, stack } = model;
        const channelDef = encoding[channel];
        const channel2Def = encoding[channel === X ? X2 : Y2];
        const scaleName = model.scaleName(channel);
        const scale = model.getScaleComponent(channel);
        const offset = getOffset(channel, model.markDef);
        const valueRef = !channelDef && (encoding.latitude || encoding.longitude)
            ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.
                { field: model.getName(channel) }
            : position({
                channel,
                channelDef,
                channel2Def,
                scaleName,
                scale,
                stack,
                mark,
                offset,
                defaultRef: positionDefault({
                    markDef,
                    config,
                    defaultRef,
                    channel,
                    scaleName,
                    scale,
                    mark,
                    checkBarAreaWithoutZero: !channel2Def // only check for non-ranged marks
                })
            });
        return {
            [vgChannel || channel]: valueRef
        };
    }
    /**
     * Return mixins for x2, y2.
     * If channel is not specified, return one channel based on orientation.
     */
    function pointPosition2(model, defaultRef, channel) {
        const { encoding, mark, markDef, stack, config } = model;
        const baseChannel = channel === 'x2' ? 'x' : 'y';
        const channelDef = encoding[baseChannel];
        const scaleName = model.scaleName(baseChannel);
        const scale = model.getScaleComponent(baseChannel);
        const offset = getOffset(channel, model.markDef);
        const valueRef = !channelDef && (encoding.latitude || encoding.longitude)
            ? // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.
                { field: model.getName(channel) }
            : position2({
                channel,
                channelDef,
                channel2Def: encoding[channel],
                scaleName,
                scale,
                stack,
                mark,
                offset,
                defaultRef: positionDefault({
                    markDef,
                    config,
                    defaultRef,
                    channel,
                    scaleName,
                    scale,
                    mark,
                    checkBarAreaWithoutZero: !encoding[channel] // only check for non-ranged marks
                })
            });
        return { [channel]: valueRef };
    }

    function guideEncodeEntry(encoding, model) {
        return keys(encoding).reduce((encode, channel) => {
            const valueDef = encoding[channel];
            return Object.assign({}, encode, wrapCondition(model, valueDef, channel, (x) => ({ value: x.value })));
        }, {});
    }

    function defaultScaleResolve(channel, model) {
        if (isLayerModel(model) || isFacetModel(model)) {
            return 'shared';
        }
        else if (isConcatModel(model) || isRepeatModel(model)) {
            return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';
        }
        /* istanbul ignore next: should never reach here. */
        throw new Error('invalid model type for resolve');
    }
    function parseGuideResolve(resolve, channel) {
        const channelScaleResolve = resolve.scale[channel];
        const guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';
        if (channelScaleResolve === 'independent') {
            if (resolve[guide][channel] === 'shared') {
                warn(message.independentScaleMeansIndependentGuide(channel));
            }
            return 'independent';
        }
        return resolve[guide][channel] || 'shared';
    }

    /**
     * Generic class for storing properties that are explicitly specified
     * and implicitly determined by the compiler.
     * This is important for scale/axis/legend merging as
     * we want to prioritize properties that users explicitly specified.
     */
    class Split {
        constructor(explicit = {}, implicit = {}) {
            this.explicit = explicit;
            this.implicit = implicit;
        }
        clone() {
            return new Split(duplicate(this.explicit), duplicate(this.implicit));
        }
        combine() {
            // FIXME remove "as any".
            // Add "as any" to avoid an error "Spread types may only be created from object types".
            return Object.assign({}, this.explicit, this.implicit);
        }
        get(key) {
            // Explicit has higher precedence
            return getFirstDefined(this.explicit[key], this.implicit[key]);
        }
        getWithExplicit(key) {
            // Explicit has higher precedence
            if (this.explicit[key] !== undefined) {
                return { explicit: true, value: this.explicit[key] };
            }
            else if (this.implicit[key] !== undefined) {
                return { explicit: false, value: this.implicit[key] };
            }
            return { explicit: false, value: undefined };
        }
        setWithExplicit(key, value) {
            if (value.value !== undefined) {
                this.set(key, value.value, value.explicit);
            }
        }
        set(key, value, explicit) {
            delete this[explicit ? 'implicit' : 'explicit'][key];
            this[explicit ? 'explicit' : 'implicit'][key] = value;
            return this;
        }
        copyKeyFromSplit(key, s) {
            // Explicit has higher precedence
            if (s.explicit[key] !== undefined) {
                this.set(key, s.explicit[key], true);
            }
            else if (s.implicit[key] !== undefined) {
                this.set(key, s.implicit[key], false);
            }
        }
        copyKeyFromObject(key, s) {
            // Explicit has higher precedence
            if (s[key] !== undefined) {
                this.set(key, s[key], true);
            }
        }
        /**
         * Merge split object into this split object. Properties from the other split
         * overwrite properties from this split.
         */
        copyAll(other) {
            for (const key of keys(other.combine())) {
                const val = other.getWithExplicit(key);
                this.setWithExplicit(key, val);
            }
        }
    }
    function makeExplicit(value) {
        return {
            explicit: true,
            value
        };
    }
    function makeImplicit(value) {
        return {
            explicit: false,
            value
        };
    }
    function tieBreakByComparing(compare) {
        return (v1, v2, property, propertyOf) => {
            const diff = compare(v1.value, v2.value);
            if (diff > 0) {
                return v1;
            }
            else if (diff < 0) {
                return v2;
            }
            return defaultTieBreaker(v1, v2, property, propertyOf);
        };
    }
    function defaultTieBreaker(v1, v2, property, propertyOf) {
        if (v1.explicit && v2.explicit) {
            warn(message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));
        }
        // If equal score, prefer v1.
        return v1;
    }
    function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker = defaultTieBreaker) {
        if (v1 === undefined || v1.value === undefined) {
            // For first run
            return v2;
        }
        if (v1.explicit && !v2.explicit) {
            return v1;
        }
        else if (v2.explicit && !v1.explicit) {
            return v2;
        }
        else if (stringify(v1.value) === stringify(v2.value)) {
            return v1;
        }
        else {
            return tieBreaker(v1, v2, property, propertyOf);
        }
    }

    class LegendComponent extends Split {
    }

    function values$2(legend, fieldDef) {
        const vals = legend.values;
        if (vals) {
            return valueArray(fieldDef, vals);
        }
        return undefined;
    }
    function type$2(params) {
        const { legend } = params;
        return getFirstDefined(legend.type, defaultType$1(params));
    }
    function defaultType$1({ channel, timeUnit, scaleType, alwaysReturn }) {
        // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js
        if (isColorChannel(channel)) {
            if (contains(['quarter', 'month', 'day'], timeUnit)) {
                return 'symbol';
            }
            if (isContinuousToContinuous(scaleType)) {
                return alwaysReturn ? 'gradient' : undefined;
            }
        }
        return alwaysReturn ? 'symbol' : undefined;
    }
    function direction({ legend, legendConfig, timeUnit, channel, scaleType }) {
        const orient = getFirstDefined(legend.orient, legendConfig.orient, 'right');
        const legendType = type$2({ legend, channel, timeUnit, scaleType, alwaysReturn: true });
        return getFirstDefined(legend.direction, legendConfig[legendType ? 'gradientDirection' : 'symbolDirection'], defaultDirection(orient, legendType));
    }
    function defaultDirection(orient, legendType) {
        switch (orient) {
            case 'top':
            case 'bottom':
                return 'horizontal';
            case 'left':
            case 'right':
            case 'none':
            case undefined: // undefined = "right" in Vega
                return undefined; // vertical is Vega's default
            default:
                // top-left / ...
                // For inner legend, uses compact layout like Tableau
                return legendType === 'gradient' ? 'horizontal' : undefined;
        }
    }
    function defaultGradientLength({ legend, legendConfig, model, channel, scaleType }) {
        const { gradientHorizontalMaxLength, gradientHorizontalMinLength, gradientVerticalMaxLength, gradientVerticalMinLength } = legendConfig;
        const dir = direction({ legend, legendConfig, channel, scaleType });
        if (dir === 'horizontal') {
            const orient = getFirstDefined(legend.orient, legendConfig.orient);
            if (orient === 'top' || orient === 'bottom') {
                return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);
            }
            else {
                return gradientHorizontalMinLength;
            }
        }
        else {
            // vertical / undefined (Vega uses vertical by default)
            return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);
        }
    }
    function gradientLengthSignal(model, sizeType, min, max) {
        const sizeSignal = model.getSizeSignalRef(sizeType).signal;
        return { signal: `clamp(${sizeSignal}, ${min}, ${max})` };
    }
    function defaultLabelOverlap(scaleType) {
        if (contains(['quantile', 'threshold', 'log'], scaleType)) {
            return 'greedy';
        }
        return undefined;
    }

    function type$3(legendCmp, model, channel) {
        const scaleType = model.getScaleComponent(channel).get('type');
        return getFirstDefined(legendCmp.get('type'), defaultType$1({ channel, scaleType, alwaysReturn: true }));
    }
    function symbols$3(fieldDef, symbolsSpec, model, channel, legendCmp) {
        if (type$3(legendCmp, model, channel) !== 'symbol') {
            return undefined;
        }
        let out = Object.assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG), color$3(model)); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry
        switch (model.mark) {
            case BAR:
            case TICK:
            case TEXT:
                out.shape = { value: 'square' };
                break;
            case CIRCLE:
            case SQUARE:
                out.shape = { value: model.mark };
                break;
            case POINT:
            case LINE:
            case GEOSHAPE:
            case AREA:
                // use default circle
                break;
        }
        const { markDef, encoding } = model;
        const filled = markDef.filled;
        const opacity = getMaxValue(encoding.opacity) || markDef.opacity;
        if (out.fill) {
            // for fill legend, we don't want any fill in symbol
            if (channel === 'fill' || (filled && channel === COLOR)) {
                delete out.fill;
            }
            else {
                if (out.fill['field']) {
                    // For others, set fill to some opaque value (or nothing if a color is already set)
                    if (legendCmp.get('symbolFillColor')) {
                        delete out.fill;
                    }
                    else {
                        out.fill = { value: 'black' };
                        out.fillOpacity = { value: opacity || 1 };
                    }
                }
                else if (isArray(out.fill)) {
                    const fill = getFirstConditionValue(encoding.fill || encoding.color) ||
                        markDef.fill ||
                        (filled && markDef.color);
                    if (fill) {
                        out.fill = { value: fill };
                    }
                }
            }
        }
        if (out.stroke) {
            if (channel === 'stroke' || (!filled && channel === COLOR)) {
                delete out.stroke;
            }
            else {
                if (out.stroke['field']) {
                    // For others, remove stroke field
                    delete out.stroke;
                }
                else if (isArray(out.stroke)) {
                    const stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);
                    if (stroke) {
                        out.stroke = { value: stroke };
                    }
                }
            }
        }
        if (channel !== SHAPE) {
            const shape = getFirstConditionValue(encoding.shape) || markDef.shape;
            if (shape) {
                out.shape = { value: shape };
            }
        }
        if (channel !== OPACITY) {
            if (opacity) {
                // only apply opacity if it is neither zero or undefined
                out.opacity = { value: opacity };
            }
        }
        out = Object.assign({}, out, symbolsSpec);
        return keys(out).length > 0 ? out : undefined;
    }
    function gradient$2(fieldDef, gradientSpec, model, channel, legendCmp) {
        if (type$3(legendCmp, model, channel) !== 'gradient') {
            return undefined;
        }
        let out = {};
        const opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;
        if (opacity) {
            // only apply opacity if it is neither zero or undefined
            out.opacity = { value: opacity };
        }
        out = Object.assign({}, out, gradientSpec);
        return keys(out).length > 0 ? out : undefined;
    }
    function labels(fieldDef, labelsSpec, model, channel, legendCmp) {
        const legend = model.legend(channel);
        const config = model.config;
        let out = {};
        if (isTimeFieldDef(fieldDef)) {
            const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;
            const expr = timeFormatExpression('datum.value', fieldDef.timeUnit, legend.format, config.legend.shortTimeLabels, config.timeFormat, isUTCScale);
            labelsSpec = Object.assign({}, (expr ? { text: { signal: expr } } : {}), labelsSpec);
        }
        out = Object.assign({}, out, labelsSpec);
        return keys(out).length > 0 ? out : undefined;
    }
    function getMaxValue(channelDef) {
        return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));
    }
    function getFirstConditionValue(channelDef) {
        return getConditionValue(channelDef, (v, conditionalDef) => {
            return getFirstDefined(v, conditionalDef.value);
        });
    }
    function getConditionValue(channelDef, reducer) {
        if (hasConditionalValueDef(channelDef)) {
            return (isArray(channelDef.condition) ? channelDef.condition : [channelDef.condition]).reduce(reducer, channelDef.value);
        }
        else if (isValueDef(channelDef)) {
            return channelDef.value;
        }
        return undefined;
    }

    var encode$2 = /*#__PURE__*/Object.freeze({
        symbols: symbols$3,
        gradient: gradient$2,
        labels: labels
    });

    function parseLegend(model) {
        if (isUnitModel(model)) {
            model.component.legends = parseUnitLegend(model);
        }
        else {
            model.component.legends = parseNonUnitLegend(model);
        }
    }
    function parseUnitLegend(model) {
        const { encoding } = model;
        return [COLOR, FILL, STROKE, STROKEWIDTH, SIZE, SHAPE, OPACITY, FILLOPACITY, STROKEOPACITY].reduce((legendComponent, channel) => {
            const def = encoding[channel];
            if (model.legend(channel) &&
                model.getScaleComponent(channel) &&
                !(isFieldDef(def) && (channel === SHAPE && def.type === GEOJSON))) {
                legendComponent[channel] = parseLegendForChannel(model, channel);
            }
            return legendComponent;
        }, {});
    }
    function getLegendDefWithScale(model, channel) {
        const scale = model.scaleName(COLOR);
        if (channel === 'color') {
            return model.markDef.filled ? { fill: scale } : { stroke: scale };
        }
        return { [channel]: model.scaleName(channel) };
    }
    function isExplicit(value, property, legend, fieldDef) {
        switch (property) {
            case 'values':
                // specified legend.values is already respected, but may get transformed.
                return !!legend.values;
            case 'title':
                // title can be explicit if fieldDef.title is set
                if (property === 'title' && value === fieldDef.title) {
                    return true;
                }
        }
        // Otherwise, things are explicit if the returned value matches the specified property
        return value === legend[property];
    }
    function parseLegendForChannel(model, channel) {
        const fieldDef = model.fieldDef(channel);
        const legend = model.legend(channel);
        const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));
        for (const property of LEGEND_PROPERTIES) {
            const value = getProperty(property, legend, channel, model);
            if (value !== undefined) {
                const explicit = isExplicit(value, property, legend, fieldDef);
                if (explicit || model.config.legend[property] === undefined) {
                    legendCmpt.set(property, value, explicit);
                }
            }
        }
        const legendEncoding = legend.encoding || {};
        const legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce((e, part) => {
            const legendEncodingPart = guideEncodeEntry(legendEncoding[part] || {}, model);
            const value = encode$2[part]
                ? encode$2[part](fieldDef, legendEncodingPart, model, channel, legendCmpt) // apply rule
                : legendEncodingPart; // no rule -- just default values
            if (value !== undefined && keys(value).length > 0) {
                e[part] = { update: value };
            }
            return e;
        }, {});
        if (keys(legendEncode).length > 0) {
            legendCmpt.set('encode', legendEncode, !!legend.encoding);
        }
        return legendCmpt;
    }
    function getProperty(property, legend, channel, model) {
        const { encoding } = model;
        const fieldDef = getTypedFieldDef(encoding[channel]);
        const legendConfig = model.config.legend;
        const { timeUnit } = fieldDef;
        const scaleType = model.getScaleComponent(channel).get('type');
        switch (property) {
            case 'format':
                // We don't include temporal field here as we apply format in encode block
                return numberFormat(fieldDef, legend.format, model.config);
            case 'title':
                return title(fieldDef, model.config, { allowDisabling: true }) || undefined;
            case 'type':
                return type$2({ legend, channel, timeUnit, scaleType, alwaysReturn: false });
            case 'direction':
                return direction({ legend, legendConfig, timeUnit, channel, scaleType });
            // TODO: enable when https://github.com/vega/vega/issues/1351 is fixed
            // case 'clipHeight':
            //   return getFirstDefined(specifiedLegend.clipHeight, properties.clipHeight(properties.type(...)));
            case 'labelOverlap':
                return getFirstDefined(legend.labelOverlap, defaultLabelOverlap(scaleType));
            case 'gradientLength':
                return getFirstDefined(
                // do specified gradientLength first
                legend.gradientLength, legendConfig.gradientLength, 
                // Otherwise, use smart default based on plot height
                defaultGradientLength({
                    model,
                    legend,
                    legendConfig,
                    channel,
                    scaleType
                }));
            case 'values':
                return values$2(legend, fieldDef);
        }
        // Otherwise, return specified property.
        return legend[property];
    }
    function parseNonUnitLegend(model) {
        const { legends, resolve } = model.component;
        for (const child of model.children) {
            parseLegend(child);
            keys(child.component.legends).forEach((channel) => {
                resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);
                if (resolve.legend[channel] === 'shared') {
                    // If the resolve says shared (and has not been overridden)
                    // We will try to merge and see if there is a conflict
                    legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);
                    if (!legends[channel]) {
                        // If merge returns nothing, there is a conflict so we cannot make the legend shared.
                        // Thus, mark legend as independent and remove the legend component.
                        resolve.legend[channel] = 'independent';
                        delete legends[channel];
                    }
                }
            });
        }
        keys(legends).forEach((channel) => {
            for (const child of model.children) {
                if (!child.component.legends[channel]) {
                    // skip if the child does not have a particular legend
                    continue;
                }
                if (resolve.legend[channel] === 'shared') {
                    // After merging shared legend, make sure to remove legend from child
                    delete child.component.legends[channel];
                }
            }
        });
        return legends;
    }
    function mergeLegendComponent(mergedLegend, childLegend) {
        if (!mergedLegend) {
            return childLegend.clone();
        }
        const mergedOrient = mergedLegend.getWithExplicit('orient');
        const childOrient = childLegend.getWithExplicit('orient');
        if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
            // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
            // Cannot merge due to inconsistent orient
            return undefined;
        }
        let typeMerged = false;
        // Otherwise, let's merge
        for (const prop of VG_LEGEND_PROPERTIES) {
            const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', 
            // Tie breaker function
            (v1, v2) => {
                switch (prop) {
                    case 'title':
                        return mergeTitleComponent(v1, v2);
                    case 'type':
                        // There are only two types. If we have different types, then prefer symbol over gradient.
                        typeMerged = true;
                        return makeImplicit('symbol');
                }
                return defaultTieBreaker(v1, v2, prop, 'legend');
            });
            mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);
        }
        if (typeMerged) {
            if (((mergedLegend.implicit || {}).encode || {}).gradient) {
                deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);
            }
            if (((mergedLegend.explicit || {}).encode || {}).gradient) {
                deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);
            }
        }
        return mergedLegend;
    }

    function assembleLegends(model) {
        const legendComponentIndex = model.component.legends;
        const legendByDomain = {};
        for (const channel of keys(legendComponentIndex)) {
            const scaleComponent = model.getScaleComponent(channel);
            const domainHash = stringify(scaleComponent.domains);
            if (legendByDomain[domainHash]) {
                for (const mergedLegendComponent of legendByDomain[domainHash]) {
                    const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);
                    if (!merged) {
                        // If cannot merge, need to add this legend separately
                        legendByDomain[domainHash].push(legendComponentIndex[channel]);
                    }
                }
            }
            else {
                legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];
            }
        }
        return flatten(vals(legendByDomain)).map((legendCmpt) => {
            const legend = legendCmpt.combine();
            // For non color channel's legend, we need to override symbol stroke config from Vega config
            if (legend.encode && legend.encode.symbols) {
                const out = legend.encode.symbols.update;
                if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {
                    // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.
                    out.stroke = { value: 'transparent' };
                }
            }
            return legend;
        });
    }

    function assembleProjections(model) {
        if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {
            return assembleProjectionsForModelAndChildren(model);
        }
        else {
            return assembleProjectionForModel(model);
        }
    }
    function assembleProjectionsForModelAndChildren(model) {
        return model.children.reduce((projections, child) => {
            return projections.concat(child.assembleProjections());
        }, assembleProjectionForModel(model));
    }
    function assembleProjectionForModel(model) {
        const component = model.component.projection;
        if (!component || component.merged) {
            return [];
        }
        const projection = component.combine();
        const { name } = projection, rest = __rest(projection, ["name"]); // we need to extract name so that it is always present in the output and pass TS type validation
        const size = {
            signal: `[${component.size.map(ref => ref.signal).join(', ')}]`
        };
        const fit = component.data.reduce((sources, data) => {
            const source = isSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;
            if (!contains(sources, source)) {
                // build a unique list of sources
                sources.push(source);
            }
            return sources;
        }, []);
        if (fit.length <= 0) {
            throw new Error("Projection's fit didn't find any data sources");
        }
        return [
            Object.assign({ name,
                size, fit: {
                    signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]
                } }, rest)
        ];
    }

    const PROJECTION_PROPERTIES = [
        'type',
        'clipAngle',
        'clipExtent',
        'center',
        'rotate',
        'precision',
        'coefficient',
        'distance',
        'fraction',
        'lobes',
        'parallel',
        'radius',
        'ratio',
        'spacing',
        'tilt'
    ];

    class ProjectionComponent extends Split {
        constructor(name, specifiedProjection, size, data) {
            super(Object.assign({}, specifiedProjection), // all explicit properties of projection
            { name } // name as initial implicit property
            );
            this.specifiedProjection = specifiedProjection;
            this.size = size;
            this.data = data;
            this.merged = false;
        }
    }

    function parseProjection(model) {
        if (isUnitModel(model)) {
            model.component.projection = parseUnitProjection(model);
        }
        else {
            // because parse happens from leaves up (unit specs before layer spec),
            // we can be sure that the above if statement has already occurred
            // and therefore we have access to child.component.projection
            // for each of model's children
            model.component.projection = parseNonUnitProjections(model);
        }
    }
    function parseUnitProjection(model) {
        const { specifiedProjection, config, hasProjection } = model;
        if (hasProjection) {
            const data = [];
            [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(posssiblePair => {
                if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {
                    data.push({
                        signal: model.getName(`geojson_${data.length}`)
                    });
                }
            });
            if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {
                data.push({
                    signal: model.getName(`geojson_${data.length}`)
                });
            }
            if (data.length === 0) {
                // main source is geojson, so we can just use that
                data.push(model.requestDataName(MAIN));
            }
            return new ProjectionComponent(model.projectionName(true), Object.assign({}, (config.projection || {}), (specifiedProjection || {})), [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')], data);
        }
        return undefined;
    }
    function mergeIfNoConflict(first, second) {
        const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {
            // neither has the property
            if (!first.explicit.hasOwnProperty(prop) && !second.explicit.hasOwnProperty(prop)) {
                return true;
            }
            // both have property and an equal value for property
            if (first.explicit.hasOwnProperty(prop) &&
                second.explicit.hasOwnProperty(prop) &&
                // some properties might be signals or objects and require hashing for comparison
                stringify(first.get(prop)) === stringify(second.get(prop))) {
                return true;
            }
            return false;
        });
        const size = stringify(first.size) === stringify(second.size);
        if (size) {
            if (allPropertiesShared) {
                return first;
            }
            else if (stringify(first.explicit) === stringify({})) {
                return second;
            }
            else if (stringify(second.explicit) === stringify({})) {
                return first;
            }
        }
        // if all properties don't match, let each unit spec have its own projection
        return null;
    }
    function parseNonUnitProjections(model) {
        if (model.children.length === 0) {
            return undefined;
        }
        let nonUnitProjection;
        const mergable = every(model.children, child => {
            parseProjection(child);
            const projection = child.component.projection;
            if (!projection) {
                // child layer does not use a projection
                return true;
            }
            else if (!nonUnitProjection) {
                // cached 'projection' is null, cache this one
                nonUnitProjection = projection;
                return true;
            }
            else {
                const merge = mergeIfNoConflict(nonUnitProjection, projection);
                if (merge) {
                    nonUnitProjection = merge;
                }
                return !!merge;
            }
        });
        // it cached one and all other children share the same projection,
        if (nonUnitProjection && mergable) {
            // so we can elevate it to the layer level
            const name = model.projectionName(true);
            const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));
            // rename and assign all others as merged
            model.children.forEach(child => {
                if (child.component.projection) {
                    modelProjection.data.push(...child.component.projection.data);
                    child.renameProjection(child.component.projection.get('name'), name);
                    child.component.projection.merged = true;
                }
            });
            return modelProjection;
        }
        return undefined;
    }

    /**
     * Iterates over a dataflow graph and checks whether all links are consistent.
     */
    function checkLinks(nodes) {
        for (const node of nodes) {
            for (const child of node.children) {
                if (child.parent !== node) {
                    console.error('Dataflow graph is inconsistent.', parent, child);
                    return false;
                }
            }
            if (!checkLinks(node.children)) {
                return false;
            }
        }
        return true;
    }

    class SourceNode extends DataFlowNode {
        constructor(data) {
            super(null); // source cannot have parent
            data = data || { name: 'source' };
            const format = data.format ? Object.assign({}, omit(data.format, ['parse'])) : {};
            if (isInlineData(data)) {
                this._data = { values: data.values };
            }
            else if (isUrlData(data)) {
                this._data = { url: data.url };
                if (!format.type) {
                    // Extract extension from URL using snippet from
                    // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript
                    let defaultExtension = /(?:\.([^.]+))?$/.exec(data.url)[1];
                    if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {
                        defaultExtension = 'json';
                    }
                    // defaultExtension has type string but we ensure that it is DataFormatType above
                    format.type = defaultExtension;
                }
            }
            else if (isNamedData(data)) {
                this._data = {};
            }
            // any dataset can be named
            if (data.name) {
                this._name = data.name;
            }
            if (format && keys(format).length > 0) {
                this._data.format = format;
            }
        }
        get data() {
            return this._data;
        }
        hasName() {
            return !!this._name;
        }
        get dataName() {
            return this._name;
        }
        set dataName(name) {
            this._name = name;
        }
        set parent(parent) {
            throw new Error('Source nodes have to be roots.');
        }
        remove() {
            throw new Error('Source nodes are roots and cannot be removed.');
        }
        hash() {
            throw new Error('Cannot hash sources');
        }
        assemble() {
            return Object.assign({ name: this._name }, this._data, { transform: [] });
        }
    }

    /**
     * Abstract base class for BottomUpOptimizer and TopDownOptimizer.
     * Contains only mutation handling logic. Subclasses need to implement iteration logic.
     */
    class OptimizerBase {
        constructor() {
            this._mutated = false;
        }
        // Once true, _mutated is never set to false
        setMutated() {
            this._mutated = true;
        }
        get mutatedFlag() {
            return this._mutated;
        }
    }
    /**
     * Starts from a node and runs the optimization function(the "run" method) upwards to the root,
     * depending on the continueFlag and mutatedFlag values returned by the optimization function.
     */
    class BottomUpOptimizer extends OptimizerBase {
        constructor() {
            super();
            this._continue = false;
        }
        setContinue() {
            this._continue = true;
        }
        get continueFlag() {
            return this._continue;
        }
        get flags() {
            return { continueFlag: this.continueFlag, mutatedFlag: this.mutatedFlag };
        }
        set flags({ continueFlag, mutatedFlag }) {
            if (continueFlag) {
                this.setContinue();
            }
            if (mutatedFlag) {
                this.setMutated();
            }
        }
        optimizeNextFromLeaves(node) {
            if (node instanceof SourceNode) {
                return false;
            }
            const next = node.parent;
            const { continueFlag } = this.run(node);
            if (continueFlag) {
                this.optimizeNextFromLeaves(next);
            }
            return this.mutatedFlag;
        }
    }
    /**
     * The optimizer function( the "run" method), is invoked on the given node and then continues recursively.
     */
    class TopDownOptimizer extends OptimizerBase {
    }

    function addDimension(dims, channel, fieldDef) {
        if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
            dims.add(vgField(fieldDef, {}));
            dims.add(vgField(fieldDef, { binSuffix: 'end' }));
            if (binRequiresRange(fieldDef, channel)) {
                dims.add(vgField(fieldDef, { binSuffix: 'range' }));
            }
        }
        else {
            dims.add(vgField(fieldDef));
        }
        return dims;
    }
    function mergeMeasures(parentMeasures, childMeasures) {
        for (const field of keys(childMeasures)) {
            // when we merge a measure, we either have to add an aggregation operator or even a new field
            const ops = childMeasures[field];
            for (const op of keys(ops)) {
                if (field in parentMeasures) {
                    // add operator to existing measure field
                    parentMeasures[field][op] = new Set([...(parentMeasures[field][op] || []), ...ops[op]]);
                }
                else {
                    parentMeasures[field] = { [op]: ops[op] };
                }
            }
        }
    }
    class AggregateNode extends DataFlowNode {
        /**
         * @param dimensions string set for dimensions
         * @param measures dictionary mapping field name => dict of aggregation functions and names to use
         */
        constructor(parent, dimensions, measures) {
            super(parent);
            this.dimensions = dimensions;
            this.measures = measures;
        }
        clone() {
            return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));
        }
        get groupBy() {
            return this.dimensions;
        }
        static makeFromEncoding(parent, model) {
            let isAggregate = false;
            model.forEachFieldDef(fd => {
                if (fd.aggregate) {
                    isAggregate = true;
                }
            });
            const meas = {};
            const dims = new Set();
            if (!isAggregate) {
                // no need to create this node if the model has no aggregation
                return null;
            }
            model.forEachFieldDef((fieldDef, channel) => {
                const { aggregate, field } = fieldDef;
                if (aggregate) {
                    if (aggregate === 'count') {
                        meas['*'] = meas['*'] || {};
                        meas['*']['count'] = new Set([vgField(fieldDef, { forAs: true })]);
                    }
                    else {
                        meas[field] = meas[field] || {};
                        meas[field][aggregate] = new Set([vgField(fieldDef, { forAs: true })]);
                        // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain
                        if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {
                            meas[field]['min'] = new Set([vgField({ field, aggregate: 'min' }, { forAs: true })]);
                            meas[field]['max'] = new Set([vgField({ field, aggregate: 'max' }, { forAs: true })]);
                        }
                    }
                }
                else {
                    addDimension(dims, channel, fieldDef);
                }
            });
            if (dims.size + keys(meas).length === 0) {
                return null;
            }
            return new AggregateNode(parent, dims, meas);
        }
        static makeFromTransform(parent, t) {
            const dims = new Set();
            const meas = {};
            for (const s of t.aggregate) {
                const { op, field, as } = s;
                if (op) {
                    if (op === 'count') {
                        meas['*'] = meas['*'] || {};
                        meas['*']['count'] = new Set([as ? as : vgField(s, { forAs: true })]);
                    }
                    else {
                        meas[field] = meas[field] || {};
                        meas[field][op] = new Set([as ? as : vgField(s, { forAs: true })]);
                    }
                }
            }
            for (const s of t.groupby || []) {
                dims.add(s);
            }
            if (dims.size + keys(meas).length === 0) {
                return null;
            }
            return new AggregateNode(parent, dims, meas);
        }
        merge(other) {
            if (setEqual(this.dimensions, other.dimensions)) {
                mergeMeasures(this.measures, other.measures);
                return true;
            }
            else {
                debug('different dimensions, cannot merge');
                return false;
            }
        }
        addDimensions(fields) {
            fields.forEach(this.dimensions.add, this.dimensions);
        }
        dependentFields() {
            return new Set([...this.dimensions, ...keys(this.measures)]);
        }
        producedFields() {
            const out = new Set();
            for (const field of keys(this.measures)) {
                for (const op of keys(this.measures[field])) {
                    const m = this.measures[field][op];
                    if (m.size === 0) {
                        out.add(`${op}_${field}`);
                    }
                    else {
                        m.forEach(out.add, out);
                    }
                }
            }
            return out;
        }
        hash() {
            return `Aggregate ${hash({ dimensions: this.dimensions, measures: this.measures })}`;
        }
        assemble() {
            const ops = [];
            const fields = [];
            const as = [];
            for (const field of keys(this.measures)) {
                for (const op of keys(this.measures[field])) {
                    for (const alias of this.measures[field][op]) {
                        as.push(alias);
                        ops.push(op);
                        fields.push(field === '*' ? null : replacePathInField(field));
                    }
                }
            }
            const result = {
                type: 'aggregate',
                groupby: [...this.dimensions],
                ops,
                fields,
                as
            };
            return result;
        }
    }

    /**
     * A node that helps us track what fields we are faceting by.
     */
    class FacetNode extends DataFlowNode {
        /**
         * @param model The facet model.
         * @param name The name that this facet source will have.
         * @param data The source data for this facet data.
         */
        constructor(parent, model, name, data) {
            super(parent);
            this.model = model;
            this.name = name;
            this.data = data;
            for (const channel of FACET_CHANNELS) {
                const fieldDef = model.facet[channel];
                if (fieldDef) {
                    const { bin, sort } = fieldDef;
                    this[channel] = Object.assign({ name: model.getName(`${channel}_domain`), fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, { binSuffix: 'end' })] : [])] }, (isSortField(sort)
                        ? { sortField: sort }
                        : isArray(sort)
                            ? { sortIndexField: sortArrayIndexField(fieldDef, channel) }
                            : {}));
                }
            }
            this.childModel = model.child;
        }
        hash() {
            let out = `Facet`;
            for (const channel of FACET_CHANNELS) {
                if (this[channel]) {
                    out += ` ${channel.charAt(0)}:${hash(this[channel])}`;
                }
            }
            return out;
        }
        get fields() {
            const f = [];
            for (const channel of FACET_CHANNELS) {
                if (this[channel] && this[channel].fields) {
                    f.push(...this[channel].fields);
                }
            }
            return f;
        }
        /**
         * The name to reference this source is its name.
         */
        getSource() {
            return this.name;
        }
        getChildIndependentFieldsWithStep() {
            const childIndependentFieldsWithStep = {};
            for (const channel of ['x', 'y']) {
                const childScaleComponent = this.childModel.component.scales[channel];
                if (childScaleComponent && !childScaleComponent.merged) {
                    // independent scale
                    const type = childScaleComponent.get('type');
                    const range = childScaleComponent.get('range');
                    if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                        const domain = assembleDomain(this.childModel, channel);
                        const field = getFieldFromDomain(domain);
                        if (field) {
                            childIndependentFieldsWithStep[channel] = field;
                        }
                        else {
                            warn('Unknown field for ${channel}.  Cannot calculate view size.');
                        }
                    }
                }
            }
            return childIndependentFieldsWithStep;
        }
        assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {
            const childChannel = { row: 'y', column: 'x' }[channel];
            const fields = [];
            const ops = [];
            const as = [];
            if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {
                if (crossedDataName) {
                    // If there is a crossed data, calculate max
                    fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
                    ops.push('max');
                }
                else {
                    // If there is no crossed data, just calculate distinct
                    fields.push(childIndependentFieldsWithStep[childChannel]);
                    ops.push('distinct');
                }
                // Although it is technically a max, just name it distinct so it's easier to refer to it
                as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);
            }
            const { sortField, sortIndexField } = this[channel];
            if (sortField) {
                const { op = DEFAULT_SORT_OP, field } = sortField;
                fields.push(field);
                ops.push(op);
                as.push(vgField(sortField, { forAs: true }));
            }
            else if (sortIndexField) {
                fields.push(sortIndexField);
                ops.push('max');
                as.push(sortIndexField);
            }
            return {
                name: this[channel].name,
                // Use data from the crossed one if it exist
                source: crossedDataName || this.data,
                transform: [
                    Object.assign({ type: 'aggregate', groupby: this[channel].fields }, (fields.length
                        ? {
                            fields,
                            ops,
                            as
                        }
                        : {}))
                ]
            };
        }
        assembleFacetHeaderData(childIndependentFieldsWithStep) {
            const { columns } = this.model.layout;
            const { layoutHeaders } = this.model.component;
            const data = [];
            const hasSharedAxis = {};
            for (const headerChannel of HEADER_CHANNELS) {
                for (const headerType of HEADER_TYPES) {
                    const headers = (layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) || [];
                    for (const header of headers) {
                        if (header.axes && header.axes.length > 0) {
                            hasSharedAxis[headerChannel] = true;
                            break;
                        }
                    }
                }
                if (hasSharedAxis[headerChannel]) {
                    const cardinality = `length(data("${this.facet.name}"))`;
                    const stop = headerChannel === 'row'
                        ? columns
                            ? { signal: `ceil(${cardinality} / ${columns})` }
                            : 1
                        : columns
                            ? { signal: `min(${cardinality}, ${columns})` }
                            : { signal: cardinality };
                    data.push({
                        name: `${this.facet.name}_${headerChannel}`,
                        transform: [
                            {
                                type: 'sequence',
                                start: 0,
                                stop
                            }
                        ]
                    });
                }
            }
            const { row, column } = hasSharedAxis;
            if (row || column) {
                data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));
            }
            return data;
        }
        assemble() {
            const data = [];
            let crossedDataName = null;
            const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();
            const { column, row, facet } = this;
            if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {
                // Need to create a cross dataset to correctly calculate cardinality
                crossedDataName = `cross_${this.column.name}_${this.row.name}`;
                const fields = [].concat(childIndependentFieldsWithStep.x || [], childIndependentFieldsWithStep.y || []);
                const ops = fields.map(() => 'distinct');
                data.push({
                    name: crossedDataName,
                    source: this.data,
                    transform: [
                        {
                            type: 'aggregate',
                            groupby: this.fields,
                            fields,
                            ops
                        }
                    ]
                });
            }
            for (const channel of [COLUMN, ROW]) {
                if (this[channel]) {
                    data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));
                }
            }
            if (facet) {
                const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);
                if (facetData) {
                    data.push(...facetData);
                }
            }
            return data;
        }
    }

    /**
     * @param field The field.
     * @param parse What to parse the field as.
     */
    function parseExpression$1(field, parse) {
        const f = accessPathWithDatum(field);
        if (parse === 'number') {
            return `toNumber(${f})`;
        }
        else if (parse === 'boolean') {
            return `toBoolean(${f})`;
        }
        else if (parse === 'string') {
            return `toString(${f})`;
        }
        else if (parse === 'date') {
            return `toDate(${f})`;
        }
        else if (parse === 'flatten') {
            return f;
        }
        else if (parse.indexOf('date:') === 0) {
            const specifier = parse.slice(5, parse.length);
            return `timeParse(${f},${specifier})`;
        }
        else if (parse.indexOf('utc:') === 0) {
            const specifier = parse.slice(4, parse.length);
            return `utcParse(${f},${specifier})`;
        }
        else {
            warn(message.unrecognizedParse(parse));
            return null;
        }
    }
    class ParseNode extends DataFlowNode {
        clone() {
            return new ParseNode(null, duplicate(this._parse));
        }
        constructor(parent, parse) {
            super(parent);
            this._parse = parse;
        }
        hash() {
            return `Parse ${hash(this._parse)}`;
        }
        /**
         * Creates a parse node from a data.format.parse and updates ancestorParse.
         */
        static makeExplicit(parent, model, ancestorParse) {
            // Custom parse
            let explicit = {};
            const data = model.data;
            if (data && data.format && data.format.parse) {
                explicit = data.format.parse;
            }
            return this.makeWithAncestors(parent, explicit, {}, ancestorParse);
        }
        static makeImplicitFromFilterTransform(parent, transform, ancestorParse) {
            const parse = {};
            forEachLeaf(transform.filter, filter => {
                if (isFieldPredicate(filter)) {
                    // Automatically add a parse node for filters with filter objects
                    let val = null;
                    // For EqualFilter, just use the equal property.
                    // For RangeFilter and OneOfFilter, all array members should have
                    // the same type, so we only use the first one.
                    if (isFieldEqualPredicate(filter)) {
                        val = filter.equal;
                    }
                    else if (isFieldRangePredicate(filter)) {
                        val = filter.range[0];
                    }
                    else if (isFieldOneOfPredicate(filter)) {
                        val = (filter.oneOf || filter['in'])[0];
                    } // else -- for filter expression, we can't infer anything
                    if (val) {
                        if (isDateTime(val)) {
                            parse[filter.field] = 'date';
                        }
                        else if (isNumber(val)) {
                            parse[filter.field] = 'number';
                        }
                        else if (isString(val)) {
                            parse[filter.field] = 'string';
                        }
                    }
                    if (filter.timeUnit) {
                        parse[filter.field] = 'date';
                    }
                }
            });
            if (keys(parse).length === 0) {
                return null;
            }
            return this.makeWithAncestors(parent, {}, parse, ancestorParse);
        }
        /**
         * Creates a parse node for implicit parsing from a model and updates ancestorParse.
         */
        static makeImplicitFromEncoding(parent, model, ancestorParse) {
            const implicit = {};
            function add(fieldDef) {
                if (isTimeFieldDef(fieldDef)) {
                    implicit[fieldDef.field] = 'date';
                }
                else if (isNumberFieldDef(fieldDef) && isMinMaxOp(fieldDef.aggregate)) {
                    implicit[fieldDef.field] = 'number';
                }
                else if (accessPathDepth(fieldDef.field) > 1) {
                    // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.
                    // (Parsing numbers / dates already flattens numeric and temporal fields.)
                    if (!(fieldDef.field in implicit)) {
                        implicit[fieldDef.field] = 'flatten';
                    }
                }
                else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {
                    // Flatten fields that we sort by but that are not otherwise flattened.
                    if (!(fieldDef.sort.field in implicit)) {
                        implicit[fieldDef.sort.field] = 'flatten';
                    }
                }
            }
            if (isUnitModel(model) || isFacetModel(model)) {
                // Parse encoded fields
                model.forEachFieldDef((fieldDef, channel) => {
                    if (isTypedFieldDef(fieldDef)) {
                        add(fieldDef);
                    }
                    else {
                        const mainChannel = getMainRangeChannel(channel);
                        if (mainChannel !== channel) {
                            const mainFieldDef = model.fieldDef(mainChannel);
                            add(Object.assign({}, fieldDef, { type: mainFieldDef.type }));
                        }
                        else {
                            throw new Error(`Non-secondary channel ${channel} must have type in its field definition ${JSON.stringify(fieldDef)}`);
                        }
                    }
                });
            }
            return this.makeWithAncestors(parent, {}, implicit, ancestorParse);
        }
        /**
         * Creates a parse node from "explicit" parse and "implicit" parse and updates ancestorParse.
         */
        static makeWithAncestors(parent, explicit, implicit, ancestorParse) {
            // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as "derived"). We also don't need to flatten a field that has already been parsed.
            for (const field of keys(implicit)) {
                const parsedAs = ancestorParse.getWithExplicit(field);
                if (parsedAs.value !== undefined) {
                    // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.
                    if (parsedAs.explicit ||
                        parsedAs.value === implicit[field] ||
                        parsedAs.value === 'derived' ||
                        implicit[field] === 'flatten') {
                        delete implicit[field];
                    }
                    else {
                        warn(message.differentParse(field, implicit[field], parsedAs.value));
                    }
                }
            }
            for (const field of keys(explicit)) {
                const parsedAs = ancestorParse.get(field);
                if (parsedAs !== undefined) {
                    // Don't parse a field again if it has been parsed with the same type already.
                    if (parsedAs === explicit[field]) {
                        delete explicit[field];
                    }
                    else {
                        warn(message.differentParse(field, explicit[field], parsedAs));
                    }
                }
            }
            const parse = new Split(explicit, implicit);
            // add the format parse from this model so that children don't parse the same field again
            ancestorParse.copyAll(parse);
            // copy only non-null parses
            const p = {};
            for (const key of keys(parse.combine())) {
                const val = parse.get(key);
                if (val !== null) {
                    p[key] = val;
                }
            }
            if (keys(p).length === 0 || ancestorParse.parseNothing) {
                return null;
            }
            return new ParseNode(parent, p);
        }
        get parse() {
            return this._parse;
        }
        merge(other) {
            this._parse = Object.assign({}, this._parse, other.parse);
            other.remove();
        }
        /**
         * Assemble an object for Vega's format.parse property.
         */
        assembleFormatParse() {
            const formatParse = {};
            for (const field of keys(this._parse)) {
                const p = this._parse[field];
                if (accessPathDepth(field) === 1) {
                    formatParse[field] = p;
                }
            }
            return formatParse;
        }
        // format parse depends and produces all fields in its parse
        producedFields() {
            return new Set(keys(this._parse));
        }
        dependentFields() {
            return new Set(keys(this._parse));
        }
        assembleTransforms(onlyNested = false) {
            return keys(this._parse)
                .filter(field => (onlyNested ? accessPathDepth(field) > 1 : true))
                .map(field => {
                const expr = parseExpression$1(field, this._parse[field]);
                if (!expr) {
                    return null;
                }
                const formula = {
                    type: 'formula',
                    expr,
                    as: removePathFromField(field) // Vega output is always flattened
                };
                return formula;
            })
                .filter(t => t !== null);
        }
    }

    /**
     * A class for the join aggregate transform nodes.
     */
    class JoinAggregateTransformNode extends DataFlowNode {
        constructor(parent, transform) {
            super(parent);
            this.transform = transform;
        }
        clone() {
            return new JoinAggregateTransformNode(null, duplicate(this.transform));
        }
        addDimensions(fields) {
            this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);
        }
        dependentFields() {
            const out = new Set();
            this.transform.groupby.forEach(f => out.add(f));
            this.transform.joinaggregate
                .map(w => w.field)
                .filter(f => f !== undefined)
                .forEach(f => out.add(f));
            return out;
        }
        producedFields() {
            return new Set(this.transform.joinaggregate.map(this.getDefaultName));
        }
        getDefaultName(joinAggregateFieldDef) {
            return joinAggregateFieldDef.as || vgField(joinAggregateFieldDef);
        }
        hash() {
            return `JoinAggregateTransform ${hash(this.transform)}`;
        }
        assemble() {
            const fields = [];
            const ops = [];
            const as = [];
            for (const joinaggregate of this.transform.joinaggregate) {
                ops.push(joinaggregate.op);
                as.push(this.getDefaultName(joinaggregate));
                fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);
            }
            const groupby = this.transform.groupby;
            return Object.assign({ type: 'joinaggregate', as,
                ops,
                fields }, (groupby !== undefined ? { groupby } : {}));
        }
    }

    function getStackByFields(model) {
        return model.stack.stackBy.reduce((fields, by) => {
            const fieldDef = by.fieldDef;
            const _field = vgField(fieldDef);
            if (_field) {
                fields.push(_field);
            }
            return fields;
        }, []);
    }
    function isValidAsArray(as) {
        return isArray(as) && as.every(s => isString(s)) && as.length > 1;
    }
    class StackNode extends DataFlowNode {
        clone() {
            return new StackNode(null, duplicate(this._stack));
        }
        constructor(parent, stack) {
            super(parent);
            this._stack = stack;
        }
        static makeFromTransform(parent, stackTransform) {
            const { stack, groupby, as, offset = 'zero' } = stackTransform;
            const sortFields = [];
            const sortOrder = [];
            if (stackTransform.sort !== undefined) {
                for (const sortField of stackTransform.sort) {
                    sortFields.push(sortField.field);
                    sortOrder.push(getFirstDefined(sortField.order, 'ascending'));
                }
            }
            const sort = {
                field: sortFields,
                order: sortOrder
            };
            let normalizedAs;
            if (isValidAsArray(as)) {
                normalizedAs = as;
            }
            else if (isString(as)) {
                normalizedAs = [as, as + '_end'];
            }
            else {
                normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];
            }
            return new StackNode(parent, {
                stackField: stack,
                groupby,
                offset,
                sort,
                facetby: [],
                as: normalizedAs
            });
        }
        static makeFromEncoding(parent, model) {
            const stackProperties = model.stack;
            const { encoding } = model;
            if (!stackProperties) {
                return null;
            }
            let dimensionFieldDef;
            if (stackProperties.groupbyChannel) {
                const cDef = encoding[stackProperties.groupbyChannel];
                dimensionFieldDef = getTypedFieldDef(cDef);
            }
            const stackby = getStackByFields(model);
            const orderDef = model.encoding.order;
            let sort;
            if (isArray(orderDef) || isFieldDef(orderDef)) {
                sort = sortParams(orderDef);
            }
            else {
                // default = descending by stackFields
                // FIXME is the default here correct for binned fields?
                sort = stackby.reduce((s, field) => {
                    s.field.push(field);
                    s.order.push('descending');
                    return s;
                }, { field: [], order: [] });
            }
            return new StackNode(parent, {
                dimensionFieldDef,
                stackField: model.vgField(stackProperties.fieldChannel),
                facetby: [],
                stackby,
                sort,
                offset: stackProperties.offset,
                impute: stackProperties.impute,
                as: [
                    model.vgField(stackProperties.fieldChannel, { suffix: 'start', forAs: true }),
                    model.vgField(stackProperties.fieldChannel, { suffix: 'end', forAs: true })
                ]
            });
        }
        get stack() {
            return this._stack;
        }
        addDimensions(fields) {
            this._stack.facetby.push(...fields);
        }
        dependentFields() {
            const out = new Set();
            out.add(this._stack.stackField);
            this.getGroupbyFields().forEach(out.add);
            this._stack.facetby.forEach(out.add);
            const field = this._stack.sort.field;
            isArray(field) ? field.forEach(out.add) : out.add(field);
            return out;
        }
        producedFields() {
            return new Set(this._stack.as);
        }
        hash() {
            return `Stack ${hash(this._stack)}`;
        }
        getGroupbyFields() {
            const { dimensionFieldDef, impute, groupby } = this._stack;
            if (dimensionFieldDef) {
                if (dimensionFieldDef.bin) {
                    if (impute) {
                        // For binned group by field with impute, we calculate bin_mid
                        // as we cannot impute two fields simultaneously
                        return [vgField(dimensionFieldDef, { binSuffix: 'mid' })];
                    }
                    return [
                        // For binned group by field without impute, we need both bin (start) and bin_end
                        vgField(dimensionFieldDef, {}),
                        vgField(dimensionFieldDef, { binSuffix: 'end' })
                    ];
                }
                return [vgField(dimensionFieldDef)];
            }
            return groupby || [];
        }
        assemble() {
            const transform = [];
            const { facetby, dimensionFieldDef, stackField: field, stackby, sort, offset, impute, as } = this._stack;
            // Impute
            if (impute && dimensionFieldDef) {
                if (dimensionFieldDef.bin) {
                    // As we can only impute one field at a time, we need to calculate
                    // mid point for a binned field
                    transform.push({
                        type: 'formula',
                        expr: '(' +
                            vgField(dimensionFieldDef, { expr: 'datum' }) +
                            '+' +
                            vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }) +
                            ')/2',
                        as: vgField(dimensionFieldDef, { binSuffix: 'mid', forAs: true })
                    });
                }
                transform.push({
                    type: 'impute',
                    field,
                    groupby: [...stackby, ...facetby],
                    key: vgField(dimensionFieldDef, { binSuffix: 'mid' }),
                    method: 'value',
                    value: 0
                });
            }
            // Stack
            transform.push({
                type: 'stack',
                groupby: [...this.getGroupbyFields(), ...facetby],
                field,
                sort,
                as,
                offset
            });
            return transform;
        }
    }

    /**
     * A class for the window transform nodes
     */
    class WindowTransformNode extends DataFlowNode {
        constructor(parent, transform) {
            super(parent);
            this.transform = transform;
        }
        clone() {
            return new WindowTransformNode(null, duplicate(this.transform));
        }
        addDimensions(fields) {
            this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);
        }
        dependentFields() {
            const out = new Set();
            this.transform.groupby.forEach(f => out.add(f));
            this.transform.sort.forEach(m => out.add(m.field));
            this.transform.window
                .map(w => w.field)
                .filter(f => f !== undefined)
                .forEach(f => out.add(f));
            return out;
        }
        producedFields() {
            return new Set(this.transform.window.map(this.getDefaultName));
        }
        getDefaultName(windowFieldDef) {
            return windowFieldDef.as || vgField(windowFieldDef);
        }
        hash() {
            return `WindowTransform ${hash(this.transform)}`;
        }
        assemble() {
            const fields = [];
            const ops = [];
            const as = [];
            const params = [];
            for (const window of this.transform.window) {
                ops.push(window.op);
                as.push(this.getDefaultName(window));
                params.push(window.param === undefined ? null : window.param);
                fields.push(window.field === undefined ? null : window.field);
            }
            const frame = this.transform.frame;
            const groupby = this.transform.groupby;
            if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {
                // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate
                return Object.assign({ type: 'joinaggregate', as, ops: ops, fields }, (groupby !== undefined ? { groupby } : {}));
            }
            const sortFields = [];
            const sortOrder = [];
            if (this.transform.sort !== undefined) {
                for (const sortField of this.transform.sort) {
                    sortFields.push(sortField.field);
                    sortOrder.push(sortField.order || 'ascending');
                }
            }
            const sort = {
                field: sortFields,
                order: sortOrder
            };
            const ignorePeers = this.transform.ignorePeers;
            return Object.assign({ type: 'window', params,
                as,
                ops,
                fields,
                sort }, (ignorePeers !== undefined ? { ignorePeers } : {}), (groupby !== undefined ? { groupby } : {}), (frame !== undefined ? { frame } : {}));
        }
    }

    /**
     * Move parse nodes up to forks.
     */
    class MoveParseUp extends BottomUpOptimizer {
        run(node) {
            const parent = node.parent;
            // move parse up by merging or swapping
            if (node instanceof ParseNode) {
                if (parent instanceof SourceNode) {
                    return this.flags;
                }
                if (parent.numChildren() > 1) {
                    // don't move parse further up but continue with parent.
                    this.setContinue();
                    return this.flags;
                }
                if (parent instanceof ParseNode) {
                    this.setMutated();
                    parent.merge(node);
                }
                else {
                    // don't swap with nodes that produce something that the parse node depends on (e.g. lookup)
                    if (fieldIntersection(parent.producedFields(), node.dependentFields())) {
                        this.setContinue();
                        return this.flags;
                    }
                    this.setMutated();
                    node.swapWithParent();
                }
            }
            this.setContinue();
            return this.flags;
        }
    }
    /**
     * Merge identical nodes at forks by comparing hashes.
     *
     * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.
     */
    class MergeIdenticalNodes extends TopDownOptimizer {
        mergeNodes(parent, nodes) {
            const mergedNode = nodes.shift();
            for (const node of nodes) {
                parent.removeChild(node);
                node.parent = mergedNode;
                node.remove();
            }
        }
        run(node) {
            const hashes = node.children.map(x => x.hash());
            const buckets = {};
            for (let i = 0; i < hashes.length; i++) {
                if (buckets[hashes[i]] === undefined) {
                    buckets[hashes[i]] = [node.children[i]];
                }
                else {
                    buckets[hashes[i]].push(node.children[i]);
                }
            }
            for (const k of keys(buckets)) {
                if (buckets[k].length > 1) {
                    this.setMutated();
                    this.mergeNodes(node, buckets[k]);
                }
            }
            for (const child of node.children) {
                this.run(child);
            }
            return this.mutatedFlag;
        }
    }
    /**
     * Repeatedly remove leaf nodes that are not output or facet nodes.
     * The reason is that we don't need subtrees that don't have any output nodes.
     * Facet nodes are needed for the row or column domains.
     */
    class RemoveUnusedSubtrees extends BottomUpOptimizer {
        run(node) {
            if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {
                // no need to continue with parent because it is output node or will have children (there was a fork)
                return this.flags;
            }
            else {
                this.setMutated();
                node.remove();
            }
            return this.flags;
        }
    }
    /**
     * Removes duplicate time unit nodes (as determined by the name of the
     * output field) that may be generated due to selections projected over
     * time units.
     */
    class RemoveDuplicateTimeUnits extends BottomUpOptimizer {
        constructor() {
            super(...arguments);
            this.fields = new Set();
        }
        run(node) {
            this.setContinue();
            if (node instanceof TimeUnitNode) {
                const pfields = node.producedFields();
                if (hasIntersection(pfields, this.fields)) {
                    this.setMutated();
                    node.remove();
                }
                else {
                    this.fields = new Set([...this.fields, ...pfields]);
                }
            }
            return this.flags;
        }
    }
    /**
     * Clones the subtree and ignores output nodes except for the leaves, which are renamed.
     */
    function cloneSubtree(facet) {
        function clone(node) {
            if (!(node instanceof FacetNode)) {
                const copy = node.clone();
                if (copy instanceof OutputNode) {
                    const newName = FACET_SCALE_PREFIX + copy.getSource();
                    copy.setSource(newName);
                    facet.model.component.data.outputNodes[newName] = copy;
                }
                else if (copy instanceof AggregateNode ||
                    copy instanceof StackNode ||
                    copy instanceof WindowTransformNode ||
                    copy instanceof JoinAggregateTransformNode) {
                    copy.addDimensions(facet.fields);
                }
                flatten(node.children.map(clone)).forEach((n) => (n.parent = copy));
                return [copy];
            }
            return flatten(node.children.map(clone));
        }
        return clone;
    }
    /**
     * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.
     * After moving down the facet node, make a copy of the subtree and make it a child of the main output.
     */
    function moveFacetDown(node) {
        if (node instanceof FacetNode) {
            if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {
                // move down until we hit a fork or output node
                const child = node.children[0];
                if (child instanceof AggregateNode ||
                    child instanceof StackNode ||
                    child instanceof WindowTransformNode ||
                    child instanceof JoinAggregateTransformNode) {
                    child.addDimensions(node.fields);
                }
                child.swapWithParent();
                moveFacetDown(node);
            }
            else {
                // move main to facet
                const facetMain = node.model.component.data.main;
                moveMainDownToFacet(facetMain);
                // replicate the subtree and place it before the facet's main node
                const cloner = cloneSubtree(node);
                const copy = flatten(node.children.map(cloner));
                for (const c of copy) {
                    c.parent = facetMain;
                }
            }
        }
        else {
            node.children.map(moveFacetDown);
        }
    }
    function moveMainDownToFacet(node) {
        if (node instanceof OutputNode && node.type === MAIN) {
            if (node.numChildren() === 1) {
                const child = node.children[0];
                if (!(child instanceof FacetNode)) {
                    child.swapWithParent();
                    moveMainDownToFacet(node);
                }
            }
        }
    }
    /**
     * Remove nodes that are not required starting from a root.
     */
    class RemoveUnnecessaryNodes extends TopDownOptimizer {
        run(node) {
            // remove output nodes that are not required
            if (node instanceof OutputNode && !node.isRequired()) {
                this.setMutated();
                node.remove();
            }
            for (const child of node.children) {
                this.run(child);
            }
            return this.mutatedFlag;
        }
    }
    /**
     * Inserts an Intermediate ParseNode containing all non-conflicting Parse fields and removes the empty ParseNodes
     */
    class MergeParse extends BottomUpOptimizer {
        run(node) {
            const parent = node.parent;
            const parseChildren = parent.children.filter((x) => x instanceof ParseNode);
            if (parseChildren.length > 1) {
                const commonParse = {};
                for (const parseNode of parseChildren) {
                    const parse = parseNode.parse;
                    for (const k of keys(parse)) {
                        if (commonParse[k] === undefined) {
                            commonParse[k] = parse[k];
                        }
                        else if (commonParse[k] !== parse[k]) {
                            delete commonParse[k];
                        }
                    }
                }
                if (keys(commonParse).length !== 0) {
                    this.setMutated();
                    const mergedParseNode = new ParseNode(parent, commonParse);
                    for (const parseNode of parseChildren) {
                        for (const key of keys(commonParse)) {
                            delete parseNode.parse[key];
                        }
                        parent.removeChild(parseNode);
                        parseNode.parent = mergedParseNode;
                        if (keys(parseNode.parse).length === 0) {
                            parseNode.remove();
                        }
                    }
                }
            }
            this.setContinue();
            return this.flags;
        }
    }
    class MergeAggregateNodes extends BottomUpOptimizer {
        run(node) {
            const parent = node.parent;
            const aggChildren = parent.children.filter((x) => x instanceof AggregateNode);
            // Object which we'll use to map the fields which an aggregate is grouped by to
            // the set of aggregates with that grouping. This is useful as only aggregates
            // with the same group by can be merged
            const groupedAggregates = {};
            // Build groupedAggregates
            for (const agg of aggChildren) {
                const groupBys = hash(keys(agg.groupBy).sort());
                if (!(groupBys in groupedAggregates)) {
                    groupedAggregates[groupBys] = [];
                }
                groupedAggregates[groupBys].push(agg);
            }
            // Merge aggregateNodes with same key in groupedAggregates
            for (const group of keys(groupedAggregates)) {
                const mergeableAggs = groupedAggregates[group];
                if (mergeableAggs.length > 1) {
                    const mergedAggs = mergeableAggs.pop();
                    for (const agg of mergeableAggs) {
                        if (mergedAggs.merge(agg)) {
                            parent.removeChild(agg);
                            agg.parent = mergedAggs;
                            agg.remove();
                            this.setMutated();
                        }
                    }
                }
            }
            this.setContinue();
            return this.flags;
        }
    }

    const FACET_SCALE_PREFIX = 'scale_';
    const MAX_OPTIMIZATION_RUNS = 5;
    /**
     * Return all leaf nodes.
     */
    function getLeaves(roots) {
        const leaves = [];
        function append(node) {
            if (node.numChildren() === 0) {
                leaves.push(node);
            }
            else {
                node.children.forEach(append);
            }
        }
        roots.forEach(append);
        return leaves;
    }
    function isTrue(x) {
        return x;
    }
    /**
     * Run the specified optimizer on the provided nodes.
     *
     * @param optimizer The optimizer to run.
     * @param nodes A set of nodes to optimize.
     * @param flag Flag that will be or'ed with return valued from optimization calls to the nodes.
     */
    function runOptimizer(optimizer, nodes, flag) {
        const flags = nodes.map(node => {
            const optimizerInstance = new optimizer();
            if (optimizerInstance instanceof BottomUpOptimizer) {
                return optimizerInstance.optimizeNextFromLeaves(node);
            }
            else {
                return optimizerInstance.run(node);
            }
        });
        return flags.some(isTrue) || flag;
    }
    function optimizationDataflowHelper(dataComponent) {
        let roots = dataComponent.sources;
        let mutatedFlag = false;
        // mutatedFlag should always be on the right side otherwise short circuit logic might cause the mutating method to not execute
        mutatedFlag = runOptimizer(RemoveUnnecessaryNodes, roots, mutatedFlag);
        // remove source nodes that don't have any children because they also don't have output nodes
        roots = roots.filter(r => r.numChildren() > 0);
        mutatedFlag = runOptimizer(RemoveUnusedSubtrees, getLeaves(roots), mutatedFlag);
        roots = roots.filter(r => r.numChildren() > 0);
        mutatedFlag = runOptimizer(MoveParseUp, getLeaves(roots), mutatedFlag);
        mutatedFlag = runOptimizer(RemoveDuplicateTimeUnits, getLeaves(roots), mutatedFlag);
        mutatedFlag = runOptimizer(MergeParse, getLeaves(roots), mutatedFlag);
        mutatedFlag = runOptimizer(MergeAggregateNodes, getLeaves(roots), mutatedFlag);
        mutatedFlag = runOptimizer(MergeIdenticalNodes, roots, mutatedFlag);
        dataComponent.sources = roots;
        return mutatedFlag;
    }
    /**
     * Optimizes the dataflow of the passed in data component.
     */
    function optimizeDataflow(data) {
        // check before optimizations
        checkLinks(data.sources);
        let firstPassCounter = 0;
        let secondPassCounter = 0;
        for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
            if (!optimizationDataflowHelper(data)) {
                break;
            }
            firstPassCounter++;
        }
        // move facets down and make a copy of the subtree so that we can have scales at the top level
        data.sources.map(moveFacetDown);
        for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {
            if (!optimizationDataflowHelper(data)) {
                break;
            }
            secondPassCounter++;
        }
        // check after optimizations
        checkLinks(data.sources);
        if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {
            warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);
        }
    }

    function parseScaleDomain(model) {
        if (isUnitModel(model)) {
            parseUnitScaleDomain(model);
        }
        else {
            parseNonUnitScaleDomain(model);
        }
    }
    function parseUnitScaleDomain(model) {
        const scales = model.specifiedScales;
        const localScaleComponents = model.component.scales;
        keys(localScaleComponents).forEach((channel) => {
            const specifiedScale = scales[channel];
            const specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;
            const domains = parseDomainForChannel(model, channel);
            const localScaleCmpt = localScaleComponents[channel];
            localScaleCmpt.domains = domains;
            if (isSelectionDomain(specifiedDomain)) {
                // As scale parsing occurs before selection parsing, we use a temporary
                // signal here and append the scale.domain definition. This is replaced
                // with the correct domainRaw signal during scale assembly.
                // For more information, see isRawSelectionDomain in selection.ts.
                // FIXME: replace this with a special property in the scaleComponent
                localScaleCmpt.set('domainRaw', {
                    signal: SELECTION_DOMAIN + hash(specifiedDomain)
                }, true);
            }
            if (model.component.data.isFaceted) {
                // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not
                let facetParent = model;
                while (!isFacetModel(facetParent) && facetParent.parent) {
                    facetParent = facetParent.parent;
                }
                const resolve = facetParent.component.resolve.scale[channel];
                if (resolve === 'shared') {
                    for (const domain of domains) {
                        // Replace the scale domain with data output from a cloned subtree after the facet.
                        if (isDataRefDomain(domain)) {
                            // use data from cloned subtree (which is the same as data but with a prefix added once)
                            domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');
                        }
                    }
                }
            }
        });
    }
    function parseNonUnitScaleDomain(model) {
        for (const child of model.children) {
            parseScaleDomain(child);
        }
        const localScaleComponents = model.component.scales;
        keys(localScaleComponents).forEach((channel) => {
            let domains;
            let domainRaw = null;
            for (const child of model.children) {
                const childComponent = child.component.scales[channel];
                if (childComponent) {
                    if (domains === undefined) {
                        domains = childComponent.domains;
                    }
                    else {
                        domains = domains.concat(childComponent.domains);
                    }
                    const dr = childComponent.get('domainRaw');
                    if (domainRaw && dr && domainRaw.signal !== dr.signal) {
                        warn('The same selection must be used to override scale domains in a layered view.');
                    }
                    domainRaw = dr;
                }
            }
            localScaleComponents[channel].domains = domains;
            if (domainRaw) {
                localScaleComponents[channel].set('domainRaw', domainRaw, true);
            }
        });
    }
    /**
     * Remove unaggregated domain if it is not applicable
     * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.
     */
    function normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {
        if (domain === 'unaggregated') {
            const { valid, reason } = canUseUnaggregatedDomain(fieldDef, scaleType);
            if (!valid) {
                warn(reason);
                return undefined;
            }
        }
        else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {
            // Apply config if domain is not specified.
            const { valid } = canUseUnaggregatedDomain(fieldDef, scaleType);
            if (valid) {
                return 'unaggregated';
            }
        }
        return domain;
    }
    function parseDomainForChannel(model, channel) {
        const scaleType = model.getScaleComponent(channel).get('type');
        const domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.fieldDef(channel), scaleType, model.config.scale);
        if (domain !== model.scaleDomain(channel)) {
            model.specifiedScales[channel] = Object.assign({}, model.specifiedScales[channel], { domain });
        }
        // If channel is either X or Y then union them with X2 & Y2 if they exist
        if (channel === 'x' && model.channelHasField('x2')) {
            if (model.channelHasField('x')) {
                return parseSingleChannelDomain(scaleType, domain, model, 'x').concat(parseSingleChannelDomain(scaleType, domain, model, 'x2'));
            }
            else {
                return parseSingleChannelDomain(scaleType, domain, model, 'x2');
            }
        }
        else if (channel === 'y' && model.channelHasField('y2')) {
            if (model.channelHasField('y')) {
                return parseSingleChannelDomain(scaleType, domain, model, 'y').concat(parseSingleChannelDomain(scaleType, domain, model, 'y2'));
            }
            else {
                return parseSingleChannelDomain(scaleType, domain, model, 'y2');
            }
        }
        return parseSingleChannelDomain(scaleType, domain, model, channel);
    }
    function mapDomainToDataSignal(domain, type, timeUnit) {
        return domain.map(v => {
            const data = valueExpr(v, { timeUnit, type });
            return { signal: `{data: ${data}}` };
        });
    }
    function parseSingleChannelDomain(scaleType, domain, model, channel) {
        const fieldDef = model.fieldDef(channel);
        if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {
            // explicit value
            const { type, timeUnit } = fieldDef;
            if (type === 'temporal' || timeUnit) {
                return mapDomainToDataSignal(domain, type, timeUnit);
            }
            return [domain];
        }
        const stack = model.stack;
        if (stack && channel === stack.fieldChannel) {
            if (stack.offset === 'normalize') {
                return [[0, 1]];
            }
            const data = model.requestDataName(MAIN);
            return [
                {
                    data,
                    field: model.vgField(channel, { suffix: 'start' })
                },
                {
                    data,
                    field: model.vgField(channel, { suffix: 'end' })
                }
            ];
        }
        const sort = isScaleChannel(channel)
            ? domainSort(model, channel, scaleType)
            : undefined;
        if (domain === 'unaggregated') {
            const data = model.requestDataName(MAIN);
            const { field } = fieldDef;
            return [
                {
                    data,
                    field: vgField({ field, aggregate: 'min' })
                },
                {
                    data,
                    field: vgField({ field, aggregate: 'max' })
                }
            ];
        }
        else if (isBinning(fieldDef.bin)) {
            if (hasDiscreteDomain(scaleType)) {
                if (scaleType === 'bin-ordinal') {
                    // we can omit the domain as it is inferred from the `bins` property
                    return [];
                }
                // ordinal bin scale takes domain from bin_range, ordered by bin start
                // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).
                return [
                    {
                        // If sort by aggregation of a specified sort field, we need to use RAW table,
                        // so we can aggregate values for the scale independently from the main aggregation.
                        data: isBoolean$1(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),
                        // Use range if we added it and the scale does not support computing a range as a signal.
                        field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: 'range' } : {}),
                        // we have to use a sort object if sort = true to make the sort correct by bin start
                        sort: sort === true || !isObject(sort)
                            ? {
                                field: model.vgField(channel, {}),
                                op: 'min' // min or max doesn't matter since we sort by the start of the bin range
                            }
                            : sort
                    }
                ];
            }
            else {
                // continuous scales
                if (isBinning(fieldDef.bin)) {
                    const signalName = model.getName(vgField(fieldDef, { suffix: 'bins' }));
                    return [{ signal: `[${signalName}.start, ${signalName}.stop]` }];
                }
                else {
                    return [
                        {
                            data: model.requestDataName(MAIN),
                            field: model.vgField(channel, {})
                        }
                    ];
                }
            }
        }
        else if (sort) {
            return [
                {
                    // If sort by aggregation of a specified sort field, we need to use RAW table,
                    // so we can aggregate values for the scale independently from the main aggregation.
                    data: isBoolean$1(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),
                    field: model.vgField(channel),
                    sort: sort
                }
            ];
        }
        else {
            return [
                {
                    data: model.requestDataName(MAIN),
                    field: model.vgField(channel)
                }
            ];
        }
    }
    function normalizeSortField(sort, isStacked) {
        const { op, field, order } = sort;
        return Object.assign({ 
            // Apply default op
            op: op || (isStacked ? 'sum' : DEFAULT_SORT_OP) }, (field ? { field: replacePathInField(field) } : {}), (order ? { order } : {}));
    }
    function domainSort(model, channel, scaleType) {
        if (!hasDiscreteDomain(scaleType)) {
            return undefined;
        }
        // save to cast as the only exception is the geojson type for shape, which would not generate a scale
        const fieldDef = model.fieldDef(channel);
        const sort = fieldDef.sort;
        // if the sort is specified with array, use the derived sort index field
        if (isSortArray(sort)) {
            return {
                op: 'min',
                field: sortArrayIndexField(fieldDef, channel),
                order: 'ascending'
            };
        }
        const isStacked = model.stack !== null;
        // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)
        if (isSortField(sort)) {
            return normalizeSortField(sort, isStacked);
        }
        else if (isSortByEncoding(sort)) {
            const { encoding, order } = sort;
            const { aggregate, field } = model.fieldDef(encoding);
            const sortField = {
                op: aggregate,
                field,
                order
            };
            return normalizeSortField(sortField, isStacked);
        }
        else if (sort === 'descending') {
            return {
                op: 'min',
                field: model.vgField(channel),
                order: 'descending'
            };
        }
        else if (contains(['ascending', undefined /* default =ascending*/], sort)) {
            return true;
        }
        // sort == null
        return undefined;
    }
    /**
     * Determine if a scale can use unaggregated domain.
     * @return {Boolean} Returns true if all of the following conditions apply:
     * 1. `scale.domain` is `unaggregated`
     * 2. Aggregation function is not `count` or `sum`
     * 3. The scale is quantitative or time scale.
     */
    function canUseUnaggregatedDomain(fieldDef, scaleType) {
        if (!fieldDef.aggregate) {
            return {
                valid: false,
                reason: message.unaggregateDomainHasNoEffectForRawField(fieldDef)
            };
        }
        if (!SHARED_DOMAIN_OP_INDEX[fieldDef.aggregate]) {
            return {
                valid: false,
                reason: message.unaggregateDomainWithNonSharedDomainOp(fieldDef.aggregate)
            };
        }
        if (fieldDef.type === 'quantitative') {
            if (scaleType === 'log') {
                return {
                    valid: false,
                    reason: message.unaggregatedDomainWithLogScale(fieldDef)
                };
            }
        }
        return { valid: true };
    }
    /**
     * Converts an array of domains to a single Vega scale domain.
     */
    function mergeDomains(domains) {
        const uniqueDomains = unique(domains.map(domain => {
            // ignore sort property when computing the unique domains
            if (isDataRefDomain(domain)) {
                const domainWithoutSort = __rest(domain, ["sort"]);
                return domainWithoutSort;
            }
            return domain;
        }), hash);
        const sorts = unique(domains
            .map(d => {
            if (isDataRefDomain(d)) {
                const s = d.sort;
                if (s !== undefined && !isBoolean$1(s)) {
                    if (s.op === 'count') {
                        // let's make sure that if op is count, we don't use a field
                        delete s.field;
                    }
                    if (s.order === 'ascending') {
                        // drop order: ascending as it is the default
                        delete s.order;
                    }
                }
                return s;
            }
            return undefined;
        })
            .filter(s => s !== undefined), hash);
        if (uniqueDomains.length === 0) {
            return undefined;
        }
        else if (uniqueDomains.length === 1) {
            const domain = domains[0];
            if (isDataRefDomain(domain) && sorts.length > 0) {
                let sort = sorts[0];
                if (sorts.length > 1) {
                    warn(message.MORE_THAN_ONE_SORT);
                    sort = true;
                }
                return Object.assign({}, domain, { sort });
            }
            return domain;
        }
        // only keep simple sort properties that work with unioned domains
        const simpleSorts = unique(sorts.map(s => {
            if (isBoolean$1(s)) {
                return s;
            }
            if (s.op === 'count') {
                return s;
            }
            warn(message.domainSortDropped(s));
            return true;
        }), hash);
        let sort;
        if (simpleSorts.length === 1) {
            sort = simpleSorts[0];
        }
        else if (simpleSorts.length > 1) {
            warn(message.MORE_THAN_ONE_SORT);
            sort = true;
        }
        const allData = unique(domains.map(d => {
            if (isDataRefDomain(d)) {
                return d.data;
            }
            return null;
        }), x => x);
        if (allData.length === 1 && allData[0] !== null) {
            // create a union domain of different fields with a single data source
            const domain = Object.assign({ data: allData[0], fields: uniqueDomains.map(d => d.field) }, (sort ? { sort } : {}));
            return domain;
        }
        return Object.assign({ fields: uniqueDomains }, (sort ? { sort } : {}));
    }
    /**
     * Return a field if a scale single field.
     * Return `undefined` otherwise.
     *
     */
    function getFieldFromDomain(domain) {
        if (isDataRefDomain(domain) && isString(domain.field)) {
            return domain.field;
        }
        else if (isDataRefUnionedDomain(domain)) {
            let field;
            for (const nonUnionDomain of domain.fields) {
                if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {
                    if (!field) {
                        field = nonUnionDomain.field;
                    }
                    else if (field !== nonUnionDomain.field) {
                        warn('Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.');
                        return field;
                    }
                }
            }
            warn('Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.');
            return field;
        }
        else if (isFieldRefUnionDomain(domain)) {
            warn('Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.');
            const field = domain.fields[0];
            return isString(field) ? field : undefined;
        }
        return undefined;
    }
    function assembleDomain(model, channel) {
        const scaleComponent = model.component.scales[channel];
        const domains = scaleComponent.domains.map(domain => {
            // Correct references to data as the original domain's data was determined
            // in parseScale, which happens before parseData. Thus the original data
            // reference can be incorrect.
            if (isDataRefDomain(domain)) {
                domain.data = model.lookupDataSource(domain.data);
            }
            return domain;
        });
        // domains is an array that has to be merged into a single vega domain
        return mergeDomains(domains);
    }

    function assembleScales(model) {
        if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {
            // For concat / layer / repeat, include scales of children too
            return model.children.reduce((scales, child) => {
                return scales.concat(assembleScales(child));
            }, assembleScalesForModel(model));
        }
        else {
            // For facet, child scales would not be included in the parent's scope.
            // For unit, there is no child.
            return assembleScalesForModel(model);
        }
    }
    function assembleScalesForModel(model) {
        return keys(model.component.scales).reduce((scales, channel) => {
            const scaleComponent = model.component.scales[channel];
            if (scaleComponent.merged) {
                // Skipped merged scales
                return scales;
            }
            const scale = scaleComponent.combine();
            // need to separate const and non const object destruction
            let { domainRaw } = scale;
            const { name, type, domainRaw: _d, range: _r } = scale, otherScaleProps = __rest(scale, ["name", "type", "domainRaw", "range"]);
            const range = assembleScaleRange(scale.range, name, channel);
            // As scale parsing occurs before selection parsing, a temporary signal
            // is used for domainRaw. Here, we detect if this temporary signal
            // is set, and replace it with the correct domainRaw signal.
            // For more information, see isRawSelectionDomain in selection.ts.
            if (domainRaw && isRawSelectionDomain(domainRaw)) {
                domainRaw = selectionScaleDomain(model, domainRaw);
            }
            const domain = assembleDomain(model, channel);
            scales.push(Object.assign({ name,
                type }, (domain ? { domain } : {}), (domainRaw ? { domainRaw } : {}), { range: range }, otherScaleProps));
            return scales;
        }, []);
    }
    function assembleScaleRange(scaleRange, scaleName, channel) {
        // add signals to x/y range
        if (channel === 'x' || channel === 'y') {
            if (isVgRangeStep(scaleRange)) {
                // For x/y range step, use a signal created in layout assemble instead of a constant range step.
                return {
                    step: { signal: scaleName + '_step' }
                };
            }
        }
        return scaleRange;
    }

    class ScaleComponent extends Split {
        constructor(name, typeWithExplicit) {
            super({}, // no initial explicit property
            { name } // name as initial implicit property
            );
            this.merged = false;
            this.domains = [];
            this.setWithExplicit('type', typeWithExplicit);
        }
        /**
         * Whether the scale definitely includes zero in the domain
         */
        get domainDefinitelyIncludesZero() {
            if (this.get('zero') !== false) {
                return true;
            }
            const domains = this.domains;
            if (isArray(domains)) {
                return some(domains, d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);
            }
            return false;
        }
    }

    /**
     * A class that behaves like a SignalRef but lazily generates the signal.
     * The provided generator function should use `Model.getSignalName` to use the correct signal name.
     */
    class SignalRefWrapper {
        constructor(exprGenerator) {
            Object.defineProperty(this, 'signal', {
                enumerable: true,
                get: exprGenerator
            });
        }
        static fromName(rename, signalName) {
            return new SignalRefWrapper(() => rename(signalName));
        }
    }

    const RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];
    function getSizeType(channel) {
        return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
    }
    function parseUnitScaleRange(model) {
        const localScaleComponents = model.component.scales;
        // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!
        SCALE_CHANNELS.forEach((channel) => {
            const localScaleCmpt = localScaleComponents[channel];
            if (!localScaleCmpt) {
                return;
            }
            const mergedScaleCmpt = model.getScaleComponent(channel);
            const specifiedScale = model.specifiedScales[channel];
            const fieldDef = model.fieldDef(channel);
            // Read if there is a specified width/height
            const sizeType = getSizeType(channel);
            let sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;
            const scaleType = mergedScaleCmpt.get('type');
            // if autosize is fit, size cannot be data driven
            const rangeStep = contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;
            if (sizeType && model.fit && !sizeSpecified && rangeStep) {
                warn(message.CANNOT_FIX_RANGE_STEP_WITH_FIT);
                sizeSpecified = true;
            }
            const xyRangeSteps = getXYRangeStep(model);
            const rangeWithExplicit = parseRangeForChannel(channel, model.getSignalName.bind(model), scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark, sizeSpecified, model.getName(sizeType), xyRangeSteps);
            localScaleCmpt.setWithExplicit('range', rangeWithExplicit);
        });
    }
    function getRangeStep(model, channel) {
        const scaleCmpt = model.getScaleComponent(channel);
        if (!scaleCmpt) {
            return undefined;
        }
        const scaleType = scaleCmpt.get('type');
        const fieldDef = model.fieldDef(channel);
        if (hasDiscreteDomain(scaleType)) {
            const range = scaleCmpt && scaleCmpt.get('range');
            if (range && isVgRangeStep(range) && isNumber(range.step)) {
                return range.step;
            }
            // TODO: support the case without range step
        }
        else if (fieldDef && fieldDef.bin) {
            if (isBinning(fieldDef.bin)) {
                const binSignal = model.getName(vgField(fieldDef, { suffix: 'bins' }));
                // TODO: extract this to be range step signal
                const binCount = `(${binSignal}.stop - ${binSignal}.start) / ${binSignal}.step`;
                const sizeType = getSizeType(channel);
                const sizeSignal = model.getName(sizeType);
                return new SignalRefWrapper(() => `${model.getSignalName(sizeSignal)} / (${model.getSignalName(binCount)})`);
            }
            // TODO: handle binned case
        }
        return undefined;
    }
    function getXYRangeStep(model) {
        const steps = [];
        for (const channel of POSITION_SCALE_CHANNELS) {
            const step = getRangeStep(model, channel);
            if (step !== undefined) {
                steps.push(step);
            }
        }
        return steps;
    }
    /**
     * Return mixins that includes one of the range properties (range, rangeStep, scheme).
     */
    function parseRangeForChannel(channel, getSignalName, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {
        const noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;
        // Check if any of the range properties is specified.
        // If so, check if it is compatible and make sure that we only output one of the properties
        for (const property of RANGE_PROPERTIES) {
            if (specifiedScale[property] !== undefined) {
                const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);
                const channelIncompatability = channelScalePropertyIncompatability(channel, property);
                if (!supportedByScaleType) {
                    warn(message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));
                }
                else if (channelIncompatability) {
                    // channel
                    warn(channelIncompatability);
                }
                else {
                    switch (property) {
                        case 'range':
                            return makeExplicit(specifiedScale[property]);
                        case 'scheme':
                            return makeExplicit(parseScheme(specifiedScale[property]));
                        case 'rangeStep':
                            const rangeStep = specifiedScale[property];
                            if (rangeStep !== null) {
                                if (!sizeSpecified) {
                                    return makeExplicit({ step: rangeStep });
                                }
                                else {
                                    // If top-level size is specified, we ignore specified rangeStep.
                                    warn(message.rangeStepDropped(channel));
                                }
                            }
                    }
                }
            }
        }
        return makeImplicit(defaultRange(channel, getSignalName, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep, specifiedScale.domain));
    }
    function parseScheme(scheme) {
        if (isExtendedScheme(scheme)) {
            return Object.assign({ scheme: scheme.name }, omit(scheme, ['name']));
        }
        return { scheme: scheme };
    }
    function defaultRange(channel, getSignalName, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep, domain) {
        switch (channel) {
            case X:
            case Y:
                if (contains(['point', 'band'], scaleType) && !noRangeStep) {
                    if (channel === X && mark === 'text') {
                        if (config.scale.textXRangeStep) {
                            return { step: config.scale.textXRangeStep };
                        }
                    }
                    else {
                        if (config.scale.rangeStep) {
                            return { step: config.scale.rangeStep };
                        }
                    }
                }
                // If range step is null, use zero to width or height.
                // Note that these range signals are temporary
                // as they can be merged and renamed.
                // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)
                // We will later replace these temporary names with
                // the final name in assembleScaleRange()
                if (channel === Y && hasContinuousDomain(scaleType)) {
                    // For y continuous scale, we have to start from the height as the bottom part has the max value.
                    return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];
                }
                else {
                    return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];
                }
            case SIZE:
                // TODO: support custom rangeMin, rangeMax
                const rangeMin = sizeRangeMin(mark, zero, config);
                const rangeMax = sizeRangeMax(mark, xyRangeSteps, config);
                if (isContinuousToDiscrete(scaleType)) {
                    return interpolateRange$1(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));
                }
                else {
                    return [rangeMin, rangeMax];
                }
            case STROKEWIDTH:
                // TODO: support custom rangeMin, rangeMax
                return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];
            case SHAPE:
                return 'symbol';
            case COLOR:
            case FILL:
            case STROKE:
                if (scaleType === 'ordinal') {
                    // Only nominal data uses ordinal scale by default
                    return type === 'nominal' ? 'category' : 'ordinal';
                }
                else {
                    return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';
                }
            case OPACITY:
            case FILLOPACITY:
            case STROKEOPACITY:
                // TODO: support custom rangeMin, rangeMax
                return [config.scale.minOpacity, config.scale.maxOpacity];
        }
        /* istanbul ignore next: should never reach here */
        throw new Error(`Scale range undefined for channel ${channel}`);
    }
    function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {
        switch (scaleType) {
            case 'quantile':
                return config.scale.quantileCount;
            case 'quantize':
                return config.scale.quantizeCount;
            case 'threshold':
                if (domain !== undefined && isArray(domain)) {
                    return domain.length + 1;
                }
                else {
                    warn(message.domainRequiredForThresholdScale(channel));
                    // default threshold boundaries for threshold scale since domain has cardinality of 2
                    return 3;
                }
        }
    }
    /**
     * Returns the linear interpolation of the range according to the cardinality
     *
     * @param rangeMin start of the range
     * @param rangeMax end of the range
     * @param cardinality number of values in the output range
     */
    function interpolateRange$1(rangeMin, rangeMax, cardinality) {
        // always return a signal since it's better to compute the sequence in Vega later
        const f = () => {
            const rMax = isSignalRef(rangeMax) ? rangeMax.signal : rangeMax;
            const step = `(${rMax} - ${rangeMin}) / (${cardinality} - 1)`;
            return `sequence(${rangeMin}, ${rangeMax} + ${step}, ${step})`;
        };
        if (isSignalRef(rangeMax)) {
            return new SignalRefWrapper(f);
        }
        else {
            return { signal: f() };
        }
    }
    function sizeRangeMin(mark, zero, config) {
        if (zero) {
            return 0;
        }
        switch (mark) {
            case 'bar':
            case 'tick':
                return config.scale.minBandSize;
            case 'line':
            case 'trail':
            case 'rule':
                return config.scale.minStrokeWidth;
            case 'text':
                return config.scale.minFontSize;
            case 'point':
            case 'square':
            case 'circle':
                return config.scale.minSize;
        }
        /* istanbul ignore next: should never reach here */
        // sizeRangeMin not implemented for the mark
        throw new Error(message.incompatibleChannel('size', mark));
    }
    const MAX_SIZE_RANGE_STEP_RATIO = 0.95;
    function sizeRangeMax(mark, xyRangeSteps, config) {
        const scaleConfig = config.scale;
        switch (mark) {
            case 'bar':
            case 'tick':
                if (config.scale.maxBandSize !== undefined) {
                    return config.scale.maxBandSize;
                }
                const min = minXYRangeStep(xyRangeSteps, config.scale);
                if (isNumber(min)) {
                    return min - 1;
                }
                else {
                    return new SignalRefWrapper(() => `${min.signal} - 1`);
                }
            case 'line':
            case 'trail':
            case 'rule':
                return config.scale.maxStrokeWidth;
            case 'text':
                return config.scale.maxFontSize;
            case 'point':
            case 'square':
            case 'circle':
                if (config.scale.maxSize) {
                    return config.scale.maxSize;
                }
                const pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);
                if (isNumber(pointStep)) {
                    return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);
                }
                else {
                    return new SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);
                }
        }
        /* istanbul ignore next: should never reach here */
        // sizeRangeMax not implemented for the mark
        throw new Error(message.incompatibleChannel('size', mark));
    }
    /**
     * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.
     */
    function minXYRangeStep(xyRangeSteps, scaleConfig) {
        if (xyRangeSteps.length > 0) {
            let min = Infinity;
            for (const step of xyRangeSteps) {
                if (isSignalRef(step)) {
                    min = undefined;
                }
                else {
                    if (min !== undefined && step < min) {
                        min = step;
                    }
                }
            }
            return min !== undefined
                ? min
                : new SignalRefWrapper(() => {
                    const exprs = xyRangeSteps.map(e => (isSignalRef(e) ? e.signal : e));
                    return `min(${exprs.join(', ')})`;
                });
        }
        if (scaleConfig.rangeStep) {
            return scaleConfig.rangeStep;
        }
        return 21; // FIXME: re-evaluate the default value here.
    }

    function parseScaleProperty(model, property) {
        if (isUnitModel(model)) {
            parseUnitScaleProperty(model, property);
        }
        else {
            parseNonUnitScaleProperty(model, property);
        }
    }
    function parseUnitScaleProperty(model, property) {
        const localScaleComponents = model.component.scales;
        keys(localScaleComponents).forEach((channel) => {
            const specifiedScale = model.specifiedScales[channel];
            const localScaleCmpt = localScaleComponents[channel];
            const mergedScaleCmpt = model.getScaleComponent(channel);
            const fieldDef = model.fieldDef(channel);
            const config = model.config;
            const specifiedValue = specifiedScale[property];
            const sType = mergedScaleCmpt.get('type');
            const supportedByScaleType = scaleTypeSupportProperty(sType, property);
            const channelIncompatability = channelScalePropertyIncompatability(channel, property);
            if (specifiedValue !== undefined) {
                // If there is a specified value, check if it is compatible with scale type and channel
                if (!supportedByScaleType) {
                    warn(message.scalePropertyNotWorkWithScaleType(sType, property, channel));
                }
                else if (channelIncompatability) {
                    // channel
                    warn(channelIncompatability);
                }
            }
            if (supportedByScaleType && channelIncompatability === undefined) {
                if (specifiedValue !== undefined) {
                    // copyKeyFromObject ensures type safety
                    localScaleCmpt.copyKeyFromObject(property, specifiedScale);
                }
                else {
                    const value = getDefaultValue(property, model, channel, fieldDef, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, model.markDef, config);
                    if (value !== undefined) {
                        localScaleCmpt.set(property, value, false);
                    }
                }
            }
        });
    }
    // Note: This method is used in Voyager.
    function getDefaultValue(property, model, channel, fieldDef, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {
        const scaleConfig = config.scale;
        // If we have default rule-base, determine default value first
        switch (property) {
            case 'bins':
                return bins(model, fieldDef, channel);
            case 'interpolate':
                return interpolate$1(channel);
            case 'nice':
                return nice$1(scaleType, channel, fieldDef);
            case 'padding':
                return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);
            case 'paddingInner':
                return paddingInner(scalePadding, channel, markDef.type, scaleConfig);
            case 'paddingOuter':
                return paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, scaleConfig);
            case 'reverse':
                return reverse$1(scaleType, fieldDef.sort);
            case 'zero':
                return zero$2(channel, fieldDef, specifiedDomain, markDef, scaleType);
        }
        // Otherwise, use scale config
        return scaleConfig[property];
    }
    // This method is here rather than in range.ts to avoid circular dependency.
    function parseScaleRange(model) {
        if (isUnitModel(model)) {
            parseUnitScaleRange(model);
        }
        else {
            parseNonUnitScaleProperty(model, 'range');
        }
    }
    function parseNonUnitScaleProperty(model, property) {
        const localScaleComponents = model.component.scales;
        for (const child of model.children) {
            if (property === 'range') {
                parseScaleRange(child);
            }
            else {
                parseScaleProperty(child, property);
            }
        }
        keys(localScaleComponents).forEach((channel) => {
            let valueWithExplicit;
            for (const child of model.children) {
                const childComponent = child.component.scales[channel];
                if (childComponent) {
                    const childValueWithExplicit = childComponent.getWithExplicit(property);
                    valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing((v1, v2) => {
                        switch (property) {
                            case 'range':
                                // For range step, prefer larger step
                                if (v1.step && v2.step) {
                                    return v1.step - v2.step;
                                }
                                return 0;
                            // TODO: precedence rule for other properties
                        }
                        return 0;
                    }));
                }
            }
            localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);
        });
    }
    function bins(model, fieldDef, channel) {
        const bin = fieldDef.bin;
        if (isBinning(bin)) {
            return new SignalRefWrapper(() => {
                return model.getName(vgField(fieldDef, { suffix: 'bins' }));
            });
        }
        else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {
            // start and stop will be determined from the scale domain
            return {
                step: bin.step
            };
        }
        return undefined;
    }
    function interpolate$1(channel) {
        if (contains([COLOR, FILL, STROKE], channel)) {
            return 'hcl';
        }
        return undefined;
    }
    function nice$1(scaleType, channel, fieldDef) {
        if (fieldDef.bin || contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {
            return undefined;
        }
        return contains([X, Y], channel) ? true : undefined;
    }
    function padding(channel, scaleType, scaleConfig, fieldDef, markDef, barConfig) {
        if (contains([X, Y], channel)) {
            if (isContinuousToContinuous(scaleType)) {
                if (scaleConfig.continuousPadding !== undefined) {
                    return scaleConfig.continuousPadding;
                }
                const { type, orient } = markDef;
                if (type === 'bar' && !fieldDef.bin) {
                    if ((orient === 'vertical' && channel === 'x') || (orient === 'horizontal' && channel === 'y')) {
                        return barConfig.continuousBandSize;
                    }
                }
            }
            if (scaleType === ScaleType.POINT) {
                return scaleConfig.pointPadding;
            }
        }
        return undefined;
    }
    function paddingInner(paddingValue, channel, mark, scaleConfig) {
        if (paddingValue !== undefined) {
            // If user has already manually specified "padding", no need to add default paddingInner.
            return undefined;
        }
        if (contains([X, Y], channel)) {
            // Padding is only set for X and Y by default.
            // Basically it doesn't make sense to add padding for color and size.
            // paddingOuter would only be called if it's a band scale, just return the default for bandScale.
            const { bandPaddingInner, barBandPaddingInner, rectBandPaddingInner } = scaleConfig;
            return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);
        }
        return undefined;
    }
    function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {
        if (paddingValue !== undefined) {
            // If user has already manually specified "padding", no need to add default paddingOuter.
            return undefined;
        }
        if (contains([X, Y], channel)) {
            // Padding is only set for X and Y by default.
            // Basically it doesn't make sense to add padding for color and size.
            if (scaleType === ScaleType.BAND) {
                const { bandPaddingOuter, barBandPaddingOuter, rectBandPaddingOuter } = scaleConfig;
                return getFirstDefined(bandPaddingOuter, mark === 'bar' ? barBandPaddingOuter : rectBandPaddingOuter, 
                /* By default, paddingOuter is paddingInner / 2. The reason is that
                  size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).
                  and we want the width/height to be integer by default.
                  Note that step (by default) and cardinality are integers.) */
                paddingInnerValue / 2);
            }
        }
        return undefined;
    }
    function reverse$1(scaleType, sort) {
        if (hasContinuousDomain(scaleType) && sort === 'descending') {
            // For continuous domain scales, Vega does not support domain sort.
            // Thus, we reverse range instead if sort is descending
            return true;
        }
        return undefined;
    }
    function zero$2(channel, fieldDef, specifiedDomain, markDef, scaleType) {
        // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.
        const hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';
        if (hasCustomDomain) {
            if (hasContinuousDomain(scaleType)) {
                if (isArray(specifiedDomain)) {
                    const first = specifiedDomain[0];
                    const last = specifiedDomain[specifiedDomain.length - 1];
                    if (first <= 0 && last >= 0) {
                        // if the domain includes zero, make zero remains true
                        return true;
                    }
                }
                return false;
            }
        }
        // If there is no custom domain, return true only for the following cases:
        // 1) using quantitative field with size
        // While this can be either ratio or interval fields, our assumption is that
        // ratio are more common. However, if the scaleType is discretizing scale, we want to return
        // false so that range doesn't start at zero
        if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {
            return true;
        }
        // 2) non-binned, quantitative x-scale or y-scale
        // (For binning, we should not include zero by default because binning are calculated without zero.)
        if (!fieldDef.bin && contains([X, Y], channel)) {
            const { orient, type } = markDef;
            if (contains(['bar', 'area', 'line', 'trail'], type)) {
                if ((orient === 'horizontal' && channel === 'y') || (orient === 'vertical' && channel === 'x')) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    /**
     * Determine if there is a specified scale type and if it is appropriate,
     * or determine default type if type is unspecified or inappropriate.
     */
    // NOTE: CompassQL uses this method.
    function scaleType(specifiedScale, channel, fieldDef, mark, scaleConfig) {
        const defaultScaleType = defaultType$2(channel, fieldDef, mark, specifiedScale, scaleConfig);
        const { type } = specifiedScale;
        if (!isScaleChannel(channel)) {
            // There is no scale for these channels
            return null;
        }
        if (type !== undefined) {
            // Check if explicitly specified scale type is supported by the channel
            if (!channelSupportScaleType(channel, type)) {
                warn(message.scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));
                return defaultScaleType;
            }
            // Check if explicitly specified scale type is supported by the data type
            if (!scaleTypeSupportDataType(type, fieldDef.type)) {
                warn(message.scaleTypeNotWorkWithFieldDef(type, defaultScaleType));
                return defaultScaleType;
            }
            return type;
        }
        return defaultScaleType;
    }
    /**
     * Determine appropriate default scale type.
     */
    // NOTE: Voyager uses this method.
    function defaultType$2(channel, fieldDef, mark, specifiedScale, scaleConfig) {
        switch (fieldDef.type) {
            case 'nominal':
            case 'ordinal':
                if (isColorChannel(channel) || rangeType(channel) === 'discrete') {
                    if (channel === 'shape' && fieldDef.type === 'ordinal') {
                        warn(message.discreteChannelCannotEncode(channel, 'ordinal'));
                    }
                    return 'ordinal';
                }
                if (contains(['x', 'y'], channel)) {
                    if (contains(['rect', 'bar', 'rule'], mark)) {
                        // The rect/bar mark should fit into a band.
                        // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429
                        return 'band';
                    }
                    if (mark === 'bar') {
                        return 'band';
                    }
                }
                // Otherwise, use ordinal point scale so we can easily get center positions of the marks.
                return 'point';
            case 'temporal':
                if (isColorChannel(channel)) {
                    return 'time';
                }
                else if (rangeType(channel) === 'discrete') {
                    warn(message.discreteChannelCannotEncode(channel, 'temporal'));
                    // TODO: consider using quantize (equivalent to binning) once we have it
                    return 'ordinal';
                }
                return 'time';
            case 'quantitative':
                if (isColorChannel(channel)) {
                    if (isBinning(fieldDef.bin)) {
                        return 'bin-ordinal';
                    }
                    return 'linear';
                }
                else if (rangeType(channel) === 'discrete') {
                    warn(message.discreteChannelCannotEncode(channel, 'quantitative'));
                    // TODO: consider using quantize (equivalent to binning) once we have it
                    return 'ordinal';
                }
                return 'linear';
            case 'geojson':
                return undefined;
        }
        /* istanbul ignore next: should never reach this */
        throw new Error(message.invalidFieldType(fieldDef.type));
    }

    function parseScales(model) {
        parseScaleCore(model);
        parseScaleDomain(model);
        for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {
            parseScaleProperty(model, prop);
        }
        // range depends on zero
        parseScaleRange(model);
    }
    function parseScaleCore(model) {
        if (isUnitModel(model)) {
            model.component.scales = parseUnitScaleCore(model);
        }
        else {
            model.component.scales = parseNonUnitScaleCore(model);
        }
    }
    /**
     * Parse scales for all channels of a model.
     */
    function parseUnitScaleCore(model) {
        const { encoding, config, mark } = model;
        return SCALE_CHANNELS.reduce((scaleComponents, channel) => {
            let fieldDef;
            let specifiedScale;
            const channelDef = encoding[channel];
            // Don't generate scale for shape of geoshape
            if (isFieldDef(channelDef) && mark === GEOSHAPE && channel === SHAPE && channelDef.type === GEOJSON) {
                return scaleComponents;
            }
            if (isFieldDef(channelDef)) {
                fieldDef = channelDef;
                specifiedScale = channelDef.scale;
            }
            else if (hasConditionalFieldDef(channelDef)) {
                fieldDef = channelDef.condition;
                specifiedScale = channelDef.condition['scale']; // We use ['scale'] since we know that channel here has scale for sure
            }
            if (fieldDef && specifiedScale !== null && specifiedScale !== false) {
                specifiedScale = specifiedScale || {};
                const sType = scaleType(specifiedScale, channel, fieldDef, mark, config.scale);
                scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {
                    value: sType,
                    explicit: specifiedScale.type === sType
                });
            }
            return scaleComponents;
        }, {});
    }
    const scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));
    function parseNonUnitScaleCore(model) {
        const scaleComponents = (model.component.scales = {});
        const scaleTypeWithExplicitIndex = {};
        const resolve = model.component.resolve;
        // Parse each child scale and determine if a particular channel can be merged.
        for (const child of model.children) {
            parseScaleCore(child);
            // Instead of always merging right away -- check if it is compatible to merge first!
            keys(child.component.scales).forEach((channel) => {
                // if resolve is undefined, set default first
                resolve.scale[channel] = resolve.scale[channel] || defaultScaleResolve(channel, model);
                if (resolve.scale[channel] === 'shared') {
                    const explicitScaleType = scaleTypeWithExplicitIndex[channel];
                    const childScaleType = child.component.scales[channel].getWithExplicit('type');
                    if (explicitScaleType) {
                        if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {
                            // merge scale component if type are compatible
                            scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);
                        }
                        else {
                            // Otherwise, update conflicting channel to be independent
                            resolve.scale[channel] = 'independent';
                            // Remove from the index so they don't get merged
                            delete scaleTypeWithExplicitIndex[channel];
                        }
                    }
                    else {
                        scaleTypeWithExplicitIndex[channel] = childScaleType;
                    }
                }
            });
        }
        // Merge each channel listed in the index
        keys(scaleTypeWithExplicitIndex).forEach((channel) => {
            // Create new merged scale component
            const name = model.scaleName(channel, true);
            const typeWithExplicit = scaleTypeWithExplicitIndex[channel];
            scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);
            // rename each child and mark them as merged
            for (const child of model.children) {
                const childScale = child.component.scales[channel];
                if (childScale) {
                    child.renameScale(childScale.get('name'), name);
                    childScale.merged = true;
                }
            }
        });
        return scaleComponents;
    }

    class NameMap {
        constructor() {
            this.nameMap = {};
        }
        rename(oldName, newName) {
            this.nameMap[oldName] = newName;
        }
        has(name) {
            return this.nameMap[name] !== undefined;
        }
        get(name) {
            // If the name appears in the _nameMap, we need to read its new name.
            // We have to loop over the dict just in case the new name also gets renamed.
            while (this.nameMap[name] && name !== this.nameMap[name]) {
                name = this.nameMap[name];
            }
            return name;
        }
    }
    /*
      We use type guards instead of `instanceof` as `instanceof` makes
      different parts of the compiler depend on the actual implementation of
      the model classes, which in turn depend on different parts of the compiler.
      Thus, `instanceof` leads to circular dependency problems.

      On the other hand, type guards only make different parts of the compiler
      depend on the type of the model classes, but not the actual implementation.
    */
    function isUnitModel(model) {
        return model && model.type === 'unit';
    }
    function isFacetModel(model) {
        return model && model.type === 'facet';
    }
    function isRepeatModel(model) {
        return model && model.type === 'repeat';
    }
    function isConcatModel(model) {
        return model && model.type === 'concat';
    }
    function isLayerModel(model) {
        return model && model.type === 'layer';
    }
    class Model {
        constructor(spec, type, parent, parentGivenName, config, repeater, resolve, view) {
            this.type = type;
            this.parent = parent;
            this.config = config;
            this.repeater = repeater;
            this.view = view;
            this.children = [];
            /**
             * Corrects the data references in marks after assemble.
             */
            this.correctDataNames = (mark) => {
                // TODO: make this correct
                // for normal data references
                if (mark.from && mark.from.data) {
                    mark.from.data = this.lookupDataSource(mark.from.data);
                }
                // for access to facet data
                if (mark.from && mark.from.facet && mark.from.facet.data) {
                    mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);
                }
                return mark;
            };
            this.parent = parent;
            this.config = config;
            this.repeater = repeater;
            // If name is not provided, always use parent's givenName to avoid name conflicts.
            this.name = spec.name || parentGivenName;
            this.title = isString(spec.title) ? { text: spec.title } : spec.title;
            // Shared name maps
            this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();
            this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();
            this.signalNameMap = parent ? parent.signalNameMap : new NameMap();
            this.data = spec.data;
            this.description = spec.description;
            this.transforms = normalizeTransform(spec.transform || []);
            this.layout = isUnitSpec(spec) || isLayerSpec(spec) ? {} : extractCompositionLayout(spec, type, config);
            this.component = {
                data: {
                    sources: parent ? parent.component.data.sources : [],
                    outputNodes: parent ? parent.component.data.outputNodes : {},
                    outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},
                    // data is faceted if the spec is a facet spec or the parent has faceted data and no data is defined
                    isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && !spec.data)
                },
                layoutSize: new Split(),
                layoutHeaders: { row: {}, column: {}, facet: {} },
                mark: null,
                resolve: Object.assign({ scale: {}, axis: {}, legend: {} }, (resolve ? duplicate(resolve) : {})),
                selection: null,
                scales: null,
                projection: null,
                axes: {},
                legends: {}
            };
        }
        get width() {
            return this.getSizeSignalRef('width');
        }
        get height() {
            return this.getSizeSignalRef('height');
        }
        initSize(size) {
            const { width, height } = size;
            if (width) {
                this.component.layoutSize.set('width', width, true);
            }
            if (height) {
                this.component.layoutSize.set('height', height, true);
            }
        }
        parse() {
            this.parseScale();
            this.parseLayoutSize(); // depends on scale
            this.renameTopLevelLayoutSizeSignal();
            this.parseSelections();
            this.parseProjection();
            this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.
            this.parseAxesAndHeaders(); // depends on scale and layout size
            this.parseLegends(); // depends on scale, markDef
            this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.
        }
        parseScale() {
            parseScales(this);
        }
        parseProjection() {
            parseProjection(this);
        }
        /**
         * Rename top-level spec's size to be just width / height, ignoring model name.
         * This essentially merges the top-level spec's width/height signals with the width/height signals
         * to help us reduce redundant signals declaration.
         */
        renameTopLevelLayoutSizeSignal() {
            if (this.getName('width') !== 'width') {
                this.renameSignal(this.getName('width'), 'width');
            }
            if (this.getName('height') !== 'height') {
                this.renameSignal(this.getName('height'), 'height');
            }
        }
        parseLegends() {
            parseLegend(this);
        }
        assembleGroupStyle() {
            if (this.type === 'unit' || this.type === 'layer') {
                return (this.view && this.view.style) || 'cell';
            }
            return undefined;
        }
        assembleEncodeFromView(view) {
            // Exclude "style"
            const baseView = __rest(view, ["style"]);
            const e = {};
            for (const property in baseView) {
                if (baseView.hasOwnProperty(property)) {
                    const value = baseView[property];
                    if (value !== undefined) {
                        e[property] = { value };
                    }
                }
            }
            return e;
        }
        assembleGroupEncodeEntry(isTopLevel) {
            let encodeEntry = undefined;
            if (this.view) {
                encodeEntry = this.assembleEncodeFromView(this.view);
            }
            if (!isTopLevel) {
                // For top-level spec, we can set the global width and height signal to adjust the group size.
                // For other child specs, we have to manually set width and height in the encode entry.
                if (this.type === 'unit' || this.type === 'layer') {
                    return Object.assign({ width: this.getSizeSignalRef('width'), height: this.getSizeSignalRef('height') }, (encodeEntry || {}));
                }
            }
            return encodeEntry;
        }
        assembleLayout() {
            if (!this.layout) {
                return undefined;
            }
            const _a = this.layout, { spacing } = _a, layout = __rest(_a, ["spacing"]);
            const titleBand = assembleLayoutTitleBand(this.component.layoutHeaders);
            return Object.assign({ padding: spacing }, this.assembleDefaultLayout(), layout, (titleBand ? { titleBand } : {}));
        }
        assembleDefaultLayout() {
            return {};
        }
        assembleHeaderMarks() {
            const { layoutHeaders } = this.component;
            let headerMarks = [];
            for (const channel of FACET_CHANNELS) {
                if (layoutHeaders[channel].title) {
                    headerMarks.push(assembleTitleGroup(this, channel));
                }
            }
            for (const channel of HEADER_CHANNELS) {
                headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));
            }
            return headerMarks;
        }
        assembleAxes() {
            return assembleAxes(this.component.axes, this.config);
        }
        assembleLegends() {
            return assembleLegends(this);
        }
        assembleProjections() {
            return assembleProjections(this);
        }
        assembleTitle() {
            const _a = this.title || {}, { encoding } = _a, titleNoEncoding = __rest(_a, ["encoding"]);
            const title = Object.assign({}, extractTitleConfig(this.config.title).nonMark, titleNoEncoding, (encoding ? { encode: { update: encoding } } : {}));
            if (title.text) {
                if (!contains(['unit', 'layer'], this.type)) {
                    // As described in https://github.com/vega/vega-lite/issues/2875:
                    // Due to vega/vega#960 (comment), we only support title's anchor for unit and layered spec for now.
                    if (title.anchor && title.anchor !== 'start') {
                        warn(message.cannotSetTitleAnchor(this.type));
                    }
                    title.anchor = 'start';
                }
                if (contains(['middle', undefined], title.anchor) && title.frame === undefined) {
                    title.frame = 'group';
                }
                return keys(title).length > 0 ? title : undefined;
            }
            return undefined;
        }
        /**
         * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.
         */
        assembleGroup(signals = []) {
            const group = {};
            signals = signals.concat(this.assembleSignals());
            if (signals.length > 0) {
                group.signals = signals;
            }
            const layout = this.assembleLayout();
            if (layout) {
                group.layout = layout;
            }
            group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());
            // Only include scales if this spec is top-level or if parent is facet.
            // (Otherwise, it will be merged with upper-level's scope.)
            const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];
            if (scales.length > 0) {
                group.scales = scales;
            }
            const axes = this.assembleAxes();
            if (axes.length > 0) {
                group.axes = axes;
            }
            const legends = this.assembleLegends();
            if (legends.length > 0) {
                group.legends = legends;
            }
            return group;
        }
        hasDescendantWithFieldOnChannel(channel) {
            for (const child of this.children) {
                if (isUnitModel(child)) {
                    if (child.channelHasField(channel)) {
                        return true;
                    }
                }
                else {
                    if (child.hasDescendantWithFieldOnChannel(channel)) {
                        return true;
                    }
                }
            }
            return false;
        }
        getName(text) {
            return varName((this.name ? this.name + '_' : '') + text);
        }
        /**
         * Request a data source name for the given data source type and mark that data source as required. This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().
         */
        requestDataName(name) {
            const fullName = this.getName(name);
            // Increase ref count. This is critical because otherwise we won't create a data source.
            // We also increase the ref counts on OutputNode.getSource() calls.
            const refCounts = this.component.data.outputNodeRefCounts;
            refCounts[fullName] = (refCounts[fullName] || 0) + 1;
            return fullName;
        }
        getSizeSignalRef(sizeType) {
            if (isFacetModel(this.parent)) {
                const channel = sizeType === 'width' ? 'x' : 'y';
                const scaleComponent = this.component.scales[channel];
                if (scaleComponent && !scaleComponent.merged) {
                    // independent scale
                    const type = scaleComponent.get('type');
                    const range = scaleComponent.get('range');
                    if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                        const scaleName = scaleComponent.get('name');
                        const domain = assembleDomain(this, channel);
                        const field = getFieldFromDomain(domain);
                        if (field) {
                            const fieldRef = vgField({ aggregate: 'distinct', field }, { expr: 'datum' });
                            return {
                                signal: sizeExpr(scaleName, scaleComponent, fieldRef)
                            };
                        }
                        else {
                            warn('Unknown field for ${channel}.  Cannot calculate view size.');
                            return null;
                        }
                    }
                }
            }
            return {
                signal: this.signalNameMap.get(this.getName(sizeType))
            };
        }
        /**
         * Lookup the name of the datasource for an output node. You probably want to call this in assemble.
         */
        lookupDataSource(name) {
            const node = this.component.data.outputNodes[name];
            if (!node) {
                // Name not found in map so let's just return what we got.
                // This can happen if we already have the correct name.
                return name;
            }
            return node.getSource();
        }
        getSignalName(oldSignalName) {
            return this.signalNameMap.get(oldSignalName);
        }
        renameSignal(oldName, newName) {
            this.signalNameMap.rename(oldName, newName);
        }
        renameScale(oldName, newName) {
            this.scaleNameMap.rename(oldName, newName);
        }
        renameProjection(oldName, newName) {
            this.projectionNameMap.rename(oldName, newName);
        }
        /**
         * @return scale name for a given channel after the scale has been parsed and named.
         */
        scaleName(originalScaleName, parse) {
            if (parse) {
                // During the parse phase always return a value
                // No need to refer to rename map because a scale can't be renamed
                // before it has the original name.
                return this.getName(originalScaleName);
            }
            // If there is a scale for the channel, it should either
            // be in the scale component or exist in the name map
            if (
            // If there is a scale for the channel, there should be a local scale component for it
            (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||
                // in the scale name map (the scale get merged by its parent)
                this.scaleNameMap.has(this.getName(originalScaleName))) {
                return this.scaleNameMap.get(this.getName(originalScaleName));
            }
            return undefined;
        }
        /**
         * @return projection name after the projection has been parsed and named.
         */
        projectionName(parse) {
            if (parse) {
                // During the parse phase always return a value
                // No need to refer to rename map because a projection can't be renamed
                // before it has the original name.
                return this.getName('projection');
            }
            if ((this.component.projection && !this.component.projection.merged) ||
                this.projectionNameMap.has(this.getName('projection'))) {
                return this.projectionNameMap.get(this.getName('projection'));
            }
            return undefined;
        }
        /**
         * Traverse a model's hierarchy to get the scale component for a particular channel.
         */
        getScaleComponent(channel) {
            /* istanbul ignore next: This is warning for debugging test */
            if (!this.component.scales) {
                throw new Error('getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().');
            }
            const localScaleComponent = this.component.scales[channel];
            if (localScaleComponent && !localScaleComponent.merged) {
                return localScaleComponent;
            }
            return this.parent ? this.parent.getScaleComponent(channel) : undefined;
        }
        /**
         * Traverse a model's hierarchy to get a particular selection component.
         */
        getSelectionComponent(variableName, origName) {
            let sel = this.component.selection[variableName];
            if (!sel && this.parent) {
                sel = this.parent.getSelectionComponent(variableName, origName);
            }
            if (!sel) {
                throw new Error(message.selectionNotFound(origName));
            }
            return sel;
        }
    }
    /** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */
    class ModelWithField extends Model {
        /** Get "field" reference for Vega */
        vgField(channel, opt = {}) {
            const fieldDef = this.fieldDef(channel);
            if (!fieldDef) {
                return undefined;
            }
            return vgField(fieldDef, opt);
        }
        reduceFieldDef(f, init, t) {
            return reduce(this.getMapping(), (acc, cd, c) => {
                const fieldDef = getFieldDef(cd);
                if (fieldDef) {
                    return f(acc, fieldDef, c);
                }
                return acc;
            }, init, t);
        }
        forEachFieldDef(f, t) {
            forEach(this.getMapping(), (cd, c) => {
                const fieldDef = getFieldDef(cd);
                if (fieldDef) {
                    f(fieldDef, c);
                }
            }, t);
        }
    }

    function rangeFormula(model, fieldDef, channel, config) {
        if (binRequiresRange(fieldDef, channel)) {
            // read format from axis or legend, if there is no format then use config.numberFormat
            const guide = isUnitModel(model) ? model.axis(channel) || model.legend(channel) || {} : {};
            const startField = vgField(fieldDef, { expr: 'datum' });
            const endField = vgField(fieldDef, { expr: 'datum', binSuffix: 'end' });
            return {
                formulaAs: vgField(fieldDef, { binSuffix: 'range', forAs: true }),
                formula: binFormatExpression(startField, endField, guide.format, config)
            };
        }
        return {};
    }
    function binKey(bin, field) {
        return `${binToString(bin)}_${field}`;
    }
    function getSignalsFromModel(model, key) {
        return {
            signal: model.getName(`${key}_bins`),
            extentSignal: model.getName(`${key}_extent`)
        };
    }
    function isBinTransform(t) {
        return 'as' in t;
    }
    function createBinComponent(t, bin, model) {
        let as;
        if (isBinTransform(t)) {
            as = isString(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];
        }
        else {
            as = [vgField(t, { forAs: true }), vgField(t, { binSuffix: 'end', forAs: true })];
        }
        const normalizedBin = normalizeBin(bin, undefined) || {};
        const key = binKey(normalizedBin, t.field);
        const { signal, extentSignal } = getSignalsFromModel(model, key);
        const binComponent = Object.assign({ bin: normalizedBin, field: t.field, as: as }, (signal ? { signal } : {}), (extentSignal ? { extentSignal } : {}));
        return { key, binComponent };
    }
    class BinNode extends DataFlowNode {
        constructor(parent, bins) {
            super(parent);
            this.bins = bins;
        }
        clone() {
            return new BinNode(null, duplicate(this.bins));
        }
        static makeFromEncoding(parent, model) {
            const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {
                if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {
                    const { key, binComponent } = createBinComponent(fieldDef, fieldDef.bin, model);
                    binComponentIndex[key] = Object.assign({}, binComponent, binComponentIndex[key], rangeFormula(model, fieldDef, channel, model.config));
                }
                return binComponentIndex;
            }, {});
            if (keys(bins).length === 0) {
                return null;
            }
            return new BinNode(parent, bins);
        }
        /**
         * Creates a bin node from BinTransform.
         * The optional parameter should provide
         */
        static makeFromTransform(parent, t, model) {
            const { key, binComponent } = createBinComponent(t, t.bin, model);
            return new BinNode(parent, {
                [key]: binComponent
            });
        }
        merge(other) {
            this.bins = Object.assign({}, this.bins, other.bins);
            other.remove();
        }
        producedFields() {
            return new Set(flatten(vals(this.bins).map(c => c.as)));
        }
        dependentFields() {
            return new Set(vals(this.bins).map(c => c.field));
        }
        hash() {
            return `Bin ${hash(this.bins)}`;
        }
        assemble() {
            return flatten(vals(this.bins).map(bin => {
                const transform = [];
                const binTrans = Object.assign({ type: 'bin', field: bin.field, as: bin.as, signal: bin.signal }, bin.bin);
                if (!bin.bin.extent && bin.extentSignal) {
                    transform.push({
                        type: 'extent',
                        field: bin.field,
                        signal: bin.extentSignal
                    });
                    binTrans.extent = { signal: bin.extentSignal };
                }
                transform.push(binTrans);
                if (bin.formula) {
                    transform.push({
                        type: 'formula',
                        expr: bin.formula,
                        as: bin.formulaAs
                    });
                }
                return transform;
            }));
        }
    }

    class FilterNode extends DataFlowNode {
        constructor(parent, model, filter) {
            super(parent);
            this.model = model;
            this.filter = filter;
            // TODO: refactor this to not take a node and
            // then add a static function makeFromOperand and make the constructor take only an expression
            this.expr = expression$2(this.model, this.filter, this);
            this._dependentFields = getDependentFields(this.expr);
        }
        clone() {
            return new FilterNode(null, this.model, duplicate(this.filter));
        }
        dependentFields() {
            return this._dependentFields;
        }
        assemble() {
            return {
                type: 'filter',
                expr: this.expr
            };
        }
        hash() {
            return `Filter ${this.expr}`;
        }
    }

    /**
     * A class for flatten transform nodes
     */
    class FlattenTransformNode extends DataFlowNode {
        constructor(parent, transform) {
            super(parent);
            this.transform = transform;
            this.transform = duplicate(transform); // duplicate to prevent side effects
            const { flatten, as = [] } = this.transform;
            this.transform.as = flatten.map((f, i) => as[i] || f);
        }
        clone() {
            return new FlattenTransformNode(this.parent, duplicate(this.transform));
        }
        producedFields() {
            return new Set(this.transform.as);
        }
        hash() {
            return `FlattenTransform ${hash(this.transform)}`;
        }
        assemble() {
            const { flatten: fields, as } = this.transform;
            const result = {
                type: 'flatten',
                fields,
                as
            };
            return result;
        }
    }

    /**
     * A class for flatten transform nodes
     */
    class FoldTransformNode extends DataFlowNode {
        constructor(parent, transform) {
            super(parent);
            this.transform = transform;
            this.transform = duplicate(transform); // duplicate to prevent side effects
            const specifiedAs = this.transform.as || [undefined, undefined];
            this.transform.as = [specifiedAs[0] || 'key', specifiedAs[1] || 'value'];
        }
        clone() {
            return new FoldTransformNode(null, duplicate(this.transform));
        }
        producedFields() {
            return new Set(this.transform.as);
        }
        hash() {
            return `FoldTransform ${hash(this.transform)}`;
        }
        assemble() {
            const { fold, as } = this.transform;
            const result = {
                type: 'fold',
                fields: fold,
                as
            };
            return result;
        }
    }

    class GeoJSONNode extends DataFlowNode {
        constructor(parent, fields, geojson, signal) {
            super(parent);
            this.fields = fields;
            this.geojson = geojson;
            this.signal = signal;
        }
        clone() {
            return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);
        }
        static parseAll(parent, model) {
            let geoJsonCounter = 0;
            [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates) => {
                const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : undefined);
                if (pair[0] || pair[1]) {
                    parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));
                }
            });
            if (model.channelHasField(SHAPE)) {
                const fieldDef = model.fieldDef(SHAPE);
                if (fieldDef.type === GEOJSON) {
                    parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));
                }
            }
            return parent;
        }
        assemble() {
            return Object.assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {}), (this.geojson ? { geojson: this.geojson } : {}), { signal: this.signal });
        }
    }

    class GeoPointNode extends DataFlowNode {
        constructor(parent, projection, fields, as) {
            super(parent);
            this.projection = projection;
            this.fields = fields;
            this.as = as;
        }
        clone() {
            return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));
        }
        static parseAll(parent, model) {
            if (!model.projectionName()) {
                return parent;
            }
            [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates) => {
                const pair = coordinates.map(channel => model.channelHasField(channel) ? model.fieldDef(channel).field : undefined);
                const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';
                if (pair[0] || pair[1]) {
                    parent = new GeoPointNode(parent, model.projectionName(), pair, [
                        model.getName('x' + suffix),
                        model.getName('y' + suffix)
                    ]);
                }
            });
            return parent;
        }
        assemble() {
            return {
                type: 'geopoint',
                projection: this.projection,
                fields: this.fields,
                as: this.as
            };
        }
    }

    class IdentifierNode extends DataFlowNode {
        clone() {
            return new IdentifierNode(null);
        }
        constructor(parent) {
            super(parent);
        }
        producedFields() {
            return new Set([SELECTION_ID]);
        }
        assemble() {
            return { type: 'identifier', as: SELECTION_ID };
        }
    }

    const area$7 = {
        vgMark: 'area',
        encodeEntry: (model) => {
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'include' }), pointPosition('x', model, 'zeroOrMin'), pointPosition('y', model, 'zeroOrMin'), pointPosition2(model, 'zeroOrMin', model.markDef.orient === 'horizontal' ? 'x2' : 'y2'), defined$1(model));
        }
    };

    const bar = {
        vgMark: 'rect',
        encodeEntry: (model) => {
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), barPosition(model, 'x'), barPosition(model, 'y'));
        }
    };
    function barPosition(model, channel) {
        const { config, encoding, markDef } = model;
        const orient = markDef.orient;
        const sizeDef = encoding.size;
        const isBarLength = channel === 'x' ? orient === 'horizontal' : orient === 'vertical';
        const channel2 = channel === 'x' ? 'x2' : 'y2';
        const fieldDef = encoding[channel];
        const fieldDef2 = encoding[channel2];
        const scaleName = model.scaleName(channel);
        const scale = model.getScaleComponent(channel);
        const spacing = getFirstDefined(markDef.binSpacing, config.bar.binSpacing);
        const reverse = scale ? scale.get('reverse') : undefined;
        const mark = 'bar';
        // x, x2, and width -- we must specify two of these in all conditions
        if (isFieldDef(fieldDef) && isBinned(fieldDef.bin)) {
            return binPosition({ fieldDef, fieldDef2, channel, mark, scaleName, spacing, reverse });
        }
        else if (isBarLength || fieldDef2) {
            return Object.assign({}, pointPosition(channel, model, 'zeroOrMin'), pointPosition2(model, 'zeroOrMin', channel2));
        }
        else {
            // vertical
            if (isFieldDef(fieldDef)) {
                const scaleType = scale.get('type');
                if (isBinning(fieldDef.bin) && !sizeDef && !hasDiscreteDomain(scaleType)) {
                    return binPosition({ fieldDef, channel, scaleName, mark, spacing, reverse });
                }
                else {
                    if (scaleType === ScaleType.BAND) {
                        return bandPosition(fieldDef, channel, model);
                    }
                }
            }
            // sized bin, normal point-ordinal axis, quantitative x-axis, or no x
            return centeredBandPosition(channel, model, Object.assign({}, mid(channel === 'x' ? model.width : model.height)), defaultSizeRef(markDef, scaleName, scale, config));
        }
    }
    function defaultSizeRef(markDef, scaleName, scale, config) {
        if (markDef.size !== undefined) {
            return { value: markDef.size };
        }
        const sizeConfig = getMarkConfig('size', markDef, config, {
            // config.mark.size shouldn't affect bar size
            skipGeneralMarkConfig: true
        });
        if (sizeConfig !== undefined) {
            return { value: sizeConfig };
        }
        if (scale) {
            const scaleType = scale.get('type');
            if (scaleType === 'point' || scaleType === 'band') {
                if (config.bar.discreteBandSize !== undefined) {
                    return { value: config.bar.discreteBandSize };
                }
                if (scaleType === ScaleType.POINT) {
                    const scaleRange = scale.get('range');
                    if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {
                        return { value: scaleRange.step - 1 };
                    }
                    warn(message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL);
                }
                else {
                    // BAND
                    return bandRef(scaleName);
                }
            }
            else {
                // continuous scale
                return { value: config.bar.continuousBandSize };
            }
        }
        // No Scale
        const value = getFirstDefined(
        // No scale is like discrete bar (with one item)
        config.bar.discreteBandSize, config.scale.rangeStep ? config.scale.rangeStep - 1 : undefined, 
        // If somehow default rangeStep is set to null or undefined, use 20 as back up
        20);
        return { value };
    }

    const geoshape = {
        vgMark: 'shape',
        encodeEntry: (model) => {
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }));
        },
        postEncodingTransform: (model) => {
            const { encoding } = model;
            const shapeDef = encoding.shape;
            const transform = Object.assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON
                ? { field: vgField(shapeDef, { expr: 'datum' }) }
                : {}));
            return [transform];
        }
    };

    const line$6 = {
        vgMark: 'line',
        encodeEntry: (model) => {
            const { width, height } = model;
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), pointPosition('x', model, mid(width)), pointPosition('y', model, mid(height)), nonPosition('size', model, {
                vgChannel: 'strokeWidth' // VL's line size is strokeWidth
            }), defined$1(model));
        }
    };
    const trail$4 = {
        vgMark: 'trail',
        encodeEntry: (model) => {
            const { width, height } = model;
            return Object.assign({}, baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), pointPosition('x', model, mid(width)), pointPosition('y', model, mid(height)), nonPosition('size', model), defined$1(model));
        }
    };

    function encodeEntry(model, fixedShape) {
        const { config, markDef, width, height } = model;
        return Object.assign({}, baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), pointPosition('x', model, mid(width)), pointPosition('y', model, mid(height)), nonPosition('size', model, { defaultValue: getMarkConfig('size', markDef, config) }), shapeMixins(model, config, fixedShape));
    }
    function shapeMixins(model, config, fixedShape) {
        if (fixedShape) {
            return { shape: { value: fixedShape } };
        }
        return nonPosition('shape', model, { defaultValue: getMarkConfig('shape', model.markDef, config) });
    }
    const point$7 = {
        vgMark: 'symbol',
        encodeEntry: (model) => {
            return encodeEntry(model);
        }
    };
    const circle$2 = {
        vgMark: 'symbol',
        encodeEntry: (model) => {
            return encodeEntry(model, 'circle');
        }
    };
    const square = {
        vgMark: 'symbol',
        encodeEntry: (model) => {
            return encodeEntry(model, 'square');
        }
    };

    const rect$2 = {
        vgMark: 'rect',
        encodeEntry: (model) => {
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), rectPosition(model, 'x'), rectPosition(model, 'y'));
        }
    };
    function rectPosition(model, channel) {
        const channel2 = channel === 'x' ? 'x2' : 'y2';
        const fieldDef = model.encoding[channel];
        const fieldDef2 = model.encoding[channel2];
        const scale = model.getScaleComponent(channel);
        const scaleType = scale ? scale.get('type') : undefined;
        const scaleName = model.scaleName(channel);
        if (isFieldDef(fieldDef) && (isBinning(fieldDef.bin) || isBinned(fieldDef.bin))) {
            return binPosition({
                fieldDef,
                fieldDef2,
                channel,
                mark: 'rect',
                scaleName,
                spacing: 0,
                reverse: scale.get('reverse')
            });
        }
        else if (isFieldDef(fieldDef) && scale && hasDiscreteDomain(scaleType)) {
            /* istanbul ignore else */
            if (scaleType === ScaleType.BAND) {
                return bandPosition(fieldDef, channel, model);
            }
            else {
                // We don't support rect mark with point/ordinal scale
                throw new Error(message.scaleTypeNotWorkWithMark(RECT, scaleType));
            }
        }
        else {
            // continuous scale or no scale
            return Object.assign({}, pointPosition(channel, model, 'zeroOrMax'), pointPosition2(model, 'zeroOrMin', channel2));
        }
    }

    const rule$2 = {
        vgMark: 'rule',
        encodeEntry: (model) => {
            const { markDef, width, height } = model;
            const orient = markDef.orient;
            if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {
                // Show nothing if we have none of x, y, lat, and long.
                return {};
            }
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), pointPosition('x', model, orient === 'horizontal' ? 'zeroOrMin' : mid(width)), pointPosition('y', model, orient === 'vertical' ? 'zeroOrMin' : mid(height)), (orient !== 'vertical' ? pointPosition2(model, 'zeroOrMax', 'x2') : {}), (orient !== 'horizontal' ? pointPosition2(model, 'zeroOrMax', 'y2') : {}), nonPosition('size', model, {
                vgChannel: 'strokeWidth',
                defaultValue: markDef.size
            }));
        }
    };

    const text$4 = {
        vgMark: 'text',
        encodeEntry: (model) => {
            const { config, encoding, width, height, markDef } = model;
            // We have to support mark property and config for both size and fontSize for text
            // - size is from original Vega-Lite, which allows users to easily transition from size channel of other marks to text.
            // - fontSize is from Vega and we need support it to make sure that all Vega configs all work correctly in Vega-Lite.
            // Precedence: markDef > style config > mark-specific config
            // For each of them, fontSize is more specific than size, thus has higher precedence
            const defaultValue = getFirstDefined(markDef.fontSize, markDef.size, getStyleConfig('fontSize', markDef, config.style), getStyleConfig('size', markDef, config.style), config[markDef.type].fontSize, config[markDef.type].size
            // general mark config shouldn't be used as they are only for point/circle/square
            );
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), pointPosition('x', model, mid(width)), pointPosition('y', model, mid(height)), text$3(model), nonPosition('size', model, {
                defaultValue,
                vgChannel: 'fontSize' // VL's text size is fontSize
            }), valueIfDefined('align', align(model.markDef, encoding, config)));
        }
    };
    function align(markDef, encoding, config) {
        const a = markDef.align || getMarkConfig('align', markDef, config);
        if (a === undefined) {
            return 'center';
        }
        // If there is a config, Vega-parser will process this already.
        return undefined;
    }

    const tick = {
        vgMark: 'rect',
        encodeEntry: (model) => {
            const { config, markDef, width, height } = model;
            const orient = markDef.orient;
            const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';
            const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';
            return Object.assign({}, baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), pointPosition('x', model, mid(width), 'xc'), pointPosition('y', model, mid(height), 'yc'), nonPosition('size', model, {
                defaultValue: defaultSize(model),
                vgChannel: vgSizeChannel
            }), { [vgThicknessChannel]: { value: getFirstDefined(markDef.thickness, config.tick.thickness) } });
        }
    };
    function defaultSize(model) {
        const { config, markDef } = model;
        const orient = markDef.orient;
        const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');
        if (markDef.size !== undefined) {
            return markDef.size;
        }
        else if (config.tick.bandSize !== undefined) {
            return config.tick.bandSize;
        }
        else {
            const scaleRange = scale ? scale.get('range') : undefined;
            const rangeStep = scaleRange && isVgRangeStep(scaleRange) ? scaleRange.step : config.scale.rangeStep;
            if (typeof rangeStep !== 'number') {
                // FIXME consolidate this log
                throw new Error('Function does not handle non-numeric rangeStep');
            }
            return (rangeStep * 3) / 4;
        }
    }

    const markCompiler = {
        area: area$7,
        bar,
        circle: circle$2,
        geoshape,
        line: line$6,
        point: point$7,
        rect: rect$2,
        rule: rule$2,
        square,
        text: text$4,
        tick,
        trail: trail$4
    };
    function parseMarkGroups(model) {
        if (contains([LINE, AREA, TRAIL], model.mark)) {
            return parsePathMark(model);
        }
        else {
            return getMarkGroups(model);
        }
    }
    const FACETED_PATH_PREFIX = 'faceted_path_';
    function parsePathMark(model) {
        const details = pathGroupingFields(model.mark, model.encoding);
        const pathMarks = getMarkGroups(model, {
            // If has subfacet for line/area group, need to use faceted data from below.
            fromPrefix: details.length > 0 ? FACETED_PATH_PREFIX : ''
        });
        if (details.length > 0) {
            // have level of details - need to facet line into subgroups
            // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)
            return [
                {
                    name: model.getName('pathgroup'),
                    type: 'group',
                    from: {
                        facet: {
                            name: FACETED_PATH_PREFIX + model.requestDataName(MAIN),
                            data: model.requestDataName(MAIN),
                            groupby: details
                        }
                    },
                    encode: {
                        update: {
                            width: { field: { group: 'width' } },
                            height: { field: { group: 'height' } }
                        }
                    },
                    marks: pathMarks
                }
            ];
        }
        else {
            return pathMarks;
        }
    }
    function getSort$1(model) {
        const { encoding, stack, mark, markDef } = model;
        const order = encoding.order;
        if (!isArray(order) && isValueDef(order)) {
            return undefined;
        }
        else if ((isArray(order) || isFieldDef(order)) && !stack) {
            // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)
            return sortParams(order, { expr: 'datum' });
        }
        else if (isPathMark(mark)) {
            // For both line and area, we sort values based on dimension by default
            const dimensionChannelDef = encoding[markDef.orient === 'horizontal' ? 'y' : 'x'];
            if (isFieldDef(dimensionChannelDef)) {
                const s = dimensionChannelDef.sort;
                const sortField = isSortField(s)
                    ? vgField({
                        // FIXME: this op might not already exist?
                        // FIXME: what if dimensionChannel (x or y) contains custom domain?
                        aggregate: isAggregate(model.encoding) ? s.op : undefined,
                        field: s.field
                    }, { expr: 'datum' })
                    : vgField(dimensionChannelDef, {
                        // For stack with imputation, we only have bin_mid
                        binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,
                        expr: 'datum'
                    });
                return {
                    field: sortField,
                    order: 'descending'
                };
            }
            return undefined;
        }
        return undefined;
    }
    function getMarkGroups(model, opt = { fromPrefix: '' }) {
        const mark = model.mark;
        const clip = getFirstDefined(model.markDef.clip, scaleClip(model));
        const style = getStyles(model.markDef);
        const key = model.encoding.key;
        const sort = getSort$1(model);
        const postEncodingTransform = markCompiler[mark].postEncodingTransform
            ? markCompiler[mark].postEncodingTransform(model)
            : null;
        return [
            Object.assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style } : {}), (key ? { key: { field: key.field } } : {}), (sort ? { sort } : {}), { from: { data: opt.fromPrefix + model.requestDataName(MAIN) }, encode: {
                    update: markCompiler[mark].encodeEntry(model)
                } }, (postEncodingTransform
                ? {
                    transform: postEncodingTransform
                }
                : {}))
        ];
    }
    /**
     * Returns list of path grouping fields
     * that the model's spec contains.
     */
    function pathGroupingFields(mark, encoding) {
        return keys(encoding).reduce((details, channel) => {
            switch (channel) {
                // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group
                case 'x':
                case 'y':
                case 'order':
                case 'href':
                case 'x2':
                case 'y2':
                case 'latitude':
                case 'longitude':
                case 'latitude2':
                case 'longitude2':
                // TODO: case 'cursor':
                // text, shape, shouldn't be a part of line/trail/area
                case 'text':
                case 'shape':
                // tooltip fields should not be added to group by
                case 'tooltip':
                    return details;
                case 'detail':
                case 'key':
                    const channelDef = encoding[channel];
                    if (isArray(channelDef) || isFieldDef(channelDef)) {
                        (isArray(channelDef) ? channelDef : [channelDef]).forEach(fieldDef => {
                            if (!fieldDef.aggregate) {
                                details.push(vgField(fieldDef, {}));
                            }
                        });
                    }
                    return details;
                case 'size':
                    if (mark === 'trail') {
                        // For trail, size should not group trail lines.
                        return details;
                    }
                // For line, it should group lines.
                /* tslint:disable */
                // intentional fall through
                case 'color':
                case 'fill':
                case 'stroke':
                case 'opacity':
                case 'fillOpacity':
                case 'strokeOpacity':
                case 'strokeWidth':
                    // TODO strokeDashOffset:
                    /* tslint:enable */
                    const fieldDef = getTypedFieldDef(encoding[channel]);
                    if (fieldDef && !fieldDef.aggregate) {
                        details.push(vgField(fieldDef, {}));
                    }
                    return details;
                default:
                    throw new Error(`Bug: Channel ${channel} unimplemented for line mark`);
            }
        }, []);
    }
    /**
     * If scales are bound to interval selections, we want to automatically clip
     * marks to account for panning/zooming interactions. We identify bound scales
     * by the domainRaw property, which gets added during scale parsing.
     */
    function scaleClip(model) {
        const xScale = model.getScaleComponent('x');
        const yScale = model.getScaleComponent('y');
        return (xScale && xScale.get('domainRaw')) || (yScale && yScale.get('domainRaw')) ? true : false;
    }

    class ImputeNode extends DataFlowNode {
        constructor(parent, transform) {
            super(parent);
            this.transform = transform;
        }
        clone() {
            return new ImputeNode(null, duplicate(this.transform));
        }
        producedFields() {
            return new Set([this.transform.impute]);
        }
        processSequence(keyvals) {
            const { start = 0, stop, step } = keyvals;
            const result = [start, stop, ...(step ? [step] : [])].join(',');
            return { signal: `sequence(${result})` };
        }
        static makeFromTransform(parent, imputeTransform) {
            return new ImputeNode(parent, imputeTransform);
        }
        static makeFromEncoding(parent, model) {
            const encoding = model.encoding;
            const xDef = encoding.x;
            const yDef = encoding.y;
            if (isFieldDef(xDef) && isFieldDef(yDef)) {
                const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;
                if (imputedChannel === undefined) {
                    return undefined;
                }
                const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;
                const { method, value, frame, keyvals } = imputedChannel.impute;
                const groupbyFields = pathGroupingFields(model.mark, encoding);
                return new ImputeNode(parent, Object.assign({ impute: imputedChannel.field, key: keyChannel.field }, (method ? { method } : {}), (value !== undefined ? { value } : {}), (frame ? { frame } : {}), (keyvals !== undefined ? { keyvals } : {}), (groupbyFields.length ? { groupby: groupbyFields } : {})));
            }
            return null;
        }
        hash() {
            return `Impute ${hash(this.transform)}`;
        }
        assemble() {
            const { impute, key, keyvals, method, groupby, value, frame = [null, null] } = this.transform;
            const initialImpute = Object.assign({ type: 'impute', field: impute, key }, (keyvals ? { keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals } : {}), { method: 'value' }, (groupby ? { groupby } : {}), { value: null });
            let setImputedField;
            if (method && method !== 'value') {
                const deriveNewField = Object.assign({ type: 'window', as: [`imputed_${impute}_value`], ops: [method], fields: [impute], frame, ignorePeers: false }, (groupby ? { groupby } : {}));
                const replaceOriginal = {
                    type: 'formula',
                    expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,
                    as: impute
                };
                setImputedField = [deriveNewField, replaceOriginal];
            }
            else {
                const replaceWithValue = {
                    type: 'formula',
                    expr: `datum.${impute} === null ? ${value} : datum.${impute}`,
                    as: impute
                };
                setImputedField = [replaceWithValue];
            }
            return [initialImpute, ...setImputedField];
        }
    }

    /**
     * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)
     * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the
     * same field again (or differently).
     */
    class AncestorParse extends Split {
        constructor(explicit = {}, implicit = {}, parseNothing = false) {
            super(explicit, implicit);
            this.explicit = explicit;
            this.implicit = implicit;
            this.parseNothing = parseNothing;
        }
        clone() {
            const clone = super.clone();
            clone.parseNothing = this.parseNothing;
            return clone;
        }
    }

    class LookupNode extends DataFlowNode {
        constructor(parent, transform, secondary) {
            super(parent);
            this.transform = transform;
            this.secondary = secondary;
        }
        clone() {
            return new LookupNode(null, duplicate(this.transform), this.secondary);
        }
        static make(parent, model, transform, counter) {
            const sources = model.component.data.sources;
            let fromSource = findSource(transform.from.data, sources);
            if (!fromSource) {
                fromSource = new SourceNode(transform.from.data);
                sources.push(fromSource);
            }
            const fromOutputName = model.getName(`lookup_${counter}`);
            const fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);
            model.component.data.outputNodes[fromOutputName] = fromOutputNode;
            return new LookupNode(parent, transform, fromOutputNode.getSource());
        }
        producedFields() {
            return new Set(this.transform.from.fields || (this.transform.as instanceof Array ? this.transform.as : [this.transform.as]));
        }
        hash() {
            return `Lookup ${hash({ transform: this.transform, secondary: this.secondary })}`;
        }
        assemble() {
            let foreign;
            if (this.transform.from.fields) {
                // lookup a few fields and add create a flat output
                foreign = Object.assign({ values: this.transform.from.fields }, (this.transform.as ? { as: this.transform.as instanceof Array ? this.transform.as : [this.transform.as] } : {}));
            }
            else {
                // lookup full record and nest it
                let asName = this.transform.as;
                if (!isString(asName)) {
                    warn(message.NO_FIELDS_NEEDS_AS);
                    asName = '_lookup';
                }
                foreign = {
                    as: [asName]
                };
            }
            return Object.assign({ type: 'lookup', from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign, (this.transform.default ? { default: this.transform.default } : {}));
        }
    }

    /**
     * A class for the sample transform nodes
     */
    class SampleTransformNode extends DataFlowNode {
        constructor(parent, transform) {
            super(parent);
            this.transform = transform;
        }
        clone() {
            return new SampleTransformNode(null, duplicate(this.transform));
        }
        hash() {
            return `SampleTransform ${hash(this.transform)}`;
        }
        assemble() {
            return {
                type: 'sample',
                size: this.transform.sample
            };
        }
    }

    function makeWalkTree(data) {
        // to name datasources
        let datasetIndex = 0;
        /**
         * Recursively walk down the tree.
         */
        function walkTree(node, dataSource) {
            if (node instanceof SourceNode) {
                // If the source is a named data source or a data source with values, we need
                // to put it in a different data source. Otherwise, Vega may override the data.
                if (!isUrlData(node.data)) {
                    data.push(dataSource);
                    const newData = {
                        name: null,
                        source: dataSource.name,
                        transform: []
                    };
                    dataSource = newData;
                }
            }
            if (node instanceof ParseNode) {
                if (node.parent instanceof SourceNode && !dataSource.source) {
                    // If node's parent is a root source and the data source does not refer to another data source, use normal format parse
                    dataSource.format = Object.assign({}, (dataSource.format || {}), { parse: node.assembleFormatParse() });
                    // add calculates for all nested fields
                    dataSource.transform.push(...node.assembleTransforms(true));
                }
                else {
                    // Otherwise use Vega expression to parse
                    dataSource.transform.push(...node.assembleTransforms());
                }
            }
            if (node instanceof FacetNode) {
                if (!dataSource.name) {
                    dataSource.name = `data_${datasetIndex++}`;
                }
                if (!dataSource.source || dataSource.transform.length > 0) {
                    data.push(dataSource);
                    node.data = dataSource.name;
                }
                else {
                    node.data = dataSource.source;
                }
                node.assemble().forEach(d => data.push(d));
                // break here because the rest of the tree has to be taken care of by the facet.
                return;
            }
            if (node instanceof FilterNode ||
                node instanceof CalculateNode ||
                node instanceof GeoPointNode ||
                node instanceof GeoJSONNode ||
                node instanceof AggregateNode ||
                node instanceof LookupNode ||
                node instanceof WindowTransformNode ||
                node instanceof JoinAggregateTransformNode ||
                node instanceof FoldTransformNode ||
                node instanceof FlattenTransformNode ||
                node instanceof IdentifierNode ||
                node instanceof SampleTransformNode) {
                dataSource.transform.push(node.assemble());
            }
            if (node instanceof BinNode ||
                node instanceof TimeUnitNode ||
                node instanceof ImputeNode ||
                node instanceof StackNode) {
                dataSource.transform = dataSource.transform.concat(node.assemble());
            }
            if (node instanceof OutputNode) {
                if (dataSource.source && dataSource.transform.length === 0) {
                    node.setSource(dataSource.source);
                }
                else if (node.parent instanceof OutputNode) {
                    // Note that an output node may be required but we still do not assemble a
                    // separate data source for it.
                    node.setSource(dataSource.name);
                }
                else {
                    if (!dataSource.name) {
                        dataSource.name = `data_${datasetIndex++}`;
                    }
                    // Here we set the name of the datasource we generated. From now on
                    // other assemblers can use it.
                    node.setSource(dataSource.name);
                    // if this node has more than one child, we will add a datasource automatically
                    if (node.numChildren() === 1) {
                        data.push(dataSource);
                        const newData = {
                            name: null,
                            source: dataSource.name,
                            transform: []
                        };
                        dataSource = newData;
                    }
                }
            }
            switch (node.numChildren()) {
                case 0:
                    // done
                    if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {
                        // do not push empty datasources that are simply references
                        data.push(dataSource);
                    }
                    break;
                case 1:
                    walkTree(node.children[0], dataSource);
                    break;
                default:
                    if (!dataSource.name) {
                        dataSource.name = `data_${datasetIndex++}`;
                    }
                    let source = dataSource.name;
                    if (!dataSource.source || dataSource.transform.length > 0) {
                        data.push(dataSource);
                    }
                    else {
                        source = dataSource.source;
                    }
                    node.children.forEach(child => {
                        const newData = {
                            name: null,
                            source: source,
                            transform: []
                        };
                        walkTree(child, newData);
                    });
                    break;
            }
        }
        return walkTree;
    }
    /**
     * Assemble data sources that are derived from faceted data.
     */
    function assembleFacetData(root) {
        const data = [];
        const walkTree = makeWalkTree(data);
        root.children.forEach(child => walkTree(child, {
            source: root.name,
            name: null,
            transform: []
        }));
        return data;
    }
    /**
     * Create Vega Data array from a given compiled model and append all of them to the given array
     *
     * @param  model
     * @param  data array
     * @return modified data array
     */
    function assembleRootData(dataComponent, datasets) {
        const data = [];
        // roots.forEach(debug);
        // draw(roots);
        const walkTree = makeWalkTree(data);
        let sourceIndex = 0;
        dataComponent.sources.forEach(root => {
            // assign a name if the source does not have a name yet
            if (!root.hasName()) {
                root.dataName = `source_${sourceIndex++}`;
            }
            const newData = root.assemble();
            walkTree(root, newData);
        });
        // remove empty transform arrays for cleaner output
        data.forEach(d => {
            if (d.transform.length === 0) {
                delete d.transform;
            }
        });
        // move sources without transforms (the ones that are potentially used in lookups) to the beginning
        let whereTo = 0;
        for (let i = 0; i < data.length; i++) {
            const d = data[i];
            if ((d.transform || []).length === 0 && !d.source) {
                data.splice(whereTo++, 0, data.splice(i, 1)[0]);
            }
        }
        // now fix the from references in lookup transforms
        for (const d of data) {
            for (const t of d.transform || []) {
                if (t.type === 'lookup') {
                    t.from = dataComponent.outputNodes[t.from].getSource();
                }
            }
        }
        // inline values for datasets that are in the datastore
        for (const d of data) {
            if (d.name in datasets) {
                d.values = datasets[d.name];
            }
        }
        return data;
    }

    function getHeaderType(orient) {
        if (orient === 'top' || orient === 'left') {
            return 'header';
        }
        return 'footer';
    }
    function parseFacetHeaders(model) {
        for (const channel of FACET_CHANNELS) {
            parseFacetHeader(model, channel);
        }
        mergeChildAxis(model, 'x');
        mergeChildAxis(model, 'y');
    }
    function parseFacetHeader(model, channel) {
        if (model.channelHasField(channel)) {
            const fieldDef = model.facet[channel];
            let title$1 = title(fieldDef, model.config, { allowDisabling: true });
            if (model.child.component.layoutHeaders[channel].title) {
                // merge title with child to produce "Title / Subtitle / Sub-subtitle"
                title$1 += ' / ' + model.child.component.layoutHeaders[channel].title;
                model.child.component.layoutHeaders[channel].title = null;
            }
            model.component.layoutHeaders[channel] = {
                title: title$1,
                facetFieldDef: fieldDef,
                // TODO: support adding label to footer as well
                header: channel === 'facet' ? [] : [makeHeaderComponent(model, channel, true)]
            };
        }
    }
    function makeHeaderComponent(model, channel, labels) {
        const sizeType = channel === 'row' ? 'height' : 'width';
        return {
            labels,
            sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,
            axes: []
        };
    }
    function mergeChildAxis(model, channel) {
        const { child } = model;
        if (child.component.axes[channel]) {
            const { layoutHeaders, resolve } = model.component;
            resolve.axis[channel] = parseGuideResolve(resolve, channel);
            if (resolve.axis[channel] === 'shared') {
                // For shared axis, move the axes to facet's header or footer
                const headerChannel = channel === 'x' ? 'column' : 'row';
                const layoutHeader = layoutHeaders[headerChannel];
                for (const axisComponent of child.component.axes[channel]) {
                    const headerType = getHeaderType(axisComponent.get('orient'));
                    layoutHeader[headerType] = layoutHeader[headerType] || [makeHeaderComponent(model, headerChannel, false)];
                    // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes
                    const mainAxis = assembleAxis(axisComponent, 'main', model.config, { header: true });
                    // LayoutHeader no longer keep track of property precedence, thus let's combine.
                    layoutHeader[headerType][0].axes.push(mainAxis);
                    axisComponent.mainExtracted = true;
                }
            }
        }
    }

    function parseLayerLayoutSize(model) {
        parseChildrenLayoutSize(model);
        const layoutSizeCmpt = model.component.layoutSize;
        layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));
        layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));
    }
    const parseRepeatLayoutSize = parseLayerLayoutSize;
    const SIZE_TYPE_TO_MERGE = {
        vconcat: 'width',
        hconcat: 'height'
    };
    function parseConcatLayoutSize(model) {
        parseChildrenLayoutSize(model);
        const layoutSizeCmpt = model.component.layoutSize;
        const sizeTypeToMerge = SIZE_TYPE_TO_MERGE[model.concatType];
        if (sizeTypeToMerge) {
            layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));
        }
    }
    function parseChildrenLayoutSize(model) {
        for (const child of model.children) {
            child.parseLayoutSize();
        }
    }
    function parseNonUnitLayoutSizeForChannel(model, sizeType) {
        const channel = sizeType === 'width' ? 'x' : 'y';
        const resolve = model.component.resolve;
        let mergedSize;
        // Try to merge layout size
        for (const child of model.children) {
            const childSize = child.component.layoutSize.getWithExplicit(sizeType);
            const scaleResolve = resolve.scale[channel];
            if (scaleResolve === 'independent' && childSize.value === 'range-step') {
                // Do not merge independent scales with range-step as their size depends
                // on the scale domains, which can be different between scales.
                mergedSize = undefined;
                break;
            }
            if (mergedSize) {
                if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {
                    // For independent scale, only merge if all the sizes are the same.
                    // If the values are different, abandon the merge!
                    mergedSize = undefined;
                    break;
                }
                mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');
            }
            else {
                mergedSize = childSize;
            }
        }
        if (mergedSize) {
            // If merged, rename size and set size of all children.
            for (const child of model.children) {
                model.renameSignal(child.getName(sizeType), model.getName(sizeType));
                child.component.layoutSize.set(sizeType, 'merged', false);
            }
            return mergedSize;
        }
        else {
            // Otherwise, there is no merged size.
            return {
                explicit: false,
                value: undefined
            };
        }
    }
    function parseUnitLayoutSize(model) {
        const layoutSizeComponent = model.component.layoutSize;
        if (!layoutSizeComponent.explicit.width) {
            const width = defaultUnitSize(model, 'width');
            layoutSizeComponent.set('width', width, false);
        }
        if (!layoutSizeComponent.explicit.height) {
            const height = defaultUnitSize(model, 'height');
            layoutSizeComponent.set('height', height, false);
        }
    }
    function defaultUnitSize(model, sizeType) {
        const channel = sizeType === 'width' ? 'x' : 'y';
        const config = model.config;
        const scaleComponent = model.getScaleComponent(channel);
        if (scaleComponent) {
            const scaleType = scaleComponent.get('type');
            const range = scaleComponent.get('range');
            if (hasDiscreteDomain(scaleType) && isVgRangeStep(range)) {
                // For discrete domain with range.step, use dynamic width/height
                return 'range-step';
            }
            else {
                return config.view[sizeType];
            }
        }
        else if (model.hasProjection) {
            return config.view[sizeType];
        }
        else {
            // No scale - set default size
            if (sizeType === 'width' && model.mark === 'text') {
                // width for text mark without x-field is a bit wider than typical range step
                return config.scale.textXRangeStep;
            }
            // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.
            return config.scale.rangeStep || defaultScaleConfig.rangeStep;
        }
    }

    function replaceRepeaterInFacet(facet, repeater) {
        if (isFacetMapping(facet)) {
            return replaceRepeater(facet, repeater);
        }
        return replaceRepeaterInFieldDef(facet, repeater);
    }
    function replaceRepeaterInEncoding(encoding, repeater) {
        return replaceRepeater(encoding, repeater);
    }
    /**
     * Replaces repeated value and returns if the repeated value is valid.
     */
    function replaceRepeat(o, repeater) {
        if (isRepeatRef(o.field)) {
            if (o.field.repeat in repeater) {
                // any needed to calm down ts compiler
                return Object.assign({}, o, { field: repeater[o.field.repeat] });
            }
            else {
                warn(message.noSuchRepeatedValue(o.field.repeat));
                return undefined;
            }
        }
        return o;
    }
    /**
     * Replace repeater values in a field def with the concrete field name.
     */
    function replaceRepeaterInFieldDef(fieldDef, repeater) {
        fieldDef = replaceRepeat(fieldDef, repeater);
        if (fieldDef === undefined) {
            // the field def should be ignored
            return undefined;
        }
        else if (fieldDef === null) {
            return null;
        }
        if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {
            const sort = replaceRepeat(fieldDef.sort, repeater);
            fieldDef = Object.assign({}, fieldDef, (sort ? { sort } : {}));
        }
        return fieldDef;
    }
    function replaceRepeaterInChannelDef(channelDef, repeater) {
        if (isFieldDef(channelDef)) {
            const fd = replaceRepeaterInFieldDef(channelDef, repeater);
            if (fd) {
                return fd;
            }
            else if (isConditionalDef(channelDef)) {
                return { condition: channelDef.condition };
            }
        }
        else {
            if (hasConditionalFieldDef(channelDef)) {
                const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);
                if (fd) {
                    return Object.assign({}, channelDef, { condition: fd });
                }
                else {
                    const channelDefWithoutCondition = __rest(channelDef, ["condition"]);
                    return channelDefWithoutCondition;
                }
            }
            return channelDef;
        }
        return undefined;
    }
    function replaceRepeater(mapping, repeater) {
        const out = {};
        for (const channel in mapping) {
            if (mapping.hasOwnProperty(channel)) {
                const channelDef = mapping[channel];
                if (isArray(channelDef)) {
                    // array cannot have condition
                    out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);
                }
                else {
                    const cd = replaceRepeaterInChannelDef(channelDef, repeater);
                    if (cd !== undefined) {
                        out[channel] = cd;
                    }
                }
            }
        }
        return out;
    }

    function facetSortFieldName(fieldDef, sort, opt) {
        return vgField(sort, Object.assign({ suffix: `by_${vgField(fieldDef)}` }, (opt || {})));
    }
    class FacetModel extends ModelWithField {
        constructor(spec, parent, parentGivenName, repeater, config) {
            super(spec, 'facet', parent, parentGivenName, config, repeater, spec.resolve);
            this.child = buildModel(spec.spec, this, this.getName('child'), undefined, repeater, config, false);
            this.children = [this.child];
            const facet = replaceRepeaterInFacet(spec.facet, repeater);
            this.facet = this.initFacet(facet);
        }
        initFacet(facet) {
            // clone to prevent side effect to the original spec
            if (!isFacetMapping(facet)) {
                return { facet: normalize(facet, 'facet') };
            }
            return reduce(facet, (normalizedFacet, fieldDef, channel) => {
                if (!contains([ROW, COLUMN], channel)) {
                    // Drop unsupported channel
                    warn(message.incompatibleChannel(channel, 'facet'));
                    return normalizedFacet;
                }
                if (fieldDef.field === undefined) {
                    warn(message.emptyFieldDef(fieldDef, channel));
                    return normalizedFacet;
                }
                // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.
                normalizedFacet[channel] = normalize(fieldDef, channel);
                return normalizedFacet;
            }, {});
        }
        channelHasField(channel) {
            return !!this.facet[channel];
        }
        fieldDef(channel) {
            return this.facet[channel];
        }
        parseData() {
            this.component.data = parseData(this);
            this.child.parseData();
        }
        parseLayoutSize() {
            parseChildrenLayoutSize(this);
        }
        parseSelections() {
            // As a facet has a single child, the selection components are the same.
            // The child maintains its selections to assemble signals, which remain
            // within its unit.
            this.child.parseSelections();
            this.component.selection = this.child.component.selection;
        }
        parseMarkGroup() {
            this.child.parseMarkGroup();
        }
        parseAxesAndHeaders() {
            this.child.parseAxesAndHeaders();
            parseFacetHeaders(this);
        }
        assembleSelectionTopLevelSignals(signals) {
            return this.child.assembleSelectionTopLevelSignals(signals);
        }
        assembleSignals() {
            this.child.assembleSignals();
            return [];
        }
        assembleSelectionData(data) {
            return this.child.assembleSelectionData(data);
        }
        getHeaderLayoutMixins() {
            const layoutMixins = {};
            ['row', 'column'].forEach((channel) => {
                ['header', 'footer'].forEach((headerType) => {
                    const layoutHeaderComponent = this.component.layoutHeaders[channel];
                    const headerComponent = layoutHeaderComponent[headerType];
                    if (headerComponent && headerComponent[0]) {
                        // set header/footerBand
                        const sizeType = channel === 'row' ? 'height' : 'width';
                        const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';
                        if (!this.child.component.layoutSize.get(sizeType)) {
                            // If facet child does not have size signal, then apply headerBand
                            layoutMixins[bandType] = layoutMixins[bandType] || {};
                            layoutMixins[bandType][channel] = 0.5;
                        }
                        if (layoutHeaderComponent.title) {
                            layoutMixins.offset = layoutMixins.offset || {};
                            layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;
                        }
                    }
                });
            });
            return layoutMixins;
        }
        assembleDefaultLayout() {
            const { column, row } = this.facet;
            const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;
            let align = 'all';
            // Do not align the cells if the scale corresponding to the direction is indepent.
            // We always align when we facet into both row and column.
            if (!row && this.component.resolve.scale.x === 'independent') {
                align = 'none';
            }
            else if (!column && this.component.resolve.scale.y === 'independent') {
                align = 'none';
            }
            return Object.assign({}, this.getHeaderLayoutMixins(), (columns ? { columns } : {}), { bounds: 'full', align });
        }
        assembleLayoutSignals() {
            // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.
            return this.child.assembleLayoutSignals();
        }
        columnDistinctSignal() {
            if (this.parent && this.parent instanceof FacetModel) {
                // For nested facet, we will add columns to group mark instead
                // See discussion in https://github.com/vega/vega/issues/952
                // and https://github.com/vega/vega-view/releases/tag/v1.2.6
                return undefined;
            }
            else {
                // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.
                const facetLayoutDataName = this.getName('column_domain');
                return { signal: `length(data('${facetLayoutDataName}'))` };
            }
        }
        assembleGroup(signals) {
            if (this.parent && this.parent instanceof FacetModel) {
                // Provide number of columns for layout.
                // See discussion in https://github.com/vega/vega/issues/952
                // and https://github.com/vega/vega-view/releases/tag/v1.2.6
                return Object.assign({}, (this.channelHasField('column')
                    ? {
                        encode: {
                            update: {
                                // TODO(https://github.com/vega/vega-lite/issues/2759):
                                // Correct the signal for facet of concat of facet_column
                                columns: { field: vgField(this.facet.column, { prefix: 'distinct' }) }
                            }
                        }
                    }
                    : {}), super.assembleGroup(signals));
            }
            return super.assembleGroup(signals);
        }
        /**
         * Aggregate cardinality for calculating size
         */
        getCardinalityAggregateForChild() {
            const fields = [];
            const ops = [];
            const as = [];
            if (this.child instanceof FacetModel) {
                if (this.child.channelHasField('column')) {
                    const field = vgField(this.child.facet.column);
                    fields.push(field);
                    ops.push('distinct');
                    as.push(`distinct_${field}`);
                }
            }
            else {
                for (const channel of ['x', 'y']) {
                    const childScaleComponent = this.child.component.scales[channel];
                    if (childScaleComponent && !childScaleComponent.merged) {
                        const type = childScaleComponent.get('type');
                        const range = childScaleComponent.get('range');
                        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {
                            const domain = assembleDomain(this.child, channel);
                            const field = getFieldFromDomain(domain);
                            if (field) {
                                fields.push(field);
                                ops.push('distinct');
                                as.push(`distinct_${field}`);
                            }
                            else {
                                warn('Unknown field for ${channel}.  Cannot calculate view size.');
                            }
                        }
                    }
                }
            }
            return { fields, ops, as };
        }
        assembleFacet() {
            const { name, data } = this.component.data.facetRoot;
            const { row, column } = this.facet;
            const { fields, ops, as } = this.getCardinalityAggregateForChild();
            const groupby = [];
            for (const channel of FACET_CHANNELS) {
                const fieldDef = this.facet[channel];
                if (fieldDef) {
                    groupby.push(vgField(fieldDef));
                    const { sort } = fieldDef;
                    if (isSortField(sort)) {
                        const { field, op = DEFAULT_SORT_OP } = sort;
                        const outputName = facetSortFieldName(fieldDef, sort);
                        if (row && column) {
                            // For crossed facet, use pre-calculate field as it requires a different groupby
                            // For each calculated field, apply max and assign them to the same name as
                            // all values of the same group should be the same anyway.
                            fields.push(outputName);
                            ops.push('max');
                            as.push(outputName);
                        }
                        else {
                            fields.push(field);
                            ops.push(op);
                            as.push(outputName);
                        }
                    }
                    else if (isArray(sort)) {
                        const outputName = sortArrayIndexField(fieldDef, channel);
                        fields.push(outputName);
                        ops.push('max');
                        as.push(outputName);
                    }
                }
            }
            const cross = !!row && !!column;
            return Object.assign({ name,
                data,
                groupby }, (cross || fields.length
                ? {
                    aggregate: Object.assign({}, (cross ? { cross } : {}), (fields.length ? { fields, ops, as } : {}))
                }
                : {}));
        }
        facetSortFields(channel) {
            const { facet } = this;
            const fieldDef = facet[channel];
            if (fieldDef) {
                if (isSortField(fieldDef.sort)) {
                    return [facetSortFieldName(fieldDef, fieldDef.sort, { expr: 'datum' })];
                }
                else if (isArray(fieldDef.sort)) {
                    return [sortArrayIndexField(fieldDef, channel, { expr: 'datum' })];
                }
                return [vgField(fieldDef, { expr: 'datum' })];
            }
            return [];
        }
        facetSortOrder(channel) {
            const { facet } = this;
            const fieldDef = facet[channel];
            if (fieldDef) {
                const { sort } = fieldDef;
                const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';
                return [order];
            }
            return [];
        }
        assembleMarks() {
            const { child, facet, config } = this;
            // If we facet by two dimensions, we need to add a cross operator to the aggregation
            // so that we create all groups
            const facetRoot = this.component.data.facetRoot;
            const data = assembleFacetData(facetRoot);
            const encodeEntry = child.assembleGroupEncodeEntry(false);
            const title = (facet.facet && assembleLabelTitle(facet.facet, 'facet', config)) || child.assembleTitle();
            const style = child.assembleGroupStyle();
            const markGroup = Object.assign({ name: this.getName('cell'), type: 'group' }, (title ? { title } : {}), (style ? { style } : {}), { from: {
                    facet: this.assembleFacet()
                }, 
                // TODO: move this to after data
                sort: {
                    field: flatten(FACET_CHANNELS.map(c => this.facetSortFields(c))),
                    order: flatten(FACET_CHANNELS.map(c => this.facetSortOrder(c)))
                } }, (data.length > 0 ? { data: data } : {}), (encodeEntry ? { encode: { update: encodeEntry } } : {}), child.assembleGroup(assembleFacetSignals(this, [])));
            return [markGroup];
        }
        getMapping() {
            return this.facet;
        }
    }

    function makeJoinAggregateFromFacet(parent, facet) {
        const { row, column } = facet;
        if (row && column) {
            let newParent = null;
            // only need to make one for crossed facet
            for (const fieldDef of [row, column]) {
                if (isSortField(fieldDef.sort)) {
                    const { field, op = DEFAULT_SORT_OP } = fieldDef.sort;
                    parent = newParent = new JoinAggregateTransformNode(parent, {
                        joinaggregate: [
                            {
                                op,
                                field,
                                as: facetSortFieldName(fieldDef, fieldDef.sort, { forAs: true })
                            }
                        ],
                        groupby: [vgField(fieldDef)]
                    });
                }
            }
            return newParent;
        }
        return null;
    }

    function findSource(data, sources) {
        for (const other of sources) {
            const otherData = other.data;
            if (isInlineData(data) && isInlineData(otherData)) {
                const srcVals = data.values;
                const otherVals = otherData.values;
                if (deepEqual(srcVals, otherVals)) {
                    return other;
                }
            }
            else if (isUrlData(data) && isUrlData(otherData)) {
                if (data.url === otherData.url) {
                    return other;
                }
            }
            else if (isNamedData(data)) {
                if (data.name === other.dataName) {
                    return other;
                }
            }
        }
        return null;
    }
    function parseRoot(model, sources) {
        if (model.data || !model.parent) {
            // if the model defines a data source or is the root, create a source node
            const existingSource = findSource(model.data, sources);
            if (existingSource) {
                existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);
                return existingSource;
            }
            else {
                const source = new SourceNode(model.data);
                sources.push(source);
                return source;
            }
        }
        else {
            // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.
            return model.parent.component.data.facetRoot
                ? model.parent.component.data.facetRoot
                : model.parent.component.data.main;
        }
    }
    /**
     * Parses a transforms array into a chain of connected dataflow nodes.
     */
    function parseTransformArray(head, model, ancestorParse) {
        let lookupCounter = 0;
        for (const t of model.transforms) {
            let derivedType = undefined;
            let transformNode;
            if (isCalculate(t)) {
                transformNode = head = new CalculateNode(head, t);
                derivedType = 'derived';
            }
            else if (isFilter(t)) {
                transformNode = head = ParseNode.makeImplicitFromFilterTransform(head, t, ancestorParse) || head;
                head = new FilterNode(head, model, t.filter);
            }
            else if (isBin(t)) {
                transformNode = head = BinNode.makeFromTransform(head, t, model);
                derivedType = 'number';
            }
            else if (isTimeUnit(t)) {
                transformNode = head = TimeUnitNode.makeFromTransform(head, t);
                derivedType = 'date';
                // Create parse node because the input to time unit is always date.
                const parsedAs = ancestorParse.getWithExplicit(t.field);
                if (parsedAs.value === undefined) {
                    head = new ParseNode(head, { [t.field]: derivedType });
                    ancestorParse.set(t.field, derivedType, false);
                }
            }
            else if (isAggregate$1(t)) {
                transformNode = head = AggregateNode.makeFromTransform(head, t);
                derivedType = 'number';
                if (requiresSelectionId(model)) {
                    head = new IdentifierNode(head);
                }
            }
            else if (isLookup(t)) {
                transformNode = head = LookupNode.make(head, model, t, lookupCounter++);
                derivedType = 'derived';
            }
            else if (isWindow(t)) {
                transformNode = head = new WindowTransformNode(head, t);
                derivedType = 'number';
            }
            else if (isJoinAggregate(t)) {
                transformNode = head = new JoinAggregateTransformNode(head, t);
                derivedType = 'number';
            }
            else if (isStack(t)) {
                transformNode = head = StackNode.makeFromTransform(head, t);
                derivedType = 'derived';
            }
            else if (isFold(t)) {
                transformNode = head = new FoldTransformNode(head, t);
                derivedType = 'derived';
            }
            else if (isFlatten(t)) {
                transformNode = head = new FlattenTransformNode(head, t);
                derivedType = 'derived';
            }
            else if (isSample(t)) {
                head = new SampleTransformNode(head, t);
            }
            else if (isImpute(t)) {
                transformNode = head = ImputeNode.makeFromTransform(head, t);
                derivedType = 'derived';
            }
            else {
                warn(message.invalidTransformIgnored(t));
                continue;
            }
            if (transformNode && derivedType !== undefined) {
                for (const field of transformNode.producedFields()) {
                    ancestorParse.set(field, derivedType, false);
                }
            }
        }
        return head;
    }
    /*
    Description of the dataflow (http://asciiflow.com/):
         +--------+
         | Source |
         +---+----+
             |
             v
         FormatParse
         (explicit)
             |
             v
         Transforms
    (Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)
             |
             v
         FormatParse
         (implicit)
             |
             v
     Binning (in `encoding`)
             |
             v
     Timeunit (in `encoding`)
             |
             v
    Formula From Sort Array
             |
             v
          +--+--+
          | Raw |
          +-----+
             |
             v
      Aggregate (in `encoding`)
             |
             v
      Stack (in `encoding`)
             |
             v
      Invalid Filter
             |
             v
       +----------+
       |   Main   |
       +----------+
             |
             v
         +-------+
         | Facet |----> "column", "column-layout", and "row"
         +-------+
             |
             v
      ...Child data...
    */
    function parseData(model) {
        let head = parseRoot(model, model.component.data.sources);
        const { outputNodes, outputNodeRefCounts } = model.component.data;
        const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();
        // format.parse: null means disable parsing
        if (model.data && model.data.format && model.data.format.parse === null) {
            ancestorParse.parseNothing = true;
        }
        head = ParseNode.makeExplicit(head, model, ancestorParse) || head;
        // Default discrete selections require an identifier transform to
        // uniquely identify data points as the _id field is volatile. Add
        // this transform at the head of our pipeline such that the identifier
        // field is available for all subsequent datasets. Additional identifier
        // transforms will be necessary when new tuples are constructed
        // (e.g., post-aggregation).
        if (requiresSelectionId(model) && (isUnitModel(model) || isLayerModel(model))) {
            head = new IdentifierNode(head);
        }
        // HACK: This is equivalent for merging bin extent for union scale.
        // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale
        const parentIsLayer = model.parent && isLayerModel(model.parent);
        if (isUnitModel(model) || isFacetModel(model)) {
            if (parentIsLayer) {
                head = BinNode.makeFromEncoding(head, model) || head;
            }
        }
        if (model.transforms.length > 0) {
            head = parseTransformArray(head, model, ancestorParse);
        }
        head = ParseNode.makeImplicitFromEncoding(head, model, ancestorParse) || head;
        if (isUnitModel(model)) {
            head = GeoJSONNode.parseAll(head, model);
            head = GeoPointNode.parseAll(head, model);
        }
        if (isUnitModel(model) || isFacetModel(model)) {
            if (!parentIsLayer) {
                head = BinNode.makeFromEncoding(head, model) || head;
            }
            head = TimeUnitNode.makeFromEncoding(head, model) || head;
            head = CalculateNode.parseAllForSortIndex(head, model);
        }
        // add an output node pre aggregation
        const rawName = model.getName(RAW);
        const raw = new OutputNode(head, rawName, RAW, outputNodeRefCounts);
        outputNodes[rawName] = raw;
        head = raw;
        if (isUnitModel(model)) {
            const agg = AggregateNode.makeFromEncoding(head, model);
            if (agg) {
                head = agg;
                if (requiresSelectionId(model)) {
                    head = new IdentifierNode(head);
                }
            }
            head = ImputeNode.makeFromEncoding(head, model) || head;
            head = StackNode.makeFromEncoding(head, model) || head;
        }
        // output node for marks
        const mainName = model.getName(MAIN);
        const main = new OutputNode(head, mainName, MAIN, outputNodeRefCounts);
        outputNodes[mainName] = main;
        head = main;
        // add facet marker
        let facetRoot = null;
        if (isFacetModel(model)) {
            const facetName = model.getName('facet');
            // Derive new sort index field for facet's sort array
            head = CalculateNode.parseAllForSortIndex(head, model);
            // Derive new aggregate for facet's sort field
            // augment data source with new fields for crossed facet
            head = makeJoinAggregateFromFacet(head, model.facet) || head;
            facetRoot = new FacetNode(head, model, facetName, main.getSource());
            outputNodes[facetName] = facetRoot;
            head = facetRoot;
        }
        return Object.assign({}, model.component.data, { outputNodes,
            outputNodeRefCounts,
            raw,
            main,
            facetRoot,
            ancestorParse });
    }

    class BaseConcatModel extends Model {
        constructor(spec, specType, parent, parentGivenName, config, repeater, resolve) {
            super(spec, specType, parent, parentGivenName, config, repeater, resolve);
        }
        parseData() {
            this.component.data = parseData(this);
            this.children.forEach(child => {
                child.parseData();
            });
        }
        parseSelections() {
            // Merge selections up the hierarchy so that they may be referenced
            // across unit specs. Persist their definitions within each child
            // to assemble signals which remain within output Vega unit groups.
            this.component.selection = {};
            for (const child of this.children) {
                child.parseSelections();
                keys(child.component.selection).forEach(key => {
                    this.component.selection[key] = child.component.selection[key];
                });
            }
        }
        parseMarkGroup() {
            for (const child of this.children) {
                child.parseMarkGroup();
            }
        }
        parseAxesAndHeaders() {
            for (const child of this.children) {
                child.parseAxesAndHeaders();
            }
            // TODO(#2415): support shared axes
        }
        assembleSelectionTopLevelSignals(signals) {
            return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
        }
        assembleSignals() {
            this.children.forEach(child => child.assembleSignals());
            return [];
        }
        assembleLayoutSignals() {
            return this.children.reduce((signals, child) => {
                return [...signals, ...child.assembleLayoutSignals()];
            }, assembleLayoutSignals(this));
        }
        assembleSelectionData(data) {
            return this.children.reduce((db, child) => child.assembleSelectionData(db), data);
        }
        assembleMarks() {
            // only children have marks
            return this.children.map(child => {
                const title = child.assembleTitle();
                const style = child.assembleGroupStyle();
                const encodeEntry = child.assembleGroupEncodeEntry(false);
                return Object.assign({ type: 'group', name: child.getName('group') }, (title ? { title } : {}), (style ? { style } : {}), (encodeEntry ? { encode: { update: encodeEntry } } : {}), child.assembleGroup());
            });
        }
    }

    class ConcatModel extends BaseConcatModel {
        constructor(spec, parent, parentGivenName, repeater, config) {
            super(spec, 'concat', parent, parentGivenName, config, repeater, spec.resolve);
            if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {
                warn(message.CONCAT_CANNOT_SHARE_AXIS);
            }
            this.concatType = isVConcatSpec(spec) ? 'vconcat' : isHConcatSpec(spec) ? 'hconcat' : 'concat';
            this.children = this.getChildren(spec).map((child, i) => {
                return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config, false);
            });
        }
        getChildren(spec) {
            if (isVConcatSpec(spec)) {
                return spec.vconcat;
            }
            else if (isHConcatSpec(spec)) {
                return spec.hconcat;
            }
            return spec.concat;
        }
        parseLayoutSize() {
            parseConcatLayoutSize(this);
        }
        parseAxisGroup() {
            return null;
        }
        assembleDefaultLayout() {
            return Object.assign({}, (this.concatType === 'vconcat' ? { columns: 1 } : {}), { bounds: 'full', 
                // Use align each so it can work with multiple plots with different size
                align: 'each' });
        }
    }

    function isFalseOrNull(v) {
        return v === false || v === null;
    }
    class AxisComponent extends Split {
        constructor(explicit = {}, implicit = {}, mainExtracted = false) {
            super();
            this.explicit = explicit;
            this.implicit = implicit;
            this.mainExtracted = mainExtracted;
        }
        clone() {
            return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);
        }
        hasAxisPart(part) {
            // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.
            if (part === 'axis') {
                // always has the axis container part
                return true;
            }
            if (part === 'grid' || part === 'title') {
                return !!this.get(part);
            }
            // Other parts are enabled by default, so they should not be false or null.
            return !isFalseOrNull(this.get(part));
        }
    }

    function getAxisConfig(property, config, channel, orient = '', scaleType) {
        // configTypes to loop, starting from higher precedence
        const configTypes = (scaleType === 'band' ? ['axisBand'] : []).concat([
            channel === 'x' ? 'axisX' : 'axisY',
            'axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1),
            'axis'
        ]);
        for (const configType of configTypes) {
            if (config[configType] && config[configType][property] !== undefined) {
                return config[configType][property];
            }
        }
        return undefined;
    }

    function labels$1(model, channel, specifiedLabelsSpec, orient) {
        const fieldDef = model.fieldDef(channel) ||
            (channel === 'x' ? model.fieldDef('x2') : channel === 'y' ? model.fieldDef('y2') : undefined);
        const axis = model.axis(channel);
        const config = model.config;
        let labelsSpec = {};
        // Text
        if (isTimeFieldDef(fieldDef)) {
            const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;
            const expr = timeFormatExpression('datum.value', fieldDef.timeUnit, axis.format, config.axis.shortTimeLabels, null, isUTCScale);
            if (expr) {
                labelsSpec.text = { signal: expr };
            }
        }
        labelsSpec = Object.assign({}, labelsSpec, specifiedLabelsSpec);
        return keys(labelsSpec).length === 0 ? undefined : labelsSpec;
    }

    // TODO: we need to refactor this method after we take care of config refactoring
    /**
     * Default rules for whether to show a grid should be shown for a channel.
     * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned
     */
    function defaultGrid(scaleType, fieldDef) {
        return !hasDiscreteDomain(scaleType) && !isBinning(fieldDef.bin);
    }
    function gridScale(model, channel) {
        const gridChannel = channel === 'x' ? 'y' : 'x';
        if (model.getScaleComponent(gridChannel)) {
            return model.scaleName(gridChannel);
        }
        return undefined;
    }
    function labelAngle(model, specifiedAxis, channel, fieldDef) {
        // try axis value
        if (specifiedAxis.labelAngle !== undefined) {
            // Make angle within [0,360)
            return ((specifiedAxis.labelAngle % 360) + 360) % 360;
        }
        else {
            // try axis config value
            const angle = getAxisConfig('labelAngle', model.config, channel, orient(channel), model.getScaleComponent(channel).get('type'));
            if (angle !== undefined) {
                return ((angle % 360) + 360) % 360;
            }
            else {
                // get default value
                if (channel === X && contains([NOMINAL, ORDINAL], fieldDef.type)) {
                    return 270;
                }
                // no default
                return undefined;
            }
        }
    }
    function defaultLabelBaseline(angle, axisOrient) {
        if (angle !== undefined) {
            if (axisOrient === 'top' || axisOrient === 'bottom') {
                if (angle <= 45 || 315 <= angle) {
                    return axisOrient === 'top' ? 'bottom' : 'top';
                }
                else if (135 <= angle && angle <= 225) {
                    return axisOrient === 'top' ? 'top' : 'bottom';
                }
                else {
                    return 'middle';
                }
            }
            else {
                if (angle <= 45 || 315 <= angle || (135 <= angle && angle <= 225)) {
                    return 'middle';
                }
                else if (45 <= angle && angle <= 135) {
                    return axisOrient === 'left' ? 'top' : 'bottom';
                }
                else {
                    return axisOrient === 'left' ? 'bottom' : 'top';
                }
            }
        }
        return undefined;
    }
    function defaultLabelAlign(angle, axisOrient) {
        if (angle !== undefined) {
            angle = ((angle % 360) + 360) % 360;
            if (axisOrient === 'top' || axisOrient === 'bottom') {
                if (angle % 180 === 0) {
                    return 'center';
                }
                else if (0 < angle && angle < 180) {
                    return axisOrient === 'top' ? 'right' : 'left';
                }
                else {
                    return axisOrient === 'top' ? 'left' : 'right';
                }
            }
            else {
                if ((angle + 90) % 180 === 0) {
                    return 'center';
                }
                else if (90 <= angle && angle < 270) {
                    return axisOrient === 'left' ? 'left' : 'right';
                }
                else {
                    return axisOrient === 'left' ? 'right' : 'left';
                }
            }
        }
        return undefined;
    }
    function defaultLabelFlush(fieldDef, channel) {
        if (channel === 'x' && contains(['quantitative', 'temporal'], fieldDef.type)) {
            return true;
        }
        return undefined;
    }
    function defaultLabelOverlap$1(fieldDef, scaleType) {
        // do not prevent overlap for nominal data because there is no way to infer what the missing labels are
        if (fieldDef.type !== 'nominal') {
            if (scaleType === 'log') {
                return 'greedy';
            }
            return true;
        }
        return undefined;
    }
    function orient(channel) {
        switch (channel) {
            case X:
                return 'bottom';
            case Y:
                return 'left';
        }
        /* istanbul ignore next: This should never happen. */
        throw new Error(message.INVALID_CHANNEL_FOR_AXIS);
    }
    function defaultTickCount({ fieldDef, scaleType, size, scaleName, specifiedAxis = {} }) {
        if (!hasDiscreteDomain(scaleType) &&
            scaleType !== 'log' &&
            !contains(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)) {
            if (isBinning(fieldDef.bin)) {
                // for binned data, we don't want more ticks than maxbins
                return { signal: `ceil(${size.signal}/10)` };
            }
            return { signal: `ceil(${size.signal}/40)` };
        }
        return undefined;
    }
    function values$3(specifiedAxis, model, fieldDef, channel) {
        const vals = specifiedAxis.values;
        if (vals) {
            return valueArray(fieldDef, vals);
        }
        return undefined;
    }

    function parseUnitAxes(model) {
        return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {
            if (model.component.scales[channel] && model.axis(channel)) {
                axis[channel] = [parseAxis(channel, model)];
            }
            return axis;
        }, {});
    }
    const OPPOSITE_ORIENT = {
        bottom: 'top',
        top: 'bottom',
        left: 'right',
        right: 'left'
    };
    function parseLayerAxes(model) {
        const { axes, resolve } = model.component;
        const axisCount = { top: 0, bottom: 0, right: 0, left: 0 };
        for (const child of model.children) {
            child.parseAxesAndHeaders();
            for (const channel of keys(child.component.axes)) {
                resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);
                if (resolve.axis[channel] === 'shared') {
                    // If the resolve says shared (and has not been overridden)
                    // We will try to merge and see if there is a conflict
                    axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);
                    if (!axes[channel]) {
                        // If merge returns nothing, there is a conflict so we cannot make the axis shared.
                        // Thus, mark axis as independent and remove the axis component.
                        resolve.axis[channel] = 'independent';
                        delete axes[channel];
                    }
                }
            }
        }
        // Move axes to layer's axis component and merge shared axes
        for (const channel of [X, Y]) {
            for (const child of model.children) {
                if (!child.component.axes[channel]) {
                    // skip if the child does not have a particular axis
                    continue;
                }
                if (resolve.axis[channel] === 'independent') {
                    // If axes are independent, concat the axisComponent array.
                    axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]);
                    // Automatically adjust orient
                    for (const axisComponent of child.component.axes[channel]) {
                        const { value: orient, explicit } = axisComponent.getWithExplicit('orient');
                        if (axisCount[orient] > 0 && !explicit) {
                            // Change axis orient if the number do not match
                            const oppositeOrient = OPPOSITE_ORIENT[orient];
                            if (axisCount[orient] > axisCount[oppositeOrient]) {
                                axisComponent.set('orient', oppositeOrient, false);
                            }
                        }
                        axisCount[orient]++;
                        // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?
                    }
                }
                // After merging, make sure to remove axes from child
                delete child.component.axes[channel];
            }
        }
    }
    function mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {
        if (mergedAxisCmpts) {
            // FIXME: this is a bit wrong once we support multiple axes
            if (mergedAxisCmpts.length !== childAxisCmpts.length) {
                return undefined; // Cannot merge axis component with different number of axes.
            }
            const length = mergedAxisCmpts.length;
            for (let i = 0; i < length; i++) {
                const merged = mergedAxisCmpts[i];
                const child = childAxisCmpts[i];
                if (!!merged !== !!child) {
                    return undefined;
                }
                else if (merged && child) {
                    const mergedOrient = merged.getWithExplicit('orient');
                    const childOrient = child.getWithExplicit('orient');
                    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {
                        // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)
                        // Cannot merge due to inconsistent orient
                        return undefined;
                    }
                    else {
                        mergedAxisCmpts[i] = mergeAxisComponent(merged, child);
                    }
                }
            }
        }
        else {
            // For first one, return a copy of the child
            return childAxisCmpts.map(axisComponent => axisComponent.clone());
        }
        return mergedAxisCmpts;
    }
    function mergeAxisComponent(merged, child) {
        for (const prop of VG_AXIS_PROPERTIES) {
            const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', 
            // Tie breaker function
            (v1, v2) => {
                switch (prop) {
                    case 'title':
                        return mergeTitleComponent(v1, v2);
                    case 'gridScale':
                        return {
                            explicit: v1.explicit,
                            value: getFirstDefined(v1.value, v2.value)
                        };
                }
                return defaultTieBreaker(v1, v2, prop, 'axis');
            });
            merged.setWithExplicit(prop, mergedValueWithExplicit);
        }
        return merged;
    }
    function getFieldDefTitle(model, channel) {
        const channel2 = channel === 'x' ? 'x2' : 'y2';
        const fieldDef = model.fieldDef(channel);
        const fieldDef2 = model.fieldDef(channel2);
        const title1 = fieldDef ? fieldDef.title : undefined;
        const title2 = fieldDef2 ? fieldDef2.title : undefined;
        if (title1 && title2) {
            return mergeTitle(title1, title2);
        }
        else if (title1) {
            return title1;
        }
        else if (title2) {
            return title2;
        }
        else if (title1 !== undefined) {
            // falsy value to disable config
            return title1;
        }
        else if (title2 !== undefined) {
            // falsy value to disable config
            return title2;
        }
        return undefined;
    }
    function isExplicit$1(value, property, axis, model, channel) {
        switch (property) {
            case 'values':
                return !!axis.values;
            // specified axis.values is already respected, but may get transformed.
            case 'encode':
                // both VL axis.encoding and axis.labelAngle affect VG axis.encode
                return !!axis.encoding || !!axis.labelAngle;
            case 'title':
                // title can be explicit if fieldDef.title is set
                if (value === getFieldDefTitle(model, channel)) {
                    return true;
                }
        }
        // Otherwise, things are explicit if the returned value matches the specified property
        return value === axis[property];
    }
    function parseAxis(channel, model) {
        const axis = model.axis(channel);
        const axisComponent = new AxisComponent();
        // 1.2. Add properties
        VG_AXIS_PROPERTIES.forEach(property => {
            const value = getProperty$1(property, axis, channel, model);
            if (value !== undefined) {
                const explicit = isExplicit$1(value, property, axis, model, channel);
                const configValue = getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type'));
                // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)
                if (explicit || configValue === undefined) {
                    // Do not apply implicit rule if there is a config value
                    axisComponent.set(property, value, explicit);
                }
                else if (property === 'grid' && configValue) {
                    // Grid is an exception because we need to set grid = true to generate another grid axis
                    axisComponent.set(property, configValue, false);
                }
            }
        });
        // 2) Add guide encode definition groups
        const axisEncoding = axis.encoding || {};
        const axisEncode = AXIS_PARTS.reduce((e, part) => {
            if (!axisComponent.hasAxisPart(part)) {
                // No need to create encode for a disabled part.
                return e;
            }
            const axisEncodingPart = guideEncodeEntry(axisEncoding[part] || {}, model);
            const value = part === 'labels'
                ? labels$1(model, channel, axisEncodingPart, axisComponent.get('orient'))
                : axisEncodingPart;
            if (value !== undefined && keys(value).length > 0) {
                e[part] = { update: value };
            }
            return e;
        }, {});
        // FIXME: By having encode as one property, we won't have fine grained encode merging.
        if (keys(axisEncode).length > 0) {
            axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);
        }
        return axisComponent;
    }
    function getProperty$1(property, specifiedAxis, channel, model) {
        const fieldDef = model.fieldDef(channel);
        // Some properties depend on labelAngle so we have to declare it here.
        // Also, we don't use `getFirstDefined` for labelAngle
        // as we want to normalize specified value to be within [0,360)
        const labelAngle$1 = labelAngle(model, specifiedAxis, channel, fieldDef);
        const orient$1 = getFirstDefined(specifiedAxis.orient, orient(channel));
        switch (property) {
            case 'scale':
                return model.scaleName(channel);
            case 'gridScale':
                return gridScale(model, channel);
            case 'format':
                // We don't include temporal field here as we apply format in encode block
                return numberFormat(fieldDef, specifiedAxis.format, model.config);
            case 'grid': {
                if (isBinned(model.fieldDef(channel).bin)) {
                    return false;
                }
                else {
                    const scaleType = model.getScaleComponent(channel).get('type');
                    return getFirstDefined(specifiedAxis.grid, defaultGrid(scaleType, fieldDef));
                }
            }
            case 'labelAlign':
                return getFirstDefined(specifiedAxis.labelAlign, defaultLabelAlign(labelAngle$1, orient$1));
            case 'labelAngle':
                return labelAngle$1;
            case 'labelBaseline':
                return getFirstDefined(specifiedAxis.labelBaseline, defaultLabelBaseline(labelAngle$1, orient$1));
            case 'labelFlush':
                return getFirstDefined(specifiedAxis.labelFlush, defaultLabelFlush(fieldDef, channel));
            case 'labelOverlap': {
                const scaleType = model.getScaleComponent(channel).get('type');
                return getFirstDefined(specifiedAxis.labelOverlap, defaultLabelOverlap$1(fieldDef, scaleType));
            }
            case 'orient':
                return orient$1;
            case 'tickCount': {
                const scaleType = model.getScaleComponent(channel).get('type');
                const scaleName = model.scaleName(channel);
                const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;
                const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;
                return getFirstDefined(specifiedAxis.tickCount, defaultTickCount({ fieldDef, scaleType, size, scaleName, specifiedAxis }));
            }
            case 'title':
                const channel2 = channel === 'x' ? 'x2' : 'y2';
                const fieldDef2 = model.fieldDef(channel2);
                // Keep undefined so we use default if title is unspecified.
                // For other falsy value, keep them so we will hide the title.
                return getFirstDefined(specifiedAxis.title, getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)
                mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : []));
            case 'values':
                return values$3(specifiedAxis, model, fieldDef, channel);
        }
        // Otherwise, return specified property.
        return isAxisProperty(property) ? specifiedAxis[property] : undefined;
    }

    function normalizeMarkDef(mark, encoding, config) {
        const markDef = isMarkDef(mark) ? Object.assign({}, mark) : { type: mark };
        // set orient, which can be overridden by rules as sometimes the specified orient is invalid.
        const specifiedOrient = markDef.orient || getMarkConfig('orient', markDef, config);
        markDef.orient = orient$1(markDef.type, encoding, specifiedOrient);
        if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {
            warn(message.orientOverridden(markDef.orient, specifiedOrient));
        }
        // set opacity and filled if not specified in mark config
        const specifiedOpacity = getFirstDefined(markDef.opacity, getMarkConfig('opacity', markDef, config));
        if (specifiedOpacity === undefined) {
            markDef.opacity = opacity(markDef.type, encoding);
        }
        const specifiedFilled = markDef.filled;
        if (specifiedFilled === undefined) {
            markDef.filled = filled(markDef, config);
        }
        // set cursor, which should be pointer if href channel is present unless otherwise specified
        const specifiedCursor = markDef.cursor || getMarkConfig('cursor', markDef, config);
        if (specifiedCursor === undefined) {
            markDef.cursor = cursor$1(markDef, encoding, config);
        }
        return markDef;
    }
    function cursor$1(markDef, encoding, config) {
        if (encoding.href || markDef.href || getMarkConfig('href', markDef, config)) {
            return 'pointer';
        }
        return markDef.cursor;
    }
    function opacity(mark, encoding) {
        if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {
            // point-based marks
            if (!isAggregate(encoding)) {
                return 0.7;
            }
        }
        return undefined;
    }
    function filled(markDef, config) {
        const filledConfig = getMarkConfig('filled', markDef, config);
        const mark = markDef.type;
        return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);
    }
    function orient$1(mark, encoding, specifiedOrient) {
        switch (mark) {
            case POINT:
            case CIRCLE:
            case SQUARE:
            case TEXT:
            case RECT:
                // orient is meaningless for these marks.
                return undefined;
        }
        const { x, y, x2, y2 } = encoding;
        switch (mark) {
            case BAR:
                if (isFieldDef(x) && isBinned(x.bin)) {
                    return 'vertical';
                }
                if (isFieldDef(y) && isBinned(y.bin)) {
                    return 'horizontal';
                }
                if (y2 || x2) {
                    // Ranged bar does not always have clear orientation, so we allow overriding
                    if (specifiedOrient) {
                        return specifiedOrient;
                    }
                    // If y is range and x is non-range, non-bin Q, y is likely a prebinned field
                    if (!x2 && isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin)) {
                        return 'horizontal';
                    }
                    // If x is range and y is non-range, non-bin Q, x is likely a prebinned field
                    if (!y2 && isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin)) {
                        return 'vertical';
                    }
                }
            /* tslint:disable */
            case RULE: // intentionally fall through
                // return undefined for line segment rule and bar with both axis ranged
                if (x2 && y2) {
                    return undefined;
                }
            case AREA: // intentionally fall through
                // If there are range for both x and y, y (vertical) has higher precedence.
                if (y2) {
                    if (isFieldDef(y) && isBinned(y.bin)) {
                        return 'horizontal';
                    }
                    else {
                        return 'vertical';
                    }
                }
                else if (x2) {
                    if (isFieldDef(x) && isBinned(x.bin)) {
                        return 'vertical';
                    }
                    else {
                        return 'horizontal';
                    }
                }
                else if (mark === RULE) {
                    if (encoding.x && !encoding.y) {
                        return 'vertical';
                    }
                    else if (encoding.y && !encoding.x) {
                        return 'horizontal';
                    }
                }
            case LINE: // intentional fall through
            case TICK: // Tick is opposite to bar, line, area and never have ranged mark.
                /* tslint:enable */
                const xIsContinuous = isFieldDef(encoding.x) && isContinuous(encoding.x);
                const yIsContinuous = isFieldDef(encoding.y) && isContinuous(encoding.y);
                if (xIsContinuous && !yIsContinuous) {
                    return mark !== 'tick' ? 'horizontal' : 'vertical';
                }
                else if (!xIsContinuous && yIsContinuous) {
                    return mark !== 'tick' ? 'vertical' : 'horizontal';
                }
                else if (xIsContinuous && yIsContinuous) {
                    const xDef = encoding.x; // we can cast here since they are surely fieldDef
                    const yDef = encoding.y;
                    const xIsTemporal = xDef.type === TEMPORAL;
                    const yIsTemporal = yDef.type === TEMPORAL;
                    // temporal without timeUnit is considered continuous, but better serves as dimension
                    if (xIsTemporal && !yIsTemporal) {
                        return mark !== 'tick' ? 'vertical' : 'horizontal';
                    }
                    else if (!xIsTemporal && yIsTemporal) {
                        return mark !== 'tick' ? 'horizontal' : 'vertical';
                    }
                    if (!xDef.aggregate && yDef.aggregate) {
                        return mark !== 'tick' ? 'vertical' : 'horizontal';
                    }
                    else if (xDef.aggregate && !yDef.aggregate) {
                        return mark !== 'tick' ? 'horizontal' : 'vertical';
                    }
                    if (specifiedOrient) {
                        // When ambiguous, use user specified one.
                        return specifiedOrient;
                    }
                    return 'vertical';
                }
                else {
                    // Discrete x Discrete case
                    if (specifiedOrient) {
                        // When ambiguous, use user specified one.
                        return specifiedOrient;
                    }
                    return undefined;
                }
        }
        return 'vertical';
    }

    /**
     * Internal model of Vega-Lite specification for the compiler.
     */
    class UnitModel extends ModelWithField {
        constructor(spec, parent, parentGivenName, parentGivenSize = {}, repeater, config, fit) {
            super(spec, 'unit', parent, parentGivenName, config, repeater, undefined, spec.view);
            this.fit = fit;
            this.specifiedScales = {};
            this.specifiedAxes = {};
            this.specifiedLegends = {};
            this.specifiedProjection = {};
            this.selection = {};
            this.children = [];
            this.initSize(Object.assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {})));
            const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;
            const encoding = (this.encoding = normalizeEncoding(replaceRepeaterInEncoding(spec.encoding || {}, repeater), mark));
            this.markDef = normalizeMarkDef(spec.mark, encoding, config);
            // calculate stack properties
            this.stack = stack(mark, encoding, this.config.stack);
            this.specifiedScales = this.initScales(mark, encoding);
            this.specifiedAxes = this.initAxes(encoding);
            this.specifiedLegends = this.initLegend(encoding);
            this.specifiedProjection = spec.projection;
            // Selections will be initialized upon parse.
            this.selection = spec.selection;
        }
        get hasProjection() {
            const { encoding } = this;
            const isGeoShapeMark = this.mark === GEOSHAPE;
            const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldDef(encoding[channel]));
            return isGeoShapeMark || hasGeoPosition;
        }
        /**
         * Return specified Vega-lite scale domain for a particular channel
         * @param channel
         */
        scaleDomain(channel) {
            const scale = this.specifiedScales[channel];
            return scale ? scale.domain : undefined;
        }
        axis(channel) {
            return this.specifiedAxes[channel];
        }
        legend(channel) {
            return this.specifiedLegends[channel];
        }
        initScales(mark, encoding) {
            return SCALE_CHANNELS.reduce((scales, channel) => {
                let fieldDef;
                let specifiedScale;
                const channelDef = encoding[channel];
                if (isFieldDef(channelDef)) {
                    fieldDef = channelDef;
                    specifiedScale = channelDef.scale;
                }
                else if (hasConditionalFieldDef(channelDef)) {
                    fieldDef = channelDef.condition;
                    specifiedScale = channelDef.condition['scale'];
                }
                if (fieldDef) {
                    scales[channel] = specifiedScale || {};
                }
                return scales;
            }, {});
        }
        initAxes(encoding) {
            return [X, Y].reduce((_axis, channel) => {
                // Position Axis
                // TODO: handle ConditionFieldDef
                const channelDef = encoding[channel];
                if (isFieldDef(channelDef) ||
                    (channel === X && isFieldDef(encoding.x2)) ||
                    (channel === Y && isFieldDef(encoding.y2))) {
                    const axisSpec = isFieldDef(channelDef) ? channelDef.axis : null;
                    if (axisSpec !== null) {
                        _axis[channel] = Object.assign({}, axisSpec);
                    }
                }
                return _axis;
            }, {});
        }
        initLegend(encoding) {
            return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {
                const channelDef = encoding[channel];
                if (channelDef) {
                    const legend = isFieldDef(channelDef)
                        ? channelDef.legend
                        : hasConditionalFieldDef(channelDef)
                            ? channelDef.condition['legend']
                            : null;
                    if (legend !== null && legend !== false && supportLegend(channel)) {
                        _legend[channel] = Object.assign({}, legend);
                    }
                }
                return _legend;
            }, {});
        }
        parseData() {
            this.component.data = parseData(this);
        }
        parseLayoutSize() {
            parseUnitLayoutSize(this);
        }
        parseSelections() {
            this.component.selection = parseUnitSelection(this, this.selection);
        }
        parseMarkGroup() {
            this.component.mark = parseMarkGroups(this);
        }
        parseAxesAndHeaders() {
            this.component.axes = parseUnitAxes(this);
        }
        assembleSelectionTopLevelSignals(signals) {
            return assembleTopLevelSignals(this, signals);
        }
        assembleSignals() {
            return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];
        }
        assembleSelectionData(data) {
            return assembleUnitSelectionData(this, data);
        }
        assembleLayout() {
            return null;
        }
        assembleLayoutSignals() {
            return assembleLayoutSignals(this);
        }
        assembleMarks() {
            let marks = this.component.mark || [];
            // If this unit is part of a layer, selections should augment
            // all in concert rather than each unit individually. This
            // ensures correct interleaving of clipping and brushed marks.
            if (!this.parent || !isLayerModel(this.parent)) {
                marks = assembleUnitSelectionMarks(this, marks);
            }
            return marks.map(this.correctDataNames);
        }
        getMapping() {
            return this.encoding;
        }
        toSpec(excludeConfig, excludeData) {
            const encoding = duplicate(this.encoding);
            let spec;
            spec = {
                mark: this.markDef,
                encoding: encoding
            };
            if (!excludeConfig) {
                spec.config = duplicate(this.config);
            }
            if (!excludeData) {
                spec.data = duplicate(this.data);
            }
            // remove defaults
            return spec;
        }
        get mark() {
            return this.markDef.type;
        }
        channelHasField(channel) {
            return channelHasField(this.encoding, channel);
        }
        fieldDef(channel) {
            const channelDef = this.encoding[channel];
            return getTypedFieldDef(channelDef);
        }
    }

    class LayerModel extends Model {
        constructor(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {
            super(spec, 'layer', parent, parentGivenName, config, repeater, spec.resolve, spec.view);
            const layoutSize = Object.assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {}));
            this.initSize(layoutSize);
            this.children = spec.layer.map((layer, i) => {
                if (isLayerSpec(layer)) {
                    return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);
                }
                if (isUnitSpec(layer)) {
                    return new UnitModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config, fit);
                }
                throw new Error(message.INVALID_SPEC);
            });
        }
        parseData() {
            this.component.data = parseData(this);
            for (const child of this.children) {
                child.parseData();
            }
        }
        parseLayoutSize() {
            parseLayerLayoutSize(this);
        }
        parseSelections() {
            // Merge selections up the hierarchy so that they may be referenced
            // across unit specs. Persist their definitions within each child
            // to assemble signals which remain within output Vega unit groups.
            this.component.selection = {};
            for (const child of this.children) {
                child.parseSelections();
                keys(child.component.selection).forEach(key => {
                    this.component.selection[key] = child.component.selection[key];
                });
            }
        }
        parseMarkGroup() {
            for (const child of this.children) {
                child.parseMarkGroup();
            }
        }
        parseAxesAndHeaders() {
            parseLayerAxes(this);
        }
        assembleSelectionTopLevelSignals(signals) {
            return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);
        }
        // TODO: Support same named selections across children.
        assembleSignals() {
            return this.children.reduce((signals, child) => {
                return signals.concat(child.assembleSignals());
            }, assembleAxisSignals(this));
        }
        assembleLayoutSignals() {
            return this.children.reduce((signals, child) => {
                return signals.concat(child.assembleLayoutSignals());
            }, assembleLayoutSignals(this));
        }
        assembleSelectionData(data) {
            return this.children.reduce((db, child) => child.assembleSelectionData(db), data);
        }
        assembleTitle() {
            let title = super.assembleTitle();
            if (title) {
                return title;
            }
            // If title does not provide layer, look into children
            for (const child of this.children) {
                title = child.assembleTitle();
                if (title) {
                    return title;
                }
            }
            return undefined;
        }
        assembleLayout() {
            return null;
        }
        assembleMarks() {
            return assembleLayerSelectionMarks(this, flatten(this.children.map(child => {
                return child.assembleMarks();
            })));
        }
        assembleLegends() {
            return this.children.reduce((legends, child) => {
                return legends.concat(child.assembleLegends());
            }, assembleLegends(this));
        }
    }

    class RepeatModel extends BaseConcatModel {
        constructor(spec, parent, parentGivenName, repeatValues, config) {
            super(spec, 'repeat', parent, parentGivenName, config, repeatValues, spec.resolve);
            if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {
                warn(message.REPEAT_CANNOT_SHARE_AXIS);
            }
            this.repeat = spec.repeat;
            this.children = this._initChildren(spec, this.repeat, repeatValues, config);
        }
        _initChildren(spec, repeat, repeater, config) {
            const children = [];
            const row = (!isArray(repeat) && repeat.row) || [repeater ? repeater.row : null];
            const column = (!isArray(repeat) && repeat.column) || [repeater ? repeater.column : null];
            const repeatValues = (isArray(repeat) && repeat) || [repeater ? repeater.repeat : null];
            // cross product
            for (const repeatValue of repeatValues) {
                for (const rowValue of row) {
                    for (const columnValue of column) {
                        const name = (repeatValue ? `__repeat_repeat_${repeatValue}` : '') +
                            (rowValue ? `__repeat_row_${rowValue}` : '') +
                            (columnValue ? `__repeat_column_${columnValue}` : '');
                        const childRepeat = {
                            repeat: repeatValue,
                            row: rowValue,
                            column: columnValue
                        };
                        children.push(buildModel(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config, false));
                    }
                }
            }
            return children;
        }
        parseLayoutSize() {
            parseRepeatLayoutSize(this);
        }
        assembleDefaultLayout() {
            const { repeat } = this;
            const columns = isArray(repeat) ? undefined : repeat.column ? repeat.column.length : 1;
            return Object.assign({}, (columns ? { columns } : {}), { bounds: 'full', align: 'all' });
        }
    }

    function buildModel(spec, parent, parentGivenName, unitSize, repeater, config, fit) {
        if (isFacetSpec(spec)) {
            return new FacetModel(spec, parent, parentGivenName, repeater, config);
        }
        if (isLayerSpec(spec)) {
            return new LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);
        }
        if (isUnitSpec(spec)) {
            return new UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);
        }
        if (isRepeatSpec(spec)) {
            return new RepeatModel(spec, parent, parentGivenName, repeater, config);
        }
        if (isAnyConcatSpec(spec)) {
            return new ConcatModel(spec, parent, parentGivenName, repeater, config);
        }
        throw new Error(message.INVALID_SPEC);
    }

    /**
     * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.
     *
     * At a high-level, we make the following transformations in different phases:
     *
     * Input spec
     *     |
     *     |  (Normalization)
     *     v
     * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)
     *     |
     *     |  (Build Model)
     *     v
     * A model tree of the spec
     *     |
     *     |  (Parse)
     *     v
     * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)
     *     |
     *     | (Optimize)
     *     v
     * A model tree with parsed components with the data component optimized
     *     |
     *     | (Assemble)
     *     v
     * Vega spec
     */
    function compile(inputSpec, opt = {}) {
        // 0. Augment opt with default opts
        if (opt.logger) {
            // set the singleton logger to the provided logger
            set(opt.logger);
        }
        if (opt.fieldTitle) {
            // set the singleton field title formatter
            setTitleFormatter(opt.fieldTitle);
        }
        try {
            // 1. Initialize config by deep merging default config with the config provided via option and the input spec.
            const config = initConfig(mergeDeep({}, opt.config, inputSpec.config));
            // 2. Normalize: Convert input spec -> normalized spec
            // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.
            const spec = normalize$2(inputSpec, config);
            // - Normalize autosize to be a autosize properties object.
            const autosize = normalizeAutoSize(inputSpec.autosize, config.autosize, isLayerSpec(spec) || isUnitSpec(spec));
            // 3. Build Model: normalized spec -> Model (a tree structure)
            // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.
            // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.
            const model = buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');
            // 4 Parse: Model --> Model with components
            // Note that components = intermediate representations that are equivalent to Vega specs.
            // We need these intermediate representation because we need to merge many visualization "components" like projections, scales, axes, and legends.
            // We will later convert these components into actual Vega specs in the assemble phase.
            // In this phase, we do a bottom-up traversal over the whole tree to
            // parse for each type of components once (e.g., data, layout, mark, scale).
            // By doing bottom-up traversal, we start parsing components of unit specs and
            // then merge child components of parent composite specs.
            //
            // Please see inside model.parse() for order of different components parsed.
            model.parse();
            // 5. Optimize the dataflow.  This will modify the data component of the model.
            optimizeDataflow(model.component.data);
            // 6. Assemble: convert model components --> Vega Spec.
            return assembleTopLevelModel(model, getTopLevelProperties(inputSpec, config, autosize), inputSpec.datasets, inputSpec.usermeta);
        }
        finally {
            // Reset the singleton logger if a logger is provided
            if (opt.logger) {
                reset();
            }
            // Reset the singleton field title formatter if provided
            if (opt.fieldTitle) {
                resetTitleFormatter();
            }
        }
    }
    function getTopLevelProperties(topLevelSpec, config, autosize) {
        return Object.assign({ autosize: keys(autosize).length === 1 && autosize.type ? autosize.type : autosize }, extractTopLevelProperties(config), extractTopLevelProperties(topLevelSpec));
    }
    /*
     * Assemble the top-level model.
     *
     * Note: this couldn't be `model.assemble()` since the top-level model
     * needs some special treatment to generate top-level properties.
     */
    function assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {
        // TODO: change type to become VgSpec
        // Config with Vega-Lite only config removed.
        const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;
        const data = [].concat(model.assembleSelectionData([]), 
        // only assemble data in the root
        assembleRootData(model.component.data, datasets));
        const projections = model.assembleProjections();
        const title = model.assembleTitle();
        const style = model.assembleGroupStyle();
        const encodeEntry = model.assembleGroupEncodeEntry(true);
        let layoutSignals = model.assembleLayoutSignals();
        // move width and height signals with values to top level
        layoutSignals = layoutSignals.filter(signal => {
            if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {
                topLevelProperties[signal.name] = +signal.value;
                return false;
            }
            return true;
        });
        const output = Object.assign({ $schema: 'https://vega.github.io/schema/vega/v5.json' }, (model.description ? { description: model.description } : {}), topLevelProperties, (title ? { title } : {}), (style ? { style } : {}), (encodeEntry ? { encode: { update: encodeEntry } } : {}), { data }, (projections.length > 0 ? { projections: projections } : {}), model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])]), (vgConfig ? { config: vgConfig } : {}), (usermeta ? { usermeta } : {}));
        return {
            spec: output
            // TODO: add warning / errors here
        };
    }

    class TransformExtractMapper extends SpecMapper {
        mapUnit(spec, { config }) {
            if (spec.encoding) {
                const { encoding: oldEncoding, transform: oldTransforms } = spec;
                const { bins, timeUnits, aggregate, groupby, encoding } = extractTransformsFromEncoding(oldEncoding, config);
                const transform = [
                    ...(oldTransforms ? oldTransforms : []),
                    ...bins,
                    ...timeUnits,
                    ...(!aggregate.length ? [] : [{ aggregate, groupby }])
                ];
                return Object.assign({}, spec, (transform.length > 0 ? { transform } : {}), { encoding });
            }
            else {
                return spec;
            }
        }
    }
    const extractor = new TransformExtractMapper();
    /**
     * Modifies spec extracting transformations from encoding and moving them to the transforms array
     */
    function extractTransforms(spec, config) {
        return extractor.map(spec, { config });
    }

    const version$1 = pkg.version;

    exports.normalize = normalize$2;
    exports.version = version$1;
    exports.compile = compile;
    exports.extractTransforms = extractTransforms;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=vega-lite.js.map
